# obniz API
Let use a hardware as API

## All things via API

![](./images/about_api.png)

obniz is fully controllable by sending json via Websocket API.
Turning IO on/off, sending/receiging data via UART/SPI, using BLE/OLED etc,,,

This is a new way to control things from the internet.

Especially, Websocket api let you to use obniz from your html and bi-directionaly communication.
[obniz.js](./about_obnizjs) warps this API.

This page shows API details and specifications.

## Endpoint

Each obniz has different API Endpoint.

#### Websocket API
```
wss://obniz.io/obniz/{obniz_id}/ws/1
```

Example javascript usage

```html
<!-- HTML Example -->
<html>
<body>
<script>
  // Simplest example
  var host = 'wss://obniz.io'

  function connect() {
    var socket = new WebSocket(host + '/obniz/OBNIZ_ID_HERE/ws/1');

    socket.onmessage = function (event) {
      var obj = JSON.parse(event.data);

      if (obj.ws && obj.ws.redirect) {
        host = obj.ws.redirect;
        socket.onmessage = null;
        socket.close();
        connect();
      }
      if (obj.ws && obj.ws.ready) {
        socket.send(JSON.stringify({display:{clear:true, text:"Works fine."}}));
      }
    }

  }

  connect();

</script>
</body>
</html>
```

#### REST API
Not only Websocket API. Post json via HTTP REST API.
But you can't get any values from obniz via this API. Just sending.

```
POST https://obniz.io/obniz/{obniz_id}/api/1
```

reqeust content type must be application/json and body must contain json object.

Curl example.

```shell
curl https://obniz.io/obniz/1234-5678/api -H "Content-Type: application/json" -X POST -d '{display:{clear:true, text:"Works fine."}}'
```

## Security

After obniz has been owned by someone's account, obniz API can be used with API keys. This is optinoal But recommended.
See more details on each obniz setting page. It will appear on your account page after registration.

## JSON Formats
All communication on Websocket is JSON.
Control obniz by sending JSON and get values by receiving JSON from obniz.



<% for(var name of moduleNames){ %>
-  [<%= name.split("/").join(".") %>](#<%= name.split("/").join("-") %>)
<% } %><%# for(var name of moduleNames) %>


<% for(var module of modules){ %>
###  <%= module.name.split("/").join(".") %>
<% for(var method of module.methods){ %>

<%- method.schema.description %>
<% for(var command of method.commands){ %>
####  <%= method.method %>: <a name="<%= command.uri.split("/").join("-") %>"><%= command.name %></a>
<%- command.schema.description %>

<% if(command.schema.related){ %>
Related item
<% if(Array.isArray(command.schema.related)){ %>
<% for(var one of command.schema.related){
%>- [<%= one %>](#<%= one.split("/").join("-") %>)
<% } %>
<% }else{ %>
- [<%= command.schema.related %>](#<%= command.schema.related.split("/").join("-") %>)
<% } %>
<% } %>

| path | type | conditions  | description |
|:---- |:---- |:---- |:---- |
<% for ( var param of command.params){

%>| `<%= param.path.replace(/\d\b/g,"X") %>` | <% if(param.ref){ %>[<%= param.type %>](#<%= param.ref %>) <% }else{ %> <%= param.type %> <% } %> | <%- conditions(param.schema,param) %> | <%= param.schema.description %> |
<% } %><%# for ( var param of command.params)%>

<%=command.schema.exampleDescription %>
```
// Json Example
<%- jsonExample(command.params, command.schema ) %>
```

<% } %><%# for(var command of method.commands) %>
<% } %><%# for(var method of module.methods) %>
<% } %><%# for(var module of modules) %>



## type defines

<% for ( var key in defines ){ var schema = defines[key];
    if (!Array.isArray(schema.example)) {
        schema.example = schema.example ? [schema.example] : [];
    } %>

### <%= key %>
| type | conditions | examples | description
|:----|:----|:----|:----|
| <%= schema.type %>| <%- conditions(schema) %>  |  <ul><% for(var val of  schema.example){ %><li>`<%- formatter(val) %>`</li><% } %></ul> | <%= schema.description %> |
<% } %><%# for ( var key in defines )%>



