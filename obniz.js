var Obniz =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/src/obniz/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/package.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"obniz\",\"version\":\"3.1.0\",\"description\":\"obniz sdk for javascript\",\"main\":\"./dist/obniz/index.js\",\"types\":\"./dist/obniz/index.d.ts\",\"files\":[\"dist\",\"obniz.js\",\"obniz.min.js\"],\"engines\":{\"node\":\">=7.6.0\"},\"engineStrict\":true,\"scripts\":{\"test\":\"npm run tstest && nyc --reporter=text --reporter=html mocha $NODE_DEBUG_OPTION  ./test/functiontest/index.js -b 1\",\"testOnlyNodejs\":\"NO_BROWSER_TEST=1 npm test\",\"buildAndtest\":\"npm run build && npm test\",\"tstest\":\"mocha --require espower-typescript/guess test/functiontest/obniz-ts/**/*.ts\",\"tsExampleTest\":\"tsc --project ./test/functiontest\",\"realtest\":\"mocha $NODE_DEBUG_OPTION ./realtest/index.js\",\"realtest-debug\":\"DEBUG=1 mocha $NODE_DEBUG_OPTION -b ./realtest/index.js\",\"realtest-esp32\":\"mocha $NODE_DEBUG_OPTION ./realtest_esp32/index.js\",\"local\":\"gulp --gulpfile devtools/_tools/server.js --cwd .\",\"build\":\"npm run clean && npm run lint && gulp --gulpfile devtools/_tools/server.js --cwd . build\",\"build-ts\":\"npm run clean && npm run lint-ts && gulp --gulpfile devtools/_tools/server.js --cwd . build\",\"version\":\"npm run build && git add obniz.js && git add obniz.min.js\",\"lint\":\"npm run lint-ts \",\"lint-ts\":\"tslint --fix -c tslint.json 'src/**/*.ts' 'test/**/*.ts' \",\"precommit\":\"lint-staged && npm run build && git add obniz.js && git add obniz.min.js\",\"clean\":\"rm -rf ./dist ./obniz.js ./obniz.min.js ./obniz.d.ts\"},\"lint-staged\":{\"*.js\":[\"eslint --rulesdir eslint/rule --fix \",\"git add\"],\"*.ts\":[\"tslint -c tslint.json --fix \",\"git add\"]},\"keywords\":[\"obniz\"],\"repository\":\"obniz/obniz\",\"author\":\"yukisato <yuki@yuki-sato.com>\",\"homepage\":\"https://obniz.io/\",\"license\":\"SEE LICENSE IN LICENSE.txt\",\"devDependencies\":{\"@types/chai\":\"^4.2.7\",\"@types/chai-like\":\"^1.1.0\",\"@types/eventemitter3\":\"^1.2.0\",\"@types/events\":\"^3.0.0\",\"@types/glob\":\"^7.1.1\",\"@types/js-yaml\":\"^3.12.1\",\"@types/minimatch\":\"^3.0.3\",\"@types/mocha\":\"^5.2.7\",\"@types/node\":\"^13.1.5\",\"@types/node-dir\":\"0.0.33\",\"@types/node-fetch\":\"^2.5.4\",\"@types/semver\":\"^6.2.0\",\"@types/sinon\":\"^7.5.1\",\"@types/tv4\":\"^1.2.29\",\"@types/webpack-env\":\"^1.15.0\",\"@types/window-or-global\":\"^1.0.0\",\"@types/ws\":\"^6.0.4\",\"chai\":\"^4.2.0\",\"chai-like\":\"^1.1.1\",\"child_process\":\"^1.0.2\",\"concat-with-sourcemaps\":\"^1.1.0\",\"ejs\":\"^2.6.2\",\"eslint\":\"^5.16.0\",\"eslint-config-prettier\":\"^3.6.0\",\"eslint-plugin-jasmine\":\"^2.10.1\",\"eslint-plugin-prettier\":\"^2.7.0\",\"espower-typescript\":\"^9.0.2\",\"express\":\"^4.17.1\",\"get-port\":\"^4.0.0\",\"glob\":\"^7.1.3\",\"gulp\":\"^4.0.2\",\"gulp-concat\":\"^2.6.1\",\"gulp-ejs\":\"^3.2.0\",\"gulp-filter\":\"^5.1.0\",\"gulp-notify\":\"^3.2.0\",\"gulp-plumber\":\"^1.2.0\",\"gulp-rename\":\"^1.4.0\",\"gulp-sort\":\"^2.0.0\",\"gulp-sourcemaps\":\"^2.6.5\",\"gulp-typescript\":\"^6.0.0-alpha.1\",\"gulp-util\":\"^3.0.8\",\"gulp-yaml\":\"^2.0.2\",\"husky\":\"^0.14.3\",\"json-loader\":\"^0.5.7\",\"lint-staged\":\"^9.4.1\",\"mocha\":\"^5.2.0\",\"mocha-chrome\":\"^1.1.0\",\"mocha-directory\":\"^2.3.0\",\"mocha-sinon\":\"^2.1.0\",\"natives\":\"^1.1.6\",\"ncp\":\"^2.0.0\",\"node-notifier\":\"^5.3.0\",\"nyc\":\"^14.1.1\",\"path\":\"^0.12.7\",\"power-assert\":\"^1.6.1\",\"prettier\":\"^1.14.3\",\"sinon\":\"^7.5.0\",\"text-encoding\":\"^0.7.0\",\"through2\":\"^2.0.3\",\"tslint\":\"^5.20.1\",\"typescript\":\"^3.7.4\",\"uglifyjs-webpack-plugin\":\"^1.3.0\",\"vinyl\":\"^2.2.0\",\"webpack\":\"^4.34.0\",\"webpack-cli\":\"^3.3.4\",\"webpack-node-externals\":\"^1.7.2\",\"webpack-stream\":\"^5.2.1\",\"yaml-loader\":\"^0.5.0\"},\"dependencies\":{\"eventemitter3\":\"^3.1.2\",\"js-yaml\":\"^3.13.1\",\"node-dir\":\"^0.1.17\",\"node-fetch\":\"^2.3.0\",\"semver\":\"^5.7.0\",\"tv4\":\"^1.3.0\",\"ws\":\"^6.1.4\"},\"bugs\":{\"url\":\"https://forum.obniz.io\"},\"private\":false,\"browser\":{\"ws\":\"./dist/obniz/libs/webpackReplace/ws.js\",\"canvas\":\"./dist/obniz/libs/webpackReplace/canvas.js\",\"./dist/obniz/libs/webpackReplace/require-context.js\":\"./dist/obniz/libs/webpackReplace/require-context-browser.js\"}}");

/***/ }),

/***/ "./dist/src/obniz sync recursive":
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./dist/src/obniz sync recursive";

/***/ }),

/***/ "./dist/src/obniz/ObnizApi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(__webpack_require__("./node_modules/node-fetch/browser.js"));
// @ts-ignore
const packageJson = __webpack_require__("./dist/package.json");
class ObnizApi {
    constructor(obnizId, options) {
        this.id = obnizId;
        options = options || {};
        this.options = {
            access_token: options.access_token || null,
            obniz_server: options.obniz_server || "https://obniz.io",
        };
        this.urlBase = this.options.obniz_server + "/obniz/" + this.id;
    }
    get apiVersion() {
        const versionString = packageJson.version;
        return versionString.split(".").shift();
    }
    post(path, params, callback) {
        const url = this.urlBase + path;
        // let query = [];
        // query.push("XXX");
        // if(query.length > 0){
        //   url += "?" + query.join("&");
        // }
        const headers = {};
        headers["Content-Type"] = "application/json";
        if (this.options.access_token) {
            headers.authorization = "Bearer " + this.options.access_token;
        }
        const fetchParams = {
            method: "POST",
            headers,
        };
        if (params) {
            fetchParams.body = JSON.stringify(params);
        }
        return node_fetch_1.default(url, fetchParams)
            .then((res) => {
            return res.json();
        })
            .then((json) => {
            if (typeof callback === "function") {
                callback(json);
            }
            return new Promise((resolve) => {
                resolve(json);
            });
        });
    }
    getState(callback) {
        return this.post("/state", null, callback);
    }
    postJson(json, callback) {
        return this.post("/api/" + this.apiVersion, json, callback); // 1 is api version
    }
}
exports.default = ObnizApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9PYm5pekFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUErQjtBQUUvQixhQUFhO0FBQ2Isa0RBQW9EO0FBRXBELE1BQU0sUUFBUTtJQUtaLFlBQVksT0FBWSxFQUFFLE9BQVk7UUFDcEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDbEIsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWSxJQUFJLElBQUk7WUFDMUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZLElBQUksa0JBQWtCO1NBQ3pELENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFFWixNQUFNLGFBQWEsR0FBUSxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQy9DLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVMsRUFBRSxNQUFXLEVBQUUsUUFBYTtRQUMvQyxNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVyQyxrQkFBa0I7UUFDbEIscUJBQXFCO1FBQ3JCLHdCQUF3QjtRQUN4QixrQ0FBa0M7UUFDbEMsSUFBSTtRQUVKLE1BQU0sT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUM3QixPQUFPLENBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztTQUMvRDtRQUVELE1BQU0sV0FBVyxHQUFRO1lBQ3ZCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTztTQUNSLENBQUM7UUFDRixJQUFJLE1BQU0sRUFBRTtZQUNWLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQztRQUVELE9BQU8sb0JBQUssQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO2FBQzNCLElBQUksQ0FBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ2xCLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO2dCQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEI7WUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFHLEVBQUU7Z0JBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFhO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxRQUFRLENBQUMsSUFBUyxFQUFFLFFBQWE7UUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtJQUNsRixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJmaWxlIjoic3JjL29ibml6L09ibml6QXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCI7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUoIFwiLi4vLi4vcGFja2FnZS5qc29uXCIpO1xuXG5jbGFzcyBPYm5pekFwaSB7XG4gIHB1YmxpYyBpZDogYW55O1xuICBwdWJsaWMgb3B0aW9uczogYW55O1xuICBwdWJsaWMgdXJsQmFzZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9ibml6SWQ6IGFueSwgb3B0aW9uczogYW55KSB7XG4gICAgdGhpcy5pZCA9IG9ibml6SWQ7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYWNjZXNzX3Rva2VuOiBvcHRpb25zLmFjY2Vzc190b2tlbiB8fCBudWxsLFxuICAgICAgb2JuaXpfc2VydmVyOiBvcHRpb25zLm9ibml6X3NlcnZlciB8fCBcImh0dHBzOi8vb2JuaXouaW9cIixcbiAgICB9O1xuICAgIHRoaXMudXJsQmFzZSA9IHRoaXMub3B0aW9ucy5vYm5pel9zZXJ2ZXIgKyBcIi9vYm5pei9cIiArIHRoaXMuaWQ7XG4gIH1cblxuICBnZXQgYXBpVmVyc2lvbigpIHtcblxuICAgIGNvbnN0IHZlcnNpb25TdHJpbmc6IGFueSA9IHBhY2thZ2VKc29uLnZlcnNpb247XG4gICAgcmV0dXJuIHZlcnNpb25TdHJpbmcuc3BsaXQoXCIuXCIpLnNoaWZ0KCk7XG4gIH1cblxuICBwdWJsaWMgcG9zdChwYXRoOiBhbnksIHBhcmFtczogYW55LCBjYWxsYmFjazogYW55KSB7XG4gICAgY29uc3QgdXJsOiBhbnkgPSB0aGlzLnVybEJhc2UgKyBwYXRoO1xuXG4gICAgLy8gbGV0IHF1ZXJ5ID0gW107XG4gICAgLy8gcXVlcnkucHVzaChcIlhYWFwiKTtcbiAgICAvLyBpZihxdWVyeS5sZW5ndGggPiAwKXtcbiAgICAvLyAgIHVybCArPSBcIj9cIiArIHF1ZXJ5LmpvaW4oXCImXCIpO1xuICAgIC8vIH1cblxuICAgIGNvbnN0IGhlYWRlcnM6IGFueSA9IHt9O1xuICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFjY2Vzc190b2tlbikge1xuICAgICAgaGVhZGVycy5hdXRob3JpemF0aW9uID0gXCJCZWFyZXIgXCIgKyB0aGlzLm9wdGlvbnMuYWNjZXNzX3Rva2VuO1xuICAgIH1cblxuICAgIGNvbnN0IGZldGNoUGFyYW1zOiBhbnkgPSB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVycyxcbiAgICB9O1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIGZldGNoUGFyYW1zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmZXRjaCh1cmwsIGZldGNoUGFyYW1zKVxuICAgICAgLnRoZW4gKChyZXM6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoanNvbjogYW55KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55ICkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoanNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhdGUoY2FsbGJhY2s6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnBvc3QoXCIvc3RhdGVcIiwgbnVsbCwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIHBvc3RKc29uKGpzb246IGFueSwgY2FsbGJhY2s6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnBvc3QoXCIvYXBpL1wiICsgdGhpcy5hcGlWZXJzaW9uLCBqc29uLCBjYWxsYmFjayk7IC8vIDEgaXMgYXBpIHZlcnNpb25cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPYm5pekFwaTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/ObnizComponents.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver = __webpack_require__("./node_modules/semver/semver.js");
const ble_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/ble.js"));
const ble_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/ble.js"));
const display_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/display.js"));
const switch_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/switch.js"));
const ad_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/ad.js"));
const directive_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/directive.js"));
const i2c_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/i2c.js"));
const io_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/io.js"));
const pwm_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/pwm.js"));
const spi_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/spi.js"));
const uart_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/io_peripherals/uart.js"));
const logicanalyzer_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/measurements/logicanalyzer.js"));
const measure_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/measurements/measure.js"));
const tcp_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/protocol/tcp.js"));
const ObnizParts_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizParts.js"));
const hw_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/hw/index.js"));
class ObnizComponents extends ObnizParts_1.default {
    constructor(id, options) {
        super(id, options);
        this.pongObservers = [];
        this._allComponentKeys = [];
    }
    close() {
        super.close();
        if (this.options.reset_obniz_on_ws_disconnection) {
            this._resetComponents();
        }
    }
    _callOnConnect() {
        this._prepareComponents();
        super._callOnConnect();
    }
    _prepareComponents() {
        if (this._allComponentKeys.length !== 0) {
            return;
        }
        const hwDefinition = hw_1.default.getDefinitionFor(this.hw);
        if (!hwDefinition) {
            throw new Error(`unkown hw ${this.hw}`);
        }
        const hw_peripherals = hwDefinition.peripherals;
        const hw_embeds = hwDefinition.embeds;
        const hw_protocol = hwDefinition.protocol;
        const shared_map = {
            io: directive_1.default,
            logicAnalyzer: logicanalyzer_1.default,
            measure: measure_1.default,
        };
        const peripheral_map = {
            io: io_1.default,
            ad: ad_1.default,
            uart: uart_1.default,
            spi: spi_1.default,
            i2c: i2c_1.default,
            pwm: pwm_1.default,
        };
        let ble = ble_2.default;
        // < 3.0.0-beta
        if (semver.lt(this.firmware_ver, "3.0.0-beta")) {
            ble = ble_1.default;
        }
        const embeds_map = {
            display: display_1.default,
            switch: switch_1.default,
            ble,
        };
        const protocol_map = {
            tcp: tcp_1.default,
        };
        for (const key in shared_map) {
            const Class = shared_map[key];
            this[key] = new Class(this);
            this._allComponentKeys.push(key);
        }
        if (hw_peripherals) {
            for (const key in peripheral_map) {
                if (hw_peripherals[key]) {
                    const units = hw_peripherals[key].units;
                    const Class = peripheral_map[key];
                    for (const unitId in units) {
                        const unitIdNumber = parseInt(unitId);
                        this[key + unitIdNumber] = new Class(this, unitIdNumber);
                        this._allComponentKeys.push(key + unitIdNumber);
                    }
                }
            }
        }
        if (hw_embeds) {
            for (const key in embeds_map) {
                if (hw_embeds[key]) {
                    const Class = embeds_map[key];
                    this[key] = new Class(this);
                    this._allComponentKeys.push(key);
                }
            }
        }
        if (hw_protocol) {
            for (const key in protocol_map) {
                if (hw_protocol[key]) {
                    const units = hw_protocol[key].units;
                    const Class = protocol_map[key];
                    for (const unitId in units) {
                        const unitIdNumber = parseInt(unitId);
                        this[key + unitIdNumber] = new Class(this, unitIdNumber);
                        this._allComponentKeys.push(key + unitIdNumber);
                    }
                }
            }
        }
    }
    _resetComponents() {
        this.print_debug("components state resets");
        for (const key of this._allComponentKeys) {
            this[key]._reset();
        }
    }
    notifyToModule(obj) {
        super.notifyToModule(obj);
        for (const key of this._allComponentKeys) {
            if (key === "logicAnalyzer") {
                if (obj.hasOwnProperty("logic_analyzer")) {
                    this.logicAnalyzer.notified(obj.logic_analyzer);
                }
                continue;
            }
            if (obj.hasOwnProperty(key)) {
                /* because of nullable */
                this[key].notified(obj[key]);
            }
        }
    }
    handleSystemCommand(wsObj) {
        super.handleSystemCommand(wsObj);
        // ping pong
        if (wsObj.pong) {
            for (const callback of this.pongObservers) {
                callback(wsObj);
            }
        }
    }
    addPongObserver(callback) {
        if (callback) {
            this.pongObservers.push(callback);
        }
    }
    removePongObserver(callback) {
        if (this.pongObservers.includes(callback)) {
            const index = this.pongObservers.indexOf(callback);
            this.pongObservers.splice(index, 1);
        }
    }
    setVccGnd(vcc, gnd, drive) {
        if (this.isValidIO(vcc)) {
            if (drive) {
                this.getIO(vcc).drive(drive);
            }
            this.getIO(vcc).output(true);
        }
        if (this.isValidIO(gnd)) {
            if (drive) {
                this.getIO(gnd).drive(drive);
            }
            this.getIO(gnd).output(false);
        }
    }
    getIO(io) {
        if (!this.isValidIO(io)) {
            throw new Error("io " + io + " is not valid io");
        }
        return this["io" + io];
    }
    getAD(io) {
        if (!this.isValidIO(io)) {
            throw new Error("ad " + io + " is not valid io");
        }
        return this["ad" + io];
    }
    _getFreePeripheralUnit(peripheral) {
        for (const key of this._allComponentKeys) {
            if (key.indexOf(peripheral) === 0) {
                /* "io" for "io0" */
                const obj = this[key];
                if (typeof obj === "object" && !obj.isUsed()) {
                    obj.used = true;
                    return obj;
                }
            }
        }
        throw new Error(`No More ${peripheral} Available.`);
    }
    getFreePwm() {
        return this._getFreePeripheralUnit("pwm");
    }
    getFreeI2C() {
        return this._getFreePeripheralUnit("i2c");
    }
    getI2CWithConfig(config) {
        if (typeof config !== "object") {
            throw new Error("getI2CWithConfig need config arg");
        }
        if (config.i2c) {
            return config.i2c;
        }
        const i2c = this.getFreeI2C();
        i2c.start(config);
        return i2c;
    }
    getFreeSpi() {
        return this._getFreePeripheralUnit("spi");
    }
    getSpiWithConfig(config) {
        if (typeof config !== "object") {
            throw new Error("getSpiWithConfig need config arg");
        }
        if (config.spi) {
            return config.spi;
        }
        const spi = this.getFreeSpi();
        spi.start(config);
        return spi;
    }
    getFreeUart() {
        return this._getFreePeripheralUnit("uart");
    }
    getFreeTcp() {
        return this._getFreePeripheralUnit("tcp");
    }
}
exports.default = ObnizComponents;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/ObnizConnection.js":
/***/ (function(module, exports) {

throw new Error("Module parse failed: 'import' and 'export' may only appear at the top level (184:12)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n|         if (this.isNode) {\n|             // @ts-ignore\n>             import wsClient = require(\"ws\");\n|             socket = new wsClient(url);\n|             socket.on(\"open\", this.wsOnOpen.bind(this));");

/***/ }),

/***/ "./dist/src/obniz/ObnizParts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const ObnizConnection_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizConnection.js"));
const _parts = {};
class ObnizParts extends ObnizConnection_1.default {
    static _parts() {
        return _parts;
    }
    static PartsRegistrate(arg0, arg1) {
        if (arg0 &&
            typeof arg0.info === "function" &&
            typeof arg0.info().name === "string") {
            _parts[arg0.info().name] = arg0;
        }
        else if (typeof arg0 === "string" && typeof arg1 === "object") {
            _parts[arg0] = arg1;
        }
    }
    static Parts(name) {
        if (!_parts[name]) {
            throw new Error(`unknown parts [${name}]`);
        }
        return new _parts[name]();
    }
    constructor(id, options) {
        super(id, options);
    }
    isValidIO(io) {
        return typeof io === "number" && this["io" + io] !== null;
    }
    wired(partsname) {
        const parts = ObnizParts.Parts(partsname);
        if (!parts) {
            throw new Error("No such a parts [" + partsname + "] found");
        }
        const args = Array.from(arguments);
        args.shift();
        args.unshift(this);
        if (parts.keys) {
            if (parts.requiredKeys) {
                const err = util_1.default._requiredKeys(args[1], parts.requiredKeys);
                if (err) {
                    throw new Error(partsname + " wired param '" + err + "' required, but not found ");
                }
            }
            parts.params = util_1.default._keyFilter(args[1], parts.keys);
        }
        parts.obniz = this;
        parts.wired.apply(parts, args);
        if (parts.keys || parts.ioKeys) {
            const keys = parts.ioKeys || parts.keys;
            const displayPartsName = parts.displayName || partsname;
            const ioNames = {};
            for (const index in keys) {
                let pinName = keys[index];
                const io = args[1][pinName];
                if (this.isValidIO(io)) {
                    if (parts.displayIoNames && parts.displayIoNames[pinName]) {
                        pinName = parts.displayIoNames[pinName];
                    }
                    ioNames[io] = pinName;
                }
            }
            const display = this.display;
            if (display) {
                display.setPinNames(displayPartsName, ioNames);
            }
        }
        return parts;
    }
}
exports.default = ObnizParts;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9PYm5pelBhcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkRBQTBDO0FBQzFDLHdFQUFnRDtBQUVoRCxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7QUFFdkIsTUFBcUIsVUFBVyxTQUFRLHlCQUFlO0lBRTlDLE1BQU0sQ0FBQyxNQUFNO1FBQ2xCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLElBQVMsRUFBRSxJQUFVO1FBQ2pELElBQ0UsSUFBSTtZQUNKLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVO1lBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQ3BDO1lBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDakM7YUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQVM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxZQUFZLEVBQU8sRUFBRSxPQUFZO1FBQy9CLEtBQUssQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVNLFNBQVMsQ0FBQyxFQUFPO1FBQ3RCLE9BQU8sT0FBTyxFQUFFLEtBQUssUUFBUSxJQUFLLElBQVksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDO0lBQ3JFLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBYztRQUN6QixNQUFNLEtBQUssR0FBUSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUM5RDtRQUNELE1BQU0sSUFBSSxHQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7Z0JBQ3RCLE1BQU0sR0FBRyxHQUFRLGNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDdEUsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FDYixTQUFTLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLDRCQUE0QixDQUNsRSxDQUFDO2lCQUNIO2FBQ0Y7WUFDRCxLQUFLLENBQUMsTUFBTSxHQUFHLGNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxRDtRQUNELEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUM5QixNQUFNLElBQUksR0FBUSxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDN0MsTUFBTSxnQkFBZ0IsR0FBUSxLQUFLLENBQUMsV0FBVyxJQUFJLFNBQVMsQ0FBQztZQUM3RCxNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7WUFDeEIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksT0FBTyxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxFQUFFLEdBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQ3RCLElBQUksS0FBSyxDQUFDLGNBQWMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUN6RCxPQUFPLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDekM7b0JBQ0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztpQkFDdkI7YUFDRjtZQUNELE1BQU0sT0FBTyxHQUFJLElBQVksQ0FBQyxPQUFPLENBQUM7WUFDdEMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNoRDtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUEzRUQsNkJBMkVDIiwiZmlsZSI6InNyYy9vYm5pei9PYm5pelBhcnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9ibml6VXRpbCBmcm9tIFwiLi9saWJzL3V0aWxzL3V0aWxcIjtcbmltcG9ydCBPYm5pekNvbm5lY3Rpb24gZnJvbSBcIi4vT2JuaXpDb25uZWN0aW9uXCI7XG5cbmNvbnN0IF9wYXJ0czogYW55ID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ibml6UGFydHMgZXh0ZW5kcyBPYm5pekNvbm5lY3Rpb24ge1xuXG4gIHB1YmxpYyBzdGF0aWMgX3BhcnRzKCkge1xuICAgIHJldHVybiBfcGFydHM7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIFBhcnRzUmVnaXN0cmF0ZShhcmcwOiBhbnksIGFyZzE/OiBhbnkpIHtcbiAgICBpZiAoXG4gICAgICBhcmcwICYmXG4gICAgICB0eXBlb2YgYXJnMC5pbmZvID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIHR5cGVvZiBhcmcwLmluZm8oKS5uYW1lID09PSBcInN0cmluZ1wiXG4gICAgKSB7XG4gICAgICBfcGFydHNbYXJnMC5pbmZvKCkubmFtZV0gPSBhcmcwO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzAgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIF9wYXJ0c1thcmcwXSA9IGFyZzE7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBQYXJ0cyhuYW1lOiBhbnkpIHtcbiAgICBpZiAoIV9wYXJ0c1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHBhcnRzIFske25hbWV9XWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9wYXJ0c1tuYW1lXSgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoaWQ6IGFueSwgb3B0aW9uczogYW55KSB7XG4gICAgc3VwZXIoaWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGlzVmFsaWRJTyhpbzogYW55KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbyA9PT0gXCJudW1iZXJcIiAmJiAodGhpcyBhcyBhbnkpW1wiaW9cIiArIGlvXSAhPT0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChwYXJ0c25hbWU6IGFueSkge1xuICAgIGNvbnN0IHBhcnRzOiBhbnkgPSBPYm5pelBhcnRzLlBhcnRzKHBhcnRzbmFtZSk7XG4gICAgaWYgKCFwYXJ0cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBhIHBhcnRzIFtcIiArIHBhcnRzbmFtZSArIFwiXSBmb3VuZFwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJnczogYW55ID0gQXJyYXkuZnJvbShhcmd1bWVudHMpO1xuICAgIGFyZ3Muc2hpZnQoKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHBhcnRzLmtleXMpIHtcbiAgICAgIGlmIChwYXJ0cy5yZXF1aXJlZEtleXMpIHtcbiAgICAgICAgY29uc3QgZXJyOiBhbnkgPSBPYm5pelV0aWwuX3JlcXVpcmVkS2V5cyhhcmdzWzFdLCBwYXJ0cy5yZXF1aXJlZEtleXMpO1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgcGFydHNuYW1lICsgXCIgd2lyZWQgcGFyYW0gJ1wiICsgZXJyICsgXCInIHJlcXVpcmVkLCBidXQgbm90IGZvdW5kIFwiLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcnRzLnBhcmFtcyA9IE9ibml6VXRpbC5fa2V5RmlsdGVyKGFyZ3NbMV0sIHBhcnRzLmtleXMpO1xuICAgIH1cbiAgICBwYXJ0cy5vYm5peiA9IHRoaXM7XG4gICAgcGFydHMud2lyZWQuYXBwbHkocGFydHMsIGFyZ3MpO1xuICAgIGlmIChwYXJ0cy5rZXlzIHx8IHBhcnRzLmlvS2V5cykge1xuICAgICAgY29uc3Qga2V5czogYW55ID0gcGFydHMuaW9LZXlzIHx8IHBhcnRzLmtleXM7XG4gICAgICBjb25zdCBkaXNwbGF5UGFydHNOYW1lOiBhbnkgPSBwYXJ0cy5kaXNwbGF5TmFtZSB8fCBwYXJ0c25hbWU7XG4gICAgICBjb25zdCBpb05hbWVzOiBhbnkgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaW5kZXggaW4ga2V5cykge1xuICAgICAgICBsZXQgcGluTmFtZTogYW55ID0ga2V5c1tpbmRleF07XG4gICAgICAgIGNvbnN0IGlvOiBhbnkgPSBhcmdzWzFdW3Bpbk5hbWVdO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkSU8oaW8pKSB7XG4gICAgICAgICAgaWYgKHBhcnRzLmRpc3BsYXlJb05hbWVzICYmIHBhcnRzLmRpc3BsYXlJb05hbWVzW3Bpbk5hbWVdKSB7XG4gICAgICAgICAgICBwaW5OYW1lID0gcGFydHMuZGlzcGxheUlvTmFtZXNbcGluTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlvTmFtZXNbaW9dID0gcGluTmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZGlzcGxheSA9ICh0aGlzIGFzIGFueSkuZGlzcGxheTtcbiAgICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXkuc2V0UGluTmFtZXMoZGlzcGxheVBhcnRzTmFtZSwgaW9OYW1lcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxufVxuIl19


/***/ }),

/***/ "./dist/src/obniz/ObnizSystemMethods.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizComponents_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizComponents.js"));
class ObnizSystemMethods extends ObnizComponents_1.default {
    constructor(id, options) {
        super(id, options);
    }
    wait(msec) {
        if (msec < 0) {
            msec = 0;
        }
        else if (msec > 60 * 1000) {
            msec = 60 * 1000;
        }
        this.send({ system: { wait: msec } });
        return new Promise((resolve) => setTimeout(resolve, msec));
    }
    reset() {
        this.send({ system: { reset: true } });
        this._resetComponents();
    }
    reboot() {
        this.send({ system: { reboot: true } });
    }
    selfCheck() {
        this.send({ system: { self_check: true } });
    }
    keepWorkingAtOffline(working) {
        this.send({ system: { keep_working_at_offline: working } });
    }
    resetOnDisconnect(reset) {
        this.send({ ws: { reset_obniz_on_ws_disconnection: reset } });
    }
    sleepSeconds(sec) {
        if (sec < 1) {
            // min 1s
            sec = 1;
        }
        else if (sec > 60 * 60 * 18) {
            // max 18h (60(s)*60(m)*18(h))
            throw new Error("Error max 18h(64800) sleep");
        }
        this.send({ system: { sleep_seconds: sec } });
    }
    sleepMinute(minute) {
        if (minute < 1) {
            // min 1m
            minute = 1;
        }
        else if (minute > 60 * 24 * 45) {
            // max 45day (60(m)*24(h)*45(d))
            throw new Error("max 45day(64800m) sleep");
        }
        this.send({ system: { sleep_minute: minute } });
    }
    sleep(date) {
        if (!(date instanceof Date)) {
            throw new Error("Date instance argument required");
        }
        let sleepTime = Math.floor((date - new Date()) / 1000);
        this.print_debug(`sleep time : ${sleepTime}s`);
        if (sleepTime <= 0) {
            throw new Error(`past sleep time : ${sleepTime}s`);
        }
        if (sleepTime <= 60 * 60 * 18) {
            this.sleepSeconds(sleepTime);
            return;
        }
        sleepTime = Math.floor(sleepTime / 60);
        this.print_debug(`sleep time : ${sleepTime}m`);
        if (sleepTime <= 60 * 24 * 45) {
            this.sleepMinute(sleepTime);
        }
        else {
            throw new Error(`over max sleep time : ${sleepTime}m`);
        }
    }
    sleepIoTrigger(trigger) {
        if (typeof trigger !== "boolean") {
            throw new Error("sleepIoTrigger need boolean arg");
        }
        this.send({ system: { sleep_io_trigger: trigger } });
    }
    pingWait(unixtime, rand, forceGlobalNetwork) {
        unixtime = unixtime || new Date().getTime();
        const upper = Math.floor(unixtime / Math.pow(2, 32));
        const lower = unixtime - upper * Math.pow(2, 32);
        rand = rand || Math.floor(Math.random() * Math.pow(2, 4));
        const buf = [];
        buf.push((upper >>> (8 * 3)) & 0xff);
        buf.push((upper >>> (8 * 2)) & 0xff);
        buf.push((upper >>> (8 * 1)) & 0xff);
        buf.push((upper >>> (8 * 0)) & 0xff);
        buf.push((lower >>> (8 * 3)) & 0xff);
        buf.push((lower >>> (8 * 2)) & 0xff);
        buf.push((lower >>> (8 * 1)) & 0xff);
        buf.push((lower >>> (8 * 0)) & 0xff);
        buf.push((rand >>> (8 * 3)) & 0xff);
        buf.push((rand >>> (8 * 2)) & 0xff);
        buf.push((rand >>> (8 * 1)) & 0xff);
        buf.push((rand >>> (8 * 0)) & 0xff);
        const obj = {
            system: {
                ping: {
                    key: buf,
                },
            },
        };
        this.send(obj, { local_connect: forceGlobalNetwork ? false : true });
        return new Promise((resolve) => {
            const callback = (systemObj) => {
                for (let i = 0; i < buf.length; i++) {
                    if (buf[i] !== systemObj.pong.key[i]) {
                        return;
                    }
                }
                this.removePongObserver(callback);
                const _upper = ((systemObj.pong.key[0] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[1] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[2] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[3] << (8 * 0)) >>> 0);
                const _lower = ((systemObj.pong.key[4] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[5] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[6] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[7] << (8 * 0)) >>> 0);
                const obnizJsPingUnixtime = _upper * Math.pow(2, 32) + _lower;
                const obnizJsPongUnixtime = new Date().getTime();
                const allTime = obnizJsPongUnixtime - obnizJsPingUnixtime;
                const timeJs2server = systemObj.pong.pingServerTime - obnizJsPingUnixtime;
                const timeServer2Obniz = systemObj.pong.obnizTime - systemObj.pong.pingServerTime;
                const timeObniz2Server = systemObj.pong.pongServerTime - systemObj.pong.obnizTime;
                const timeServer2Js = obnizJsPongUnixtime - systemObj.pong.pongServerTime;
                const str = `ping ${allTime}ms (js --[${timeJs2server}ms]--> server --[${timeServer2Obniz}ms]--> obniz --[${timeObniz2Server}ms]--> server --[${timeServer2Js}ms]--> js)`;
                this.print_debug(str);
                resolve(str);
            };
            this.addPongObserver(callback);
        });
    }
}
exports.default = ObnizSystemMethods;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/ObnizUIs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ObnizSystemMethods_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizSystemMethods.js"));
class ObnizUIs extends ObnizSystemMethods_1.default {
    constructor(id, options) {
        super(id, options);
    }
    isValidObnizId(str) {
        if (typeof str !== "string" || str.length < 8) {
            return null;
        }
        str = str.replace("-", "");
        let id = parseInt(str);
        if (isNaN(id)) {
            id = null;
        }
        return id !== null;
    }
    wsconnect(desired_server) {
        this.showOffLine();
        if (!this.isValidObnizId(this.id)) {
            if (this.isNode) {
                this.error("invalid obniz id");
            }
            else {
                const filled = _ReadCookie("obniz-last-used") || "";
                this.prompt(filled, (obnizid) => {
                    this.id = obnizid;
                    this.wsconnect(desired_server);
                });
            }
            return;
        }
        super.wsconnect(desired_server);
    }
    showAlertUI(obj) {
        if (this.isNode || !document.getElementById(this.options.debug_dom_id)) {
            return;
        }
        const dom = `
    <div style="background-color:${obj.alert === "warning" ? "#ffee35" : "#ff7b34"}">${obj.message}</div>`;
        document
            .getElementById(this.options.debug_dom_id)
            .insertAdjacentHTML("beforeend", dom);
    }
    getDebugDoms() {
        if (this.isNode) {
            return;
        }
        const loaderDom = document.querySelector("#loader");
        const debugDom = document.querySelector("#" + this.options.debug_dom_id);
        let statusDom = document.querySelector("#" + this.options.debug_dom_id + " #online-status");
        if (debugDom && !statusDom) {
            statusDom = document.createElement("div");
            statusDom.id = "online-status";
            statusDom.style.color = "#FFF";
            statusDom.style.padding = "5px";
            statusDom.style.textAlign = "center";
            debugDom.insertBefore(statusDom, debugDom.firstChild);
        }
        return { loaderDom, debugDom, statusDom };
    }
    /* online offline */
    _callOnConnect() {
        this.updateOnlineUI();
        super._callOnConnect();
    }
    close() {
        super.close();
        this.updateOnlineUI();
    }
    _disconnectLocal() {
        super._disconnectLocal();
        this.updateOnlineUI();
    }
    updateOnlineUI() {
        if (this.isNode) {
            return;
        }
        const isConnected = this.socket && this.socket.readyState === 1;
        const isConnectedLocally = this.socket_local && this.socket_local.readyState === 1;
        if (isConnected && isConnectedLocally) {
            this.showOnLine(true);
        }
        else if (isConnected) {
            this.showOnLine(false);
        }
        else {
            this.showOffLine();
        }
    }
    showOnLine(isConnectedLocally) {
        if (this.isNode) {
            return;
        }
        const doms = this.getDebugDoms();
        if (doms.loaderDom) {
            doms.loaderDom.style.display = "none";
        }
        if (doms.statusDom) {
            doms.statusDom.style.backgroundColor = isConnectedLocally
                ? "#0cd362"
                : "#31965d";
            doms.statusDom.style.color = "#FFF";
            doms.statusDom.innerHTML =
                (this.id ? "online : " + this.id : "online") +
                    (isConnectedLocally ? " via local_connect" : " via internet");
        }
    }
    showOffLine() {
        if (this.isNode) {
            return;
        }
        const doms = this.getDebugDoms();
        if (doms.loaderDom) {
            doms.loaderDom.style.display = "block";
        }
        if (doms.statusDom) {
            doms.statusDom.style.backgroundColor = "#d9534f";
            doms.statusDom.style.color = "#FFF";
            doms.statusDom.innerHTML = this.id ? "offline : " + this.id : "offline";
        }
    }
}
exports.default = ObnizUIs;
function _ReadCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(";");
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === " ") {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const ObnizApi_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizApi.js"));
const ObnizUIs_1 = __importDefault(__webpack_require__("./dist/src/obniz/ObnizUIs.js"));
const isNode = typeof window === "undefined";
class Obniz extends ObnizUIs_1.default {
    constructor(id, options) {
        super(id, options);
        this.util = new util_1.default(this);
    }
    repeat(callback, interval) {
        if (this.looper) {
            this.looper = callback;
            this.repeatInterval = interval || this.repeatInterval || 100;
            return;
        }
        this.looper = callback;
        this.repeatInterval = interval || 100;
        if (this.onConnectCalled) {
            this.loop();
        }
    }
    loop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this.looper === "function" && this.onConnectCalled) {
                const prom = this.looper();
                if (prom instanceof Promise) {
                    yield prom;
                }
                setTimeout(this.loop.bind(this), this.repeatInterval || 100);
            }
        });
    }
    _callOnConnect() {
        super._callOnConnect();
        this.loop();
    }
    message(target, message) {
        let targets = [];
        if (typeof target === "string") {
            targets.push(target);
        }
        else {
            targets = target;
        }
        this.send({
            message: {
                to: targets,
                data: message,
            },
        });
    }
    notifyToModule(obj) {
        super.notifyToModule(obj);
        // notify messaging
        if (typeof obj.message === "object" && this.onmessage) {
            this.onmessage(obj.message.data, obj.message.from);
        }
        // debug
        if (typeof obj.debug === "object") {
            if (obj.debug.warning) {
                const msg = "Warning: " + obj.debug.warning.message;
                this.warning({ alert: "warning", message: msg });
            }
            if (obj.debug.error) {
                const msg = "Error: " + obj.debug.error.message;
                this.error({ alert: "error", message: msg });
            }
            if (this.ondebug) {
                this.ondebug(obj.debug);
            }
        }
    }
    warning(msg) {
        if (this.isNode) {
            console.error(msg);
        }
        else {
            if (msg && typeof msg === "object" && msg.alert) {
                this.showAlertUI(msg);
                console.log(msg.message);
                return;
            }
            if (typeof showObnizDebugError === "function") {
                showObnizDebugError(new Error(msg));
            }
            console.log(`Warning: ${msg}`);
        }
    }
    error(msg) {
        if (this.isNode) {
            console.error(msg);
        }
        else {
            if (msg && typeof msg === "object" && msg.alert) {
                this.showAlertUI(msg);
                msg = msg.message;
            }
            if (typeof showObnizDebugError === "function") {
                showObnizDebugError(new Error(msg));
                console.error(new Error(msg));
            }
            else {
                throw new Error(msg);
            }
        }
    }
    /**
     *
     * @returns {ObnizApi}
     */
    static get api() {
        return ObnizApi_1.default;
    }
}
exports.default = Obniz;
/*===================*/
/* Utils */
/*===================*/
try {
    if (!isNode) {
        if (window && window.parent && window.parent.userAppLoaded) {
            window.parent.userAppLoaded(window);
        }
        function showObnizDebugError(err) {
            if (window.parent && window.parent.logger) {
                window.parent.logger.onObnizError(err);
            }
        }
    }
}
catch (e) {
    if (e instanceof DOMException) {
        // cross origin iframe
    }
    else {
        console.error(e);
    }
}
/*===================*/
/* ReadParts */
/*===================*/
__webpack_require__("./dist/src/obniz sync recursive").context = __webpack_require__("./dist/src/obniz/libs/webpackReplace/require-context.js");
if (__webpack_require__("./dist/src/obniz sync recursive").context && __webpack_require__("./dist/src/obniz sync recursive").context.setBaseDir) {
    __webpack_require__("./dist/src/obniz sync recursive").context.setBaseDir(__dirname);
}
const context = __webpack_require__("./dist/src/parts sync recursive \\.js$");
/* webpack loader */
for (const path of context.keys()) {
    const anParts = context(path);
    if (anParts.info) {
        Obniz.PartsRegistrate(anParts);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/ble.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAdvertisement_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAdvertisement.js"));
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleCharacteristic.js"));
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleDescriptor.js"));
const blePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/blePeripheral.js"));
const bleRemotePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemotePeripheral.js"));
const bleScan_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleScan.js"));
const bleSecurity_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleSecurity.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleService.js"));
class ObnizBLE {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.remotePeripherals = [];
        this.service = bleService_1.default;
        this.characteristic = bleCharacteristic_1.default;
        this.descriptor = bleDescriptor_1.default;
        this.peripheral = new blePeripheral_1.default(Obniz);
        this.scanTarget = null;
        this.advertisement = new bleAdvertisement_1.default(Obniz);
        this.scan = new bleScan_1.default(Obniz);
        this.security = new bleSecurity_1.default(Obniz);
        this._reset();
    }
    static _dataArray2uuidHex(data, reverse) {
        let uuid = [];
        for (let i = 0; i < data.length; i++) {
            uuid.push(("00" + data[i].toString(16).toLowerCase()).slice(-2));
        }
        if (reverse) {
            uuid = uuid.reverse();
        }
        let str = uuid.join("");
        if (uuid.length >= 16) {
            str =
                str.slice(0, 8) +
                    "-" +
                    str.slice(8, 12) +
                    "-" +
                    str.slice(12, 16) +
                    "-" +
                    str.slice(16, 20) +
                    "-" +
                    str.slice(20);
        }
        return str;
    }
    // dummy
    initWait() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    _reset() {
    }
    directConnect(uuid, addressType) {
        throw new Error("directConnect cannot use obnizOS < 3.0.0. Please update obnizOS");
    }
    directConnectWait(uuid, addressType) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("directConnectWait cannot use obnizOS < 3.0.0. Please update obnizOS");
        });
    }
    findPeripheral(address) {
        for (const key in this.remotePeripherals) {
            if (this.remotePeripherals[key].address === address) {
                return this.remotePeripherals[key];
            }
        }
        return null;
    }
    notified(obj) {
        if (obj.scan_result) {
            let val = this.findPeripheral(obj.scan_result.address);
            if (!val) {
                val = new bleRemotePeripheral_1.default(this.Obniz, obj.scan_result.address);
                this.remotePeripherals.push(val);
            }
            val.discoverdOnRemote = true;
            val.setParams(obj.scan_result);
            this.scan.notifyFromServer("onfind", val);
        }
        if (obj.scan_result_finish) {
            this.scan.notifyFromServer("onfinish");
        }
        const remotePeripheralCallbackFunc = (val, func, type) => {
            let target = null;
            if (val === undefined) {
                return;
            }
            const p = this.findPeripheral(val.address);
            if (!p) {
                return;
            }
            if (type === "peripheral") {
                target = p;
            }
            else if (type === "service") {
                target = p.findService(val);
            }
            else if (type === "characteristic") {
                target = p.findCharacteristic(val);
            }
            else if (type === "descriptor") {
                target = p.findDescriptor(val);
            }
            if (!target) {
                return;
            }
            func(val, target);
        };
        const paramList = {
            status_update: { name: "statusupdate", obj: "peripheral" },
            get_service_result: { name: "discover", obj: "peripheral" },
            get_service_result_finish: {
                name: "discoverfinished",
                obj: "peripheral",
            },
            get_characteristic_result: { name: "discover", obj: "service" },
            get_characteristic_result_finish: {
                name: "discoverfinished",
                obj: "service",
            },
            write_characteristic_result: { name: "onwrite", obj: "characteristic" },
            read_characteristic_result: { name: "onread", obj: "characteristic" },
            register_notify_characteristic_result: {
                name: "onregisternotify",
                obj: "characteristic",
            },
            // for typo
            register_nofity_characteristic_result: {
                name: "onregisternotify",
                obj: "characteristic",
            },
            unregister_notify_characteristic_result: {
                name: "onunregisternotify",
                obj: "characteristic",
            },
            // for typo
            unregister_nofity_characteristic_result: {
                name: "onunregisternotify",
                obj: "characteristic",
            },
            notify_characteristic: { name: "onnotify", obj: "characteristic" },
            // for typo
            nofity_characteristic: { name: "onnotify", obj: "characteristic" },
            get_descriptor_result: { name: "discover", obj: "characteristic" },
            get_descriptor_result_finish: {
                name: "discoverfinished",
                obj: "characteristic",
            },
            write_descriptor_result: { name: "onwrite", obj: "descriptor" },
            read_descriptor_result: { name: "onread", obj: "descriptor" },
        };
        for (const paramListKey in paramList) {
            remotePeripheralCallbackFunc(obj[paramListKey], (val, bleobj) => {
                bleobj.notifyFromServer(paramList[paramListKey].name, val);
            }, paramList[paramListKey].obj);
        }
        const callbackFunc = (val, func, type) => {
            let target = null;
            if (val === undefined) {
                return;
            }
            if (type === "peripheral") {
                target = this.peripheral;
            }
            else if (type === "service") {
                target = this.peripheral.getService(val);
            }
            else if (type === "characteristic") {
                target = this.peripheral.findCharacteristic(val);
            }
            else if (type === "descriptor") {
                target = this.peripheral.findDescriptor(val);
            }
            if (!target) {
                return;
            }
            func(val, target);
        };
        if (obj.peripheral) {
            callbackFunc(obj.peripheral.connection_status, (val) => {
                this.peripheral.onconnectionupdates(val);
            }, "peripheral");
            const centralParamList = {
                read_characteristic_result: { name: "onread", obj: "characteristic" },
                write_characteristic_result: { name: "onwrite", obj: "characteristic" },
                notify_read_characteristic: {
                    name: "onreadfromremote",
                    obj: "characteristic",
                },
                notify_write_characteristic: {
                    name: "onwritefromremote",
                    obj: "characteristic",
                },
                read_descriptor_result: { name: "onread", obj: "descriptor" },
                write_descriptor_result: { name: "onwrite", obj: "descriptor" },
                notify_read_descriptor: { name: "onreadfromremote", obj: "descriptor" },
                notify_write_descriptor: {
                    name: "onwritefromremote",
                    obj: "descriptor",
                },
            };
            for (const key in centralParamList) {
                callbackFunc(obj.peripheral[key], (val, bleobj) => {
                    bleobj.notifyFromServer(centralParamList[key].name, val);
                }, centralParamList[key].obj);
            }
        }
        if (obj.error) {
            const params = obj.error;
            let handled = false;
            let peripheral;
            let target;
            if (!params.address) {
                peripheral = this.peripheral;
            }
            else {
                peripheral = this.findPeripheral(params.address);
            }
            if (peripheral) {
                if (params.service_uuid &&
                    params.characteristic_uuid &&
                    params.descriptor_uuid) {
                    target = peripheral.findDescriptor(params);
                }
                else if (params.service_uuid && params.characteristic_uuid) {
                    target = peripheral.findCharacteristic(params);
                }
                else if (params.service_uuid) {
                    target = peripheral.findService(params);
                }
                if (target) {
                    target.notifyFromServer("onerror", params);
                    handled = true;
                }
                else {
                    peripheral.onerror(params);
                    handled = true;
                }
            }
            if ([35, 36, 37, 38, 39].includes(params.function_code)) {
                this.security.onerror(params);
                handled = true;
            }
            if (!handled) {
                this.Obniz.error(`ble ${params.message} service=${params.service_uuid} characteristic_uuid=${params.characteristic_uuid} descriptor_uuid=${params.descriptor_uuid}`);
            }
        }
    }
}
exports.default = ObnizBLE;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleAdvertisement.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAdvertisementBuilder_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAdvertisementBuilder.js"));
class BleAdvertisement {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.adv_data = [];
        this.scan_resp = [];
    }
    start() {
        const obj = {};
        obj.ble = {};
        obj.ble.advertisement = {
            adv_data: this.adv_data,
        };
        if (this.scan_resp.length > 0) {
            obj.ble.advertisement.scan_resp = this.scan_resp;
        }
        this.Obniz.send(obj);
    }
    end() {
        const obj = {};
        obj.ble = {};
        obj.ble.advertisement = null;
        this.Obniz.send(obj);
    }
    setAdvDataRaw(adv_data) {
        this.adv_data = adv_data;
    }
    setAdvData(json) {
        const builder = this.advDataBulider(json);
        this.setAdvDataRaw(builder.build());
    }
    advDataBulider(jsonVal) {
        return new bleAdvertisementBuilder_1.default(this.Obniz, jsonVal);
    }
    scanRespDataBuilder(json) {
        return new bleAdvertisementBuilder_1.default(this.Obniz, json);
    }
    setScanRespDataRaw(scan_resp) {
        this.scan_resp = scan_resp;
    }
    setScanRespData(json) {
        this.setScanRespDataRaw(this.scanRespDataBuilder(json).build());
    }
}
exports.default = BleAdvertisement;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlQWR2ZXJ0aXNlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdGQUFnRDtBQUVoRCxNQUFNLGdCQUFnQjtJQUtwQixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLEtBQUs7UUFDVixNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRztZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDeEIsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLEdBQUc7UUFDUixNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxRQUFhO1FBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFTSxVQUFVLENBQUMsSUFBUztRQUN6QixNQUFNLE9BQU8sR0FBUSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLGNBQWMsQ0FBQyxPQUFZO1FBQ2hDLE9BQU8sSUFBSSxpQ0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLG1CQUFtQixDQUFDLElBQVM7UUFDbEMsT0FBTyxJQUFJLGlDQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sa0JBQWtCLENBQUMsU0FBYztRQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDO0lBRU0sZUFBZSxDQUFDLElBQVM7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDRjtBQUVELGtCQUFlLGdCQUFnQixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlQWR2ZXJ0aXNlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCdWlsZGVyIGZyb20gXCIuL2JsZUFkdmVydGlzZW1lbnRCdWlsZGVyXCI7XG5cbmNsYXNzIEJsZUFkdmVydGlzZW1lbnQge1xuICBwdWJsaWMgT2JuaXo6IGFueTtcbiAgcHVibGljIGFkdl9kYXRhOiBhbnk7XG4gIHB1YmxpYyBzY2FuX3Jlc3A6IGFueTtcblxuICBjb25zdHJ1Y3RvcihPYm5pejogYW55KSB7XG4gICAgdGhpcy5PYm5peiA9IE9ibml6O1xuICAgIHRoaXMuYWR2X2RhdGEgPSBbXTtcbiAgICB0aGlzLnNjYW5fcmVzcCA9IFtdO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgb2JqLmJsZSA9IHt9O1xuICAgIG9iai5ibGUuYWR2ZXJ0aXNlbWVudCA9IHtcbiAgICAgIGFkdl9kYXRhOiB0aGlzLmFkdl9kYXRhLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zY2FuX3Jlc3AubGVuZ3RoID4gMCkge1xuICAgICAgb2JqLmJsZS5hZHZlcnRpc2VtZW50LnNjYW5fcmVzcCA9IHRoaXMuc2Nhbl9yZXNwO1xuICAgIH1cblxuICAgIHRoaXMuT2JuaXouc2VuZChvYmopO1xuICB9XG5cbiAgcHVibGljIGVuZCgpIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIG9iai5ibGUgPSB7fTtcbiAgICBvYmouYmxlLmFkdmVydGlzZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuT2JuaXouc2VuZChvYmopO1xuICB9XG5cbiAgcHVibGljIHNldEFkdkRhdGFSYXcoYWR2X2RhdGE6IGFueSkge1xuICAgIHRoaXMuYWR2X2RhdGEgPSBhZHZfZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRBZHZEYXRhKGpzb246IGFueSkge1xuICAgIGNvbnN0IGJ1aWxkZXI6IGFueSA9IHRoaXMuYWR2RGF0YUJ1bGlkZXIoanNvbik7XG4gICAgdGhpcy5zZXRBZHZEYXRhUmF3KGJ1aWxkZXIuYnVpbGQoKSk7XG4gIH1cblxuICBwdWJsaWMgYWR2RGF0YUJ1bGlkZXIoanNvblZhbDogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBCdWlsZGVyKHRoaXMuT2JuaXosIGpzb25WYWwpO1xuICB9XG5cbiAgcHVibGljIHNjYW5SZXNwRGF0YUJ1aWxkZXIoanNvbjogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBCdWlsZGVyKHRoaXMuT2JuaXosIGpzb24pO1xuICB9XG5cbiAgcHVibGljIHNldFNjYW5SZXNwRGF0YVJhdyhzY2FuX3Jlc3A6IGFueSkge1xuICAgIHRoaXMuc2Nhbl9yZXNwID0gc2Nhbl9yZXNwO1xuICB9XG5cbiAgcHVibGljIHNldFNjYW5SZXNwRGF0YShqc29uOiBhbnkpIHtcbiAgICB0aGlzLnNldFNjYW5SZXNwRGF0YVJhdyh0aGlzLnNjYW5SZXNwRGF0YUJ1aWxkZXIoanNvbikuYnVpbGQoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlQWR2ZXJ0aXNlbWVudDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleAdvertisementBuilder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleAdvertisementBuilder {
    constructor(Obniz, json) {
        this.Obniz = Obniz;
        this.rows = {};
        if (json) {
            if (json.localName) {
                this.setCompleteLocalName(json.localName);
            }
            if (json.manufacturerData &&
                json.manufacturerData.companyCode &&
                json.manufacturerData.data) {
                this.setManufacturerSpecificData(json.manufacturerData.companyCode, json.manufacturerData.data);
            }
            if (json.serviceUuids) {
                for (const uuid of json.serviceUuids) {
                    this.setUuid(uuid);
                }
            }
        }
        if (typeof this.extendEvalJson === "function") {
            this.extendEvalJson(json);
        }
    }
    setRow(type, data) {
        this.rows[type] = data;
    }
    getRow(type) {
        return this.rows[type] || [];
    }
    build() {
        const data = [];
        for (const key in this.rows) {
            if (this.rows[key].length === 0) {
                continue;
            }
            data.push(this.rows[key].length + 1);
            data.push(parseInt(key));
            Array.prototype.push.apply(data, this.rows[key]);
        }
        if (data.length > 31) {
            this.Obniz.error("Too large data. Advertise/ScanResponse data are must be less than 32 byte.");
        }
        return data;
    }
    setStringData(type, string) {
        const data = [];
        for (let i = 0; i < string.length; i++) {
            data.push(string.charCodeAt(i));
        }
        this.setRow(type, data);
    }
    setShortenedLocalName(name) {
        this.setStringData(0x08, name);
    }
    setCompleteLocalName(name) {
        this.setStringData(0x09, name);
    }
    setManufacturerSpecificData(companyCode, data) {
        const row = [];
        row.push(companyCode & 0xff);
        row.push((companyCode >> 8) & 0xff);
        Array.prototype.push.apply(row, data);
        this.setRow(0xff, row);
    }
    setUuid(uuid) {
        const uuidData = this.convertUuid(uuid);
        let type;
        if (uuidData.length === 16) {
            type = 0x06;
        }
        else if (uuidData.length === 4) {
            type = 0x04;
        }
        else if (uuidData.length === 2) {
            type = 0x02;
        }
        this.setRow(type, uuidData);
    }
    convertUuid(uuid) {
        const uuidNumeric = bleHelper_1.default.uuidFilter(uuid);
        if (uuidNumeric.length !== 32 &&
            uuidNumeric.length !== 8 &&
            uuidNumeric.length !== 4) {
            this.Obniz.error("BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)");
        }
        const data = [];
        for (let i = uuidNumeric.length; i > 1; i -= 2) {
            data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));
        }
        return data;
    }
    setIbeaconData(uuid, major, minor, txPower) {
        const data = [];
        data.push(0x02, 0x15); // fixed data
        const uuidData = this.convertUuid(uuid);
        Array.prototype.push.apply(data, uuidData);
        data.push((major >> 8) & 0xff);
        data.push((major >> 0) & 0xff);
        data.push((minor >> 8) & 0xff);
        data.push((minor >> 0) & 0xff);
        data.push((txPower >> 0) & 0xff);
        this.setManufacturerSpecificData(0x004c, data);
        return;
    }
    extendEvalJson(json) {
        if (json) {
            if (json.flags) {
                if (json.flags.includes("limited_discoverable_mode")) {
                    this.setLeLimitedDiscoverableModeFlag();
                }
                if (json.flags.includes("general_discoverable_mode")) {
                    this.setLeGeneralDiscoverableModeFlag();
                }
                if (json.flags.includes("br_edr_not_supported")) {
                    this.setBrEdrNotSupportedFlag();
                }
                if (json.flags.includes("le_br_edr_controller")) {
                    this.setLeBrEdrControllerFlag();
                }
                if (json.flags.includes("le_br_edr_host")) {
                    this.setLeBrEdrHostFlag();
                }
            }
        }
    }
    setFlags(flag) {
        const data = this.getRow(0x01);
        data[0] = (data[0] || 0) | flag;
        this.setRow(0x01, data);
    }
    setLeLimitedDiscoverableModeFlag() {
        this.setFlags(0x01);
    }
    setLeGeneralDiscoverableModeFlag() {
        this.setFlags(0x02);
    }
    setBrEdrNotSupportedFlag() {
        this.setFlags(0x04);
    }
    setLeBrEdrControllerFlag() {
        this.setFlags(0x08);
    }
    setLeBrEdrHostFlag() {
        this.setFlags(0x10);
    }
}
exports.default = BleAdvertisementBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleAttributeAbstract {
    constructor(params) {
        this.uuid = bleHelper_1.default.uuidFilter(params.uuid);
        this.parent = null;
        this.children = [];
        this.isRemote = false;
        this.discoverdOnRemote = false;
        this.data = params.data || null;
        if (!this.data && params.text) {
            this.data = util_1.default.string2dataArray(params.text);
        }
        if (!this.data && params.value) {
            this.data = [params.value];
        }
        if (params[this.childrenName]) {
            for (const child of params[this.childrenName]) {
                this.addChild(child);
            }
        }
        this.setFunctions();
        this.emitter = new emitter();
    }
    setFunctions() {
        let childrenName = this.childrenName;
        if (childrenName) {
            childrenName =
                childrenName.charAt(0).toUpperCase() + childrenName.slice(1);
            const childName = childrenName.slice(0, -1);
            let funcName = "add" + childName;
            this[funcName] = this.addChild;
            funcName = "get" + childName;
            this[funcName] = this.getChild;
        }
        const parentName = this.parentName;
        if (parentName) {
            Object.defineProperty(this, parentName, {
                get() {
                    return this.parent;
                },
                set(newValue) {
                    this.parent = newValue;
                },
            });
        }
    }
    get childrenClass() {
        return Object;
    }
    get childrenName() {
        return null;
    }
    get parentName() {
        return null;
    }
    addChild(child) {
        if (!(child instanceof this.childrenClass)) {
            const childrenClass = this.childrenClass;
            child = new childrenClass(child);
        }
        child.parent = this;
        this.children.push(child);
        return child;
    }
    getChild(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        return this.children
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    toJSON() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
        };
        if (this.children.length > 0) {
            const key = this.childrenName;
            obj[key] = this.children;
        }
        if (this.data) {
            obj.data = this.data;
        }
        return obj;
    }
    /**
     * WS COMMANDS
     */
    read() {
    }
    write(val, needResponse) {
    }
    writeNumber(val, needResponse) {
        this.write([val], needResponse);
    }
    writeText(str, needResponse) {
        this.write(util_1.default.string2dataArray(str), needResponse);
    }
    readWait() {
        return new Promise((resolve, reject) => {
            this.emitter.once("onread", (params) => {
                if (params.result === "success") {
                    resolve(params.data);
                }
                else {
                    reject(new Error("readWait failed"));
                }
            });
            this.read();
        });
    }
    writeWait(data, needResponse) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeWait failed"));
                }
            });
            this.write(data, needResponse);
        });
    }
    writeTextWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeTextWait failed"));
                }
            });
            this.writeText(data);
        });
    }
    writeNumberWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeNumberWait failed"));
                }
            });
            this.writeNumber(data);
        });
    }
    readFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once("onreadfromremote", () => {
                resolve();
            });
        });
    }
    writeFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once("onreadfromremote", (params) => {
                resolve(params.data);
            });
        });
    }
    /**
     * CALLBACKS
     */
    onwrite(result) {
    }
    onread(data) {
    }
    onwritefromremote(address, data) {
    }
    onreadfromremote(address) {
    }
    onerror(err) {
        console.error(err.message);
    }
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case "onerror": {
                this.onerror(params);
                break;
            }
            case "onwrite": {
                this.onwrite(params.result);
                break;
            }
            case "onread": {
                this.onread(params.data);
                break;
            }
            case "onwritefromremote": {
                this.onwritefromremote(params.address, params.data);
                break;
            }
            case "onreadfromremote": {
                this.onreadfromremote(params.address);
                break;
            }
        }
    }
}
exports.default = BleAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAttributeAbstract.js"));
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleDescriptor.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleCharacteristic extends bleAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.addDescriptor = this.addChild;
        this.getDescriptor = this.getChild;
        this.properties = obj.properties || [];
        if (!Array.isArray(this.properties)) {
            this.properties = [this.properties];
        }
        this.permissions = obj.permissions || [];
        if (!Array.isArray(this.permissions)) {
            this.permissions = [this.permissions];
        }
    }
    get parentName() {
        return "service";
    }
    get childrenClass() {
        return bleDescriptor_1.default;
    }
    get childrenName() {
        return "descriptors";
    }
    get descriptors() {
        return this.children;
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        if (this.permissions.length > 0) {
            obj.permissions = this.permissions;
        }
        return obj;
    }
    addProperty(param) {
        if (!this.properties.includes(param)) {
            this.properties.push(param);
        }
    }
    removeProperty(param) {
        this.properties = this.properties.filter((elm) => {
            return elm !== param;
        });
    }
    addPermission(param) {
        if (!this.permissions.includes(param)) {
            this.permissions.push(param);
        }
    }
    removePermission(param) {
        this.permissions = this.permissions.filter((elm) => {
            return elm !== param;
        });
    }
    write(data) {
        this.service.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    write_characteristic: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                        data,
                    },
                },
            },
        });
    }
    read() {
        this.service.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    read_characteristic: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    },
                },
            },
        });
    }
    notify() {
        this.service.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    notify_characteristic: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    },
                },
            },
        });
    }
}
exports.default = BleCharacteristic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlQ2hhcmFjdGVyaXN0aWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRkFBMEQ7QUFDMUQsb0VBQTRDO0FBQzVDLDREQUFvQztBQUVwQyxNQUFNLGlCQUFrQixTQUFRLDhCQUFvQjtJQVdsRCxZQUFZLEdBQVE7UUFDbEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUVuQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyx1QkFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxNQUFNO1FBQ1gsTUFBTSxHQUFHLEdBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWhDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNsQztRQUVELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNwQztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUFVO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFTSxjQUFjLENBQUMsS0FBVTtRQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDcEQsT0FBTyxHQUFHLEtBQUssS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGFBQWEsQ0FBQyxLQUFVO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUUsQ0FBQyxHQUFRLEVBQUcsRUFBRTtZQUN4RCxPQUFPLEdBQUcsS0FBSyxLQUFLLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQVM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNqQyxHQUFHLEVBQUU7Z0JBQ0gsVUFBVSxFQUFFO29CQUNWLG9CQUFvQixFQUFFO3dCQUNwQixZQUFZLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7d0JBQ3JELG1CQUFtQixFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7d0JBQ3BELElBQUk7cUJBQ0w7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNqQyxHQUFHLEVBQUU7Z0JBQ0gsVUFBVSxFQUFFO29CQUNWLG1CQUFtQixFQUFFO3dCQUNuQixZQUFZLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7d0JBQ3JELG1CQUFtQixFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7cUJBQ3JEO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDakMsR0FBRyxFQUFFO2dCQUNILFVBQVUsRUFBRTtvQkFDVixxQkFBcUIsRUFBRTt3QkFDckIsWUFBWSxFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO3dCQUNyRCxtQkFBbUIsRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO3FCQUNyRDtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsaUJBQWlCLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZS9ibGVDaGFyYWN0ZXJpc3RpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZURlc2NyaXB0b3IgZnJvbSBcIi4vYmxlRGVzY3JpcHRvclwiO1xuaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcblxuY2xhc3MgQmxlQ2hhcmFjdGVyaXN0aWMgZXh0ZW5kcyBCbGVBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIHB1YmxpYyBhZGREZXNjcmlwdG9yOiBhbnk7XG4gIHB1YmxpYyBhZGRDaGlsZDogYW55O1xuICBwdWJsaWMgZ2V0RGVzY3JpcHRvcjogYW55O1xuICBwdWJsaWMgZ2V0Q2hpbGQ6IGFueTtcbiAgcHVibGljIHByb3BlcnRpZXM6IGFueTtcbiAgcHVibGljIHBlcm1pc3Npb25zOiBhbnk7XG4gIHB1YmxpYyBjaGlsZHJlbjogYW55O1xuICBwdWJsaWMgc2VydmljZTogYW55O1xuICBwdWJsaWMgdXVpZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9iajogYW55KSB7XG4gICAgc3VwZXIob2JqKTtcblxuICAgIHRoaXMuYWRkRGVzY3JpcHRvciA9IHRoaXMuYWRkQ2hpbGQ7XG4gICAgdGhpcy5nZXREZXNjcmlwdG9yID0gdGhpcy5nZXRDaGlsZDtcblxuICAgIHRoaXMucHJvcGVydGllcyA9IG9iai5wcm9wZXJ0aWVzIHx8IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBbdGhpcy5wcm9wZXJ0aWVzXTtcbiAgICB9XG5cbiAgICB0aGlzLnBlcm1pc3Npb25zID0gb2JqLnBlcm1pc3Npb25zIHx8IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnBlcm1pc3Npb25zKSkge1xuICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IFt0aGlzLnBlcm1pc3Npb25zXTtcbiAgICB9XG4gIH1cblxuICBnZXQgcGFyZW50TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcInNlcnZpY2VcIjtcbiAgfVxuXG4gIGdldCBjaGlsZHJlbkNsYXNzKCk6IGFueSB7XG4gICAgcmV0dXJuIEJsZURlc2NyaXB0b3I7XG4gIH1cblxuICBnZXQgY2hpbGRyZW5OYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiZGVzY3JpcHRvcnNcIjtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdG9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgfVxuXG4gIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSBzdXBlci50b0pTT04oKTtcblxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgb2JqLnByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGVybWlzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgb2JqLnBlcm1pc3Npb25zID0gdGhpcy5wZXJtaXNzaW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHB1YmxpYyBhZGRQcm9wZXJ0eShwYXJhbTogYW55KSB7XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMuaW5jbHVkZXMocGFyYW0pKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMucHVzaChwYXJhbSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVByb3BlcnR5KHBhcmFtOiBhbnkpIHtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnRpZXMuZmlsdGVyKChlbG06IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGVsbSAhPT0gcGFyYW07XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYWRkUGVybWlzc2lvbihwYXJhbTogYW55KSB7XG4gICAgaWYgKCF0aGlzLnBlcm1pc3Npb25zLmluY2x1ZGVzKHBhcmFtKSkge1xuICAgICAgdGhpcy5wZXJtaXNzaW9ucy5wdXNoKHBhcmFtKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlUGVybWlzc2lvbihwYXJhbTogYW55KSB7XG4gICAgdGhpcy5wZXJtaXNzaW9ucyA9IHRoaXMucGVybWlzc2lvbnMuZmlsdGVyICgoZWxtOiBhbnkgKSA9PiB7XG4gICAgICByZXR1cm4gZWxtICE9PSBwYXJhbTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShkYXRhOiBhbnkpIHtcbiAgICB0aGlzLnNlcnZpY2UucGVyaXBoZXJhbC5PYm5pei5zZW5kKHtcbiAgICAgIGJsZToge1xuICAgICAgICBwZXJpcGhlcmFsOiB7XG4gICAgICAgICAgd3JpdGVfY2hhcmFjdGVyaXN0aWM6IHtcbiAgICAgICAgICAgIHNlcnZpY2VfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy5zZXJ2aWNlLnV1aWQpLFxuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWNfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy51dWlkKSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVhZCgpIHtcbiAgICB0aGlzLnNlcnZpY2UucGVyaXBoZXJhbC5PYm5pei5zZW5kKHtcbiAgICAgIGJsZToge1xuICAgICAgICBwZXJpcGhlcmFsOiB7XG4gICAgICAgICAgcmVhZF9jaGFyYWN0ZXJpc3RpYzoge1xuICAgICAgICAgICAgc2VydmljZV91dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcih0aGlzLnNlcnZpY2UudXVpZCksXG4gICAgICAgICAgICBjaGFyYWN0ZXJpc3RpY191dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcih0aGlzLnV1aWQpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG5vdGlmeSgpIHtcbiAgICB0aGlzLnNlcnZpY2UucGVyaXBoZXJhbC5PYm5pei5zZW5kKHtcbiAgICAgIGJsZToge1xuICAgICAgICBwZXJpcGhlcmFsOiB7XG4gICAgICAgICAgbm90aWZ5X2NoYXJhY3RlcmlzdGljOiB7XG4gICAgICAgICAgICBzZXJ2aWNlX3V1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMuc2VydmljZS51dWlkKSxcbiAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljX3V1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMudXVpZCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlQ2hhcmFjdGVyaXN0aWM7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAttributeAbstract.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleDescriptor extends bleAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.permissions = obj.permissions || [];
        if (!Array.isArray(this.permissions)) {
            this.permissions = [this.permissions];
        }
    }
    get parentName() {
        return "characteristic";
    }
    addPermission(param) {
        if (!this.permissions.includes(param)) {
            this.permissions.push(param);
        }
    }
    removePermission(param) {
        this.permissions = this.permissions.filter((elm) => {
            return elm !== param;
        });
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.permissions.length > 0) {
            obj.permissions = this.permissions;
        }
        return obj;
    }
    write(dataArray) {
        this.characteristic.service.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    write_descriptor: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.characteristic.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.characteristic.uuid),
                        descriptor_uuid: this.uuid,
                        data: dataArray,
                    },
                },
            },
        });
    }
    read() {
        this.characteristic.service.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    read_descriptor: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.characteristic.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.characteristic.uuid),
                        descriptor_uuid: this.uuid,
                    },
                },
            },
        });
    }
}
exports.default = BleDescriptor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlRGVzY3JpcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtGQUEwRDtBQUMxRCw0REFBb0M7QUFFcEMsTUFBTSxhQUFjLFNBQVEsOEJBQW9CO0lBSzlDLFlBQVksR0FBUTtRQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxLQUFVO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUUsQ0FBQyxHQUFRLEVBQUcsRUFBRTtZQUN4RCxPQUFPLEdBQUcsS0FBSyxLQUFLLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTTtRQUNYLE1BQU0sR0FBRyxHQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVoQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDcEM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBYztRQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNoRCxHQUFHLEVBQUU7Z0JBQ0gsVUFBVSxFQUFFO29CQUNWLGdCQUFnQixFQUFFO3dCQUNoQixZQUFZLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDakM7d0JBQ0QsbUJBQW1CLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7d0JBQ25FLGVBQWUsRUFBRSxJQUFJLENBQUMsSUFBSTt3QkFDMUIsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2hELEdBQUcsRUFBRTtnQkFDSCxVQUFVLEVBQUU7b0JBQ1YsZUFBZSxFQUFFO3dCQUNmLFlBQVksRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNqQzt3QkFDRCxtQkFBbUIsRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQzt3QkFDbkUsZUFBZSxFQUFFLElBQUksQ0FBQyxJQUFJO3FCQUMzQjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsYUFBYSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlRGVzY3JpcHRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcblxuY2xhc3MgQmxlRGVzY3JpcHRvciBleHRlbmRzIEJsZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIHBlcm1pc3Npb25zOiBhbnk7XG4gIHB1YmxpYyBjaGFyYWN0ZXJpc3RpYzogYW55O1xuICBwdWJsaWMgdXVpZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9iajogYW55KSB7XG4gICAgc3VwZXIob2JqKTtcblxuICAgIHRoaXMucGVybWlzc2lvbnMgPSBvYmoucGVybWlzc2lvbnMgfHwgW107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMucGVybWlzc2lvbnMpKSB7XG4gICAgICB0aGlzLnBlcm1pc3Npb25zID0gW3RoaXMucGVybWlzc2lvbnNdO1xuICAgIH1cbiAgfVxuXG4gIGdldCBwYXJlbnROYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBcImNoYXJhY3RlcmlzdGljXCI7XG4gIH1cblxuICBwdWJsaWMgYWRkUGVybWlzc2lvbihwYXJhbTogYW55KSB7XG4gICAgaWYgKCF0aGlzLnBlcm1pc3Npb25zLmluY2x1ZGVzKHBhcmFtKSkge1xuICAgICAgdGhpcy5wZXJtaXNzaW9ucy5wdXNoKHBhcmFtKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlUGVybWlzc2lvbihwYXJhbTogYW55KSB7XG4gICAgdGhpcy5wZXJtaXNzaW9ucyA9IHRoaXMucGVybWlzc2lvbnMuZmlsdGVyICgoZWxtOiBhbnkgKSA9PiB7XG4gICAgICByZXR1cm4gZWxtICE9PSBwYXJhbTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSBzdXBlci50b0pTT04oKTtcblxuICAgIGlmICh0aGlzLnBlcm1pc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIG9iai5wZXJtaXNzaW9ucyA9IHRoaXMucGVybWlzc2lvbnM7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoZGF0YUFycmF5OiBhbnkpIHtcbiAgICB0aGlzLmNoYXJhY3RlcmlzdGljLnNlcnZpY2UucGVyaXBoZXJhbC5PYm5pei5zZW5kKHtcbiAgICAgIGJsZToge1xuICAgICAgICBwZXJpcGhlcmFsOiB7XG4gICAgICAgICAgd3JpdGVfZGVzY3JpcHRvcjoge1xuICAgICAgICAgICAgc2VydmljZV91dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcihcbiAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnV1aWQsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWNfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy5jaGFyYWN0ZXJpc3RpYy51dWlkKSxcbiAgICAgICAgICAgIGRlc2NyaXB0b3JfdXVpZDogdGhpcy51dWlkLFxuICAgICAgICAgICAgZGF0YTogZGF0YUFycmF5LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlYWQoKSB7XG4gICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWwuT2JuaXouc2VuZCh7XG4gICAgICBibGU6IHtcbiAgICAgICAgcGVyaXBoZXJhbDoge1xuICAgICAgICAgIHJlYWRfZGVzY3JpcHRvcjoge1xuICAgICAgICAgICAgc2VydmljZV91dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcihcbiAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnV1aWQsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWNfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy5jaGFyYWN0ZXJpc3RpYy51dWlkKSxcbiAgICAgICAgICAgIGRlc2NyaXB0b3JfdXVpZDogdGhpcy51dWlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZURlc2NyaXB0b3I7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleHelper.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BleHelper = {
    uuidFilter(uuid) {
        return uuid.toLowerCase().replace(/[^0-9abcdef]/g, "");
    },
};
exports.default = BleHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxTQUFTLEdBQVE7SUFDckIsVUFBVSxDQUFDLElBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlL2JsZUhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJsZUhlbHBlcjogYW55ID0ge1xuICB1dWlkRmlsdGVyKHV1aWQ6IGFueSkge1xuICAgIHJldHVybiB1dWlkLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW14wLTlhYmNkZWZdL2csIFwiXCIpO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQmxlSGVscGVyO1xuIl19


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/blePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleService.js"));
class BlePeripheral {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this._services = [];
    }
    get services() {
        return this._services;
    }
    addService(obj) {
        if (!(obj instanceof bleService_1.default)) {
            obj = new bleService_1.default(obj);
        }
        this._services.push(obj);
        obj.peripheral = this;
        this.Obniz.send({ ble: { peripheral: { services: [obj] } } });
    }
    setJson(json) {
        if (json.services) {
            for (const service of json.services) {
                this.addService(service);
            }
        }
    }
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        return this._services
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    removeService(uuid) {
        this._services = this._services.filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) !== uuid;
        });
    }
    stopAllService() {
        this.Obniz.send({
            ble: {
                peripheral: null,
            },
        });
        this._services = [];
    }
    toJSON() {
        return {
            services: this._services,
        };
    }
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    end() {
        this.Obniz.send({ ble: { peripheral: null } });
    }
    onconnectionupdates() {
    }
    onerror() {
    }
}
exports.default = BlePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUGVyaXBoZXJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUNwQyw4REFBc0M7QUFFdEMsTUFBTSxhQUFhO0lBSWpCLFlBQVksS0FBVTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxVQUFVLENBQUMsR0FBUTtRQUN4QixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksb0JBQVUsQ0FBQyxFQUFFO1lBQ2hDLEdBQUcsR0FBRyxJQUFJLG9CQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLEdBQUcsRUFBRSxFQUFDLFVBQVUsRUFBRSxFQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFTO1FBQ3RCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFTSxVQUFVLENBQUMsSUFBUztRQUN6QixJQUFJLEdBQUcsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUMsU0FBUzthQUNsQixNQUFNLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUN2QixPQUFPLG1CQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUM7UUFDckQsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxFQUFFLENBQUM7SUFDYixDQUFDO0lBRU0sYUFBYSxDQUFDLElBQVM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUFDLE9BQVksRUFBRyxFQUFFO1lBQ3hELE9BQU8sbUJBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2QsR0FBRyxFQUFFO2dCQUNILFVBQVUsRUFBRSxJQUFJO2FBQ2pCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRU0sa0JBQWtCLENBQUMsS0FBVTtRQUNsQyxNQUFNLFdBQVcsR0FBUSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEUsTUFBTSxrQkFBa0IsR0FBUSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsR0FBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxFQUFFO1lBQ0wsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNoRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGNBQWMsQ0FBQyxLQUFVO1FBQzlCLE1BQU0sY0FBYyxHQUFRLG1CQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsR0FBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLEVBQUU7WUFDTCxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDeEM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxHQUFHO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxtQkFBbUI7SUFDMUIsQ0FBQztJQUVNLE9BQU87SUFDZCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxhQUFhLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZS9ibGVQZXJpcGhlcmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcbmltcG9ydCBCbGVTZXJ2aWNlIGZyb20gXCIuL2JsZVNlcnZpY2VcIjtcblxuY2xhc3MgQmxlUGVyaXBoZXJhbCB7XG4gIHB1YmxpYyBPYm5pejogYW55O1xuICBwdWJsaWMgX3NlcnZpY2VzOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoT2JuaXo6IGFueSkge1xuICAgIHRoaXMuT2JuaXogPSBPYm5pejtcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IFtdO1xuICB9XG5cbiAgZ2V0IHNlcnZpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlcztcbiAgfVxuXG4gIHB1YmxpYyBhZGRTZXJ2aWNlKG9iajogYW55KSB7XG4gICAgaWYgKCEob2JqIGluc3RhbmNlb2YgQmxlU2VydmljZSkpIHtcbiAgICAgIG9iaiA9IG5ldyBCbGVTZXJ2aWNlKG9iaik7XG4gICAgfVxuICAgIHRoaXMuX3NlcnZpY2VzLnB1c2gob2JqKTtcbiAgICBvYmoucGVyaXBoZXJhbCA9IHRoaXM7XG4gICAgdGhpcy5PYm5pei5zZW5kKHtibGU6IHtwZXJpcGhlcmFsOiB7c2VydmljZXM6IFtvYmpdfX19KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRKc29uKGpzb246IGFueSkge1xuICAgIGlmIChqc29uLnNlcnZpY2VzKSB7XG4gICAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YganNvbi5zZXJ2aWNlcykge1xuICAgICAgICB0aGlzLmFkZFNlcnZpY2Uoc2VydmljZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFNlcnZpY2UodXVpZDogYW55KSB7XG4gICAgdXVpZCA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHV1aWQpO1xuICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlc1xuICAgICAgLmZpbHRlcigoZWxlbWVudDogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBCbGVIZWxwZXIudXVpZEZpbHRlcihlbGVtZW50LnV1aWQpID09PSB1dWlkO1xuICAgICAgfSlcbiAgICAgIC5zaGlmdCgpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZVNlcnZpY2UodXVpZDogYW55KSB7XG4gICAgdGhpcy5fc2VydmljZXMgPSB0aGlzLl9zZXJ2aWNlcy5maWx0ZXIgKChlbGVtZW50OiBhbnkgKSA9PiB7XG4gICAgICByZXR1cm4gQmxlSGVscGVyLnV1aWRGaWx0ZXIoZWxlbWVudC51dWlkKSAhPT0gdXVpZDtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wQWxsU2VydmljZSgpIHtcbiAgICB0aGlzLk9ibml6LnNlbmQoe1xuICAgICAgYmxlOiB7XG4gICAgICAgIHBlcmlwaGVyYWw6IG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuX3NlcnZpY2VzID0gW107XG4gIH1cblxuICBwdWJsaWMgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXJ2aWNlczogdGhpcy5fc2VydmljZXMsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kQ2hhcmFjdGVyaXN0aWMocGFyYW06IGFueSkge1xuICAgIGNvbnN0IHNlcnZpY2VVdWlkOiBhbnkgPSBCbGVIZWxwZXIudXVpZEZpbHRlcihwYXJhbS5zZXJ2aWNlX3V1aWQpO1xuICAgIGNvbnN0IGNoYXJhY3RlcmlzdGljVXVpZDogYW55ID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uY2hhcmFjdGVyaXN0aWNfdXVpZCk7XG4gICAgY29uc3QgczogYW55ID0gdGhpcy5nZXRTZXJ2aWNlKHNlcnZpY2VVdWlkKTtcbiAgICBpZiAocykge1xuICAgICAgcmV0dXJuIHMuZ2V0Q2hhcmFjdGVyaXN0aWMoY2hhcmFjdGVyaXN0aWNVdWlkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgZmluZERlc2NyaXB0b3IocGFyYW06IGFueSkge1xuICAgIGNvbnN0IGRlc2NyaXB0b3JVdWlkOiBhbnkgPSBCbGVIZWxwZXIudXVpZEZpbHRlcihwYXJhbS5kZXNjcmlwdG9yX3V1aWQpO1xuICAgIGNvbnN0IGM6IGFueSA9IHRoaXMuZmluZENoYXJhY3RlcmlzdGljKHBhcmFtKTtcbiAgICBpZiAoYykge1xuICAgICAgcmV0dXJuIGMuZ2V0RGVzY3JpcHRvcihkZXNjcmlwdG9yVXVpZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHVibGljIGVuZCgpIHtcbiAgICB0aGlzLk9ibml6LnNlbmQoe2JsZToge3BlcmlwaGVyYWw6IG51bGx9fSk7XG4gIH1cblxuICBwdWJsaWMgb25jb25uZWN0aW9udXBkYXRlcygpIHtcbiAgfVxuXG4gIHB1YmxpYyBvbmVycm9yKCkge1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZVBlcmlwaGVyYWw7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleRemoteAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAttributeAbstract.js"));
class BleRemoteAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.isRemote = false;
        this.discoverdOnRemote = false;
    }
    get wsChildUuidName() {
        const childrenName = this.childrenName;
        if (!childrenName) {
            return null;
        }
        const childName = childrenName.slice(0, -1);
        return childName + "_uuid";
    }
    discoverChildren() {
    }
    discoverChildrenWait() {
        return new Promise((resolve) => {
            this.emitter.once("discoverfinished", () => {
                const children = this.children.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                resolve(children);
            });
            this.discoverChildren();
        });
    }
    /**
     * CALLBACKS
     */
    ondiscover(child) {
    }
    ondiscoverfinished(children) {
    }
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        switch (notifyName) {
            case "discover": {
                const uuid = params[this.wsChildUuidName];
                let child = this.getChild(uuid);
                if (!child) {
                    child = this.addChild({ uuid });
                }
                child.discoverdOnRemote = true;
                child.properties = params.properties || [];
                this.ondiscover(child);
                break;
            }
            case "discoverfinished": {
                const children = this.children.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                this.ondiscoverfinished(children);
                break;
            }
        }
    }
}
exports.default = BleRemoteAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRkFBMEQ7QUFFMUQsTUFBTSwwQkFBMkIsU0FBUSw4QkFBb0I7SUFTM0QsWUFBWSxNQUFXO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixNQUFNLFlBQVksR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sU0FBUyxHQUFRLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsT0FBTyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQzdCLENBQUM7SUFFTSxnQkFBZ0I7SUFDdkIsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixPQUFPLElBQUksT0FBTyxDQUFFLENBQUMsT0FBWSxFQUFHLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO2dCQUN6QyxNQUFNLFFBQVEsR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDLEdBQVEsRUFBRyxFQUFFO29CQUN4RCxPQUFPLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVLENBQUMsS0FBVTtJQUM1QixDQUFDO0lBRU0sa0JBQWtCLENBQUMsUUFBYTtJQUN2QyxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsVUFBZSxFQUFFLE1BQVc7UUFDbEQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQyxRQUFRLFVBQVUsRUFBRTtZQUNsQixLQUFLLFVBQVUsQ0FBQyxDQUFDO2dCQUNmLE1BQU0sSUFBSSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZ0IsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEtBQUssR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNWLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztpQkFDL0I7Z0JBQ0QsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztnQkFDL0IsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsTUFBTTthQUNQO1lBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLFFBQVEsR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDLEdBQVEsRUFBRyxFQUFFO29CQUN4RCxPQUFPLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNsQyxNQUFNO2FBQ1A7U0FDRjtJQUNILENBQUM7Q0FDRjtBQUVELGtCQUFlLDBCQUEwQixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlQXR0cmlidXRlQWJzdHJhY3QgZnJvbSBcIi4vYmxlQXR0cmlidXRlQWJzdHJhY3RcIjtcblxuY2xhc3MgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QgZXh0ZW5kcyBCbGVBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIHB1YmxpYyBpc1JlbW90ZTogYW55O1xuICBwdWJsaWMgZGlzY292ZXJkT25SZW1vdGU6IGFueTtcbiAgcHVibGljIGNoaWxkcmVuTmFtZTogYW55O1xuICBwdWJsaWMgZW1pdHRlcjogYW55O1xuICBwdWJsaWMgY2hpbGRyZW46IGFueTtcbiAgcHVibGljIGdldENoaWxkOiBhbnk7XG4gIHB1YmxpYyBhZGRDaGlsZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55KSB7XG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIHRoaXMuaXNSZW1vdGUgPSBmYWxzZTtcbiAgICB0aGlzLmRpc2NvdmVyZE9uUmVtb3RlID0gZmFsc2U7XG4gIH1cblxuICBnZXQgd3NDaGlsZFV1aWROYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IGNoaWxkcmVuTmFtZTogYW55ID0gdGhpcy5jaGlsZHJlbk5hbWU7XG4gICAgaWYgKCFjaGlsZHJlbk5hbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZE5hbWU6IGFueSA9IGNoaWxkcmVuTmFtZS5zbGljZSgwLCAtMSk7XG4gICAgcmV0dXJuIGNoaWxkTmFtZSArIFwiX3V1aWRcIjtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb3ZlckNoaWxkcmVuKCkge1xuICB9XG5cbiAgcHVibGljIGRpc2NvdmVyQ2hpbGRyZW5XYWl0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSAoKHJlc29sdmU6IGFueSApID0+IHtcbiAgICAgIHRoaXMuZW1pdHRlci5vbmNlKFwiZGlzY292ZXJmaW5pc2hlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuOiBhbnkgPSB0aGlzLmNoaWxkcmVuLmZpbHRlciAoKGVsbTogYW55ICkgPT4ge1xuICAgICAgICAgIHJldHVybiBlbG0uZGlzY292ZXJkT25SZW1vdGU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKGNoaWxkcmVuKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNjb3ZlckNoaWxkcmVuKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ0FMTEJBQ0tTXG4gICAqL1xuICBwdWJsaWMgb25kaXNjb3ZlcihjaGlsZDogYW55KSB7XG4gIH1cblxuICBwdWJsaWMgb25kaXNjb3ZlcmZpbmlzaGVkKGNoaWxkcmVuOiBhbnkpIHtcbiAgfVxuXG4gIHB1YmxpYyBub3RpZnlGcm9tU2VydmVyKG5vdGlmeU5hbWU6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICBzdXBlci5ub3RpZnlGcm9tU2VydmVyKG5vdGlmeU5hbWUsIHBhcmFtcyk7XG4gICAgc3dpdGNoIChub3RpZnlOYW1lKSB7XG4gICAgICBjYXNlIFwiZGlzY292ZXJcIjoge1xuICAgICAgICBjb25zdCB1dWlkOiBhbnkgPSBwYXJhbXNbdGhpcy53c0NoaWxkVXVpZE5hbWUhXTtcbiAgICAgICAgbGV0IGNoaWxkOiBhbnkgPSB0aGlzLmdldENoaWxkKHV1aWQpO1xuICAgICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgICAgY2hpbGQgPSB0aGlzLmFkZENoaWxkKHt1dWlkfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuZGlzY292ZXJkT25SZW1vdGUgPSB0cnVlO1xuICAgICAgICBjaGlsZC5wcm9wZXJ0aWVzID0gcGFyYW1zLnByb3BlcnRpZXMgfHwgW107XG4gICAgICAgIHRoaXMub25kaXNjb3ZlcihjaGlsZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImRpc2NvdmVyZmluaXNoZWRcIjoge1xuICAgICAgICBjb25zdCBjaGlsZHJlbjogYW55ID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIgKChlbG06IGFueSApID0+IHtcbiAgICAgICAgICByZXR1cm4gZWxtLmRpc2NvdmVyZE9uUmVtb3RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbmRpc2NvdmVyZmluaXNoZWQoY2hpbGRyZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3Q7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleRemoteCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteAttributeAbstract.js"));
const bleRemoteDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteDescriptor.js"));
class BleRemoteCharacteristic extends bleRemoteAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.properties = params.properties || [];
        if (!Array.isArray(this.properties)) {
            this.properties = [this.properties];
        }
    }
    get parentName() {
        return "service";
    }
    get childrenClass() {
        return bleRemoteDescriptor_1.default;
    }
    get childrenName() {
        return "descriptors";
    }
    get descriptors() {
        return this.children;
    }
    addDescriptor(params) {
        return this.addChild(params);
    }
    //
    // getCharacteristic(params) {
    //   return this.getChild(params)
    // }
    getDescriptor(uuid) {
        return this.getChild(uuid);
    }
    registerNotify(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.onnotify = callback;
            const cccd = this.getDescriptor("2902");
            yield cccd.writeWait([0x01, 0x00]);
            const obj = {
                ble: {
                    register_notify_characteristic: {
                        address: this.service.peripheral.address,
                        service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                        characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    },
                },
            };
            this.service.peripheral.Obniz.send(obj);
        });
    }
    registerNotifyWait(callback) {
        return new Promise((resolve) => {
            this.emitter.once("onregisternotify", () => {
                resolve();
            });
            this.registerNotify(callback);
        });
    }
    unregisterNotify() {
        this.onnotify = () => {
        };
        const obj = {
            ble: {
                unregister_notify_characteristic: {
                    address: this.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                },
            },
        };
        this.service.peripheral.Obniz.send(obj);
    }
    unregisterNotifyWait() {
        return new Promise((resolve) => {
            this.emitter.once("onunregisternotify", () => {
                resolve();
            });
            this.unregisterNotify();
        });
    }
    read() {
        const obj = {
            ble: {
                read_characteristic: {
                    address: this.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                },
            },
        };
        this.service.peripheral.Obniz.send(obj);
    }
    write(array, needResponse) {
        if (needResponse === undefined) {
            needResponse = true;
        }
        const obj = {
            ble: {
                write_characteristic: {
                    address: this.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    data: array,
                    needResponse,
                },
            },
        };
        this.service.peripheral.Obniz.send(obj);
    }
    discoverChildren() {
        const obj = {
            ble: {
                get_descriptors: {
                    address: this.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                },
            },
        };
        this.service.peripheral.Obniz.send(obj);
    }
    discoverAllDescriptors() {
        return this.discoverChildren();
    }
    discoverAllDescriptorsWait() {
        return this.discoverChildrenWait();
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        return obj;
    }
    canBroadcast() {
        return this.properties.includes("broadcast");
    }
    canNotify() {
        return this.properties.includes("notify");
    }
    canRead() {
        return this.properties.includes("read");
    }
    canWrite() {
        return this.properties.includes("write");
    }
    canWriteWithoutResponse() {
        return this.properties.includes("write_without_response");
    }
    canIndicate() {
        return this.properties.includes("indicate");
    }
    ondiscover(descriptor) {
        this.ondiscoverdescriptor(descriptor);
    }
    ondiscoverfinished(descriptors) {
        this.ondiscoverdescriptorfinished(descriptors);
    }
    ondiscoverdescriptor(descriptors) {
    }
    ondiscoverdescriptorfinished(descriptors) {
    }
    onregisternotify() {
    }
    onunregisternotify() {
    }
    onnotify(data) {
    }
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        switch (notifyName) {
            case "onregisternotify": {
                this.onregisternotify();
                break;
            }
            case "onunregisternotify": {
                this.onunregisternotify();
                break;
            }
            case "onnotify": {
                this.onnotify(params.data || undefined);
                break;
            }
        }
    }
}
exports.default = BleRemoteCharacteristic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleRemoteDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteAttributeAbstract.js"));
class BleRemoteDescriptor extends bleRemoteAttributeAbstract_1.default {
    constructor(params) {
        super(params);
    }
    get parentName() {
        return "characteristic";
    }
    read() {
        const obj = {
            ble: {
                read_descriptor: {
                    address: this.characteristic.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.characteristic.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.characteristic.uuid),
                    descriptor_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                },
            },
        };
        this.characteristic.service.peripheral.Obniz.send(obj);
    }
    write(array, needResponse) {
        if (needResponse === undefined) {
            needResponse = true;
        }
        const obj = {
            ble: {
                write_descriptor: {
                    address: this.characteristic.service.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.characteristic.service.uuid),
                    characteristic_uuid: bleHelper_1.default.uuidFilter(this.characteristic.uuid),
                    descriptor_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    data: array,
                    needResponse,
                },
            },
        };
        this.characteristic.service.peripheral.Obniz.send(obj);
    }
}
exports.default = BleRemoteDescriptor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUmVtb3RlRGVzY3JpcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUNwQyw4RkFBc0U7QUFFdEUsTUFBTSxtQkFBb0IsU0FBUSxvQ0FBMEI7SUFJMUQsWUFBWSxNQUFXO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRU0sSUFBSTtRQUNULE1BQU0sR0FBRyxHQUFRO1lBQ2YsR0FBRyxFQUFFO2dCQUNILGVBQWUsRUFBRTtvQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU87b0JBQ3ZELFlBQVksRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ3BFLG1CQUFtQixFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO29CQUNuRSxlQUFlLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDakQ7YUFDRjtTQUNGLENBQUM7UUFDRixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQVUsRUFBRSxZQUFpQjtRQUN4QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDOUIsWUFBWSxHQUFHLElBQUksQ0FBQztTQUNyQjtRQUNELE1BQU0sR0FBRyxHQUFRO1lBQ2YsR0FBRyxFQUFFO2dCQUNILGdCQUFnQixFQUFFO29CQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU87b0JBQ3ZELFlBQVksRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ3BFLG1CQUFtQixFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO29CQUNuRSxlQUFlLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDaEQsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsWUFBWTtpQkFDYjthQUNGO1NBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQUVELGtCQUFlLG1CQUFtQixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUmVtb3RlRGVzY3JpcHRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVIZWxwZXIgZnJvbSBcIi4vYmxlSGVscGVyXCI7XG5pbXBvcnQgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QgZnJvbSBcIi4vYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3RcIjtcblxuY2xhc3MgQmxlUmVtb3RlRGVzY3JpcHRvciBleHRlbmRzIEJsZVJlbW90ZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIGNoYXJhY3RlcmlzdGljOiBhbnk7XG4gIHB1YmxpYyB1dWlkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkpIHtcbiAgICBzdXBlcihwYXJhbXMpO1xuICB9XG5cbiAgZ2V0IHBhcmVudE5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwiY2hhcmFjdGVyaXN0aWNcIjtcbiAgfVxuXG4gIHB1YmxpYyByZWFkKCkge1xuICAgIGNvbnN0IG9iajogYW55ID0ge1xuICAgICAgYmxlOiB7XG4gICAgICAgIHJlYWRfZGVzY3JpcHRvcjoge1xuICAgICAgICAgIGFkZHJlc3M6IHRoaXMuY2hhcmFjdGVyaXN0aWMuc2VydmljZS5wZXJpcGhlcmFsLmFkZHJlc3MsXG4gICAgICAgICAgc2VydmljZV91dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcih0aGlzLmNoYXJhY3RlcmlzdGljLnNlcnZpY2UudXVpZCksXG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWNfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy5jaGFyYWN0ZXJpc3RpYy51dWlkKSxcbiAgICAgICAgICBkZXNjcmlwdG9yX3V1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMudXVpZCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWwuT2JuaXouc2VuZChvYmopO1xuICB9XG5cbiAgcHVibGljIHdyaXRlKGFycmF5OiBhbnksIG5lZWRSZXNwb25zZTogYW55KSB7XG4gICAgaWYgKG5lZWRSZXNwb25zZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZWVkUmVzcG9uc2UgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBvYmo6IGFueSA9IHtcbiAgICAgIGJsZToge1xuICAgICAgICB3cml0ZV9kZXNjcmlwdG9yOiB7XG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWwuYWRkcmVzcyxcbiAgICAgICAgICBzZXJ2aWNlX3V1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMuY2hhcmFjdGVyaXN0aWMuc2VydmljZS51dWlkKSxcbiAgICAgICAgICBjaGFyYWN0ZXJpc3RpY191dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcih0aGlzLmNoYXJhY3RlcmlzdGljLnV1aWQpLFxuICAgICAgICAgIGRlc2NyaXB0b3JfdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy51dWlkKSxcbiAgICAgICAgICBkYXRhOiBhcnJheSxcbiAgICAgICAgICBuZWVkUmVzcG9uc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWwuT2JuaXouc2VuZChvYmopO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZVJlbW90ZURlc2NyaXB0b3I7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleRemotePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
const bleRemoteService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteService.js"));
class BleRemotePeripheral {
    constructor(Obniz, address) {
        this.Obniz = Obniz;
        this.address = address;
        this.connected = false;
        this.device_type = null;
        this.address_type = null;
        this.ble_event_type = null;
        this.rssi = null;
        this.adv_data = null;
        this.scan_resp = null;
        this.keys = [
            "device_type",
            "address_type",
            "ble_event_type",
            "rssi",
            "adv_data",
            "scan_resp",
        ];
        this._services = [];
        this.emitter = new emitter();
    }
    get services() {
        return this._services;
    }
    /**
     *
     * @return {String} json value
     */
    toString() {
        return JSON.stringify({
            address: this.address,
            addressType: this.address_type,
            advertisement: this.adv_data,
            scanResponse: this.scan_resp,
            rssi: this.rssi,
        });
    }
    setParams(dic) {
        this.advertise_data_rows = null;
        for (const key in dic) {
            if (dic.hasOwnProperty(key) && this.keys.includes(key)) {
                this[key] = dic[key];
            }
        }
        this.analyseAdvertisement();
    }
    analyseAdvertisement() {
        if (!this.advertise_data_rows) {
            this.advertise_data_rows = [];
            if (this.adv_data) {
                for (let i = 0; i < this.adv_data.length; i++) {
                    const length = this.adv_data[i];
                    const arr = new Array(length);
                    for (let j = 0; j < length; j++) {
                        arr[j] = this.adv_data[i + j + 1];
                    }
                    this.advertise_data_rows.push(arr);
                    i = i + length;
                }
            }
            if (this.scan_resp) {
                for (let i = 0; i < this.scan_resp.length; i++) {
                    const length = this.scan_resp[i];
                    const arr = new Array(length);
                    for (let j = 0; j < length; j++) {
                        arr[j] = this.scan_resp[i + j + 1];
                    }
                    this.advertise_data_rows.push(arr);
                    i = i + length;
                }
            }
            this.setLocalName();
            this.setIBeacon();
        }
    }
    searchTypeVal(type) {
        this.analyseAdvertisement();
        for (let i = 0; i < this.advertise_data_rows.length; i++) {
            if (this.advertise_data_rows[i][0] === type) {
                const results = [].concat(this.advertise_data_rows[i]);
                results.shift();
                return results;
            }
        }
        return undefined;
    }
    setLocalName() {
        let data = this.searchTypeVal(0x09);
        if (!data) {
            data = this.searchTypeVal(0x08);
        }
        if (!data) {
            this.localName = null;
        }
        else {
            this.localName = String.fromCharCode.apply(null, data);
        }
    }
    setIBeacon() {
        const data = this.searchTypeVal(0xff);
        if (!data ||
            data[0] !== 0x4c ||
            data[1] !== 0x00 ||
            data[2] !== 0x02 ||
            data[3] !== 0x15 ||
            data.length !== 25) {
            this.iBeacon = null;
            return;
        }
        const uuidData = data.slice(4, 20);
        let uuid = "";
        for (let i = 0; i < uuidData.length; i++) {
            uuid = uuid + ("00" + uuidData[i].toString(16)).slice(-2);
            if (i === 4 - 1 ||
                i === 4 + 2 - 1 ||
                i === 4 + 2 * 2 - 1 ||
                i === 4 + 2 * 3 - 1) {
                uuid += "-";
            }
        }
        const major = (data[20] << 8) + data[21];
        const minor = (data[22] << 8) + data[23];
        const power = data[24];
        this.iBeacon = {
            uuid,
            major,
            minor,
            power,
            rssi: this.rssi,
        };
    }
    _addServiceUuids(results, data, bit) {
        if (!data) {
            return;
        }
        const uuidLength = bit / 4;
        for (let i = 0; i < data.length; i = i + uuidLength) {
            const one = data.slice(i, i + uuidLength);
            results.push(this.Obniz.ble.constructor._dataArray2uuidHex(one, true));
        }
    }
    advertisementServiceUuids() {
        const results = [];
        this._addServiceUuids(results, this.searchTypeVal(0x02), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x03), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x04), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x05), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x06), 64);
        this._addServiceUuids(results, this.searchTypeVal(0x07), 64);
        return results;
    }
    connect() {
        this.Obniz.ble.scan.end();
        const obj = {
            ble: {
                connect: {
                    address: this.address,
                },
            },
        };
        this.Obniz.send(obj);
    }
    connectWait() {
        return new Promise((resolve, reject) => {
            this.emitter.once("statusupdate", (params) => {
                if (params.status === "connected") {
                    resolve(true);
                }
                else {
                    reject(new Error("connection not established"));
                }
            });
            this.connect();
        });
    }
    disconnect() {
        const obj = {
            ble: {
                disconnect: {
                    address: this.address,
                },
            },
        };
        this.Obniz.send(obj);
    }
    disconnectWait() {
        return new Promise((resolve, reject) => {
            this.emitter.once("statusupdate", (params) => {
                if (params.status === "disconnected") {
                    resolve(true);
                }
                else {
                    reject(new Error("disconnectWait failed"));
                }
            });
            this.disconnect();
        });
    }
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        for (const key in this._services) {
            if (this._services[key].uuid === uuid) {
                return this._services[key];
            }
        }
        return undefined;
    }
    findService(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        return this.getService(serviceUuid);
    }
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    discoverAllServices() {
        const obj = {
            ble: {
                get_services: {
                    address: this.address,
                },
            },
        };
        this.Obniz.send(obj);
    }
    discoverAllServicesWait() {
        return new Promise((resolve) => {
            this.emitter.once("discoverfinished", () => {
                const children = this._services.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                resolve(children);
            });
            this.discoverAllServices();
        });
    }
    discoverAllHandlesWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ArrayFlat = (array, depth) => {
                const flattend = [];
                const flat = (_array, _depth) => {
                    for (const el of _array) {
                        if (Array.isArray(el) && _depth > 0) {
                            flat(el, _depth - 1);
                        }
                        else {
                            flattend.push(el);
                        }
                    }
                };
                flat(array, Math.floor(depth) || 1);
                return flattend;
            };
            const services = yield this.discoverAllServicesWait();
            const charsNest = yield Promise.all(services.map((s) => s.discoverAllCharacteristicsWait()));
            const chars = ArrayFlat(charsNest);
            const descriptorsNest = yield Promise.all(chars.map((c) => c.discoverAllDescriptorsWait()));
            // eslint-disable-next-line no-unused-vars
            const descriptors = ArrayFlat(descriptorsNest);
        });
    }
    onconnect() {
    }
    ondisconnect() {
    }
    ondiscoverservice(child) {
    }
    ondiscoverservicefinished(children) {
    }
    ondiscover() {
    }
    ondiscoverfinished() {
    }
    notifyFromServer(notifyName, params) {
        return __awaiter(this, void 0, void 0, function* () {
            this.emitter.emit(notifyName, params);
            switch (notifyName) {
                case "statusupdate": {
                    if (params.status === "connected") {
                        this.connected = true;
                        yield this.discoverAllHandlesWait();
                        this.onconnect();
                    }
                    if (params.status === "disconnected") {
                        this.connected = false;
                        this.ondisconnect();
                    }
                    break;
                }
                case "discover": {
                    const uuid = params.service_uuid;
                    let child = this.getService(uuid);
                    if (!child) {
                        const newService = new bleRemoteService_1.default({ uuid });
                        newService.parent = this;
                        this._services.push(newService);
                        child = newService;
                    }
                    child.discoverdOnRemote = true;
                    this.ondiscoverservice(child);
                    break;
                }
                case "discoverfinished": {
                    const children = this._services.filter((elm) => {
                        return elm.discoverdOnRemote;
                    });
                    this.ondiscoverservicefinished(children);
                    break;
                }
            }
        });
    }
    onerror() {
    }
}
exports.default = BleRemotePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleRemoteService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteAttributeAbstract.js"));
const bleRemoteCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleRemoteCharacteristic.js"));
class BleRemoteService extends bleRemoteAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
    }
    get parentName() {
        return "peripheral";
    }
    get childrenClass() {
        return bleRemoteCharacteristic_1.default;
    }
    get childrenName() {
        return "characteristics";
    }
    get characteristics() {
        return this.children;
    }
    addCharacteristic(params) {
        return this.addChild(params);
    }
    getCharacteristic(params) {
        return this.getChild(params);
    }
    discoverAllCharacteristics() {
        return this.discoverChildren();
    }
    discoverAllCharacteristicsWait() {
        return this.discoverChildrenWait();
    }
    discoverChildren() {
        const obj = {
            ble: {
                get_characteristics: {
                    address: this.peripheral.address,
                    service_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                },
            },
        };
        this.parent.Obniz.send(obj);
    }
    ondiscover(characteristic) {
        this.ondiscovercharacteristic(characteristic);
    }
    ondiscoverfinished(characteristics) {
        this.ondiscovercharacteristicfinished(characteristics);
    }
    ondiscovercharacteristic(characteristic) {
    }
    ondiscovercharacteristicfinished(characteristics) {
    }
}
exports.default = BleRemoteService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUmVtb3RlU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUNwQyw4RkFBc0U7QUFDdEUsd0ZBQWdFO0FBRWhFLE1BQU0sZ0JBQWlCLFNBQVEsb0NBQTBCO0lBU3ZELFlBQVksR0FBUTtRQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8saUNBQXVCLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE1BQVc7UUFDbEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxNQUFXO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sMEJBQTBCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVNLDhCQUE4QjtRQUNuQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsTUFBTSxHQUFHLEdBQVE7WUFDZixHQUFHLEVBQUU7Z0JBQ0gsbUJBQW1CLEVBQUU7b0JBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87b0JBQ2hDLFlBQVksRUFBRSxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2lCQUM5QzthQUNGO1NBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sVUFBVSxDQUFDLGNBQW1CO1FBQ25DLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sa0JBQWtCLENBQUMsZUFBb0I7UUFDNUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSx3QkFBd0IsQ0FBQyxjQUFtQjtJQUNuRCxDQUFDO0lBRU0sZ0NBQWdDLENBQUMsZUFBc0I7SUFDOUQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZS9ibGVSZW1vdGVTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcbmltcG9ydCBCbGVSZW1vdGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVSZW1vdGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZVJlbW90ZUNoYXJhY3RlcmlzdGljIGZyb20gXCIuL2JsZVJlbW90ZUNoYXJhY3RlcmlzdGljXCI7XG5cbmNsYXNzIEJsZVJlbW90ZVNlcnZpY2UgZXh0ZW5kcyBCbGVSZW1vdGVBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIHB1YmxpYyBjaGlsZHJlbjogYW55O1xuICBwdWJsaWMgYWRkQ2hpbGQ6IGFueTtcbiAgcHVibGljIGdldENoaWxkOiBhbnk7XG4gIHB1YmxpYyBkaXNjb3ZlckNoaWxkcmVuV2FpdDogYW55O1xuICBwdWJsaWMgcGVyaXBoZXJhbDogYW55O1xuICBwdWJsaWMgdXVpZDogYW55O1xuICBwdWJsaWMgcGFyZW50OiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JqOiBhbnkpIHtcbiAgICBzdXBlcihvYmopO1xuICB9XG5cbiAgZ2V0IHBhcmVudE5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwicGVyaXBoZXJhbFwiO1xuICB9XG5cbiAgZ2V0IGNoaWxkcmVuQ2xhc3MoKTogYW55IHtcbiAgICByZXR1cm4gQmxlUmVtb3RlQ2hhcmFjdGVyaXN0aWM7XG4gIH1cblxuICBnZXQgY2hpbGRyZW5OYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBcImNoYXJhY3RlcmlzdGljc1wiO1xuICB9XG5cbiAgZ2V0IGNoYXJhY3RlcmlzdGljcygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgfVxuXG4gIHB1YmxpYyBhZGRDaGFyYWN0ZXJpc3RpYyhwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmFkZENoaWxkKHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2hhcmFjdGVyaXN0aWMocGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDaGlsZChwYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGRpc2NvdmVyQWxsQ2hhcmFjdGVyaXN0aWNzKCkge1xuICAgIHJldHVybiB0aGlzLmRpc2NvdmVyQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb3ZlckFsbENoYXJhY3RlcmlzdGljc1dhaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzY292ZXJDaGlsZHJlbldhaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb3ZlckNoaWxkcmVuKCkge1xuICAgIGNvbnN0IG9iajogYW55ID0ge1xuICAgICAgYmxlOiB7XG4gICAgICAgIGdldF9jaGFyYWN0ZXJpc3RpY3M6IHtcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLnBlcmlwaGVyYWwuYWRkcmVzcyxcbiAgICAgICAgICBzZXJ2aWNlX3V1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMudXVpZCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5wYXJlbnQuT2JuaXouc2VuZChvYmopO1xuICB9XG5cbiAgcHVibGljIG9uZGlzY292ZXIoY2hhcmFjdGVyaXN0aWM6IGFueSkge1xuICAgIHRoaXMub25kaXNjb3ZlcmNoYXJhY3RlcmlzdGljKGNoYXJhY3RlcmlzdGljKTtcbiAgfVxuXG4gIHB1YmxpYyBvbmRpc2NvdmVyZmluaXNoZWQoY2hhcmFjdGVyaXN0aWNzOiBhbnkpIHtcbiAgICB0aGlzLm9uZGlzY292ZXJjaGFyYWN0ZXJpc3RpY2ZpbmlzaGVkKGNoYXJhY3RlcmlzdGljcyk7XG4gIH1cblxuICBwdWJsaWMgb25kaXNjb3ZlcmNoYXJhY3RlcmlzdGljKGNoYXJhY3RlcmlzdGljOiBhbnkpIHtcbiAgfVxuXG4gIHB1YmxpYyBvbmRpc2NvdmVyY2hhcmFjdGVyaXN0aWNmaW5pc2hlZChjaGFyYWN0ZXJpc3RpY3M6IGFueVtdKSB7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlUmVtb3RlU2VydmljZTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleScan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleScan {
    constructor(Obniz) {
        this.scanTarget = null;
        this.Obniz = Obniz;
        this.emitter = new emitter();
        this.scanedPeripherals = [];
    }
    start(target, settings) {
        const obj = {};
        obj.ble = {};
        obj.ble.scan = {
            //    "targetUuid" : settings && settings.targetUuid ? settings.targetUuid : null,
            //    "interval" : settings && settings.interval ? settings.interval : 30,
            duration: settings && settings.duration ? settings.duration : 30,
        };
        if (settings && settings.duplicate) {
            throw new Error(`duplicate property can only be used with obnizOS3 or later`);
        }
        this.scanTarget = target;
        if (this.scanTarget &&
            this.scanTarget.uuids &&
            Array.isArray(this.scanTarget.uuids)) {
            this.scanTarget.uuids = this.scanTarget.uuids.map((elm) => {
                return bleHelper_1.default.uuidFilter(elm);
            });
        }
        this.scanedPeripherals = [];
        this.Obniz.send(obj);
    }
    startOneWait(target, settings) {
        let state = 0;
        return new Promise((resolve) => {
            this.emitter.once("onfind", (param) => {
                if (state === 0) {
                    state = 1;
                    this.end();
                    resolve(param);
                }
            });
            this.emitter.once("onfinish", () => {
                if (state === 0) {
                    state = 1;
                    resolve(null);
                }
            });
            this.start(target, settings);
        });
    }
    startAllWait(target, settings) {
        return new Promise((resolve) => {
            this.emitter.once("onfinish", () => {
                resolve(this.scanedPeripherals);
            });
            this.start(target, settings);
        });
    }
    end() {
        const obj = {};
        obj.ble = {};
        obj.ble.scan = null;
        this.Obniz.send(obj);
    }
    isTarget(peripheral) {
        if (this.scanTarget &&
            this.scanTarget.localName &&
            peripheral.localName !== this.scanTarget.localName) {
            return false;
        }
        if (this.scanTarget && this.scanTarget.uuids) {
            const uuids = peripheral.advertisementServiceUuids().map((e) => {
                return bleHelper_1.default.uuidFilter(e);
            });
            for (const uuid of this.scanTarget.uuids) {
                if (!uuids.includes(uuid)) {
                    return false;
                }
            }
        }
        return true;
    }
    onfinish(scanedPeripherals) {
    } // dummy
    onfind(params) {
    } // dummy
    notifyFromServer(notifyName, params) {
        switch (notifyName) {
            case "onfind": {
                if (this.isTarget(params)) {
                    this.scanedPeripherals.push(params);
                    this.emitter.emit(notifyName, params);
                    this.onfind(params);
                }
                break;
            }
            case "onfinish": {
                this.emitter.emit(notifyName, this.scanedPeripherals);
                this.onfinish(this.scanedPeripherals);
                break;
            }
        }
    }
}
exports.default = BleScan;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleSecurity.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const semver = __webpack_require__("./node_modules/semver/semver.js");
class BleSecurity {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.emitter = new emitter();
    }
    setModeLevel(mode, level) {
        let auth;
        let keys;
        let indicateSecurityLevel;
        if (mode === 1) {
            if (level === 1) {
                auth = [];
                indicateSecurityLevel = 0; // no pairing request
                keys = ["LTK", "IRK"];
            }
            else if (level === 2) {
                auth = ["bonding"];
                indicateSecurityLevel = 2;
                keys = ["LTK", "IRK"];
            }
            else if (level === 3) {
                // TODO
                // auth = ['bonding','mitm'];
                // indicateSecurityLevel = 3;
                // keys = ['LTK', 'IRK'];
            }
        }
        else if (mode === 2) {
            if (level === 1) {
                // TODO
                // auth = [];
                // keys = ['LTK', 'IRK','CSRK'];
            }
            else if (level === 2) {
                // TODO
                // auth = ['bonding'];
                // keys = ['LTK', 'IRK','CSRK'];
            }
        }
        if (auth !== undefined &&
            indicateSecurityLevel !== undefined &&
            keys !== undefined) {
            this.setAuth(auth);
            this.setIndicateSecurityLevel(indicateSecurityLevel);
            this.setEnableKeyTypes(keys);
        }
        else {
            const msg = `BLE security mode${mode}, level${level} is not available.`;
            this.Obniz.error(msg);
            throw new Error(msg);
        }
    }
    checkIntroducedFirmware(introducedVersion, functionName) {
        const results = semver.lt(this.Obniz.firmware_ver, introducedVersion);
        if (results) {
            const msg = `${functionName} is available obniz firmware ${introducedVersion}.( your obniz version is ${this.Obniz.firmware_ver})`;
            this.Obniz.error(msg);
            throw new Error(msg);
        }
    }
    setAuth(authTypes) {
        this.checkIntroducedFirmware("1.1.0", "setAuth");
        if (!Array.isArray(authTypes)) {
            authTypes = [authTypes];
        }
        const sendTypes = authTypes
            .map((elm) => {
            return elm.toLowerCase();
        })
            .filter((elm) => {
            return ["mitm", "secure_connection", "bonding"].includes(elm);
        });
        if (sendTypes.length !== authTypes.length) {
            throw new Error("unknown auth type");
        }
        this.Obniz.send({
            ble: {
                security: {
                    auth: authTypes,
                },
            },
        });
    }
    setIndicateSecurityLevel(level) {
        this.checkIntroducedFirmware("1.1.0", "setIndicateSecurityLevel");
        if (typeof level !== "number") {
            throw new Error("unknown secrity level : " + level);
        }
        this.Obniz.send({
            ble: {
                security: {
                    indicate_security_level: level,
                },
            },
        });
    }
    setEnableKeyTypes(keyTypes) {
        this.checkIntroducedFirmware("1.1.0", "setEnableKeyTypes");
        if (!Array.isArray(keyTypes)) {
            keyTypes = [keyTypes];
        }
        const sendTypes = keyTypes
            .map((elm) => {
            return elm.toLowerCase();
        })
            .filter((elm) => {
            return ["ltk", "csrk", "irk"].includes(elm);
        });
        if (sendTypes.length !== keyTypes.length) {
            throw new Error("unknown key type");
        }
        this.Obniz.send({
            ble: {
                security: {
                    key: { type: sendTypes },
                },
            },
        });
    }
    setKeyMaxSize(size) {
        this.checkIntroducedFirmware("1.1.0", "setKeyMaxSize");
        if (typeof size !== "number") {
            throw new Error("please provide key size in number");
        }
        this.Obniz.send({
            ble: {
                security: {
                    key: { max_size: size },
                },
            },
        });
    }
    clearBondingDevicesList() {
        this.Obniz.send({
            ble: {
                security: {
                    devices: { clear: true },
                },
            },
        });
    }
    onerror(params) {
    } // dummy
    notifyFromServer(notifyName, params) {
        switch (notifyName) {
            case "onerror": {
                this.onerror(params);
                break;
            }
        }
    }
}
exports.default = BleSecurity;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/ble/bleService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleAttributeAbstract.js"));
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleCharacteristic.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/ble/bleHelper.js"));
class BleService extends bleAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.addCharacteristic = this.addChild;
        this.getCharacteristic = this.getChild;
    }
    get parentName() {
        return "peripheral";
    }
    get childrenName() {
        return "characteristics";
    }
    get childrenClass() {
        return bleCharacteristic_1.default;
    }
    get advData() {
        return {
            flags: ["general_discoverable_mode", "br_edr_not_supported"],
            serviceUuids: [this.uuid],
        };
    }
    end() {
        this.peripheral.Obniz.send({
            ble: {
                peripheral: {
                    stop_service: {
                        service_uuid: bleHelper_1.default.uuidFilter(this.uuid),
                    },
                },
            },
        });
        this.peripheral.removeService(this.uuid);
    }
    notify(notifyName, params) {
        // nothing
    }
}
exports.default = BleService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtGQUEwRDtBQUMxRCw0RUFBb0Q7QUFDcEQsNERBQW9DO0FBRXBDLE1BQU0sVUFBVyxTQUFRLDhCQUFvQjtJQVEzQyxZQUFZLEdBQVE7UUFDbEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVgsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLDJCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPO1lBQ0wsS0FBSyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsc0JBQXNCLENBQUM7WUFDNUQsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVNLEdBQUc7UUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDekIsR0FBRyxFQUFFO2dCQUNILFVBQVUsRUFBRTtvQkFDVixZQUFZLEVBQUU7d0JBQ1osWUFBWSxFQUFFLG1CQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7cUJBQzlDO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFlLEVBQUUsTUFBVztRQUN4QyxVQUFVO0lBQ1osQ0FBQztDQUNGO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZUNoYXJhY3RlcmlzdGljIGZyb20gXCIuL2JsZUNoYXJhY3RlcmlzdGljXCI7XG5pbXBvcnQgQmxlSGVscGVyIGZyb20gXCIuL2JsZUhlbHBlclwiO1xuXG5jbGFzcyBCbGVTZXJ2aWNlIGV4dGVuZHMgQmxlQXR0cmlidXRlQWJzdHJhY3Qge1xuICBwdWJsaWMgYWRkQ2hhcmFjdGVyaXN0aWM6IGFueTtcbiAgcHVibGljIGFkZENoaWxkOiBhbnk7XG4gIHB1YmxpYyBnZXRDaGFyYWN0ZXJpc3RpYzogYW55O1xuICBwdWJsaWMgZ2V0Q2hpbGQ6IGFueTtcbiAgcHVibGljIHV1aWQ6IGFueTtcbiAgcHVibGljIHBlcmlwaGVyYWw6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuICAgIHN1cGVyKG9iaik7XG5cbiAgICB0aGlzLmFkZENoYXJhY3RlcmlzdGljID0gdGhpcy5hZGRDaGlsZDtcbiAgICB0aGlzLmdldENoYXJhY3RlcmlzdGljID0gdGhpcy5nZXRDaGlsZDtcbiAgfVxuXG4gIGdldCBwYXJlbnROYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBcInBlcmlwaGVyYWxcIjtcbiAgfVxuXG4gIGdldCBjaGlsZHJlbk5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwiY2hhcmFjdGVyaXN0aWNzXCI7XG4gIH1cblxuICBnZXQgY2hpbGRyZW5DbGFzcygpOiBhbnkge1xuICAgIHJldHVybiBCbGVDaGFyYWN0ZXJpc3RpYztcbiAgfVxuXG4gIGdldCBhZHZEYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmbGFnczogW1wiZ2VuZXJhbF9kaXNjb3ZlcmFibGVfbW9kZVwiLCBcImJyX2Vkcl9ub3Rfc3VwcG9ydGVkXCJdLFxuICAgICAgc2VydmljZVV1aWRzOiBbdGhpcy51dWlkXSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGVuZCgpIHtcbiAgICB0aGlzLnBlcmlwaGVyYWwuT2JuaXouc2VuZCh7XG4gICAgICBibGU6IHtcbiAgICAgICAgcGVyaXBoZXJhbDoge1xuICAgICAgICAgIHN0b3Bfc2VydmljZToge1xuICAgICAgICAgICAgc2VydmljZV91dWlkOiBCbGVIZWxwZXIudXVpZEZpbHRlcih0aGlzLnV1aWQpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMucGVyaXBoZXJhbC5yZW1vdmVTZXJ2aWNlKHRoaXMudXVpZCk7XG4gIH1cblxuICBwdWJsaWMgbm90aWZ5KG5vdGlmeU5hbWU6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICAvLyBub3RoaW5nXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlU2VydmljZTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/ble.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const hci_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/hci.js"));
const bindings_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/bindings.js"));
const hci_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js"));
const bindings_2 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.js"));
const bleAdvertisement_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAdvertisement.js"));
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js"));
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js"));
const blePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/blePeripheral.js"));
const bleRemotePeripheral_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemotePeripheral.js"));
const bleScan_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleScan.js"));
const bleSecurity_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleSecurity.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleService.js"));
class ObnizBLE {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.hci = new hci_1.default(Obniz);
        this.hciProtocol = new hci_2.default(this.hci);
        this.centralBindings = new bindings_1.default(this.hciProtocol);
        this.peripheralBindings = new bindings_2.default(this.hciProtocol);
        // let dummy = {write : ()=>{}, on:()=>{}}
        // this.centralBindings = new CentralBindings( dummy );
        // this.peripheralBindings = new PeripheralBindings( dummy );
        this.centralBindings.init();
        this.peripheralBindings.init();
        this._initialized = false;
        this._initializeWarning = true;
        this.remotePeripherals = [];
        this.service = bleService_1.default;
        this.characteristic = bleCharacteristic_1.default;
        this.descriptor = bleDescriptor_1.default;
        this.peripheral = new blePeripheral_1.default(this);
        this.scanTarget = null;
        this.advertisement = new bleAdvertisement_1.default(this);
        this.scan = new bleScan_1.default(this);
        this.security = new bleSecurity_1.default(this);
        this._bind();
        this._reset();
    }
    static _dataArray2uuidHex(data, reverse) {
        let uuid = [];
        for (let i = 0; i < data.length; i++) {
            uuid.push(("00" + data[i].toString(16).toLowerCase()).slice(-2));
        }
        if (reverse) {
            uuid = uuid.reverse();
        }
        let str = uuid.join("");
        if (uuid.length >= 16) {
            str =
                str.slice(0, 8) +
                    "-" +
                    str.slice(8, 12) +
                    "-" +
                    str.slice(12, 16) +
                    "-" +
                    str.slice(16, 20) +
                    "-" +
                    str.slice(20);
        }
        return str;
    }
    initWait() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                this._initialized = true;
                yield this.hciProtocol.initWait();
            }
        });
    }
    warningIfNotInitialize() {
        if (!this._initialized && this._initializeWarning) {
            this._initializeWarning = true;
            this.Obniz.warning({
                alert: "warning",
                message: `BLE is not initialized. Please call 'await obniz.ble.initWait()'`,
            });
        }
    }
    notified(obj) {
        if (obj.hci) {
            this.hci.notified(obj.hci);
        }
    }
    _reset() {
    }
    directConnect(uuid, addressType) {
        let peripheral = this.findPeripheral(uuid);
        if (!peripheral) {
            peripheral = new bleRemotePeripheral_1.default(this, uuid);
            this.remotePeripherals.push(peripheral);
        }
        if (!this.centralBindings._addresses[uuid]) {
            const address = uuid.match(/.{1,2}/g).join(":");
            this.centralBindings._addresses[uuid] = address;
            this.centralBindings._addresseTypes[uuid] = addressType;
            this.centralBindings._connectable[uuid] = true;
        }
        peripheral.connect();
        return peripheral;
    }
    directConnectWait(uuid, addressType) {
        return __awaiter(this, void 0, void 0, function* () {
            const peripheral = this.directConnect(uuid, addressType);
            yield peripheral.connectWait();
            return peripheral;
        });
    }
    findPeripheral(address) {
        for (const key in this.remotePeripherals) {
            if (this.remotePeripherals[key].address === address) {
                return this.remotePeripherals[key];
            }
        }
        return null;
    }
    onStateChange() {
    }
    onAddressChange() {
    }
    onScanStart() {
    }
    onScanStop() {
        this.scan.notifyFromServer("onfinish");
    }
    onDiscover(uuid, address, addressType, connectable, advertisement, rssi) {
        let val = this.findPeripheral(uuid);
        if (!val) {
            val = new bleRemotePeripheral_1.default(this, uuid);
            this.remotePeripherals.push(val);
        }
        val.discoverdOnRemote = true;
        const peripheralData = {
            device_type: "ble",
            address_type: addressType,
            ble_event_type: connectable
                ? "connectable_advertisemnt"
                : "non_connectable_advertising",
            rssi,
            adv_data: advertisement.advertisementRaw,
            scan_resp: advertisement.scanResponseRaw,
        };
        val.setParams(peripheralData);
        val._adv_data_filtered = advertisement;
        this.scan.notifyFromServer("onfind", val);
    }
    onConnect(peripheralUuid, error) {
        return __awaiter(this, void 0, void 0, function* () {
            const peripheral = this.findPeripheral(peripheralUuid);
            if (!error) {
                yield peripheral.discoverAllHandlesWait();
            }
            peripheral.notifyFromServer("statusupdate", {
                status: error ? "disconnected" : "connected",
            });
        });
    }
    onDisconnect(peripheralUuid) {
        const peripheral = this.findPeripheral(peripheralUuid);
        peripheral.notifyFromServer("statusupdate", { status: "disconnected" });
    }
    onRssiUpdate() {
    }
    onServicesDiscover(peripheralUuid, serviceUuids) {
        const peripheral = this.findPeripheral(peripheralUuid);
        for (const serviceUuid of serviceUuids) {
            peripheral.notifyFromServer("discover", { service_uuid: serviceUuid });
        }
        peripheral.notifyFromServer("discoverfinished", {});
    }
    onIncludedServicesDiscover(peripheralUuid, serviceUuid, includedServiceUuids) {
    }
    onCharacteristicsDiscover(peripheralUuid, serviceUuid, characteristics) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const service = peripheral.findService({ service_uuid: serviceUuid });
        for (const char of characteristics) {
            const obj = {
                properties: char.properties.map((e) => bleHelper_1.default.toSnakeCase(e)),
                characteristic_uuid: char.uuid,
            };
            service.notifyFromServer("discover", obj);
        }
        service.notifyFromServer("discoverfinished", {});
    }
    onRead(peripheralUuid, serviceUuid, characteristicUuid, data, isNotification, isSuccess) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const characteristic = peripheral.findCharacteristic({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
        });
        if (isNotification) {
            const obj = {
                data: Array.from(data),
            };
            characteristic.notifyFromServer("onnotify", obj);
        }
        else {
            const obj = {
                result: isSuccess ? "success" : "failed",
                data: Array.from(data),
            };
            characteristic.notifyFromServer("onread", obj);
        }
    }
    onWrite(peripheralUuid, serviceUuid, characteristicUuid, isSuccess) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const characteristic = peripheral.findCharacteristic({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
        });
        characteristic.notifyFromServer("onwrite", {
            result: isSuccess ? "success" : "failed",
        });
    }
    onBroadcast(peripheralUuid, serviceUuid, characteristicUuid, state) {
    }
    onNotify(peripheralUuid, serviceUuid, characteristicUuid, state) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const char = peripheral.findCharacteristic({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
        });
        if (state) {
            char.notifyFromServer("onregisternotify", {});
        }
        else {
            char.notifyFromServer("onunregisternotify", {});
        }
    }
    onDescriptorsDiscover(peripheralUuid, serviceUuid, characteristicUuid, descriptors) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const char = peripheral.findCharacteristic({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
        });
        for (const descr of descriptors) {
            const obj = {
                descriptor_uuid: descr,
            };
            char.notifyFromServer("discover", obj);
        }
        char.notifyFromServer("discoverfinished", {});
    }
    onValueRead(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data, isSuccess) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const descriptor = peripheral.findDescriptor({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
            descriptor_uuid: descriptorUuid,
        });
        const obj = {
            result: isSuccess ? "success" : "failed",
            data: Array.from(data),
        };
        descriptor.notifyFromServer("onread", obj);
    }
    onValueWrite(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, isSuccess) {
        const peripheral = this.findPeripheral(peripheralUuid);
        const descriptor = peripheral.findDescriptor({
            service_uuid: serviceUuid,
            characteristic_uuid: characteristicUuid,
            descriptor_uuid: descriptorUuid,
        });
        const obj = {
            result: isSuccess ? "success" : "failed",
        };
        descriptor.notifyFromServer("onwrite", obj);
    }
    onHandleRead(peripheralUuid, handle, data) {
    }
    onHandleWrite(peripheralUuid, handle) {
    }
    onHandleNotify(peripheralUuid, handle, data) {
    }
    onPeripheralStateChange(state) {
        // console.error("onPeripheralStateChange")
    }
    onPeripheralAddressChange(address) {
        // console.error("onPeripheralAddressChange")
    }
    onPeripheralPlatform(platform) {
        // console.error("onPeripheralPlatform")
    }
    onPeripheralAdvertisingStart(error) {
        // console.error("onPeripheralAdvertisingStart")
    }
    onPeripheralAdvertisingStop() {
        // console.error("onPeripheralAdvertisingStop")
    }
    onPeripheralServicesSet(error) {
        // console.error("onPeripheralServicesSet")
    }
    onPeripheralAccept(clientAddress) {
        this.peripheral.currentConnectedDeviceAddress = clientAddress;
        this.peripheral.onconnectionupdates({
            address: clientAddress,
            status: "connected",
        });
    }
    onPeripheralMtuChange(mtu) {
        // console.error("onPeripheralMtuChange")
    }
    onPeripheralDisconnect(clientAddress) {
        this.peripheral.currentConnectedDeviceAddress = null;
        this.peripheral.onconnectionupdates({
            address: clientAddress,
            status: "disconnected",
        });
    }
    onPeripheralRssiUpdate(rssi) {
        // console.error("onPeripheralRssiUpdate")
    }
    _bind() {
        this.centralBindings.on("stateChange", this.onStateChange.bind(this));
        this.centralBindings.on("addressChange", this.onAddressChange.bind(this));
        this.centralBindings.on("scanStart", this.onScanStart.bind(this));
        this.centralBindings.on("scanStop", this.onScanStop.bind(this));
        this.centralBindings.on("discover", this.onDiscover.bind(this));
        this.centralBindings.on("connect", this.onConnect.bind(this));
        this.centralBindings.on("disconnect", this.onDisconnect.bind(this));
        this.centralBindings.on("rssiUpdate", this.onRssiUpdate.bind(this));
        this.centralBindings.on("servicesDiscover", this.onServicesDiscover.bind(this));
        this.centralBindings.on("includedServicesDiscover", this.onIncludedServicesDiscover.bind(this));
        this.centralBindings.on("characteristicsDiscover", this.onCharacteristicsDiscover.bind(this));
        this.centralBindings.on("read", this.onRead.bind(this));
        this.centralBindings.on("write", this.onWrite.bind(this));
        this.centralBindings.on("broadcast", this.onBroadcast.bind(this));
        this.centralBindings.on("notify", this.onNotify.bind(this));
        this.centralBindings.on("descriptorsDiscover", this.onDescriptorsDiscover.bind(this));
        this.centralBindings.on("valueRead", this.onValueRead.bind(this));
        this.centralBindings.on("valueWrite", this.onValueWrite.bind(this));
        this.centralBindings.on("handleRead", this.onHandleRead.bind(this));
        this.centralBindings.on("handleWrite", this.onHandleWrite.bind(this));
        this.centralBindings.on("handleNotify", this.onHandleNotify.bind(this));
        this.peripheralBindings.on("stateChange", this.onPeripheralStateChange.bind(this));
        this.peripheralBindings.on("addressChange", this.onPeripheralAddressChange.bind(this));
        this.peripheralBindings.on("platform", this.onPeripheralPlatform.bind(this));
        this.peripheralBindings.on("advertisingStart", this.onPeripheralAdvertisingStart.bind(this));
        this.peripheralBindings.on("advertisingStop", this.onPeripheralAdvertisingStop.bind(this));
        this.peripheralBindings.on("servicesSet", this.onPeripheralServicesSet.bind(this));
        this.peripheralBindings.on("accept", this.onPeripheralAccept.bind(this));
        this.peripheralBindings.on("mtuChange", this.onPeripheralMtuChange.bind(this));
        this.peripheralBindings.on("disconnect", this.onPeripheralDisconnect.bind(this));
        this.peripheralBindings.on("rssiUpdate", this.onPeripheralRssiUpdate.bind(this));
    }
}
exports.default = ObnizBLE;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAdvertisement.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAdvertisementBuilder_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.js"));
class BleAdvertisement {
    constructor(obnizBle) {
        this.obnizBle = obnizBle;
        this.adv_data = [];
        this.scan_resp = [];
    }
    start() {
        this.obnizBle.warningIfNotInitialize();
        this.obnizBle.peripheralBindings.startAdvertisingWithEIRData(Buffer.from(this.adv_data), Buffer.from(this.scan_resp));
    }
    end() {
        this.obnizBle.peripheralBindings.stopAdvertising();
    }
    setAdvDataRaw(adv_data) {
        this.adv_data = adv_data;
    }
    setAdvData(json) {
        const builder = this.advDataBulider(json);
        this.setAdvDataRaw(builder.build());
    }
    advDataBulider(jsonVal) {
        return new bleAdvertisementBuilder_1.default(this.Obniz, jsonVal);
    }
    scanRespDataBuilder(json) {
        return new bleAdvertisementBuilder_1.default(this.Obniz, json);
    }
    setScanRespDataRaw(scan_resp) {
        this.scan_resp = scan_resp;
    }
    setScanRespData(json) {
        this.setScanRespDataRaw(this.scanRespDataBuilder(json).build());
    }
}
exports.default = BleAdvertisement;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlQWR2ZXJ0aXNlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdGQUFnRDtBQUVoRCxNQUFNLGdCQUFnQjtJQU1wQixZQUFZLFFBQWE7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQywyQkFBMkIsQ0FDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVNLEdBQUc7UUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFTSxhQUFhLENBQUMsUUFBYTtRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRU0sVUFBVSxDQUFDLElBQVM7UUFDekIsTUFBTSxPQUFPLEdBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxjQUFjLENBQUMsT0FBWTtRQUNoQyxPQUFPLElBQUksaUNBQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxJQUFTO1FBQ2xDLE9BQU8sSUFBSSxpQ0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLGtCQUFrQixDQUFDLFNBQWM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFTO1FBQzlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxnQkFBZ0IsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL2JsZUFkdmVydGlzZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnVpbGRlciBmcm9tIFwiLi9ibGVBZHZlcnRpc2VtZW50QnVpbGRlclwiO1xuXG5jbGFzcyBCbGVBZHZlcnRpc2VtZW50IHtcbiAgcHVibGljIG9ibml6QmxlOiBhbnk7XG4gIHB1YmxpYyBhZHZfZGF0YTogYW55O1xuICBwdWJsaWMgc2Nhbl9yZXNwOiBhbnk7XG4gIHB1YmxpYyBPYm5pejogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9ibml6QmxlOiBhbnkpIHtcbiAgICB0aGlzLm9ibml6QmxlID0gb2JuaXpCbGU7XG4gICAgdGhpcy5hZHZfZGF0YSA9IFtdO1xuICAgIHRoaXMuc2Nhbl9yZXNwID0gW107XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgdGhpcy5vYm5pekJsZS53YXJuaW5nSWZOb3RJbml0aWFsaXplKCk7XG4gICAgdGhpcy5vYm5pekJsZS5wZXJpcGhlcmFsQmluZGluZ3Muc3RhcnRBZHZlcnRpc2luZ1dpdGhFSVJEYXRhKFxuICAgICAgQnVmZmVyLmZyb20odGhpcy5hZHZfZGF0YSksXG4gICAgICBCdWZmZXIuZnJvbSh0aGlzLnNjYW5fcmVzcCksXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBlbmQoKSB7XG4gICAgdGhpcy5vYm5pekJsZS5wZXJpcGhlcmFsQmluZGluZ3Muc3RvcEFkdmVydGlzaW5nKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0QWR2RGF0YVJhdyhhZHZfZGF0YTogYW55KSB7XG4gICAgdGhpcy5hZHZfZGF0YSA9IGFkdl9kYXRhO1xuICB9XG5cbiAgcHVibGljIHNldEFkdkRhdGEoanNvbjogYW55KSB7XG4gICAgY29uc3QgYnVpbGRlcjogYW55ID0gdGhpcy5hZHZEYXRhQnVsaWRlcihqc29uKTtcbiAgICB0aGlzLnNldEFkdkRhdGFSYXcoYnVpbGRlci5idWlsZCgpKTtcbiAgfVxuXG4gIHB1YmxpYyBhZHZEYXRhQnVsaWRlcihqc29uVmFsOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IEJ1aWxkZXIodGhpcy5PYm5peiwganNvblZhbCk7XG4gIH1cblxuICBwdWJsaWMgc2NhblJlc3BEYXRhQnVpbGRlcihqc29uOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IEJ1aWxkZXIodGhpcy5PYm5peiwganNvbik7XG4gIH1cblxuICBwdWJsaWMgc2V0U2NhblJlc3BEYXRhUmF3KHNjYW5fcmVzcDogYW55KSB7XG4gICAgdGhpcy5zY2FuX3Jlc3AgPSBzY2FuX3Jlc3A7XG4gIH1cblxuICBwdWJsaWMgc2V0U2NhblJlc3BEYXRhKGpzb246IGFueSkge1xuICAgIHRoaXMuc2V0U2NhblJlc3BEYXRhUmF3KHRoaXMuc2NhblJlc3BEYXRhQnVpbGRlcihqc29uKS5idWlsZCgpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCbGVBZHZlcnRpc2VtZW50O1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
class BleAdvertisementBuilder {
    constructor(Obniz, json) {
        this.Obniz = Obniz;
        this.rows = {};
        if (json) {
            if (json.localName) {
                this.setCompleteLocalName(json.localName);
            }
            if (json.manufacturerData &&
                json.manufacturerData.companyCode &&
                json.manufacturerData.data) {
                this.setManufacturerSpecificData(json.manufacturerData.companyCode, json.manufacturerData.data);
            }
            if (json.serviceUuids) {
                for (const uuid of json.serviceUuids) {
                    this.setUuid(uuid);
                }
            }
        }
        if (typeof this.extendEvalJson === "function") {
            this.extendEvalJson(json);
        }
    }
    setRow(type, data) {
        this.rows[type] = data;
    }
    getRow(type) {
        return this.rows[type] || [];
    }
    build() {
        const data = [];
        for (const key in this.rows) {
            if (this.rows[key].length === 0) {
                continue;
            }
            data.push(this.rows[key].length + 1);
            data.push(parseInt(key));
            Array.prototype.push.apply(data, this.rows[key]);
        }
        if (data.length > 31) {
            this.Obniz.error("Too large data. Advertise/ScanResponse data are must be less than 32 byte.");
        }
        return data;
    }
    setStringData(type, string) {
        const data = [];
        for (let i = 0; i < string.length; i++) {
            data.push(string.charCodeAt(i));
        }
        this.setRow(type, data);
    }
    setShortenedLocalName(name) {
        this.setStringData(0x08, name);
    }
    setCompleteLocalName(name) {
        this.setStringData(0x09, name);
    }
    setManufacturerSpecificData(companyCode, data) {
        const row = [];
        row.push(companyCode & 0xff);
        row.push((companyCode >> 8) & 0xff);
        Array.prototype.push.apply(row, data);
        this.setRow(0xff, row);
    }
    setUuid(uuid) {
        const uuidData = this.convertUuid(uuid);
        const type = { 16: 0x06, 4: 0x04, 2: 0x02 }[uuidData.length];
        this.setRow(type, uuidData);
    }
    convertUuid(uuid) {
        const uuidNumeric = bleHelper_1.default.uuidFilter(uuid);
        if (uuidNumeric.length !== 32 &&
            uuidNumeric.length !== 8 &&
            uuidNumeric.length !== 4) {
            this.Obniz.error("BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)");
        }
        const data = [];
        for (let i = uuidNumeric.length; i > 1; i -= 2) {
            data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));
        }
        return data;
    }
    setIbeaconData(uuid, major, minor, txPower) {
        const data = [];
        data.push(0x02, 0x15); // fixed data
        const uuidData = this.convertUuid(uuid);
        Array.prototype.push.apply(data, uuidData);
        data.push((major >> 8) & 0xff);
        data.push((major >> 0) & 0xff);
        data.push((minor >> 8) & 0xff);
        data.push((minor >> 0) & 0xff);
        data.push((txPower >> 0) & 0xff);
        this.setManufacturerSpecificData(0x004c, data);
        return;
    }
    extendEvalJson(json) {
        if (json) {
            if (json.flags) {
                if (json.flags.includes("limited_discoverable_mode")) {
                    this.setLeLimitedDiscoverableModeFlag();
                }
                if (json.flags.includes("general_discoverable_mode")) {
                    this.setLeGeneralDiscoverableModeFlag();
                }
                if (json.flags.includes("br_edr_not_supported")) {
                    this.setBrEdrNotSupportedFlag();
                }
                if (json.flags.includes("le_br_edr_controller")) {
                    this.setLeBrEdrControllerFlag();
                }
                if (json.flags.includes("le_br_edr_host")) {
                    this.setLeBrEdrHostFlag();
                }
            }
        }
    }
    setFlags(flag) {
        const data = this.getRow(0x01);
        data[0] = (data[0] || 0) | flag;
        this.setRow(0x01, data);
    }
    setLeLimitedDiscoverableModeFlag() {
        this.setFlags(0x01);
    }
    setLeGeneralDiscoverableModeFlag() {
        this.setFlags(0x02);
    }
    setBrEdrNotSupportedFlag() {
        this.setFlags(0x04);
    }
    setLeBrEdrControllerFlag() {
        this.setFlags(0x08);
    }
    setLeBrEdrHostFlag() {
        this.setFlags(0x10);
    }
}
exports.default = BleAdvertisementBuilder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
class BleAttributeAbstract {
    constructor(params) {
        this.uuid = bleHelper_1.default.uuidFilter(params.uuid);
        this.parent = null;
        this.children = [];
        this.isRemote = false;
        this.discoverdOnRemote = false;
        this.data = params.data || null;
        if (!this.data && params.text) {
            this.data = util_1.default.string2dataArray(params.text);
        }
        if (!this.data && params.value) {
            this.data = [params.value];
        }
        if (params[this.childrenName]) {
            for (const child of params[this.childrenName]) {
                this.addChild(child);
            }
        }
        this.setFunctions();
        this.emitter = new emitter();
    }
    setFunctions() {
        let childrenName = this.childrenName;
        if (childrenName) {
            childrenName =
                childrenName.charAt(0).toUpperCase() + childrenName.slice(1);
            const childName = childrenName.slice(0, -1);
            let funcName = "add" + childName;
            this[funcName] = this.addChild;
            funcName = "get" + childName;
            this[funcName] = this.getChild;
        }
        const parentName = this.parentName;
        if (parentName) {
            Object.defineProperty(this, parentName, {
                get() {
                    return this.parent;
                },
                set(newValue) {
                    this.parent = newValue;
                },
            });
        }
    }
    get childrenClass() {
        return Object;
    }
    get childrenName() {
        return null;
    }
    get parentName() {
        return null;
    }
    addChild(child) {
        if (!(child instanceof this.childrenClass)) {
            const childrenClass = this.childrenClass;
            child = new childrenClass(child);
        }
        child.parent = this;
        this.children.push(child);
        return child;
    }
    getChild(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        return this.children
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    toJSON() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            const key = this.childrenName;
            obj[key] = this.children;
        }
        if (this.data) {
            obj.data = this.data;
        }
        return obj;
    }
    /**
     * WS COMMANDS
     */
    read() {
    }
    write(data, needResponse) {
    }
    writeNumber(val, needResponse) {
        this.write([val], needResponse);
    }
    writeText(str, needResponse) {
        this.write(util_1.default.string2dataArray(str), needResponse);
    }
    readWait() {
        return new Promise((resolve, reject) => {
            this.emitter.once("onread", (params) => {
                if (params.result === "success") {
                    resolve(params.data);
                }
                else {
                    reject(new Error("readWait failed"));
                }
            });
            this.read();
        });
    }
    writeWait(data, needResponse) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeWait failed"));
                }
            });
            this.write(data, needResponse);
        });
    }
    writeTextWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeTextWait failed"));
                }
            });
            this.writeText(data);
        });
    }
    writeNumberWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once("onwrite", (params) => {
                if (params.result === "success") {
                    resolve(true);
                }
                else {
                    reject(new Error("writeNumberWait failed"));
                }
            });
            this.writeNumber(data);
        });
    }
    readFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once("onreadfromremote", () => {
                resolve();
            });
        });
    }
    writeFromRemoteWait() {
        return new Promise((resolve) => {
            this.emitter.once("onreadfromremote", (params) => {
                resolve(params.data);
            });
        });
    }
    /**
     * CALLBACKS
     */
    onwrite(result) {
    }
    onread(data) {
    }
    onwritefromremote(address, data) {
    }
    onreadfromremote(address) {
    }
    onerror(err) {
        console.error(err.message);
    }
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case "onerror": {
                this.onerror(params);
                break;
            }
            case "onwrite": {
                this.onwrite(params.result);
                break;
            }
            case "onread": {
                this.onread(params.data);
                break;
            }
            case "onwritefromremote": {
                this.onwritefromremote(params.address, params.data);
                break;
            }
            case "onreadfromremote": {
                this.onreadfromremote(params.address);
                break;
            }
        }
    }
}
exports.default = BleAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js"));
const bleLocalAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js"));
class BleCharacteristic extends bleLocalAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this._maxValueSize = null;
        this._updateValueCallback = null;
        this.addDescriptor = this.addChild;
        this.getDescriptor = this.getChild;
        this.properties = obj.properties || [];
        if (!Array.isArray(this.properties)) {
            this.properties = [this.properties];
        }
        this.permissions = obj.permissions || [];
        if (!Array.isArray(this.permissions)) {
            this.permissions = [this.permissions];
        }
    }
    get parentName() {
        return "service";
    }
    get childrenClass() {
        return bleDescriptor_1.default;
    }
    get childrenName() {
        return "descriptors";
    }
    get descriptors() {
        return this.children;
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        if (this.permissions.length > 0) {
            obj.permissions = this.permissions;
        }
        return obj;
    }
    toBufferObj() {
        const obj = super.toBufferObj();
        obj.properties = this.properties;
        obj.secure = [];
        return obj;
    }
    addProperty(param) {
        if (!this.properties.includes(param)) {
            this.properties.push(param);
        }
    }
    removeProperty(param) {
        this.properties = this.properties.filter((elm) => {
            return elm !== param;
        });
    }
    addPermission(param) {
        if (!this.permissions.includes(param)) {
            this.permissions.push(param);
        }
    }
    removePermission(param) {
        this.permissions = this.permissions.filter((elm) => {
            return elm !== param;
        });
    }
    emit(name, ...params) {
        const result = super.emit(name, ...params);
        if (result) {
            return result;
        }
        switch (name) {
            case "subscribe":
                this._onSubscribe(...params);
                return true;
            case "unsubscribe":
                this._onUnsubscribe();
                return true;
            case "notify":
                this._onNotify();
                return true;
            case "indicate":
                this._onIndicate();
                return true;
            default:
                throw new Error("unknown emit");
        }
    }
    _onSubscribe(maxValueSize, updateValueCallback) {
        // console.log('_onSubscribe');
        this._maxValueSize = maxValueSize;
        this._updateValueCallback = updateValueCallback;
    }
    _onUnsubscribe() {
        this._maxValueSize = null;
        this._updateValueCallback = null;
    }
    _onNotify() {
    }
    _onIndicate() {
    }
    notify() {
        if (this._updateValueCallback) {
            this._updateValueCallback(Buffer.from(this.data));
        }
    }
}
exports.default = BleCharacteristic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleLocalAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js"));
class BleDescriptor extends bleLocalAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.permissions = obj.permissions || [];
        if (!Array.isArray(this.permissions)) {
            this.permissions = [this.permissions];
        }
    }
    get parentName() {
        return "characteristic";
    }
    addPermission(param) {
        if (!this.permissions.includes(param)) {
            this.permissions.push(param);
        }
    }
    removePermission(param) {
        this.permissions = this.permissions.filter((elm) => {
            return elm !== param;
        });
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.permissions.length > 0) {
            obj.permissions = this.permissions;
        }
        return obj;
    }
}
exports.default = BleDescriptor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlRGVzY3JpcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRGQUFvRTtBQUVwRSxNQUFNLGFBQWMsU0FBUSxtQ0FBeUI7SUFHbkQsWUFBWSxHQUFRO1FBQ2xCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVYLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRU0sYUFBYSxDQUFDLEtBQVU7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQVU7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEdBQVEsRUFBRyxFQUFFO1lBQ3hELE9BQU8sR0FBRyxLQUFLLEtBQUssQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNO1FBQ1gsTUFBTSxHQUFHLEdBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWhDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNwQztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGO0FBRUQsa0JBQWUsYUFBYSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlRGVzY3JpcHRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVMb2NhbEF0dHJpYnV0ZUFic3RyYWN0IGZyb20gXCIuL2JsZUxvY2FsQXR0cmlidXRlQWJzdHJhY3RcIjtcblxuY2xhc3MgQmxlRGVzY3JpcHRvciBleHRlbmRzIEJsZUxvY2FsQXR0cmlidXRlQWJzdHJhY3Qge1xuICBwdWJsaWMgcGVybWlzc2lvbnM6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuICAgIHN1cGVyKG9iaik7XG5cbiAgICB0aGlzLnBlcm1pc3Npb25zID0gb2JqLnBlcm1pc3Npb25zIHx8IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnBlcm1pc3Npb25zKSkge1xuICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IFt0aGlzLnBlcm1pc3Npb25zXTtcbiAgICB9XG4gIH1cblxuICBnZXQgcGFyZW50TmFtZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gXCJjaGFyYWN0ZXJpc3RpY1wiO1xuICB9XG5cbiAgcHVibGljIGFkZFBlcm1pc3Npb24ocGFyYW06IGFueSkge1xuICAgIGlmICghdGhpcy5wZXJtaXNzaW9ucy5pbmNsdWRlcyhwYXJhbSkpIHtcbiAgICAgIHRoaXMucGVybWlzc2lvbnMucHVzaChwYXJhbSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVBlcm1pc3Npb24ocGFyYW06IGFueSkge1xuICAgIHRoaXMucGVybWlzc2lvbnMgPSB0aGlzLnBlcm1pc3Npb25zLmZpbHRlciAoKGVsbTogYW55ICkgPT4ge1xuICAgICAgcmV0dXJuIGVsbSAhPT0gcGFyYW07XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdG9KU09OKCkge1xuICAgIGNvbnN0IG9iajogYW55ID0gc3VwZXIudG9KU09OKCk7XG5cbiAgICBpZiAodGhpcy5wZXJtaXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBvYmoucGVybWlzc2lvbnMgPSB0aGlzLnBlcm1pc3Npb25zO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZURlc2NyaXB0b3I7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleHelper.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BleHelper = {
    uuidFilter(uuid) {
        return uuid.toLowerCase().replace(/[^0-9abcdef]/g, "");
    },
    toCamelCase(str) {
        str = str.charAt(0).toLowerCase() + str.slice(1);
        return str.replace(/[-_](.)/g, (match, group1) => {
            return group1.toUpperCase();
        });
    },
    toSnakeCase(str) {
        const camel = this.toCamelCase(str);
        return camel.replace(/[A-Z]/g, (s) => {
            return "_" + s.charAt(0).toLowerCase();
        });
    },
};
exports.default = BleHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxTQUFTLEdBQVE7SUFDckIsVUFBVSxDQUFDLElBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVE7UUFDbEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVcsRUFBRyxFQUFFO1lBQzFELE9BQU8sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFRO1FBQ2xCLE1BQU0sS0FBSyxHQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQU0sRUFBRyxFQUFFO1lBQ3pDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL2JsZUhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJsZUhlbHBlcjogYW55ID0ge1xuICB1dWlkRmlsdGVyKHV1aWQ6IGFueSkge1xuICAgIHJldHVybiB1dWlkLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW14wLTlhYmNkZWZdL2csIFwiXCIpO1xuICB9LFxuXG4gIHRvQ2FtZWxDYXNlKHN0cjogYW55KSB7XG4gICAgc3RyID0gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy1fXSguKS9nLCAobWF0Y2g6IGFueSwgZ3JvdXAxOiBhbnkgKSA9PiB7XG4gICAgICByZXR1cm4gZ3JvdXAxLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdG9TbmFrZUNhc2Uoc3RyOiBhbnkpIHtcbiAgICBjb25zdCBjYW1lbDogYW55ID0gdGhpcy50b0NhbWVsQ2FzZShzdHIpO1xuICAgIHJldHVybiBjYW1lbC5yZXBsYWNlKC9bQS1aXS9nLCAoczogYW55ICkgPT4ge1xuICAgICAgcmV0dXJuIFwiX1wiICsgcy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJsZUhlbHBlcjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js"));
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
class BleLocalAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.RESULT_SUCCESS = 0x00;
        this.RESULT_INVALID_OFFSET = 0x07;
        this.RESULT_ATTR_NOT_LONG = 0x0b;
        this.RESULT_INVALID_ATTRIBUTE_LENGTH = 0x0d;
        this.RESULT_UNLIKELY_ERROR = 0x0e;
    }
    toBufferObj() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            const key = this.childrenName;
            obj[key] = this.children.map((e) => e.toBufferObj());
        }
        obj.emit = this.emit.bind(this);
        return obj;
    }
    emit(name, ...params) {
        switch (name) {
            case "readRequest":
                this._onReadRequest(...params);
                return true;
            case "writeRequest":
                this._onWriteRequest(...params);
                return true;
        }
        return false;
    }
    _onReadRequest(offset, callback) {
        if (this.data.length >= offset) {
            callback(this.RESULT_SUCCESS, Buffer.from(this.data.slice(offset)));
            let address = null;
            if (this.parentName === "characteristic") {
                address = this.characteristic.service.peripheral
                    .currentConnectedDeviceAddress;
            }
            else if (this.parentName === "service") {
                address = this.service.peripheral.currentConnectedDeviceAddress;
            }
            this.notifyFromServer("onreadfromremote", { address });
        }
        else {
            callback(this.RESULT_UNLIKELY_ERROR, null);
        }
    }
    _onWriteRequest(data, offset, withoutResponse, callback) {
        // console.log('onWriteRequest');
        this.data = Array.from(data);
        callback(this.RESULT_SUCCESS);
        let address = null;
        if (this.parentName === "characteristic") {
            address = this.characteristic.service.peripheral
                .currentConnectedDeviceAddress;
        }
        else if (this.parentName === "service") {
            address = this.service.peripheral.currentConnectedDeviceAddress;
        }
        this.notifyFromServer("onwritefromremote", { address, data });
    }
    write(dataArray) {
        this.data = dataArray;
        this.notifyFromServer("onwrite", { result: "success" });
    }
    read() {
        this.notifyFromServer("onread", { data: this.data });
    }
}
exports.default = BleLocalAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtGQUEwRDtBQUMxRCw0REFBb0M7QUFFcEMsTUFBTSx5QkFBMEIsU0FBUSw4QkFBb0I7SUFlMUQsWUFBWSxNQUFXO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsK0JBQStCLEdBQUcsSUFBSSxDQUFDO1FBQzVDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxHQUFHLEdBQVE7WUFDZixJQUFJLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN0QyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFRLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMzRDtRQUVELEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVMsRUFBRSxHQUFHLE1BQVc7UUFDbkMsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLGFBQWE7Z0JBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFvQixDQUFDLENBQUM7Z0JBQzdDLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxjQUFjO2dCQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBb0IsQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQVcsRUFBRSxRQUFjO1FBQy9DLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFO1lBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUksT0FBTyxHQUFRLElBQUksQ0FBQztZQUN4QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssZ0JBQWdCLEVBQUU7Z0JBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVO3FCQUM3Qyw2QkFBNkIsQ0FBQzthQUNsQztpQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsNkJBQTZCLENBQUM7YUFDakU7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFTLEVBQUUsTUFBWSxFQUFFLGVBQXFCLEVBQUUsUUFBYztRQUNuRixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLEdBQVEsSUFBSSxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxnQkFBZ0IsRUFBRTtZQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVTtpQkFDN0MsNkJBQTZCLENBQUM7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyw2QkFBNkIsQ0FBQztTQUNqRTtRQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxLQUFLLENBQUMsU0FBYztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUVELGtCQUFlLHlCQUF5QixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcblxuY2xhc3MgQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdCBleHRlbmRzIEJsZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIFJFU1VMVF9TVUNDRVNTOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfSU5WQUxJRF9PRkZTRVQ6IGFueTtcbiAgcHVibGljIFJFU1VMVF9BVFRSX05PVF9MT05HOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfSU5WQUxJRF9BVFRSSUJVVEVfTEVOR1RIOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfVU5MSUtFTFlfRVJST1I6IGFueTtcbiAgcHVibGljIHV1aWQ6IGFueTtcbiAgcHVibGljIGNoaWxkcmVuTmFtZTogYW55O1xuICBwdWJsaWMgY2hpbGRyZW46IGFueTtcbiAgcHVibGljIGRhdGE6IGFueTtcbiAgcHVibGljIHBhcmVudE5hbWU6IGFueTtcbiAgcHVibGljIGNoYXJhY3RlcmlzdGljOiBhbnk7XG4gIHB1YmxpYyBzZXJ2aWNlOiBhbnk7XG4gIHB1YmxpYyBub3RpZnlGcm9tU2VydmVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkpIHtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdGhpcy5SRVNVTFRfU1VDQ0VTUyA9IDB4MDA7XG4gICAgdGhpcy5SRVNVTFRfSU5WQUxJRF9PRkZTRVQgPSAweDA3O1xuICAgIHRoaXMuUkVTVUxUX0FUVFJfTk9UX0xPTkcgPSAweDBiO1xuICAgIHRoaXMuUkVTVUxUX0lOVkFMSURfQVRUUklCVVRFX0xFTkdUSCA9IDB4MGQ7XG4gICAgdGhpcy5SRVNVTFRfVU5MSUtFTFlfRVJST1IgPSAweDBlO1xuICB9XG5cbiAgcHVibGljIHRvQnVmZmVyT2JqKCkge1xuICAgIGNvbnN0IG9iajogYW55ID0ge1xuICAgICAgdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy51dWlkKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5OYW1lKSB7XG4gICAgICBjb25zdCBrZXk6IGFueSA9IHRoaXMuY2hpbGRyZW5OYW1lO1xuICAgICAgb2JqW2tleV0gPSB0aGlzLmNoaWxkcmVuLm1hcCgoZTogYW55KSA9PiBlLnRvQnVmZmVyT2JqKCkpO1xuICAgIH1cblxuICAgIG9iai5lbWl0ID0gdGhpcy5lbWl0LmJpbmQodGhpcyk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0KG5hbWU6IGFueSwgLi4ucGFyYW1zOiBhbnkpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgXCJyZWFkUmVxdWVzdFwiOlxuICAgICAgICB0aGlzLl9vblJlYWRSZXF1ZXN0KC4uLnBhcmFtcyBhcyBbYW55LCBhbnldKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlIFwid3JpdGVSZXF1ZXN0XCI6XG4gICAgICAgIHRoaXMuX29uV3JpdGVSZXF1ZXN0KC4uLnBhcmFtcyBhcyBbYW55LCBhbnldKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBfb25SZWFkUmVxdWVzdChvZmZzZXQ6IGFueSwgY2FsbGJhY2s/OiBhbnkpIHtcbiAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+PSBvZmZzZXQpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuUkVTVUxUX1NVQ0NFU1MsIEJ1ZmZlci5mcm9tKHRoaXMuZGF0YS5zbGljZShvZmZzZXQpKSk7XG4gICAgICBsZXQgYWRkcmVzczogYW55ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLnBhcmVudE5hbWUgPT09IFwiY2hhcmFjdGVyaXN0aWNcIikge1xuICAgICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgICAuY3VycmVudENvbm5lY3RlZERldmljZUFkZHJlc3M7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gXCJzZXJ2aWNlXCIpIHtcbiAgICAgICAgYWRkcmVzcyA9IHRoaXMuc2VydmljZS5wZXJpcGhlcmFsLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgICAgfVxuICAgICAgdGhpcy5ub3RpZnlGcm9tU2VydmVyKFwib25yZWFkZnJvbXJlbW90ZVwiLCB7YWRkcmVzc30pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0aGlzLlJFU1VMVF9VTkxJS0VMWV9FUlJPUiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIF9vbldyaXRlUmVxdWVzdChkYXRhOiBhbnksIG9mZnNldD86IGFueSwgd2l0aG91dFJlc3BvbnNlPzogYW55LCBjYWxsYmFjaz86IGFueSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdvbldyaXRlUmVxdWVzdCcpO1xuICAgIHRoaXMuZGF0YSA9IEFycmF5LmZyb20oZGF0YSk7XG4gICAgY2FsbGJhY2sodGhpcy5SRVNVTFRfU1VDQ0VTUyk7XG4gICAgbGV0IGFkZHJlc3M6IGFueSA9IG51bGw7XG4gICAgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gXCJjaGFyYWN0ZXJpc3RpY1wiKSB7XG4gICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnROYW1lID09PSBcInNlcnZpY2VcIikge1xuICAgICAgYWRkcmVzcyA9IHRoaXMuc2VydmljZS5wZXJpcGhlcmFsLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeUZyb21TZXJ2ZXIoXCJvbndyaXRlZnJvbXJlbW90ZVwiLCB7YWRkcmVzcywgZGF0YX0pO1xuICB9XG5cbiAgcHVibGljIHdyaXRlKGRhdGFBcnJheTogYW55KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YUFycmF5O1xuICAgIHRoaXMubm90aWZ5RnJvbVNlcnZlcihcIm9ud3JpdGVcIiwge3Jlc3VsdDogXCJzdWNjZXNzXCJ9KTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkKCkge1xuICAgIHRoaXMubm90aWZ5RnJvbVNlcnZlcihcIm9ucmVhZFwiLCB7ZGF0YTogdGhpcy5kYXRhfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdDtcbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/blePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const bleService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleService.js"));
class BlePeripheral {
    constructor(obnizBle) {
        this.obnizBle = obnizBle;
        this._services = [];
        this.currentConnectedDeviceAddress = null;
    }
    _updateServices() {
        const bufData = this._services.map((e) => e.toBufferObj());
        this.obnizBle.peripheralBindings.setServices(bufData);
    }
    addService(obj) {
        this.obnizBle.warningIfNotInitialize();
        if (!(obj instanceof bleService_1.default)) {
            obj = new bleService_1.default(obj);
        }
        this._services.push(obj);
        obj.peripheral = this;
        this._updateServices();
    }
    setJson(json) {
        if (json.services) {
            for (const service of json.services) {
                this.addService(service);
            }
        }
    }
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        return this._services
            .filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    removeService(uuid) {
        this._services = this._services.filter((element) => {
            return bleHelper_1.default.uuidFilter(element.uuid) !== uuid;
        });
        this._updateServices();
    }
    stopAllService() {
        this._services = [];
        this._updateServices();
    }
    toJSON() {
        return {
            services: this._services,
        };
    }
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    end() {
        this.stopAllService();
    }
    onconnectionupdates() {
    }
    onerror() {
    }
}
exports.default = BlePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUGVyaXBoZXJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUNwQyw4REFBc0M7QUFFdEMsTUFBTSxhQUFhO0lBS2pCLFlBQVksUUFBYTtRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDO0lBQzVDLENBQUM7SUFFTSxlQUFlO1FBQ3BCLE1BQU0sT0FBTyxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU0sVUFBVSxDQUFDLEdBQVE7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxvQkFBVSxDQUFDLEVBQUU7WUFDaEMsR0FBRyxHQUFHLElBQUksb0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU0sT0FBTyxDQUFDLElBQVM7UUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxQjtTQUNGO0lBQ0gsQ0FBQztJQUVNLFVBQVUsQ0FBQyxJQUFTO1FBQ3pCLElBQUksR0FBRyxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTO2FBQ2xCLE1BQU0sQ0FBRSxDQUFDLE9BQVksRUFBRyxFQUFFO1lBQ3pCLE9BQU8sbUJBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUM7YUFDRCxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFTSxhQUFhLENBQUMsSUFBUztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBWSxFQUFHLEVBQUU7WUFDeEQsT0FBTyxtQkFBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxLQUFVO1FBQ2xDLE1BQU0sV0FBVyxHQUFRLG1CQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsRSxNQUFNLGtCQUFrQixHQUFRLG1CQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEVBQUU7WUFDTCxPQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sY0FBYyxDQUFDLEtBQVU7UUFDOUIsTUFBTSxjQUFjLEdBQVEsbUJBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxHQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsRUFBRTtZQUNMLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN4QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLEdBQUc7UUFDUixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLG1CQUFtQjtJQUMxQixDQUFDO0lBRU0sT0FBTztJQUNkLENBQUM7Q0FDRjtBQUVELGtCQUFlLGFBQWEsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL2JsZVBlcmlwaGVyYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlSGVscGVyIGZyb20gXCIuL2JsZUhlbHBlclwiO1xuaW1wb3J0IEJsZVNlcnZpY2UgZnJvbSBcIi4vYmxlU2VydmljZVwiO1xuXG5jbGFzcyBCbGVQZXJpcGhlcmFsIHtcbiAgcHVibGljIG9ibml6QmxlOiBhbnk7XG4gIHB1YmxpYyBfc2VydmljZXM6IGFueTtcbiAgcHVibGljIGN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JuaXpCbGU6IGFueSkge1xuICAgIHRoaXMub2JuaXpCbGUgPSBvYm5pekJsZTtcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudENvbm5lY3RlZERldmljZUFkZHJlc3MgPSBudWxsO1xuICB9XG5cbiAgcHVibGljIF91cGRhdGVTZXJ2aWNlcygpIHtcbiAgICBjb25zdCBidWZEYXRhOiBhbnkgPSB0aGlzLl9zZXJ2aWNlcy5tYXAoKGU6IGFueSkgPT4gZS50b0J1ZmZlck9iaigpKTtcbiAgICB0aGlzLm9ibml6QmxlLnBlcmlwaGVyYWxCaW5kaW5ncy5zZXRTZXJ2aWNlcyhidWZEYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRTZXJ2aWNlKG9iajogYW55KSB7XG4gICAgdGhpcy5vYm5pekJsZS53YXJuaW5nSWZOb3RJbml0aWFsaXplKCk7XG4gICAgaWYgKCEob2JqIGluc3RhbmNlb2YgQmxlU2VydmljZSkpIHtcbiAgICAgIG9iaiA9IG5ldyBCbGVTZXJ2aWNlKG9iaik7XG4gICAgfVxuICAgIHRoaXMuX3NlcnZpY2VzLnB1c2gob2JqKTtcbiAgICBvYmoucGVyaXBoZXJhbCA9IHRoaXM7XG5cbiAgICB0aGlzLl91cGRhdGVTZXJ2aWNlcygpO1xuICB9XG5cbiAgcHVibGljIHNldEpzb24oanNvbjogYW55KSB7XG4gICAgaWYgKGpzb24uc2VydmljZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgc2VydmljZSBvZiBqc29uLnNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuYWRkU2VydmljZShzZXJ2aWNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0U2VydmljZSh1dWlkOiBhbnkpIHtcbiAgICB1dWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIodXVpZCk7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZpY2VzXG4gICAgICAuZmlsdGVyICgoZWxlbWVudDogYW55ICkgPT4ge1xuICAgICAgICByZXR1cm4gQmxlSGVscGVyLnV1aWRGaWx0ZXIoZWxlbWVudC51dWlkKSA9PT0gdXVpZDtcbiAgICAgIH0pXG4gICAgICAuc2hpZnQoKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVTZXJ2aWNlKHV1aWQ6IGFueSkge1xuICAgIHRoaXMuX3NlcnZpY2VzID0gdGhpcy5fc2VydmljZXMuZmlsdGVyICgoZWxlbWVudDogYW55ICkgPT4ge1xuICAgICAgcmV0dXJuIEJsZUhlbHBlci51dWlkRmlsdGVyKGVsZW1lbnQudXVpZCkgIT09IHV1aWQ7XG4gICAgfSk7XG5cbiAgICB0aGlzLl91cGRhdGVTZXJ2aWNlcygpO1xuICB9XG5cbiAgcHVibGljIHN0b3BBbGxTZXJ2aWNlKCkge1xuICAgIHRoaXMuX3NlcnZpY2VzID0gW107XG4gICAgdGhpcy5fdXBkYXRlU2VydmljZXMoKTtcbiAgfVxuXG4gIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlcnZpY2VzOiB0aGlzLl9zZXJ2aWNlcyxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGZpbmRDaGFyYWN0ZXJpc3RpYyhwYXJhbTogYW55KSB7XG4gICAgY29uc3Qgc2VydmljZVV1aWQ6IGFueSA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHBhcmFtLnNlcnZpY2VfdXVpZCk7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNVdWlkOiBhbnkgPSBCbGVIZWxwZXIudXVpZEZpbHRlcihwYXJhbS5jaGFyYWN0ZXJpc3RpY191dWlkKTtcbiAgICBjb25zdCBzOiBhbnkgPSB0aGlzLmdldFNlcnZpY2Uoc2VydmljZVV1aWQpO1xuICAgIGlmIChzKSB7XG4gICAgICByZXR1cm4gcy5nZXRDaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpY1V1aWQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kRGVzY3JpcHRvcihwYXJhbTogYW55KSB7XG4gICAgY29uc3QgZGVzY3JpcHRvclV1aWQ6IGFueSA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHBhcmFtLmRlc2NyaXB0b3JfdXVpZCk7XG4gICAgY29uc3QgYzogYW55ID0gdGhpcy5maW5kQ2hhcmFjdGVyaXN0aWMocGFyYW0pO1xuICAgIGlmIChjKSB7XG4gICAgICByZXR1cm4gYy5nZXREZXNjcmlwdG9yKGRlc2NyaXB0b3JVdWlkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgZW5kKCkge1xuICAgIHRoaXMuc3RvcEFsbFNlcnZpY2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBvbmNvbm5lY3Rpb251cGRhdGVzKCkge1xuICB9XG5cbiAgcHVibGljIG9uZXJyb3IoKSB7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlUGVyaXBoZXJhbDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleAttributeAbstract.js"));
class BleRemoteAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.isRemote = false;
        this.discoverdOnRemote = false;
    }
    get wsChildUuidName() {
        const childrenName = this.childrenName;
        if (!childrenName) {
            return null;
        }
        const childName = childrenName.slice(0, -1);
        return childName + "_uuid";
    }
    discoverChildren() {
    }
    discoverChildrenWait() {
        return new Promise((resolve) => {
            this.emitter.once("discoverfinished", () => {
                const children = this.children.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                resolve(children);
            });
            this.discoverChildren();
        });
    }
    /**
     * CALLBACKS
     */
    ondiscover(child) {
    }
    ondiscoverfinished(children) {
    }
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        switch (notifyName) {
            case "discover": {
                const uuid = params[this.wsChildUuidName];
                let child = this.getChild(uuid);
                if (!child) {
                    child = this.addChild({ uuid });
                }
                child.discoverdOnRemote = true;
                child.properties = params.properties || [];
                this.ondiscover(child);
                break;
            }
            case "discoverfinished": {
                const children = this.children.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                this.ondiscoverfinished(children);
                break;
            }
        }
    }
}
exports.default = BleRemoteAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRkFBMEQ7QUFFMUQsTUFBTSwwQkFBMkIsU0FBUSw4QkFBb0I7SUFTM0QsWUFBWSxNQUFXO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixNQUFNLFlBQVksR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sU0FBUyxHQUFRLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsT0FBTyxTQUFTLEdBQUcsT0FBTyxDQUFDO0lBQzdCLENBQUM7SUFFTSxnQkFBZ0I7SUFDdkIsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO2dCQUN6QyxNQUFNLFFBQVEsR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO29CQUN0RCxPQUFPLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVLENBQUMsS0FBVTtJQUM1QixDQUFDO0lBRU0sa0JBQWtCLENBQUMsUUFBYTtJQUN2QyxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsVUFBZSxFQUFFLE1BQVc7UUFDbEQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQyxRQUFRLFVBQVUsRUFBRTtZQUNsQixLQUFLLFVBQVUsQ0FBQyxDQUFDO2dCQUNmLE1BQU0sSUFBSSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZ0IsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEtBQUssR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNWLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztpQkFDL0I7Z0JBQ0QsS0FBSyxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztnQkFDL0IsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsTUFBTTthQUNQO1lBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLFFBQVEsR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO29CQUN0RCxPQUFPLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNsQyxNQUFNO2FBQ1A7U0FDRjtJQUNILENBQUM7Q0FDRjtBQUVELGtCQUFlLDBCQUEwQixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlQXR0cmlidXRlQWJzdHJhY3QgZnJvbSBcIi4vYmxlQXR0cmlidXRlQWJzdHJhY3RcIjtcblxuY2xhc3MgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QgZXh0ZW5kcyBCbGVBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIHB1YmxpYyBpc1JlbW90ZTogYW55O1xuICBwdWJsaWMgZGlzY292ZXJkT25SZW1vdGU6IGFueTtcbiAgcHVibGljIGNoaWxkcmVuTmFtZTogYW55O1xuICBwdWJsaWMgZW1pdHRlcjogYW55O1xuICBwdWJsaWMgY2hpbGRyZW46IGFueTtcbiAgcHVibGljIGdldENoaWxkOiBhbnk7XG4gIHB1YmxpYyBhZGRDaGlsZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55KSB7XG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIHRoaXMuaXNSZW1vdGUgPSBmYWxzZTtcbiAgICB0aGlzLmRpc2NvdmVyZE9uUmVtb3RlID0gZmFsc2U7XG4gIH1cblxuICBnZXQgd3NDaGlsZFV1aWROYW1lKCkge1xuICAgIGNvbnN0IGNoaWxkcmVuTmFtZTogYW55ID0gdGhpcy5jaGlsZHJlbk5hbWU7XG4gICAgaWYgKCFjaGlsZHJlbk5hbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZE5hbWU6IGFueSA9IGNoaWxkcmVuTmFtZS5zbGljZSgwLCAtMSk7XG4gICAgcmV0dXJuIGNoaWxkTmFtZSArIFwiX3V1aWRcIjtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb3ZlckNoaWxkcmVuKCkge1xuICB9XG5cbiAgcHVibGljIGRpc2NvdmVyQ2hpbGRyZW5XYWl0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIub25jZShcImRpc2NvdmVyZmluaXNoZWRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbjogYW55ID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIoKGVsbTogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGVsbS5kaXNjb3ZlcmRPblJlbW90ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc29sdmUoY2hpbGRyZW4pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc2NvdmVyQ2hpbGRyZW4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDQUxMQkFDS1NcbiAgICovXG4gIHB1YmxpYyBvbmRpc2NvdmVyKGNoaWxkOiBhbnkpIHtcbiAgfVxuXG4gIHB1YmxpYyBvbmRpc2NvdmVyZmluaXNoZWQoY2hpbGRyZW46IGFueSkge1xuICB9XG5cbiAgcHVibGljIG5vdGlmeUZyb21TZXJ2ZXIobm90aWZ5TmFtZTogYW55LCBwYXJhbXM6IGFueSkge1xuICAgIHN1cGVyLm5vdGlmeUZyb21TZXJ2ZXIobm90aWZ5TmFtZSwgcGFyYW1zKTtcbiAgICBzd2l0Y2ggKG5vdGlmeU5hbWUpIHtcbiAgICAgIGNhc2UgXCJkaXNjb3ZlclwiOiB7XG4gICAgICAgIGNvbnN0IHV1aWQ6IGFueSA9IHBhcmFtc1t0aGlzLndzQ2hpbGRVdWlkTmFtZSFdO1xuICAgICAgICBsZXQgY2hpbGQ6IGFueSA9IHRoaXMuZ2V0Q2hpbGQodXVpZCk7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICBjaGlsZCA9IHRoaXMuYWRkQ2hpbGQoe3V1aWR9KTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC5kaXNjb3ZlcmRPblJlbW90ZSA9IHRydWU7XG4gICAgICAgIGNoaWxkLnByb3BlcnRpZXMgPSBwYXJhbXMucHJvcGVydGllcyB8fCBbXTtcbiAgICAgICAgdGhpcy5vbmRpc2NvdmVyKGNoaWxkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZGlzY292ZXJmaW5pc2hlZFwiOiB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuOiBhbnkgPSB0aGlzLmNoaWxkcmVuLmZpbHRlcigoZWxtOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gZWxtLmRpc2NvdmVyZE9uUmVtb3RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbmRpc2NvdmVyZmluaXNoZWQoY2hpbGRyZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3Q7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteCharacteristic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js"));
const bleRemoteDescriptor_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteDescriptor.js"));
class BleRemoteCharacteristic extends bleRemoteAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.properties = params.properties || [];
        if (!Array.isArray(this.properties)) {
            this.properties = [this.properties];
        }
    }
    get parentName() {
        return "service";
    }
    get childrenClass() {
        return bleRemoteDescriptor_1.default;
    }
    get childrenName() {
        return "descriptors";
    }
    get descriptors() {
        return this.children;
    }
    addDescriptor(params) {
        return this.addChild(params);
    }
    getDescriptor(uuid) {
        return this.getChild(uuid);
    }
    registerNotify(callback) {
        this.onnotify = callback;
        this.service.peripheral.obnizBle.centralBindings.notify(this.service.peripheral.address, this.service.uuid, this.uuid, true);
    }
    registerNotifyWait(callback) {
        return new Promise((resolve) => {
            this.emitter.once("onregisternotify", () => {
                resolve();
            });
            this.registerNotify(callback);
        });
    }
    unregisterNotify() {
        this.onnotify = () => {
        };
        this.service.peripheral.obnizBle.centralBindings.notify(this.service.peripheral.address, this.service.uuid, this.uuid, false);
    }
    unregisterNotifyWait() {
        return new Promise((resolve) => {
            this.emitter.once("onunregisternotify", () => {
                resolve();
            });
            this.unregisterNotify();
        });
    }
    read() {
        this.service.peripheral.obnizBle.centralBindings.read(this.service.peripheral.address, this.service.uuid, this.uuid);
    }
    write(array, needResponse) {
        if (needResponse === undefined) {
            needResponse = true;
        }
        this.service.peripheral.obnizBle.centralBindings.write(this.service.peripheral.address, this.service.uuid, this.uuid, Buffer.from(array), !needResponse);
    }
    discoverChildren() {
        this.service.peripheral.obnizBle.centralBindings.discoverDescriptors(this.service.peripheral.address, this.service.uuid, this.uuid);
    }
    discoverAllDescriptors() {
        return this.discoverChildren();
    }
    discoverAllDescriptorsWait() {
        return this.discoverChildrenWait();
    }
    toJSON() {
        const obj = super.toJSON();
        if (this.properties.length > 0) {
            obj.properties = this.properties;
        }
        return obj;
    }
    canBroadcast() {
        return this.properties.includes("broadcast");
    }
    canNotify() {
        return this.properties.includes("notify");
    }
    canRead() {
        return this.properties.includes("read");
    }
    canWrite() {
        return this.properties.includes("write");
    }
    canWriteWithoutResponse() {
        return this.properties.includes("write_without_response");
    }
    canIndicate() {
        return this.properties.includes("indicate");
    }
    ondiscover(descriptor) {
        this.ondiscoverdescriptor(descriptor);
    }
    ondiscoverfinished(descriptors) {
        this.ondiscoverdescriptorfinished(descriptors);
    }
    ondiscoverdescriptor(descriptor) {
    }
    ondiscoverdescriptorfinished(descriptors) {
    }
    onregisternotify() {
    }
    onunregisternotify() {
    }
    onnotify(data) {
    }
    notifyFromServer(notifyName, params) {
        super.notifyFromServer(notifyName, params);
        switch (notifyName) {
            case "onregisternotify": {
                this.onregisternotify();
                break;
            }
            case "onunregisternotify": {
                this.onunregisternotify();
                break;
            }
            case "onnotify": {
                this.onnotify(params.data || undefined);
                break;
            }
        }
    }
}
exports.default = BleRemoteCharacteristic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteDescriptor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js"));
class BleRemoteDescriptor extends bleRemoteAttributeAbstract_1.default {
    constructor(params) {
        super(params);
    }
    get parentName() {
        return "characteristic";
    }
    read() {
        this.characteristic.service.peripheral.obnizBle.centralBindings.readValue(this.characteristic.service.peripheral.address, this.characteristic.service.uuid, this.characteristic.uuid, this.uuid);
    }
    write(array) {
        this.characteristic.service.peripheral.obnizBle.centralBindings.writeValue(this.characteristic.service.peripheral.address, this.characteristic.service.uuid, this.characteristic.uuid, this.uuid, Buffer.from(array));
    }
}
exports.default = BleRemoteDescriptor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUmVtb3RlRGVzY3JpcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhGQUFzRTtBQUV0RSxNQUFNLG1CQUFvQixTQUFRLG9DQUEwQjtJQUkxRCxZQUFZLE1BQVc7UUFDckIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUN2RSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUM5QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUN4QixJQUFJLENBQUMsSUFBSSxDQUNWLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUN4RSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUM5QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUN4QixJQUFJLENBQUMsSUFBSSxFQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ25CLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxtQkFBbUIsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL2JsZVJlbW90ZURlc2NyaXB0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3QgZnJvbSBcIi4vYmxlUmVtb3RlQXR0cmlidXRlQWJzdHJhY3RcIjtcblxuY2xhc3MgQmxlUmVtb3RlRGVzY3JpcHRvciBleHRlbmRzIEJsZVJlbW90ZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIGNoYXJhY3RlcmlzdGljOiBhbnk7XG4gIHB1YmxpYyB1dWlkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkpIHtcbiAgICBzdXBlcihwYXJhbXMpO1xuICB9XG5cbiAgZ2V0IHBhcmVudE5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwiY2hhcmFjdGVyaXN0aWNcIjtcbiAgfVxuXG4gIHB1YmxpYyByZWFkKCkge1xuICAgIHRoaXMuY2hhcmFjdGVyaXN0aWMuc2VydmljZS5wZXJpcGhlcmFsLm9ibml6QmxlLmNlbnRyYWxCaW5kaW5ncy5yZWFkVmFsdWUoXG4gICAgICB0aGlzLmNoYXJhY3RlcmlzdGljLnNlcnZpY2UucGVyaXBoZXJhbC5hZGRyZXNzLFxuICAgICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnV1aWQsXG4gICAgICB0aGlzLmNoYXJhY3RlcmlzdGljLnV1aWQsXG4gICAgICB0aGlzLnV1aWQsXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShhcnJheTogYW55KSB7XG4gICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWwub2JuaXpCbGUuY2VudHJhbEJpbmRpbmdzLndyaXRlVmFsdWUoXG4gICAgICB0aGlzLmNoYXJhY3RlcmlzdGljLnNlcnZpY2UucGVyaXBoZXJhbC5hZGRyZXNzLFxuICAgICAgdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnV1aWQsXG4gICAgICB0aGlzLmNoYXJhY3RlcmlzdGljLnV1aWQsXG4gICAgICB0aGlzLnV1aWQsXG4gICAgICBCdWZmZXIuZnJvbShhcnJheSksXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCbGVSZW1vdGVEZXNjcmlwdG9yO1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemotePeripheral.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
const bleRemoteService_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteService.js"));
class BleRemotePeripheral {
    constructor(obnizBle, address) {
        this.obnizBle = obnizBle;
        this.address = address;
        this.connected = false;
        this.device_type = null;
        this.address_type = null;
        this.ble_event_type = null;
        this.rssi = null;
        this.adv_data = null;
        this.scan_resp = null;
        this.keys = [
            "device_type",
            "address_type",
            "ble_event_type",
            "rssi",
            "adv_data",
            "scan_resp",
        ];
        this._services = [];
        this.emitter = new emitter();
    }
    /**
     *
     * @return {String} json value
     */
    toString() {
        return JSON.stringify({
            address: this.address,
            addressType: this.address_type,
            advertisement: this.adv_data,
            scanResponse: this.scan_resp,
            rssi: this.rssi,
        });
    }
    setParams(dic) {
        this.advertise_data_rows = null;
        for (const key in dic) {
            if (dic.hasOwnProperty(key) && this.keys.includes(key)) {
                this[key] = dic[key];
            }
        }
        this.analyseAdvertisement();
    }
    analyseAdvertisement() {
        if (!this.advertise_data_rows) {
            this.advertise_data_rows = [];
            if (this.adv_data) {
                for (let i = 0; i < this.adv_data.length; i++) {
                    const length = this.adv_data[i];
                    const arr = new Array(length);
                    for (let j = 0; j < length; j++) {
                        arr[j] = this.adv_data[i + j + 1];
                    }
                    this.advertise_data_rows.push(arr);
                    i = i + length;
                }
            }
            if (this.scan_resp) {
                for (let i = 0; i < this.scan_resp.length; i++) {
                    const length = this.scan_resp[i];
                    const arr = new Array(length);
                    for (let j = 0; j < length; j++) {
                        arr[j] = this.scan_resp[i + j + 1];
                    }
                    this.advertise_data_rows.push(arr);
                    i = i + length;
                }
            }
            this.setLocalName();
            this.setIBeacon();
        }
    }
    searchTypeVal(type) {
        this.analyseAdvertisement();
        for (let i = 0; i < this.advertise_data_rows.length; i++) {
            if (this.advertise_data_rows[i][0] === type) {
                const results = [].concat(this.advertise_data_rows[i]);
                results.shift();
                return results;
            }
        }
        return undefined;
    }
    setLocalName() {
        let data = this.searchTypeVal(0x09);
        if (!data) {
            data = this.searchTypeVal(0x08);
        }
        if (!data) {
            this.localName = null;
        }
        else {
            this.localName = String.fromCharCode.apply(null, data);
        }
    }
    setIBeacon() {
        const data = this.searchTypeVal(0xff);
        if (!data ||
            data[0] !== 0x4c ||
            data[1] !== 0x00 ||
            data[2] !== 0x02 ||
            data[3] !== 0x15 ||
            data.length !== 25) {
            this.iBeacon = null;
            return;
        }
        const uuidData = data.slice(4, 20);
        let uuid = "";
        for (let i = 0; i < uuidData.length; i++) {
            uuid = uuid + ("00" + uuidData[i].toString(16)).slice(-2);
            if (i === 4 - 1 ||
                i === 4 + 2 - 1 ||
                i === 4 + 2 * 2 - 1 ||
                i === 4 + 2 * 3 - 1) {
                uuid += "-";
            }
        }
        const major = (data[20] << 8) + data[21];
        const minor = (data[22] << 8) + data[23];
        const power = data[24];
        this.iBeacon = {
            uuid,
            major,
            minor,
            power,
            rssi: this.rssi,
        };
    }
    _addServiceUuids(results, data, bit) {
        if (!data) {
            return;
        }
        const uuidLength = bit / 4;
        for (let i = 0; i < data.length; i = i + uuidLength) {
            const one = data.slice(i, i + uuidLength);
            results.push(this.obnizBle.constructor._dataArray2uuidHex(one, true));
        }
    }
    advertisementServiceUuids() {
        const results = [];
        this._addServiceUuids(results, this.searchTypeVal(0x02), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x03), 16);
        this._addServiceUuids(results, this.searchTypeVal(0x04), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x05), 32);
        this._addServiceUuids(results, this.searchTypeVal(0x06), 64);
        this._addServiceUuids(results, this.searchTypeVal(0x07), 64);
        return results;
    }
    connect() {
        this.obnizBle.scan.end();
        this.obnizBle.centralBindings.connect(this.address);
    }
    connectWait() {
        return new Promise((resolve, reject) => {
            // if (this.connected) {
            //   resolve();
            //   return;
            // }
            this.emitter.once("statusupdate", (params) => {
                if (params.status === "connected") {
                    resolve(true); // for compatibility
                }
                else {
                    reject(new Error(`connection to peripheral name=${this.localName} address=${this.address} can't be established`));
                }
            });
            this.connect();
        });
    }
    disconnect() {
        this.obnizBle.centralBindings.disconnect(this.address);
    }
    disconnectWait() {
        return new Promise((resolve, reject) => {
            // if (!this.connected) {
            //   resolve();
            //   return;
            // }
            this.emitter.once("statusupdate", (params) => {
                if (params.status === "disconnected") {
                    resolve(true); // for compatibility
                }
                else {
                    reject(new Error(`cutting connection to peripheral name=${this.localName} address=${this.address} was failed`));
                }
            });
            this.disconnect();
        });
    }
    get services() {
        return this._services;
    }
    getService(uuid) {
        uuid = bleHelper_1.default.uuidFilter(uuid);
        for (const key in this._services) {
            if (this._services[key].uuid === uuid) {
                return this._services[key];
            }
        }
        return undefined;
    }
    findService(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        return this.getService(serviceUuid);
    }
    findCharacteristic(param) {
        const serviceUuid = bleHelper_1.default.uuidFilter(param.service_uuid);
        const characteristicUuid = bleHelper_1.default.uuidFilter(param.characteristic_uuid);
        const s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        const descriptorUuid = bleHelper_1.default.uuidFilter(param.descriptor_uuid);
        const c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    discoverAllServices() {
        this.obnizBle.centralBindings.discoverServices(this.address);
    }
    discoverAllServicesWait() {
        return new Promise((resolve) => {
            this.emitter.once("discoverfinished", () => {
                const children = this._services.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                resolve(children);
            });
            this.discoverAllServices();
        });
    }
    discoverAllHandlesWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ArrayFlat = (array, depth) => {
                const flattend = [];
                (function flat(_array, _depth) {
                    for (const el of _array) {
                        if (Array.isArray(el) && _depth > 0) {
                            flat(el, _depth - 1);
                        }
                        else {
                            flattend.push(el);
                        }
                    }
                })(array, Math.floor(depth) || 1);
                return flattend;
            };
            const services = yield this.discoverAllServicesWait();
            const charsNest = yield Promise.all(services.map((s) => s.discoverAllCharacteristicsWait()));
            const chars = ArrayFlat(charsNest);
            const descriptorsNest = yield Promise.all(chars.map((c) => c.discoverAllDescriptorsWait()));
            // eslint-disable-next-line no-unused-vars
            const descriptors = ArrayFlat(descriptorsNest);
        });
    }
    onconnect() {
    }
    ondisconnect() {
    }
    ondiscoverservice(child) {
    }
    ondiscoverservicefinished(children) {
    }
    ondiscover() {
    }
    ondiscoverfinished() {
    }
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case "statusupdate": {
                if (params.status === "connected") {
                    this.connected = true;
                    this.onconnect();
                }
                if (params.status === "disconnected") {
                    this.connected = false;
                    this.ondisconnect();
                }
                break;
            }
            case "discover": {
                const uuid = params.service_uuid;
                let child = this.getService(uuid);
                if (!child) {
                    const newService = new bleRemoteService_1.default({ uuid });
                    newService.parent = this;
                    this._services.push(newService);
                    child = newService;
                }
                child.discoverdOnRemote = true;
                this.ondiscoverservice(child);
                break;
            }
            case "discoverfinished": {
                const children = this._services.filter((elm) => {
                    return elm.discoverdOnRemote;
                });
                this.ondiscoverservicefinished(children);
                break;
            }
        }
    }
    onerror() {
    }
}
exports.default = BleRemotePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleRemoteService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleRemoteAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.js"));
const bleRemoteCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleRemoteCharacteristic.js"));
class BleRemoteService extends bleRemoteAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
    }
    get parentName() {
        return "peripheral";
    }
    get childrenClass() {
        return bleRemoteCharacteristic_1.default;
    }
    get childrenName() {
        return "characteristics";
    }
    get characteristics() {
        return this.children;
    }
    addCharacteristic(params) {
        return this.addChild(params);
    }
    getCharacteristic(params) {
        return this.getChild(params);
    }
    discoverAllCharacteristics() {
        return this.discoverChildren();
    }
    discoverAllCharacteristicsWait() {
        return this.discoverChildrenWait();
    }
    discoverChildren() {
        this.parent.obnizBle.centralBindings.discoverCharacteristics(this.peripheral.address, this.uuid);
    }
    ondiscover(characteristic) {
        this.ondiscovercharacteristic(characteristic);
    }
    ondiscoverfinished(characteristics) {
        this.ondiscovercharacteristicfinished(characteristics);
    }
    ondiscovercharacteristic(characteristic) {
    }
    ondiscovercharacteristicfinished(characteristics) {
    }
}
exports.default = BleRemoteService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUmVtb3RlU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhGQUFzRTtBQUN0RSx3RkFBZ0U7QUFFaEUsTUFBTSxnQkFBaUIsU0FBUSxvQ0FBMEI7SUFTdkQsWUFBWSxHQUFRO1FBQ2xCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxpQ0FBdUIsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRU0saUJBQWlCLENBQUMsTUFBVztRQUNsQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE1BQVc7UUFDbEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSwwQkFBMEI7UUFDL0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU0sOEJBQThCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQzFELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUNWLENBQUM7SUFDSixDQUFDO0lBRU0sVUFBVSxDQUFDLGNBQW1CO1FBQ25DLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sa0JBQWtCLENBQUMsZUFBb0I7UUFDNUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSx3QkFBd0IsQ0FBQyxjQUFtQjtJQUNuRCxDQUFDO0lBRU0sZ0NBQWdDLENBQUMsZUFBc0I7SUFDOUQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9ibGVSZW1vdGVTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsZVJlbW90ZUF0dHJpYnV0ZUFic3RyYWN0IGZyb20gXCIuL2JsZVJlbW90ZUF0dHJpYnV0ZUFic3RyYWN0XCI7XG5pbXBvcnQgQmxlUmVtb3RlQ2hhcmFjdGVyaXN0aWMgZnJvbSBcIi4vYmxlUmVtb3RlQ2hhcmFjdGVyaXN0aWNcIjtcblxuY2xhc3MgQmxlUmVtb3RlU2VydmljZSBleHRlbmRzIEJsZVJlbW90ZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIGNoaWxkcmVuOiBhbnk7XG4gIHB1YmxpYyBhZGRDaGlsZDogYW55O1xuICBwdWJsaWMgZ2V0Q2hpbGQ6IGFueTtcbiAgcHVibGljIGRpc2NvdmVyQ2hpbGRyZW5XYWl0OiBhbnk7XG4gIHB1YmxpYyBwYXJlbnQ6IGFueTtcbiAgcHVibGljIHBlcmlwaGVyYWw6IGFueTtcbiAgcHVibGljIHV1aWQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuICAgIHN1cGVyKG9iaik7XG4gIH1cblxuICBnZXQgcGFyZW50TmFtZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gXCJwZXJpcGhlcmFsXCI7XG4gIH1cblxuICBnZXQgY2hpbGRyZW5DbGFzcygpOiBhbnkge1xuICAgIHJldHVybiBCbGVSZW1vdGVDaGFyYWN0ZXJpc3RpYztcbiAgfVxuXG4gIGdldCBjaGlsZHJlbk5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwiY2hhcmFjdGVyaXN0aWNzXCI7XG4gIH1cblxuICBnZXQgY2hhcmFjdGVyaXN0aWNzKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICB9XG5cbiAgcHVibGljIGFkZENoYXJhY3RlcmlzdGljKHBhcmFtczogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkQ2hpbGQocGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDaGFyYWN0ZXJpc3RpYyhwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldENoaWxkKHBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgZGlzY292ZXJBbGxDaGFyYWN0ZXJpc3RpY3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzY292ZXJDaGlsZHJlbigpO1xuICB9XG5cbiAgcHVibGljIGRpc2NvdmVyQWxsQ2hhcmFjdGVyaXN0aWNzV2FpdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNjb3ZlckNoaWxkcmVuV2FpdCgpO1xuICB9XG5cbiAgcHVibGljIGRpc2NvdmVyQ2hpbGRyZW4oKSB7XG4gICAgdGhpcy5wYXJlbnQub2JuaXpCbGUuY2VudHJhbEJpbmRpbmdzLmRpc2NvdmVyQ2hhcmFjdGVyaXN0aWNzKFxuICAgICAgdGhpcy5wZXJpcGhlcmFsLmFkZHJlc3MsXG4gICAgICB0aGlzLnV1aWQsXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBvbmRpc2NvdmVyKGNoYXJhY3RlcmlzdGljOiBhbnkpIHtcbiAgICB0aGlzLm9uZGlzY292ZXJjaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpYyk7XG4gIH1cblxuICBwdWJsaWMgb25kaXNjb3ZlcmZpbmlzaGVkKGNoYXJhY3RlcmlzdGljczogYW55KSB7XG4gICAgdGhpcy5vbmRpc2NvdmVyY2hhcmFjdGVyaXN0aWNmaW5pc2hlZChjaGFyYWN0ZXJpc3RpY3MpO1xuICB9XG5cbiAgcHVibGljIG9uZGlzY292ZXJjaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpYzogYW55KSB7XG4gIH1cblxuICBwdWJsaWMgb25kaXNjb3ZlcmNoYXJhY3RlcmlzdGljZmluaXNoZWQoY2hhcmFjdGVyaXN0aWNzOiBhbnlbXSkge1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZVJlbW90ZVNlcnZpY2U7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleScan.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
const bleHelper_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleHelper.js"));
class BleScan {
    constructor(obnizBle) {
        this.scanTarget = null;
        this.scanSettings = {};
        this.obnizBle = obnizBle;
        this.emitter = new emitter();
        this.scanedPeripherals = [];
        this._timeoutTimer = null;
    }
    start(target, settings) {
        this.obnizBle.warningIfNotInitialize();
        if (!settings) {
            settings = {};
        }
        const timeout = settings.duration || 30;
        settings.duplicate = settings.duplicate === true ? true : false;
        this.scanSettings = settings;
        target = target || {};
        this.scanTarget = target;
        if (this.scanTarget &&
            this.scanTarget.uuids &&
            Array.isArray(this.scanTarget.uuids)) {
            this.scanTarget.uuids = this.scanTarget.uuids.map((elm) => {
                return bleHelper_1.default.uuidFilter(elm);
            });
        }
        this.scanedPeripherals = [];
        this.obnizBle.centralBindings.startScanning(null, false);
        this.clearTimeoutTimer();
        this._timeoutTimer = setTimeout(() => {
            this._timeoutTimer = null;
            this.end();
        }, timeout * 1000);
    }
    startOneWait(target, settings) {
        let state = 0;
        return new Promise((resolve) => {
            this.emitter.once("onfind", (param) => {
                if (state === 0) {
                    state = 1;
                    this.end();
                    resolve(param);
                }
            });
            this.emitter.once("onfinish", () => {
                if (state === 0) {
                    state = 1;
                    resolve(null);
                }
            });
            this.start(target, settings);
        });
    }
    startAllWait(target, settings) {
        return new Promise((resolve) => {
            this.emitter.once("onfinish", () => {
                resolve(this.scanedPeripherals);
            });
            this.start(target, settings);
        });
    }
    end() {
        this.clearTimeoutTimer();
        this.obnizBle.centralBindings.stopScanning();
    }
    isTarget(peripheral) {
        if (this.scanTarget &&
            this.scanTarget.localName &&
            peripheral.localName !== this.scanTarget.localName) {
            return false;
        }
        if (this.scanTarget && this.scanTarget.uuids) {
            const uuids = peripheral.advertisementServiceUuids().map((e) => {
                return bleHelper_1.default.uuidFilter(e);
            });
            for (const uuid of this.scanTarget.uuids) {
                if (!uuids.includes(uuid)) {
                    return false;
                }
            }
        }
        return true;
    }
    onfinish(data) {
    } // dummy
    onfind(params) {
    } // dummy
    notifyFromServer(notifyName, params) {
        switch (notifyName) {
            case "onfind": {
                if (this.scanSettings.duplicate === false) {
                    // duplicate filter
                    if (this.scanedPeripherals.find((e) => e.address === params.address)) {
                        break;
                    }
                }
                if (this.isTarget(params)) {
                    this.scanedPeripherals.push(params);
                    this.emitter.emit(notifyName, params);
                    this.onfind(params);
                }
                break;
            }
            case "onfinish": {
                this.clearTimeoutTimer();
                this.emitter.emit(notifyName, this.scanedPeripherals);
                this.onfinish(this.scanedPeripherals);
                break;
            }
        }
    }
    clearTimeoutTimer() {
        if (this._timeoutTimer) {
            clearTimeout(this._timeoutTimer);
            this._timeoutTimer = null;
        }
    }
}
exports.default = BleScan;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleSecurity.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const emitter = __webpack_require__("./node_modules/eventemitter3/index.js");
class BleSecurity {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.emitter = new emitter();
    }
    setModeLevel(mode, level) {
        throw new Error("setModeLevel is deprecated method");
    }
    checkIntroducedFirmware(introducedVersion, functionName) {
        throw new Error("checkIntroducedFirmware is deprecated method");
    }
    setAuth(authTypes) {
        throw new Error("setAuth is deprecated method");
    }
    setIndicateSecurityLevel(level) {
        throw new Error("setIndicateSecurityLevel is deprecated method");
    }
    setEnableKeyTypes(keyTypes) {
        throw new Error("setEnableKeyTypes is deprecated method");
    }
    setKeyMaxSize(size) {
        throw new Error("setKeyMaxSize is deprecated method");
    }
    clearBondingDevicesList() {
        throw new Error("clearBondingDevicesList is deprecated method");
    }
    onerror(params) {
    } // dummy
    notifyFromServer(notifyName, params) {
        switch (notifyName) {
            case "onerror": {
                this.onerror(params);
                break;
            }
        }
    }
}
exports.default = BleSecurity;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlU2VjdXJpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBMEM7QUFFMUMsTUFBTSxXQUFXO0lBSWYsWUFBWSxLQUFVO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sWUFBWSxDQUFDLElBQVMsRUFBRSxLQUFVO1FBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sdUJBQXVCLENBQUMsaUJBQXNCLEVBQUUsWUFBaUI7UUFDdEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxPQUFPLENBQUMsU0FBYztRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLHdCQUF3QixDQUFDLEtBQVU7UUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxRQUFhO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sYUFBYSxDQUFDLElBQVM7UUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFTSx1QkFBdUI7UUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxPQUFPLENBQUMsTUFBVztJQUMxQixDQUFDLENBQUMsUUFBUTtJQUVILGdCQUFnQixDQUFDLFVBQWUsRUFBRSxNQUFXO1FBQ2xELFFBQVEsVUFBVSxFQUFFO1lBQ2xCLEtBQUssU0FBUyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDckIsTUFBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9ibGVTZWN1cml0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbWl0dGVyID0gcmVxdWlyZShcImV2ZW50ZW1pdHRlcjNcIik7XG5cbmNsYXNzIEJsZVNlY3VyaXR5IHtcbiAgcHVibGljIE9ibml6OiBhbnk7XG4gIHB1YmxpYyBlbWl0dGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoT2JuaXo6IGFueSkge1xuICAgIHRoaXMuT2JuaXogPSBPYm5pejtcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgZW1pdHRlcigpO1xuICB9XG5cbiAgcHVibGljIHNldE1vZGVMZXZlbChtb2RlOiBhbnksIGxldmVsOiBhbnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXRNb2RlTGV2ZWwgaXMgZGVwcmVjYXRlZCBtZXRob2RcIik7XG4gIH1cblxuICBwdWJsaWMgY2hlY2tJbnRyb2R1Y2VkRmlybXdhcmUoaW50cm9kdWNlZFZlcnNpb246IGFueSwgZnVuY3Rpb25OYW1lOiBhbnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjaGVja0ludHJvZHVjZWRGaXJtd2FyZSBpcyBkZXByZWNhdGVkIG1ldGhvZFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRBdXRoKGF1dGhUeXBlczogYW55KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwic2V0QXV0aCBpcyBkZXByZWNhdGVkIG1ldGhvZFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRJbmRpY2F0ZVNlY3VyaXR5TGV2ZWwobGV2ZWw6IGFueSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInNldEluZGljYXRlU2VjdXJpdHlMZXZlbCBpcyBkZXByZWNhdGVkIG1ldGhvZFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRFbmFibGVLZXlUeXBlcyhrZXlUeXBlczogYW55KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwic2V0RW5hYmxlS2V5VHlwZXMgaXMgZGVwcmVjYXRlZCBtZXRob2RcIik7XG4gIH1cblxuICBwdWJsaWMgc2V0S2V5TWF4U2l6ZShzaXplOiBhbnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXRLZXlNYXhTaXplIGlzIGRlcHJlY2F0ZWQgbWV0aG9kXCIpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyQm9uZGluZ0RldmljZXNMaXN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNsZWFyQm9uZGluZ0RldmljZXNMaXN0IGlzIGRlcHJlY2F0ZWQgbWV0aG9kXCIpO1xuICB9XG5cbiAgcHVibGljIG9uZXJyb3IocGFyYW1zOiBhbnkpIHtcbiAgfSAvLyBkdW1teVxuXG4gIHB1YmxpYyBub3RpZnlGcm9tU2VydmVyKG5vdGlmeU5hbWU6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICBzd2l0Y2ggKG5vdGlmeU5hbWUpIHtcbiAgICAgIGNhc2UgXCJvbmVycm9yXCI6IHtcbiAgICAgICAgdGhpcy5vbmVycm9yKHBhcmFtcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCbGVTZWN1cml0eTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/bleService.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleCharacteristic_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleCharacteristic.js"));
const bleLocalAttributeAbstract_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.js"));
class BleService extends bleLocalAttributeAbstract_1.default {
    constructor(obj) {
        super(obj);
        this.addCharacteristic = this.addChild;
        this.getCharacteristic = this.getChild;
    }
    get parentName() {
        return "peripheral";
    }
    get childrenName() {
        return "characteristics";
    }
    get childrenClass() {
        return bleCharacteristic_1.default;
    }
    get characteristics() {
        return this.children;
    }
    get advData() {
        return {
            flags: ["general_discoverable_mode", "br_edr_not_supported"],
            serviceUuids: [this.uuid],
        };
    }
    end() {
        this.peripheral.removeService(this.uuid);
    }
    emit(name, ...params) {
    }
    notify(notifyName, params) {
        // nothing
    }
}
exports.default = BleService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRFQUFvRDtBQUNwRCw0RkFBb0U7QUFFcEUsTUFBTSxVQUFXLFNBQVEsbUNBQXlCO0lBU2hELFlBQVksR0FBUTtRQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sMkJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU87WUFDTCxLQUFLLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxzQkFBc0IsQ0FBQztZQUM1RCxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzFCLENBQUM7SUFDSixDQUFDO0lBRU0sR0FBRztRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVMsRUFBRSxHQUFHLE1BQVc7SUFDckMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFlLEVBQUUsTUFBVztRQUN4QyxVQUFVO0lBQ1osQ0FBQztDQUNGO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVDaGFyYWN0ZXJpc3RpYyBmcm9tIFwiLi9ibGVDaGFyYWN0ZXJpc3RpY1wiO1xuaW1wb3J0IEJsZUxvY2FsQXR0cmlidXRlQWJzdHJhY3QgZnJvbSBcIi4vYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuXG5jbGFzcyBCbGVTZXJ2aWNlIGV4dGVuZHMgQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIHB1YmxpYyBhZGRDaGFyYWN0ZXJpc3RpYzogYW55O1xuICBwdWJsaWMgYWRkQ2hpbGQ6IGFueTtcbiAgcHVibGljIGdldENoYXJhY3RlcmlzdGljOiBhbnk7XG4gIHB1YmxpYyBnZXRDaGlsZDogYW55O1xuICBwdWJsaWMgY2hpbGRyZW46IGFueTtcbiAgcHVibGljIHV1aWQ6IGFueTtcbiAgcHVibGljIHBlcmlwaGVyYWw6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuICAgIHN1cGVyKG9iaik7XG5cbiAgICB0aGlzLmFkZENoYXJhY3RlcmlzdGljID0gdGhpcy5hZGRDaGlsZDtcbiAgICB0aGlzLmdldENoYXJhY3RlcmlzdGljID0gdGhpcy5nZXRDaGlsZDtcbiAgfVxuXG4gIGdldCBwYXJlbnROYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBcInBlcmlwaGVyYWxcIjtcbiAgfVxuXG4gIGdldCBjaGlsZHJlbk5hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIFwiY2hhcmFjdGVyaXN0aWNzXCI7XG4gIH1cblxuICBnZXQgY2hpbGRyZW5DbGFzcygpOiBhbnkge1xuICAgIHJldHVybiBCbGVDaGFyYWN0ZXJpc3RpYztcbiAgfVxuXG4gIGdldCBjaGFyYWN0ZXJpc3RpY3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG4gIH1cblxuICBnZXQgYWR2RGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmxhZ3M6IFtcImdlbmVyYWxfZGlzY292ZXJhYmxlX21vZGVcIiwgXCJicl9lZHJfbm90X3N1cHBvcnRlZFwiXSxcbiAgICAgIHNlcnZpY2VVdWlkczogW3RoaXMudXVpZF0sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBlbmQoKSB7XG4gICAgdGhpcy5wZXJpcGhlcmFsLnJlbW92ZVNlcnZpY2UodGhpcy51dWlkKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0KG5hbWU6IGFueSwgLi4ucGFyYW1zOiBhbnkpOiBhbnkge1xuICB9XG5cbiAgcHVibGljIG5vdGlmeShub3RpZnlOYW1lOiBhbnksIHBhcmFtczogYW55KSB7XG4gICAgLy8gbm90aGluZ1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJsZVNlcnZpY2U7XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/hci.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ObnizBLEHci {
    constructor(Obniz) {
        this.Obniz = Obniz;
    }
    write(hciCommand) {
        this.Obniz.send({
            ble: {
                hci: {
                    write: hciCommand,
                },
            },
        });
    }
    notified(obj) {
        if (obj.read && obj.read.data) {
            this.onread(obj.read.data);
        }
    }
    onread(data) {
    }
}
exports.default = ObnizBLEHci;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvaGNpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxXQUFXO0lBR2YsWUFBWSxLQUFVO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBZTtRQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNkLEdBQUcsRUFBRTtnQkFDSCxHQUFHLEVBQUU7b0JBQ0gsS0FBSyxFQUFFLFVBQVU7aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVE7UUFDdEIsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsSUFBUztJQUN2QixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9oY2kuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBPYm5pekJMRUhjaSB7XG4gIHB1YmxpYyBPYm5pejogYW55O1xuXG4gIGNvbnN0cnVjdG9yKE9ibml6OiBhbnkpIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoaGNpQ29tbWFuZDogYW55KSB7XG4gICAgdGhpcy5PYm5pei5zZW5kKHtcbiAgICAgIGJsZToge1xuICAgICAgICBoY2k6IHtcbiAgICAgICAgICB3cml0ZTogaGNpQ29tbWFuZCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbm90aWZpZWQob2JqOiBhbnkpIHtcbiAgICBpZiAob2JqLnJlYWQgJiYgb2JqLnJlYWQuZGF0YSkge1xuICAgICAgdGhpcy5vbnJlYWQob2JqLnJlYWQuZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9ucmVhZChkYXRhOiBhbnkpIHtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPYm5pekJMRUhjaTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
// var debug = require('debug')('acl-att-stream');
Object.defineProperty(exports, "__esModule", { value: true });
const events = __webpack_require__("./node_modules/events/events.js");
const Smp = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/smp.js");
class AclStream extends events.EventEmitter {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._hci = hci;
        this._handle = handle;
        this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);
        this.onSmpStkBinded = this.onSmpStk.bind(this);
        this.onSmpFailBinded = this.onSmpFail.bind(this);
        this.onSmpEndBinded = this.onSmpEnd.bind(this);
        this._smp.on("stk", this.onSmpStkBinded);
        this._smp.on("fail", this.onSmpFailBinded);
        this._smp.on("end", this.onSmpEndBinded);
    }
    encrypt() {
        this._smp.sendPairingRequest();
    }
    write(cid, data) {
        this._hci.writeAclDataPkt(this._handle, cid, data);
    }
    push(cid, data) {
        if (data) {
            this.emit("data", cid, data);
        }
        else {
            this.emit("end");
        }
    }
    pushEncrypt(encrypt) {
        this.emit("encrypt", encrypt);
    }
    onSmpStk(stk) {
        const random = Buffer.from("0000000000000000", "hex");
        const diversifier = Buffer.from("0000", "hex");
        this._hci.startLeEncryption(this._handle, random, diversifier, stk);
    }
    onSmpFail() {
        this.emit("encryptFail");
    }
    onSmpEnd() {
        this._smp.removeListener("stk", this.onSmpStkBinded);
        this._smp.removeListener("fail", this.onSmpFailBinded);
        this._smp.removeListener("end", this.onSmpEndBinded);
    }
}
exports.default = AclStream;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9hY2wtc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrREFBa0Q7O0FBRWxELE1BQU0sTUFBTSxHQUFRLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QyxNQUFNLEdBQUcsR0FBUSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbEMsTUFBTSxTQUFVLFNBQVEsTUFBTSxDQUFDLFlBQVk7SUFTekMsWUFDRSxHQUFRLEVBQ1IsTUFBVyxFQUNYLGdCQUFxQixFQUNyQixZQUFpQixFQUNqQixpQkFBc0IsRUFDdEIsYUFBa0I7UUFFbEIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUNqQixJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsYUFBYSxDQUNkLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQVEsRUFBRSxJQUFTO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxJQUFJLENBQUMsR0FBUSxFQUFFLElBQVM7UUFDN0IsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQVk7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFRO1FBQ3RCLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0QsTUFBTSxXQUFXLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLFNBQVM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9hY2wtc3RyZWFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnYWNsLWF0dC1zdHJlYW0nKTtcblxuY29uc3QgZXZlbnRzOiBhbnkgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG5jb25zdCBTbXA6IGFueSA9IHJlcXVpcmUoXCIuL3NtcFwiKTtcblxuY2xhc3MgQWNsU3RyZWFtIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG4gIHB1YmxpYyBfaGNpOiBhbnk7XG4gIHB1YmxpYyBfaGFuZGxlOiBhbnk7XG4gIHB1YmxpYyBfc21wOiBhbnk7XG4gIHB1YmxpYyBvblNtcFN0a0JpbmRlZDogYW55O1xuICBwdWJsaWMgb25TbXBGYWlsQmluZGVkOiBhbnk7XG4gIHB1YmxpYyBvblNtcEVuZEJpbmRlZDogYW55O1xuICBwdWJsaWMgZW1pdDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGhjaTogYW55LFxuICAgIGhhbmRsZTogYW55LFxuICAgIGxvY2FsQWRkcmVzc1R5cGU6IGFueSxcbiAgICBsb2NhbEFkZHJlc3M6IGFueSxcbiAgICByZW1vdGVBZGRyZXNzVHlwZTogYW55LFxuICAgIHJlbW90ZUFkZHJlc3M6IGFueSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9oY2kgPSBoY2k7XG4gICAgdGhpcy5faGFuZGxlID0gaGFuZGxlO1xuXG4gICAgdGhpcy5fc21wID0gbmV3IFNtcChcbiAgICAgIHRoaXMsXG4gICAgICBsb2NhbEFkZHJlc3NUeXBlLFxuICAgICAgbG9jYWxBZGRyZXNzLFxuICAgICAgcmVtb3RlQWRkcmVzc1R5cGUsXG4gICAgICByZW1vdGVBZGRyZXNzLFxuICAgICk7XG5cbiAgICB0aGlzLm9uU21wU3RrQmluZGVkID0gdGhpcy5vblNtcFN0ay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TbXBGYWlsQmluZGVkID0gdGhpcy5vblNtcEZhaWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU21wRW5kQmluZGVkID0gdGhpcy5vblNtcEVuZC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fc21wLm9uKFwic3RrXCIsIHRoaXMub25TbXBTdGtCaW5kZWQpO1xuICAgIHRoaXMuX3NtcC5vbihcImZhaWxcIiwgdGhpcy5vblNtcEZhaWxCaW5kZWQpO1xuICAgIHRoaXMuX3NtcC5vbihcImVuZFwiLCB0aGlzLm9uU21wRW5kQmluZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBlbmNyeXB0KCkge1xuICAgIHRoaXMuX3NtcC5zZW5kUGFpcmluZ1JlcXVlc3QoKTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShjaWQ6IGFueSwgZGF0YTogYW55KSB7XG4gICAgdGhpcy5faGNpLndyaXRlQWNsRGF0YVBrdCh0aGlzLl9oYW5kbGUsIGNpZCwgZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgcHVzaChjaWQ6IGFueSwgZGF0YTogYW55KSB7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgY2lkLCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwdXNoRW5jcnlwdChlbmNyeXB0OiBhbnkpIHtcbiAgICB0aGlzLmVtaXQoXCJlbmNyeXB0XCIsIGVuY3J5cHQpO1xuICB9XG5cbiAgcHVibGljIG9uU21wU3RrKHN0azogYW55KSB7XG4gICAgY29uc3QgcmFuZG9tOiBhbnkgPSBCdWZmZXIuZnJvbShcIjAwMDAwMDAwMDAwMDAwMDBcIiwgXCJoZXhcIik7XG4gICAgY29uc3QgZGl2ZXJzaWZpZXI6IGFueSA9IEJ1ZmZlci5mcm9tKFwiMDAwMFwiLCBcImhleFwiKTtcblxuICAgIHRoaXMuX2hjaS5zdGFydExlRW5jcnlwdGlvbih0aGlzLl9oYW5kbGUsIHJhbmRvbSwgZGl2ZXJzaWZpZXIsIHN0ayk7XG4gIH1cblxuICBwdWJsaWMgb25TbXBGYWlsKCkge1xuICAgIHRoaXMuZW1pdChcImVuY3J5cHRGYWlsXCIpO1xuICB9XG5cbiAgcHVibGljIG9uU21wRW5kKCkge1xuICAgIHRoaXMuX3NtcC5yZW1vdmVMaXN0ZW5lcihcInN0a1wiLCB0aGlzLm9uU21wU3RrQmluZGVkKTtcbiAgICB0aGlzLl9zbXAucmVtb3ZlTGlzdGVuZXIoXCJmYWlsXCIsIHRoaXMub25TbXBGYWlsQmluZGVkKTtcbiAgICB0aGlzLl9zbXAucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgdGhpcy5vblNtcEVuZEJpbmRlZCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNsU3RyZWFtO1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/bindings.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// var debug = require('debug')('bindings');
Object.defineProperty(exports, "__esModule", { value: true });
const events = __webpack_require__("./node_modules/events/events.js");
const AclStream = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.js");
const Gatt = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/gatt.js");
const Gap = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/gap.js");
const Signaling = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/signaling.js");
const Hci = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js");
class NobleBindings extends events.EventEmitter {
    constructor(hciProtocol) {
        super();
        this._state = null;
        this._addresses = {};
        this._addresseTypes = {};
        this._connectable = {};
        this._pendingConnectionUuid = null;
        this._connectionQueue = [];
        this._handles = {};
        this._gatts = {};
        this._aclStreams = {};
        this._signalings = {};
        this._hci = hciProtocol;
        this._gap = new Gap(this._hci);
    }
    startScanning(serviceUuids, allowDuplicates) {
        this._scanServiceUuids = serviceUuids || [];
        this._gap.startScanning(allowDuplicates);
    }
    stopScanning() {
        this._gap.stopScanning();
    }
    connect(peripheralUuid) {
        const address = this._addresses[peripheralUuid];
        const addressType = this._addresseTypes[peripheralUuid];
        if (!this._pendingConnectionUuid) {
            this._pendingConnectionUuid = peripheralUuid;
            this._hci.createLeConn(address, addressType);
        }
        else {
            this._connectionQueue.push(peripheralUuid);
        }
    }
    disconnect(peripheralUuid) {
        this._hci.disconnect(this._handles[peripheralUuid]);
    }
    updateRssi(peripheralUuid) {
        this._hci.readRssi(this._handles[peripheralUuid]);
    }
    init() {
        this._gap.on("scanStart", this.onScanStart.bind(this));
        this._gap.on("scanStop", this.onScanStop.bind(this));
        this._gap.on("discover", this.onDiscover.bind(this));
        this._hci.on("stateChange", this.onStateChange.bind(this));
        this._hci.on("addressChange", this.onAddressChange.bind(this));
        this._hci.on("leConnComplete", this.onLeConnComplete.bind(this));
        this._hci.on("leConnUpdateComplete", this.onLeConnUpdateComplete.bind(this));
        this._hci.on("rssiRead", this.onRssiRead.bind(this));
        this._hci.on("disconnComplete", this.onDisconnComplete.bind(this));
        this._hci.on("encryptChange", this.onEncryptChange.bind(this));
        this._hci.on("aclDataPkt", this.onAclDataPkt.bind(this));
    }
    onStateChange(state) {
        if (this._state === state) {
            return;
        }
        this._state = state;
        if (state === "unauthorized") {
            console.log("noble warning: adapter state unauthorized, please run as root or with sudo");
            console.log("               or see README for information on running without root/sudo:");
            console.log("               https://github.com/sandeepmistry/noble#running-on-linux");
        }
        else if (state === "unsupported") {
            console.log("noble warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).");
            console.log("               Try to run with environment variable:");
            console.log("               [sudo] NOBLE_HCI_DEVICE_ID=x node ...");
        }
        this.emit("stateChange", state);
    }
    onAddressChange(address) {
        this.emit("addressChange", address);
    }
    onScanStart(filterDuplicates) {
        this.emit("scanStart", filterDuplicates);
    }
    onScanStop() {
        this.emit("scanStop");
    }
    onDiscover(status, address, addressType, connectable, advertisement, rssi) {
        if (this._scanServiceUuids === undefined) {
            return;
        }
        let serviceUuids = advertisement.serviceUuids || [];
        const serviceData = advertisement.serviceData || [];
        let hasScanServiceUuids = this._scanServiceUuids.length === 0;
        if (!hasScanServiceUuids) {
            let i;
            serviceUuids = serviceUuids.slice();
            for (i in serviceData) {
                serviceUuids.push(serviceData[i].uuid);
            }
            for (i in serviceUuids) {
                hasScanServiceUuids =
                    this._scanServiceUuids.indexOf(serviceUuids[i]) !== -1;
                if (hasScanServiceUuids) {
                    break;
                }
            }
        }
        if (hasScanServiceUuids) {
            const uuid = address.split(":").join("");
            this._addresses[uuid] = address;
            this._addresseTypes[uuid] = addressType;
            this._connectable[uuid] = connectable;
            this.emit("discover", uuid, address, addressType, connectable, advertisement, rssi);
        }
    }
    onLeConnComplete(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {
        if (role !== 0) {
            // not master, ignore
            return;
        }
        let uuid = null;
        let error = null;
        if (status === 0) {
            uuid = address
                .split(":")
                .join("")
                .toLowerCase();
            const aclStream = new AclStream(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);
            const gatt = new Gatt(address, aclStream);
            const signaling = new Signaling(handle, aclStream);
            this._gatts[uuid] = this._gatts[handle] = gatt;
            this._signalings[uuid] = this._signalings[handle] = signaling;
            this._aclStreams[handle] = aclStream;
            this._handles[uuid] = handle;
            this._handles[handle] = uuid;
            this._gatts[handle].on("mtu", this.onMtu.bind(this));
            this._gatts[handle].on("servicesDiscover", this.onServicesDiscovered.bind(this));
            this._gatts[handle].on("includedServicesDiscover", this.onIncludedServicesDiscovered.bind(this));
            this._gatts[handle].on("characteristicsDiscover", this.onCharacteristicsDiscovered.bind(this));
            this._gatts[handle].on("read", this.onRead.bind(this));
            this._gatts[handle].on("write", this.onWrite.bind(this));
            this._gatts[handle].on("broadcast", this.onBroadcast.bind(this));
            this._gatts[handle].on("notify", this.onNotify.bind(this));
            this._gatts[handle].on("notification", this.onNotification.bind(this));
            this._gatts[handle].on("descriptorsDiscover", this.onDescriptorsDiscovered.bind(this));
            this._gatts[handle].on("valueRead", this.onValueRead.bind(this));
            this._gatts[handle].on("valueWrite", this.onValueWrite.bind(this));
            this._gatts[handle].on("handleRead", this.onHandleRead.bind(this));
            this._gatts[handle].on("handleWrite", this.onHandleWrite.bind(this));
            this._gatts[handle].on("handleNotify", this.onHandleNotify.bind(this));
            this._signalings[handle].on("connectionParameterUpdateRequest", this.onConnectionParameterUpdateRequest.bind(this));
            this._gatts[handle].exchangeMtu(256);
        }
        else {
            uuid = this._pendingConnectionUuid;
            let statusMessage = Hci.STATUS_MAPPER[status] || "HCI Error: Unknown";
            const errorCode = " (0x" + status.toString(16) + ")";
            statusMessage = statusMessage + errorCode;
            error = new Error(statusMessage);
        }
        this.emit("connect", uuid, error);
        if (this._connectionQueue.length > 0) {
            const peripheralUuid = this._connectionQueue.shift();
            address = this._addresses[peripheralUuid];
            addressType = this._addresseTypes[peripheralUuid];
            this._pendingConnectionUuid = peripheralUuid;
            this._hci.createLeConn(address, addressType);
        }
        else {
            this._pendingConnectionUuid = null;
        }
    }
    onLeConnUpdateComplete(handle, interval, latency, supervisionTimeout) {
        // no-op
    }
    onDisconnComplete(handle, reason) {
        const uuid = this._handles[handle];
        if (uuid) {
            this._aclStreams[handle].push(null, null);
            this._gatts[handle].removeAllListeners();
            this._signalings[handle].removeAllListeners();
            delete this._gatts[uuid];
            delete this._gatts[handle];
            delete this._signalings[uuid];
            delete this._signalings[handle];
            delete this._aclStreams[handle];
            delete this._handles[uuid];
            delete this._handles[handle];
            this.emit("disconnect", uuid); // TODO: handle reason?
        }
        else {
            // maybe disconnect as peripheral
            // console.warn(
            //   'noble warning: unknown handle ' + handle + ' disconnected!'
            // );
        }
    }
    onEncryptChange(handle, encrypt) {
        const aclStream = this._aclStreams[handle];
        if (aclStream) {
            aclStream.pushEncrypt(encrypt);
        }
    }
    onMtu(address, mtu) {
    }
    onRssiRead(handle, rssi) {
        this.emit("rssiUpdate", this._handles[handle], rssi);
    }
    onAclDataPkt(handle, cid, data) {
        const aclStream = this._aclStreams[handle];
        if (aclStream) {
            aclStream.push(cid, data);
        }
    }
    discoverServices(peripheralUuid, uuids) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.discoverServices(uuids || []);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onServicesDiscovered(address, serviceUuids) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("servicesDiscover", uuid, serviceUuids);
    }
    discoverIncludedServices(peripheralUuid, serviceUuid, serviceUuids) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.discoverIncludedServices(serviceUuid, serviceUuids || []);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onIncludedServicesDiscovered(address, serviceUuid, includedServiceUuids) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("includedServicesDiscover", uuid, serviceUuid, includedServiceUuids);
    }
    discoverCharacteristics(peripheralUuid, serviceUuid, characteristicUuids) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.discoverCharacteristics(serviceUuid, characteristicUuids || []);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onCharacteristicsDiscovered(address, serviceUuid, characteristics) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("characteristicsDiscover", uuid, serviceUuid, characteristics);
    }
    read(peripheralUuid, serviceUuid, characteristicUuid) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.read(serviceUuid, characteristicUuid);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onRead(address, serviceUuid, characteristicUuid, data, isSuccess) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("read", uuid, serviceUuid, characteristicUuid, data, false, isSuccess);
    }
    write(peripheralUuid, serviceUuid, characteristicUuid, data, withoutResponse) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.write(serviceUuid, characteristicUuid, data, withoutResponse);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onWrite(address, serviceUuid, characteristicUuid, isSuccess) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("write", uuid, serviceUuid, characteristicUuid, isSuccess);
    }
    broadcast(peripheralUuid, serviceUuid, characteristicUuid, broadcast) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.broadcast(serviceUuid, characteristicUuid, broadcast);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onBroadcast(address, serviceUuid, characteristicUuid, state) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("broadcast", uuid, serviceUuid, characteristicUuid, state);
    }
    notify(peripheralUuid, serviceUuid, characteristicUuid, notify) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.notify(serviceUuid, characteristicUuid, notify);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onNotify(address, serviceUuid, characteristicUuid, state) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("notify", uuid, serviceUuid, characteristicUuid, state);
    }
    onNotification(address, serviceUuid, characteristicUuid, data) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("read", uuid, serviceUuid, characteristicUuid, data, true, true);
    }
    discoverDescriptors(peripheralUuid, serviceUuid, characteristicUuid) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.discoverDescriptors(serviceUuid, characteristicUuid);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onDescriptorsDiscovered(address, serviceUuid, characteristicUuid, descriptorUuids) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("descriptorsDiscover", uuid, serviceUuid, characteristicUuid, descriptorUuids);
    }
    readValue(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.readValue(serviceUuid, characteristicUuid, descriptorUuid);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onValueRead(address, serviceUuid, characteristicUuid, descriptorUuid, data, isSuccess) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("valueRead", uuid, serviceUuid, characteristicUuid, descriptorUuid, data, isSuccess);
    }
    writeValue(peripheralUuid, serviceUuid, characteristicUuid, descriptorUuid, data) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.writeValue(serviceUuid, characteristicUuid, descriptorUuid, data);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onValueWrite(address, serviceUuid, characteristicUuid, descriptorUuid, isSuccess) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("valueWrite", uuid, serviceUuid, characteristicUuid, descriptorUuid, isSuccess);
    }
    readHandle(peripheralUuid, attHandle) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.readHandle(attHandle);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onHandleRead(address, handle, data) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("handleRead", uuid, handle, data);
    }
    writeHandle(peripheralUuid, attHandle, data, withoutResponse) {
        const handle = this._handles[peripheralUuid];
        const gatt = this._gatts[handle];
        if (gatt) {
            gatt.writeHandle(attHandle, data, withoutResponse);
        }
        else {
            console.warn("noble warning: unknown peripheral " + peripheralUuid);
        }
    }
    onHandleWrite(address, handle) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("handleWrite", uuid, handle);
    }
    onHandleNotify(address, handle, data) {
        const uuid = address
            .split(":")
            .join("")
            .toLowerCase();
        this.emit("handleNotify", uuid, handle, data);
    }
    onConnectionParameterUpdateRequest(handle, minInterval, maxInterval, latency, supervisionTimeout) {
        this._hci.connUpdateLe(handle, minInterval, maxInterval, latency, supervisionTimeout);
    }
}
exports.default = NobleBindings;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/crypto.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = __webpack_require__("./node_modules/crypto-browserify/index.js");
function r() {
    return crypto.randomBytes(16);
}
function c1(k, _r, pres, preq, iat, ia, rat, ra) {
    const p1 = Buffer.concat([iat, rat, preq, pres]);
    const p2 = Buffer.concat([ra, ia, Buffer.from("00000000", "hex")]);
    let res = xor(_r, p1);
    res = e(k, res);
    res = xor(res, p2);
    res = e(k, res);
    return res;
}
function s1(k, r1, r2) {
    return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));
}
function e(key, data) {
    key = swap(key);
    data = swap(data);
    const cipher = crypto.createCipheriv("aes-128-ecb", key, "");
    cipher.setAutoPadding(false);
    return swap(Buffer.concat([cipher.update(data), cipher.final()]));
}
function xor(b1, b2) {
    const result = Buffer.alloc(b1.length);
    for (let i = 0; i < b1.length; i++) {
        result[i] = b1[i] ^ b2[i];
    }
    return result;
}
function swap(input) {
    const output = Buffer.alloc(input.length);
    for (let i = 0; i < output.length; i++) {
        output[i] = input[input.length - i - 1];
    }
    return output;
}
exports.default = {
    r,
    c1,
    s1,
    e,
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBUSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdEMsU0FBUyxDQUFDO0lBQ1IsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsR0FBUSxFQUFFLEVBQU8sRUFBRSxHQUFRLEVBQUUsRUFBTztJQUNyRixNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV0RCxNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEUsSUFBSSxHQUFHLEdBQVEsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVoQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLEVBQU87SUFDbEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLElBQVM7SUFDNUIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUMsRUFBTyxFQUFFLEVBQU87SUFDM0IsTUFBTSxNQUFNLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUMsS0FBVTtJQUN0QixNQUFNLE1BQU0sR0FBUSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELGtCQUFlO0lBQ2IsQ0FBQztJQUNELEVBQUU7SUFDRixFQUFFO0lBQ0YsQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9wcm90b2NvbC9jZW50cmFsL2NyeXB0by5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0bzogYW55ID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuZnVuY3Rpb24gcigpIHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcygxNik7XG59XG5cbmZ1bmN0aW9uIGMxKGs6IGFueSwgX3I6IGFueSwgcHJlczogYW55LCBwcmVxOiBhbnksIGlhdDogYW55LCBpYTogYW55LCByYXQ6IGFueSwgcmE6IGFueSkge1xuICBjb25zdCBwMTogYW55ID0gQnVmZmVyLmNvbmNhdChbaWF0LCByYXQsIHByZXEsIHByZXNdKTtcblxuICBjb25zdCBwMjogYW55ID0gQnVmZmVyLmNvbmNhdChbcmEsIGlhLCBCdWZmZXIuZnJvbShcIjAwMDAwMDAwXCIsIFwiaGV4XCIpXSk7XG5cbiAgbGV0IHJlczogYW55ID0geG9yKF9yLCBwMSk7XG4gIHJlcyA9IGUoaywgcmVzKTtcbiAgcmVzID0geG9yKHJlcywgcDIpO1xuICByZXMgPSBlKGssIHJlcyk7XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gczEoazogYW55LCByMTogYW55LCByMjogYW55KSB7XG4gIHJldHVybiBlKGssIEJ1ZmZlci5jb25jYXQoW3IyLnNsaWNlKDAsIDgpLCByMS5zbGljZSgwLCA4KV0pKTtcbn1cblxuZnVuY3Rpb24gZShrZXk6IGFueSwgZGF0YTogYW55KSB7XG4gIGtleSA9IHN3YXAoa2V5KTtcbiAgZGF0YSA9IHN3YXAoZGF0YSk7XG5cbiAgY29uc3QgY2lwaGVyOiBhbnkgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoXCJhZXMtMTI4LWVjYlwiLCBrZXksIFwiXCIpO1xuICBjaXBoZXIuc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuXG4gIHJldHVybiBzd2FwKEJ1ZmZlci5jb25jYXQoW2NpcGhlci51cGRhdGUoZGF0YSksIGNpcGhlci5maW5hbCgpXSkpO1xufVxuXG5mdW5jdGlvbiB4b3IoYjE6IGFueSwgYjI6IGFueSkge1xuICBjb25zdCByZXN1bHQ6IGFueSA9IEJ1ZmZlci5hbGxvYyhiMS5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBiMVtpXSBeIGIyW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3dhcChpbnB1dDogYW55KSB7XG4gIGNvbnN0IG91dHB1dDogYW55ID0gQnVmZmVyLmFsbG9jKGlucHV0Lmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXQubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbaV0gPSBpbnB1dFtpbnB1dC5sZW5ndGggLSBpIC0gMV07XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHIsXG4gIGMxLFxuICBzMSxcbiAgZSxcbn07XG4iXX0=

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/gap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('gap');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
const Hci = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js");
class Gap extends events.EventEmitter {
    constructor(hci) {
        super();
        this._hci = hci;
        this._scanState = null;
        this._scanFilterDuplicates = null;
        this._discoveries = {};
        this._hci.on("error", this.onHciError.bind(this));
        this._hci.on("leScanParametersSet", this.onHciLeScanParametersSet.bind(this));
        this._hci.on("leScanEnableSet", this.onHciLeScanEnableSet.bind(this));
        this._hci.on("leAdvertisingReport", this.onHciLeAdvertisingReport.bind(this));
        this._hci.on("leScanEnableSetCmd", this.onLeScanEnableSetCmd.bind(this));
        this._hci.on("leAdvertisingParametersSet", this.onHciLeAdvertisingParametersSet.bind(this));
        this._hci.on("leAdvertisingDataSet", this.onHciLeAdvertisingDataSet.bind(this));
        this._hci.on("leScanResponseDataSet", this.onHciLeScanResponseDataSet.bind(this));
        this._hci.on("leAdvertiseEnableSet", this.onHciLeAdvertiseEnableSet.bind(this));
    }
    startScanning(allowDuplicates) {
        this._scanState = "starting";
        this._scanFilterDuplicates = !allowDuplicates;
        // Always set scan parameters before scanning
        // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737
        // p106 - p107
        this._hci.setScanEnabled(false, true);
        this._hci.setScanParameters();
        this._hci.setScanEnabled(true, this._scanFilterDuplicates);
    }
    stopScanning() {
        this._scanState = "stopping";
        this._hci.setScanEnabled(false, true);
    }
    onHciLeScanParametersSet() {
    }
    // Called when receive an event "Command Complete" for "LE Set Scan Enable"
    onHciLeScanEnableSet(status) {
        // Check the status we got from the command complete function.
        if (status !== 0) {
            // If it is non-zero there was an error, and we should not change
            // our status as a result.
            return;
        }
        if (this._scanState === "starting") {
            this._scanState = "started";
            this.emit("scanStart", this._scanFilterDuplicates);
        }
        else if (this._scanState === "stopping") {
            this._scanState = "stopped";
            this.emit("scanStop");
        }
    }
    // Called when we see the actual command "LE Set Scan Enable"
    onLeScanEnableSetCmd(enable, filterDuplicates) {
        // Check to see if the new settings differ from what we expect.
        // If we are scanning, then a change happens if the new command stops
        // scanning or if duplicate filtering changes.
        // If we are not scanning, then a change happens if scanning was enabled.
        if (this._scanState === "starting" || this._scanState === "started") {
            if (!enable) {
                this.emit("scanStop");
            }
            else if (this._scanFilterDuplicates !== filterDuplicates) {
                this._scanFilterDuplicates = filterDuplicates;
                this.emit("scanStart", this._scanFilterDuplicates);
            }
        }
        else if ((this._scanState === "stopping" || this._scanState === "stopped") &&
            enable) {
            // Someone started scanning on us.
            this.emit("scanStart", this._scanFilterDuplicates);
        }
    }
    onHciLeAdvertisingReport(status, type, address, addressType, eir, rssi) {
        const previouslyDiscovered = !!this._discoveries[address];
        const advertisement = previouslyDiscovered
            ? this._discoveries[address].advertisement
            : {
                localName: undefined,
                txPowerLevel: undefined,
                manufacturerData: undefined,
                serviceData: [],
                serviceUuids: [],
                solicitationServiceUuids: [],
                advertisementRaw: [],
                scanResponseRaw: [],
                raw: [],
            };
        let discoveryCount = previouslyDiscovered
            ? this._discoveries[address].count
            : 0;
        let hasScanResponse = previouslyDiscovered
            ? this._discoveries[address].hasScanResponse
            : false;
        if (type === 0x04) {
            hasScanResponse = true;
            if (eir.length > 0) {
                advertisement.scanResponseRaw = Array.from(eir);
            }
        }
        else {
            // reset service data every non-scan response event
            advertisement.serviceData = [];
            advertisement.serviceUuids = [];
            advertisement.serviceSolicitationUuids = [];
            if (eir.length > 0) {
                advertisement.advertisementRaw = Array.from(eir);
            }
        }
        discoveryCount++;
        let i = 0;
        let j = 0;
        let serviceUuid = null;
        let serviceSolicitationUuid = null;
        while (i + 1 < eir.length) {
            const length = eir.readUInt8(i);
            if (length < 1) {
                debug("invalid EIR data, length = " + length);
                break;
            }
            const eirType = eir.readUInt8(i + 1); // https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile
            if (i + length + 1 > eir.length) {
                debug("invalid EIR data, out of range of buffer length");
                break;
            }
            const bytes = eir.slice(i + 2).slice(0, length - 1);
            switch (eirType) {
                case 0x02: // Incomplete List of 16-bit Service Class UUID
                case 0x03: // Complete List of 16-bit Service Class UUIDs
                    for (j = 0; j < bytes.length; j += 2) {
                        serviceUuid = bytes.readUInt16LE(j).toString(16);
                        if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {
                            advertisement.serviceUuids.push(serviceUuid);
                        }
                    }
                    break;
                case 0x06: // Incomplete List of 128-bit Service Class UUIDs
                case 0x07: // Complete List of 128-bit Service Class UUIDs
                    for (j = 0; j < bytes.length; j += 16) {
                        serviceUuid = bytes
                            .slice(j, j + 16)
                            .toString("hex")
                            .match(/.{1,2}/g)
                            .reverse()
                            .join("");
                        if (advertisement.serviceUuids.indexOf(serviceUuid) === -1) {
                            advertisement.serviceUuids.push(serviceUuid);
                        }
                    }
                    break;
                case 0x08: // Shortened Local Name
                case 0x09: // Complete Local Name
                    advertisement.localName = bytes.toString("utf8");
                    break;
                case 0x0a: {
                    // Tx Power Level
                    advertisement.txPowerLevel = bytes.readInt8(0);
                    break;
                }
                case 0x14: {
                    // List of 16 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 2) {
                        serviceSolicitationUuid = bytes.readUInt16LE(j).toString(16);
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                }
                case 0x15: {
                    // List of 128 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 16) {
                        serviceSolicitationUuid = bytes
                            .slice(j, j + 16)
                            .toString("hex")
                            .match(/.{1,2}/g)
                            .reverse()
                            .join("");
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                }
                case 0x16: {
                    // 16-bit Service Data, there can be multiple occurences
                    const serviceDataUuid = bytes
                        .slice(0, 2)
                        .toString("hex")
                        .match(/.{1,2}/g)
                        .reverse()
                        .join("");
                    const serviceData = bytes.slice(2, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceDataUuid,
                        data: serviceData,
                    });
                    break;
                }
                case 0x20: {
                    // 32-bit Service Data, there can be multiple occurences
                    const serviceData32Uuid = bytes
                        .slice(0, 4)
                        .toString("hex")
                        .match(/.{1,2}/g)
                        .reverse()
                        .join("");
                    const serviceData32 = bytes.slice(4, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceData32Uuid,
                        data: serviceData32,
                    });
                    break;
                }
                case 0x21: {
                    // 128-bit Service Data, there can be multiple occurences
                    const serviceData128Uuid = bytes
                        .slice(0, 16)
                        .toString("hex")
                        .match(/.{1,2}/g)
                        .reverse()
                        .join("");
                    const serviceData128 = bytes.slice(16, bytes.length);
                    advertisement.serviceData.push({
                        uuid: serviceData128Uuid,
                        data: serviceData128,
                    });
                    break;
                }
                case 0x1f: // List of 32 bit solicitation UUIDs
                    for (j = 0; j < bytes.length; j += 4) {
                        serviceSolicitationUuid = bytes.readUInt32LE(j).toString(16);
                        if (advertisement.serviceSolicitationUuids.indexOf(serviceSolicitationUuid) === -1) {
                            advertisement.serviceSolicitationUuids.push(serviceSolicitationUuid);
                        }
                    }
                    break;
                case 0xff: // Manufacturer Specific Data
                    advertisement.manufacturerData = bytes;
                    break;
            }
            i += length + 1;
        }
        debug("advertisement = " + JSON.stringify(advertisement, null, 0));
        const connectable = type === 0x04 && previouslyDiscovered
            ? this._discoveries[address].connectable
            : type !== 0x03;
        this._discoveries[address] = {
            address,
            addressType,
            connectable,
            advertisement,
            rssi,
            count: discoveryCount,
            hasScanResponse,
        };
        // only report after a scan response event or if non-connectable or more than one discovery without a scan response, so more data can be collected
        if (type === 0x04 ||
            !connectable ||
            (discoveryCount > 1 && !hasScanResponse) ||
            process.env.NOBLE_REPORT_ALL_HCI_EVENTS) {
            this.emit("discover", status, address, addressType, connectable, advertisement, rssi);
        }
    }
    startAdvertising(name, serviceUuids) {
        debug("startAdvertising: name = " +
            name +
            ", serviceUuids = " +
            JSON.stringify(serviceUuids, null, 2));
        let advertisementDataLength = 3;
        let scanDataLength = 0;
        const serviceUuids16bit = [];
        const serviceUuids128bit = [];
        let i = 0;
        if (name && name.length) {
            scanDataLength += 2 + name.length;
        }
        if (serviceUuids && serviceUuids.length) {
            for (i = 0; i < serviceUuids.length; i++) {
                const serviceUuid = Buffer.from(serviceUuids[i]
                    .match(/.{1,2}/g)
                    .reverse()
                    .join(""), "hex");
                if (serviceUuid.length === 2) {
                    serviceUuids16bit.push(serviceUuid);
                }
                else if (serviceUuid.length === 16) {
                    serviceUuids128bit.push(serviceUuid);
                }
            }
        }
        if (serviceUuids16bit.length) {
            advertisementDataLength += 2 + 2 * serviceUuids16bit.length;
        }
        if (serviceUuids128bit.length) {
            advertisementDataLength += 2 + 16 * serviceUuids128bit.length;
        }
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(scanDataLength);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        let advertisementDataOffset = 3;
        if (serviceUuids16bit.length) {
            advertisementData.writeUInt8(1 + 2 * serviceUuids16bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x03, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids16bit.length; i++) {
                serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids16bit[i].length;
            }
        }
        if (serviceUuids128bit.length) {
            advertisementData.writeUInt8(1 + 16 * serviceUuids128bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x06, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids128bit.length; i++) {
                serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids128bit[i].length;
            }
        }
        // name
        if (name && name.length) {
            const nameBuffer = Buffer.from(name);
            scanData.writeUInt8(1 + nameBuffer.length, 0);
            scanData.writeUInt8(0x08, 1);
            nameBuffer.copy(scanData, 2);
        }
        this.startAdvertisingWithEIRData(advertisementData, scanData);
    }
    startAdvertisingIBeacon(data) {
        debug("startAdvertisingIBeacon: data = " + data.toString("hex"));
        const dataLength = data.length;
        const manufacturerDataLength = 4 + dataLength;
        const advertisementDataLength = 5 + manufacturerDataLength;
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(0);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        advertisementData.writeUInt8(manufacturerDataLength + 1, 3);
        advertisementData.writeUInt8(0xff, 4);
        advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)
        advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon
        advertisementData.writeUInt8(dataLength, 8);
        data.copy(advertisementData, 9);
        this.startAdvertisingWithEIRData(advertisementData, scanData);
    }
    startAdvertisingWithEIRData(advertisementData, scanData) {
        advertisementData = advertisementData || Buffer.alloc(0);
        scanData = scanData || Buffer.alloc(0);
        debug("startAdvertisingWithEIRData: advertisement data = " +
            advertisementData.toString("hex") +
            ", scan data = " +
            scanData.toString("hex"));
        let error = null;
        if (advertisementData.length > 31) {
            error = new Error("Advertisement data is over maximum limit of 31 bytes");
        }
        else if (scanData.length > 31) {
            error = new Error("Scan data is over maximum limit of 31 bytes");
        }
        if (error) {
            this.emit("advertisingStart", error);
        }
        else {
            this._advertiseState = "starting";
            this._hci.setScanResponseData(scanData);
            this._hci.setAdvertisingData(advertisementData);
            this._hci.setAdvertiseEnable(true);
            this._hci.setScanResponseData(scanData);
            this._hci.setAdvertisingData(advertisementData);
        }
    }
    restartAdvertising() {
        this._advertiseState = "restarting";
        this._hci.setAdvertiseEnable(true);
    }
    stopAdvertising() {
        this._advertiseState = "stopping";
        this._hci.setAdvertiseEnable(false);
    }
    onHciError(error) {
    }
    onHciLeAdvertisingParametersSet(status) {
    }
    onHciLeAdvertisingDataSet(status) {
    }
    onHciLeScanResponseDataSet(status) {
    }
    onHciLeAdvertiseEnableSet(status) {
        if (this._advertiseState === "starting") {
            this._advertiseState = "started";
            let error = null;
            if (status) {
                error = new Error(Hci.STATUS_MAPPER[status] || "Unknown (" + status + ")");
            }
            this.emit("advertisingStart", error);
        }
        else if (this._advertiseState === "stopping") {
            this._advertiseState = "stopped";
            this.emit("advertisingStop");
        }
    }
}
exports.default = Gap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js"), __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/gatt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('att');
const debug = () => {
};
/* eslint-disable no-unused-vars */
const events = __webpack_require__("./node_modules/events/events.js");
const ATT_OP_ERROR = 0x01;
const ATT_OP_MTU_REQ = 0x02;
const ATT_OP_MTU_RESP = 0x03;
const ATT_OP_FIND_INFO_REQ = 0x04;
const ATT_OP_FIND_INFO_RESP = 0x05;
const ATT_OP_READ_BY_TYPE_REQ = 0x08;
const ATT_OP_READ_BY_TYPE_RESP = 0x09;
const ATT_OP_READ_REQ = 0x0a;
const ATT_OP_READ_RESP = 0x0b;
const ATT_OP_READ_BLOB_REQ = 0x0c;
const ATT_OP_READ_BLOB_RESP = 0x0d;
const ATT_OP_READ_BY_GROUP_REQ = 0x10;
const ATT_OP_READ_BY_GROUP_RESP = 0x11;
const ATT_OP_WRITE_REQ = 0x12;
const ATT_OP_WRITE_RESP = 0x13;
const ATT_OP_PREPARE_WRITE_REQ = 0x16;
const ATT_OP_PREPARE_WRITE_RESP = 0x17;
const ATT_OP_EXECUTE_WRITE_REQ = 0x18;
const ATT_OP_EXECUTE_WRITE_RESP = 0x19;
const ATT_OP_HANDLE_NOTIFY = 0x1b;
const ATT_OP_HANDLE_IND = 0x1d;
const ATT_OP_HANDLE_CNF = 0x1e;
const ATT_OP_WRITE_CMD = 0x52;
const ATT_ECODE_SUCCESS = 0x00;
const ATT_ECODE_INVALID_HANDLE = 0x01;
const ATT_ECODE_READ_NOT_PERM = 0x02;
const ATT_ECODE_WRITE_NOT_PERM = 0x03;
const ATT_ECODE_INVALID_PDU = 0x04;
const ATT_ECODE_AUTHENTICATION = 0x05;
const ATT_ECODE_REQ_NOT_SUPP = 0x06;
const ATT_ECODE_INVALID_OFFSET = 0x07;
const ATT_ECODE_AUTHORIZATION = 0x08;
const ATT_ECODE_PREP_QUEUE_FULL = 0x09;
const ATT_ECODE_ATTR_NOT_FOUND = 0x0a;
const ATT_ECODE_ATTR_NOT_LONG = 0x0b;
const ATT_ECODE_INSUFF_ENCR_KEY_SIZE = 0x0c;
const ATT_ECODE_INVAL_ATTR_VALUE_LEN = 0x0d;
const ATT_ECODE_UNLIKELY = 0x0e;
const ATT_ECODE_INSUFF_ENC = 0x0f;
const ATT_ECODE_UNSUPP_GRP_TYPE = 0x10;
const ATT_ECODE_INSUFF_RESOURCES = 0x11;
const GATT_PRIM_SVC_UUID = 0x2800;
const GATT_INCLUDE_UUID = 0x2802;
const GATT_CHARAC_UUID = 0x2803;
const GATT_CLIENT_CHARAC_CFG_UUID = 0x2902;
const GATT_SERVER_CHARAC_CFG_UUID = 0x2903;
const ATT_CID = 0x0004;
/* eslint-enable no-unused-vars */
class Gatt extends events.EventEmitter {
    constructor(address, aclStream) {
        super();
        this._address = address;
        this._aclStream = aclStream;
        this._services = {};
        this._characteristics = {};
        this._descriptors = {};
        this._currentCommand = null;
        this._commandQueue = [];
        this._mtu = 23;
        this._security = "low";
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEncryptBinded = this.onAclStreamEncrypt.bind(this);
        this.onAclStreamEncryptFailBinded = this.onAclStreamEncryptFail.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("encrypt", this.onAclStreamEncryptBinded);
        this._aclStream.on("encryptFail", this.onAclStreamEncryptFailBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== ATT_CID) {
            return;
        }
        if (this._currentCommand &&
            data.toString("hex") === this._currentCommand.buffer.toString("hex")) {
            debug(this._address + ": echo ... echo ... echo ...");
        }
        else if (data[0] % 2 === 0) {
            if (process.env.NOBLE_MULTI_ROLE) {
                debug(this._address +
                    ": multi-role flag in use, ignoring command meant for peripheral role.");
            }
            else {
                const requestType = data[0];
                debug(this._address +
                    ": replying with REQ_NOT_SUPP to 0x" +
                    requestType.toString(16));
                this.writeAtt(this.errorResponse(requestType, 0x0000, ATT_ECODE_REQ_NOT_SUPP));
            }
        }
        else if (data[0] === ATT_OP_HANDLE_NOTIFY ||
            data[0] === ATT_OP_HANDLE_IND) {
            const valueHandle = data.readUInt16LE(1);
            const valueData = data.slice(3);
            this.emit("handleNotify", this._address, valueHandle, valueData);
            if (data[0] === ATT_OP_HANDLE_IND) {
                this._queueCommand(this.handleConfirmation(), null, () => {
                    this.emit("handleConfirmation", this._address, valueHandle);
                });
            }
            for (const serviceUuid in this._services) {
                for (const characteristicUuid in this._characteristics[serviceUuid]) {
                    if (this._characteristics[serviceUuid][characteristicUuid]
                        .valueHandle === valueHandle) {
                        this.emit("notification", this._address, serviceUuid, characteristicUuid, valueData);
                    }
                }
            }
        }
        else if (!this._currentCommand) {
            debug(this._address + ": uh oh, no current command");
        }
        else {
            if (data[0] === ATT_OP_ERROR &&
                (data[4] === ATT_ECODE_AUTHENTICATION ||
                    data[4] === ATT_ECODE_AUTHORIZATION ||
                    data[4] === ATT_ECODE_INSUFF_ENC) &&
                this._security !== "medium") {
                this._aclStream.encrypt();
                return;
            }
            debug(this._address + ": read: " + data.toString("hex"));
            this._currentCommand.callback(data);
            this._currentCommand = null;
            while (this._commandQueue.length) {
                this._currentCommand = this._commandQueue.shift();
                this.writeAtt(this._currentCommand.buffer);
                if (this._currentCommand.callback) {
                    break;
                }
                else if (this._currentCommand.writeCallback) {
                    this._currentCommand.writeCallback();
                    this._currentCommand = null;
                }
            }
        }
    }
    onAclStreamEncrypt(encrypt) {
        if (encrypt) {
            this._security = "medium";
            this.writeAtt(this._currentCommand.buffer);
        }
    }
    onAclStreamEncryptFail() {
    }
    onAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("encrypt", this.onAclStreamEncryptBinded);
        this._aclStream.removeListener("encryptFail", this.onAclStreamEncryptFailBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
    }
    writeAtt(data) {
        debug(this._address + ": write: " + data.toString("hex"));
        this._aclStream.write(ATT_CID, data);
    }
    errorResponse(opcode, handle, status) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT_OP_ERROR, 0);
        buf.writeUInt8(opcode, 1);
        buf.writeUInt16LE(handle, 2);
        buf.writeUInt8(status, 4);
        return buf;
    }
    _queueCommand(buffer, callback, writeCallback) {
        this._commandQueue.push({
            buffer,
            callback,
            writeCallback,
        });
        if (this._currentCommand === null) {
            while (this._commandQueue.length) {
                this._currentCommand = this._commandQueue.shift();
                this.writeAtt(this._currentCommand.buffer);
                if (this._currentCommand.callback) {
                    break;
                }
                else if (this._currentCommand.writeCallback) {
                    this._currentCommand.writeCallback();
                    this._currentCommand = null;
                }
            }
        }
    }
    mtuRequest(mtu) {
        const buf = Buffer.alloc(3);
        buf.writeUInt8(ATT_OP_MTU_REQ, 0);
        buf.writeUInt16LE(mtu, 1);
        return buf;
    }
    readByGroupRequest(startHandle, endHandle, groupUuid) {
        const buf = Buffer.alloc(7);
        buf.writeUInt8(ATT_OP_READ_BY_GROUP_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        buf.writeUInt16LE(groupUuid, 5);
        return buf;
    }
    readByTypeRequest(startHandle, endHandle, groupUuid) {
        const buf = Buffer.alloc(7);
        buf.writeUInt8(ATT_OP_READ_BY_TYPE_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        buf.writeUInt16LE(groupUuid, 5);
        return buf;
    }
    readRequest(handle) {
        const buf = Buffer.alloc(3);
        buf.writeUInt8(ATT_OP_READ_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        return buf;
    }
    readBlobRequest(handle, offset) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT_OP_READ_BLOB_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        buf.writeUInt16LE(offset, 3);
        return buf;
    }
    findInfoRequest(startHandle, endHandle) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT_OP_FIND_INFO_REQ, 0);
        buf.writeUInt16LE(startHandle, 1);
        buf.writeUInt16LE(endHandle, 3);
        return buf;
    }
    writeRequest(handle, data, withoutResponse) {
        const buf = Buffer.alloc(3 + data.length);
        buf.writeUInt8(withoutResponse ? ATT_OP_WRITE_CMD : ATT_OP_WRITE_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        for (let i = 0; i < data.length; i++) {
            buf.writeUInt8(data.readUInt8(i), i + 3);
        }
        return buf;
    }
    prepareWriteRequest(handle, offset, data) {
        const buf = Buffer.alloc(5 + data.length);
        buf.writeUInt8(ATT_OP_PREPARE_WRITE_REQ, 0);
        buf.writeUInt16LE(handle, 1);
        buf.writeUInt16LE(offset, 3);
        for (let i = 0; i < data.length; i++) {
            buf.writeUInt8(data.readUInt8(i), i + 5);
        }
        return buf;
    }
    executeWriteRequest(handle, cancelPreparedWrites) {
        const buf = Buffer.alloc(2);
        buf.writeUInt8(ATT_OP_EXECUTE_WRITE_REQ, 0);
        buf.writeUInt8(cancelPreparedWrites ? 0 : 1, 1);
        return buf;
    }
    handleConfirmation() {
        const buf = Buffer.alloc(1);
        buf.writeUInt8(ATT_OP_HANDLE_CNF, 0);
        return buf;
    }
    exchangeMtu(mtu) {
        this._queueCommand(this.mtuRequest(mtu), (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_MTU_RESP) {
                const newMtu = data.readUInt16LE(1);
                debug(this._address + ": new MTU is " + newMtu);
                this._mtu = newMtu;
            }
            this.emit("mtu", this._address, this._mtu);
        });
    }
    discoverServices(uuids) {
        const services = [];
        const callback = (data) => {
            const opcode = data[0];
            let i = 0;
            if (opcode === ATT_OP_READ_BY_GROUP_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    services.push({
                        startHandle: data.readUInt16LE(2 + i * type + 0),
                        endHandle: data.readUInt16LE(2 + i * type + 2),
                        uuid: type === 6
                            ? data.readUInt16LE(2 + i * type + 4).toString(16)
                            : data
                                .slice(2 + i * type + 4)
                                .slice(0, 16)
                                .toString("hex")
                                .match(/.{1,2}/g)
                                .reverse()
                                .join(""),
                    });
                }
            }
            if (opcode !== ATT_OP_READ_BY_GROUP_RESP ||
                services[services.length - 1].endHandle === 0xffff) {
                const serviceUuids = [];
                for (i = 0; i < services.length; i++) {
                    if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {
                        serviceUuids.push(services[i].uuid);
                    }
                    this._services[services[i].uuid] = services[i];
                }
                this.emit("servicesDiscover", this._address, serviceUuids);
            }
            else {
                this._queueCommand(this.readByGroupRequest(services[services.length - 1].endHandle + 1, 0xffff, GATT_PRIM_SVC_UUID), callback);
            }
        };
        this._queueCommand(this.readByGroupRequest(0x0001, 0xffff, GATT_PRIM_SVC_UUID), callback);
    }
    discoverIncludedServices(serviceUuid, uuids) {
        const service = this._services[serviceUuid];
        const includedServices = [];
        const callback = (data) => {
            const opcode = data[0];
            let i = 0;
            if (opcode === ATT_OP_READ_BY_TYPE_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    includedServices.push({
                        endHandle: data.readUInt16LE(2 + i * type + 0),
                        startHandle: data.readUInt16LE(2 + i * type + 2),
                        uuid: type === 8
                            ? data.readUInt16LE(2 + i * type + 6).toString(16)
                            : data
                                .slice(2 + i * type + 6)
                                .slice(0, 16)
                                .toString("hex")
                                .match(/.{1,2}/g)
                                .reverse()
                                .join(""),
                    });
                }
            }
            if (opcode !== ATT_OP_READ_BY_TYPE_RESP ||
                includedServices[includedServices.length - 1].endHandle ===
                    service.endHandle) {
                const includedServiceUuids = [];
                for (i = 0; i < includedServices.length; i++) {
                    if (uuids.length === 0 ||
                        uuids.indexOf(includedServices[i].uuid) !== -1) {
                        includedServiceUuids.push(includedServices[i].uuid);
                    }
                }
                this.emit("includedServicesDiscover", this._address, service.uuid, includedServiceUuids);
            }
            else {
                this._queueCommand(this.readByTypeRequest(includedServices[includedServices.length - 1].endHandle + 1, service.endHandle, GATT_INCLUDE_UUID), callback);
            }
        };
        this._queueCommand(this.readByTypeRequest(service.startHandle, service.endHandle, GATT_INCLUDE_UUID), callback);
    }
    discoverCharacteristics(serviceUuid, characteristicUuids) {
        const service = this._services[serviceUuid];
        const characteristics = [];
        this._characteristics[serviceUuid] =
            this._characteristics[serviceUuid] || {};
        this._descriptors[serviceUuid] = this._descriptors[serviceUuid] || {};
        const callback = (data) => {
            const opcode = data[0];
            let i = 0;
            if (opcode === ATT_OP_READ_BY_TYPE_RESP) {
                const type = data[1];
                const num = (data.length - 2) / type;
                for (i = 0; i < num; i++) {
                    characteristics.push({
                        startHandle: data.readUInt16LE(2 + i * type + 0),
                        properties: data.readUInt8(2 + i * type + 2),
                        valueHandle: data.readUInt16LE(2 + i * type + 3),
                        uuid: type === 7
                            ? data.readUInt16LE(2 + i * type + 5).toString(16)
                            : data
                                .slice(2 + i * type + 5)
                                .slice(0, 16)
                                .toString("hex")
                                .match(/.{1,2}/g)
                                .reverse()
                                .join(""),
                    });
                }
            }
            if (opcode !== ATT_OP_READ_BY_TYPE_RESP ||
                characteristics[characteristics.length - 1].valueHandle ===
                    service.endHandle) {
                const characteristicsDiscovered = [];
                for (i = 0; i < characteristics.length; i++) {
                    const properties = characteristics[i].properties;
                    const characteristic = {
                        properties: [],
                        uuid: characteristics[i].uuid,
                    };
                    if (i !== 0) {
                        characteristics[i - 1].endHandle =
                            characteristics[i].startHandle - 1;
                    }
                    if (i === characteristics.length - 1) {
                        characteristics[i].endHandle = service.endHandle;
                    }
                    this._characteristics[serviceUuid][characteristics[i].uuid] =
                        characteristics[i];
                    if (properties & 0x01) {
                        characteristic.properties.push("broadcast");
                    }
                    if (properties & 0x02) {
                        characteristic.properties.push("read");
                    }
                    if (properties & 0x04) {
                        characteristic.properties.push("writeWithoutResponse");
                    }
                    if (properties & 0x08) {
                        characteristic.properties.push("write");
                    }
                    if (properties & 0x10) {
                        characteristic.properties.push("notify");
                    }
                    if (properties & 0x20) {
                        characteristic.properties.push("indicate");
                    }
                    if (properties & 0x40) {
                        characteristic.properties.push("authenticatedSignedWrites");
                    }
                    if (properties & 0x80) {
                        characteristic.properties.push("extendedProperties");
                    }
                    if (characteristicUuids.length === 0 ||
                        characteristicUuids.indexOf(characteristic.uuid) !== -1) {
                        characteristicsDiscovered.push(characteristic);
                    }
                }
                this.emit("characteristicsDiscover", this._address, serviceUuid, characteristicsDiscovered);
            }
            else {
                this._queueCommand(this.readByTypeRequest(characteristics[characteristics.length - 1].valueHandle + 1, service.endHandle, GATT_CHARAC_UUID), callback);
            }
        };
        this._queueCommand(this.readByTypeRequest(service.startHandle, service.endHandle, GATT_CHARAC_UUID), callback);
    }
    read(serviceUuid, characteristicUuid) {
        if (!this._characteristics[serviceUuid] ||
            !this._characteristics[serviceUuid][characteristicUuid]) {
            this.emit("read", this._address, serviceUuid, characteristicUuid, Buffer.alloc(0), false);
            return;
        }
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        let readData = Buffer.alloc(0);
        const callback = (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_READ_RESP || opcode === ATT_OP_READ_BLOB_RESP) {
                readData = Buffer.from(readData.toString("hex") + data.slice(1).toString("hex"), "hex");
                if (data.length === this._mtu) {
                    this._queueCommand(this.readBlobRequest(characteristic.valueHandle, readData.length), callback);
                }
                else {
                    this.emit("read", this._address, serviceUuid, characteristicUuid, readData, true);
                }
            }
            else if (opcode === ATT_OP_ERROR) {
                this.emit("read", this._address, serviceUuid, characteristicUuid, Buffer.alloc(0), false);
            }
            else {
                this.emit("read", this._address, serviceUuid, characteristicUuid, readData, true);
            }
        };
        this._queueCommand(this.readRequest(characteristic.valueHandle), callback);
    }
    write(serviceUuid, characteristicUuid, data, withoutResponse) {
        if (!this._characteristics[serviceUuid] ||
            !this._characteristics[serviceUuid][characteristicUuid]) {
            this.emit("write", this._address, serviceUuid, characteristicUuid, false);
            return;
        }
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        if (withoutResponse) {
            this._queueCommand(this.writeRequest(characteristic.valueHandle, data, true), null, () => {
                this.emit("write", this._address, serviceUuid, characteristicUuid);
            });
        }
        else if (data.length + 3 > this._mtu) {
            return this.longWrite(serviceUuid, characteristicUuid, data, withoutResponse);
        }
        else {
            this._queueCommand(this.writeRequest(characteristic.valueHandle, data, false), (_data) => {
                const opcode = _data[0];
                if (opcode === ATT_OP_WRITE_RESP || opcode === ATT_OP_ERROR) {
                    this.emit("write", this._address, serviceUuid, characteristicUuid, opcode === ATT_OP_WRITE_RESP);
                }
            });
        }
    }
    /* Perform a "long write" as described Bluetooth Spec section 4.9.4 "Write Long Characteristic Values" */
    longWrite(serviceUuid, characteristicUuid, data, withoutResponse) {
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        const limit = this._mtu - 5;
        const prepareWriteCallback = (data_chunk) => {
            return (resp) => {
                const opcode = resp[0];
                if (opcode !== ATT_OP_PREPARE_WRITE_RESP) {
                    debug(this._address +
                        ": unexpected reply opcode %d (expecting ATT_OP_PREPARE_WRITE_RESP)", opcode);
                }
                else {
                    const expected_length = data_chunk.length + 5;
                    if (resp.length !== expected_length) {
                        /* the response should contain the data packet echoed back to the caller */
                        debug(this._address +
                            ": unexpected prepareWriteResponse length %d (expecting %d)", resp.length, expected_length);
                    }
                }
            };
        };
        /* split into prepare-write chunks and queue them */
        let offset = 0;
        while (offset < data.length) {
            const end = offset + limit;
            const chunk = data.slice(offset, end);
            this._queueCommand(this.prepareWriteRequest(characteristic.valueHandle, offset, chunk), prepareWriteCallback(chunk));
            offset = end;
        }
        /* queue the execute command with a callback to emit the write signal when done */
        this._queueCommand(this.executeWriteRequest(characteristic.valueHandle), (resp) => {
            const opcode = resp[0];
            if (opcode === ATT_OP_EXECUTE_WRITE_RESP && !withoutResponse) {
                this.emit("write", this._address, serviceUuid, characteristicUuid);
            }
        });
    }
    broadcast(serviceUuid, characteristicUuid, broadcast) {
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        this._queueCommand(this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT_SERVER_CHARAC_CFG_UUID), (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_READ_BY_TYPE_RESP) {
                // let type = data[1];
                const handle = data.readUInt16LE(2);
                let value = data.readUInt16LE(4);
                if (broadcast) {
                    value |= 0x0001;
                }
                else {
                    value &= 0xfffe;
                }
                const valueBuffer = Buffer.alloc(2);
                valueBuffer.writeUInt16LE(value, 0);
                this._queueCommand(this.writeRequest(handle, valueBuffer, false), (_data) => {
                    const _opcode = _data[0];
                    if (_opcode === ATT_OP_WRITE_RESP) {
                        this.emit("broadcast", this._address, serviceUuid, characteristicUuid, broadcast);
                    }
                });
            }
        });
    }
    notify(serviceUuid, characteristicUuid, notify) {
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        this._queueCommand(this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT_CLIENT_CHARAC_CFG_UUID), (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_READ_BY_TYPE_RESP) {
                // let type = data[1];
                const handle = data.readUInt16LE(2);
                let value = data.readUInt16LE(4);
                const useNotify = characteristic.properties & 0x10;
                const useIndicate = characteristic.properties & 0x20;
                if (notify) {
                    if (useNotify) {
                        value |= 0x0001;
                    }
                    else if (useIndicate) {
                        value |= 0x0002;
                    }
                }
                else {
                    if (useNotify) {
                        value &= 0xfffe;
                    }
                    else if (useIndicate) {
                        value &= 0xfffd;
                    }
                }
                const valueBuffer = Buffer.alloc(2);
                valueBuffer.writeUInt16LE(value, 0);
                this._queueCommand(this.writeRequest(handle, valueBuffer, false), (_data) => {
                    const _opcode = _data[0];
                    debug("set notify write results: " + (_opcode === ATT_OP_WRITE_RESP));
                    // if (opcode === ATT_OP_WRITE_RESP) {
                    this.emit("notify", this._address, serviceUuid, characteristicUuid, notify);
                    // }
                });
            }
        });
    }
    discoverDescriptors(serviceUuid, characteristicUuid) {
        const characteristic = this._characteristics[serviceUuid][characteristicUuid];
        const descriptors = [];
        this._descriptors[serviceUuid][characteristicUuid] = {};
        const callback = (data) => {
            const opcode = data[0];
            let i = 0;
            if (opcode === ATT_OP_FIND_INFO_RESP) {
                const num = data[1];
                for (i = 0; i < num; i++) {
                    descriptors.push({
                        handle: data.readUInt16LE(2 + i * 4 + 0),
                        uuid: data.readUInt16LE(2 + i * 4 + 2).toString(16),
                    });
                }
            }
            if (opcode !== ATT_OP_FIND_INFO_RESP ||
                descriptors[descriptors.length - 1].handle === characteristic.endHandle) {
                const descriptorUuids = [];
                for (i = 0; i < descriptors.length; i++) {
                    descriptorUuids.push(descriptors[i].uuid);
                    this._descriptors[serviceUuid][characteristicUuid][descriptors[i].uuid] = descriptors[i];
                }
                this.emit("descriptorsDiscover", this._address, serviceUuid, characteristicUuid, descriptorUuids);
            }
            else {
                this._queueCommand(this.findInfoRequest(descriptors[descriptors.length - 1].handle + 1, characteristic.endHandle), callback);
            }
        };
        this._queueCommand(this.findInfoRequest(characteristic.valueHandle + 1, characteristic.endHandle), callback);
    }
    readValue(serviceUuid, characteristicUuid, descriptorUuid) {
        if (!this._descriptors[serviceUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]) {
            this.emit("valueRead", this._address, serviceUuid, characteristicUuid, descriptorUuid, Buffer.alloc(0), false);
            return;
        }
        const descriptor = this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];
        this._queueCommand(this.readRequest(descriptor.handle), (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_READ_RESP || opcode === ATT_OP_ERROR) {
                this.emit("valueRead", this._address, serviceUuid, characteristicUuid, descriptorUuid, data.slice(1), opcode === ATT_OP_READ_RESP);
            }
        });
    }
    writeValue(serviceUuid, characteristicUuid, descriptorUuid, data) {
        if (!this._descriptors[serviceUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid] ||
            !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]) {
            this.emit("valueWrite", this._address, serviceUuid, characteristicUuid, descriptorUuid, false);
            return;
        }
        const descriptor = this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];
        this._queueCommand(this.writeRequest(descriptor.handle, data, false), (_data) => {
            const opcode = _data[0];
            if (opcode === ATT_OP_WRITE_RESP || opcode === ATT_OP_ERROR) {
                this.emit("valueWrite", this._address, serviceUuid, characteristicUuid, descriptorUuid, opcode === ATT_OP_WRITE_RESP);
            }
        });
    }
    readHandle(handle) {
        this._queueCommand(this.readRequest(handle), (data) => {
            const opcode = data[0];
            if (opcode === ATT_OP_READ_RESP) {
                this.emit("handleRead", this._address, handle, data.slice(1));
            }
        });
    }
    writeHandle(handle, data, withoutResponse) {
        if (withoutResponse) {
            this._queueCommand(this.writeRequest(handle, data, true), null, () => {
                this.emit("handleWrite", this._address, handle);
            });
        }
        else {
            this._queueCommand(this.writeRequest(handle, data, false), (_data) => {
                const opcode = _data[0];
                if (opcode === ATT_OP_WRITE_RESP) {
                    this.emit("handleWrite", this._address, handle);
                }
            });
        }
    }
}
exports.default = Gatt;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js"), __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/signaling.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('signaling');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
const CONNECTION_PARAMETER_UPDATE_REQUEST = 0x12;
const CONNECTION_PARAMETER_UPDATE_RESPONSE = 0x13;
const SIGNALING_CID = 0x0005;
class Signaling extends events.EventEmitter {
    constructor(handle, aclStream) {
        super();
        this._handle = handle;
        this._aclStream = aclStream;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== SIGNALING_CID) {
            return;
        }
        debug("onAclStreamData: " + data.toString("hex"));
        const code = data.readUInt8(0);
        const identifier = data.readUInt8(1);
        const length = data.readUInt16LE(2);
        const signalingData = data.slice(4);
        debug("\tcode = " + code);
        debug("\tidentifier = " + identifier);
        debug("\tlength = " + length);
        if (code === CONNECTION_PARAMETER_UPDATE_REQUEST) {
            this.processConnectionParameterUpdateRequest(identifier, signalingData);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
    }
    processConnectionParameterUpdateRequest(identifier, data) {
        const minInterval = data.readUInt16LE(0) * 1.25;
        const maxInterval = data.readUInt16LE(2) * 1.25;
        const latency = data.readUInt16LE(4);
        const supervisionTimeout = data.readUInt16LE(6) * 10;
        debug("\t\tmin interval = ", minInterval);
        debug("\t\tmax interval = ", maxInterval);
        debug("\t\tlatency = ", latency);
        debug("\t\tsupervision timeout = ", supervisionTimeout);
        const response = Buffer.alloc(6);
        response.writeUInt8(CONNECTION_PARAMETER_UPDATE_RESPONSE, 0); // code
        response.writeUInt8(identifier, 1); // identifier
        response.writeUInt16LE(2, 2); // length
        response.writeUInt16LE(0, 4);
        this._aclStream.write(SIGNALING_CID, response);
        this.emit("connectionParameterUpdateRequest", this._handle, minInterval, maxInterval, latency, supervisionTimeout);
    }
}
exports.default = Signaling;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zaWduYWxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNkM7QUFDN0MsTUFBTSxLQUFLLEdBQVEsR0FBRyxFQUFFO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sTUFBTSxHQUFRLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QyxNQUFNLG1DQUFtQyxHQUFRLElBQUksQ0FBQztBQUN0RCxNQUFNLG9DQUFvQyxHQUFRLElBQUksQ0FBQztBQUV2RCxNQUFNLGFBQWEsR0FBUSxNQUFNLENBQUM7QUFFbEMsTUFBTSxTQUFVLFNBQVEsTUFBTSxDQUFDLFlBQVk7SUFPekMsWUFBWSxNQUFXLEVBQUUsU0FBYztRQUNyQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVEsRUFBRSxJQUFVO1FBQ3pDLElBQUksR0FBRyxLQUFLLGFBQWEsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxLQUFLLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxELE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxVQUFVLEdBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxQixLQUFLLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUU5QixJQUFJLElBQUksS0FBSyxtQ0FBbUMsRUFBRTtZQUNoRCxJQUFJLENBQUMsdUNBQXVDLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3pFO0lBQ0gsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sdUNBQXVDLENBQUMsVUFBZSxFQUFFLElBQVM7UUFDdkUsTUFBTSxXQUFXLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDckQsTUFBTSxXQUFXLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDckQsTUFBTSxPQUFPLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLGtCQUFrQixHQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTFELEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRXhELE1BQU0sUUFBUSxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDckUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBQ2pELFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUN2QyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLElBQUksQ0FDUCxrQ0FBa0MsRUFDbEMsSUFBSSxDQUFDLE9BQU8sRUFDWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sRUFDUCxrQkFBa0IsQ0FDbkIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELGtCQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL3Byb3RvY29sL2NlbnRyYWwvc2lnbmFsaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGV0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc2lnbmFsaW5nJyk7XG5jb25zdCBkZWJ1ZzogYW55ID0gKCkgPT4ge1xufTtcblxuY29uc3QgZXZlbnRzOiBhbnkgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG5jb25zdCBDT05ORUNUSU9OX1BBUkFNRVRFUl9VUERBVEVfUkVRVUVTVDogYW55ID0gMHgxMjtcbmNvbnN0IENPTk5FQ1RJT05fUEFSQU1FVEVSX1VQREFURV9SRVNQT05TRTogYW55ID0gMHgxMztcblxuY29uc3QgU0lHTkFMSU5HX0NJRDogYW55ID0gMHgwMDA1O1xuXG5jbGFzcyBTaWduYWxpbmcgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgcHVibGljIF9oYW5kbGU6IGFueTtcbiAgcHVibGljIF9hY2xTdHJlYW06IGFueTtcbiAgcHVibGljIG9uQWNsU3RyZWFtRGF0YUJpbmRlZDogYW55O1xuICBwdWJsaWMgb25BY2xTdHJlYW1FbmRCaW5kZWQ6IGFueTtcbiAgcHVibGljIGVtaXQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihoYW5kbGU6IGFueSwgYWNsU3RyZWFtOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2hhbmRsZSA9IGhhbmRsZTtcbiAgICB0aGlzLl9hY2xTdHJlYW0gPSBhY2xTdHJlYW07XG5cbiAgICB0aGlzLm9uQWNsU3RyZWFtRGF0YUJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1EYXRhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1FbmQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImRhdGFcIiwgdGhpcy5vbkFjbFN0cmVhbURhdGFCaW5kZWQpO1xuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImVuZFwiLCB0aGlzLm9uQWNsU3RyZWFtRW5kQmluZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkFjbFN0cmVhbURhdGEoY2lkOiBhbnksIGRhdGE/OiBhbnkpIHtcbiAgICBpZiAoY2lkICE9PSBTSUdOQUxJTkdfQ0lEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVidWcoXCJvbkFjbFN0cmVhbURhdGE6IFwiICsgZGF0YS50b1N0cmluZyhcImhleFwiKSk7XG5cbiAgICBjb25zdCBjb2RlOiBhbnkgPSBkYXRhLnJlYWRVSW50OCgwKTtcbiAgICBjb25zdCBpZGVudGlmaWVyOiBhbnkgPSBkYXRhLnJlYWRVSW50OCgxKTtcbiAgICBjb25zdCBsZW5ndGg6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDIpO1xuICAgIGNvbnN0IHNpZ25hbGluZ0RhdGE6IGFueSA9IGRhdGEuc2xpY2UoNCk7XG5cbiAgICBkZWJ1ZyhcIlxcdGNvZGUgPSBcIiArIGNvZGUpO1xuICAgIGRlYnVnKFwiXFx0aWRlbnRpZmllciA9IFwiICsgaWRlbnRpZmllcik7XG4gICAgZGVidWcoXCJcXHRsZW5ndGggPSBcIiArIGxlbmd0aCk7XG5cbiAgICBpZiAoY29kZSA9PT0gQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFUVVFU1QpIHtcbiAgICAgIHRoaXMucHJvY2Vzc0Nvbm5lY3Rpb25QYXJhbWV0ZXJVcGRhdGVSZXF1ZXN0KGlkZW50aWZpZXIsIHNpZ25hbGluZ0RhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkFjbFN0cmVhbUVuZCgpIHtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsIHRoaXMub25BY2xTdHJlYW1EYXRhQmluZGVkKTtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCk7XG4gIH1cblxuICBwdWJsaWMgcHJvY2Vzc0Nvbm5lY3Rpb25QYXJhbWV0ZXJVcGRhdGVSZXF1ZXN0KGlkZW50aWZpZXI6IGFueSwgZGF0YTogYW55KSB7XG4gICAgY29uc3QgbWluSW50ZXJ2YWw6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDApICogMS4yNTtcbiAgICBjb25zdCBtYXhJbnRlcnZhbDogYW55ID0gZGF0YS5yZWFkVUludDE2TEUoMikgKiAxLjI1O1xuICAgIGNvbnN0IGxhdGVuY3k6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDQpO1xuICAgIGNvbnN0IHN1cGVydmlzaW9uVGltZW91dDogYW55ID0gZGF0YS5yZWFkVUludDE2TEUoNikgKiAxMDtcblxuICAgIGRlYnVnKFwiXFx0XFx0bWluIGludGVydmFsID0gXCIsIG1pbkludGVydmFsKTtcbiAgICBkZWJ1ZyhcIlxcdFxcdG1heCBpbnRlcnZhbCA9IFwiLCBtYXhJbnRlcnZhbCk7XG4gICAgZGVidWcoXCJcXHRcXHRsYXRlbmN5ID0gXCIsIGxhdGVuY3kpO1xuICAgIGRlYnVnKFwiXFx0XFx0c3VwZXJ2aXNpb24gdGltZW91dCA9IFwiLCBzdXBlcnZpc2lvblRpbWVvdXQpO1xuXG4gICAgY29uc3QgcmVzcG9uc2U6IGFueSA9IEJ1ZmZlci5hbGxvYyg2KTtcblxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFU1BPTlNFLCAwKTsgLy8gY29kZVxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoaWRlbnRpZmllciwgMSk7IC8vIGlkZW50aWZpZXJcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDIsIDIpOyAvLyBsZW5ndGhcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDAsIDQpO1xuXG4gICAgdGhpcy5fYWNsU3RyZWFtLndyaXRlKFNJR05BTElOR19DSUQsIHJlc3BvbnNlKTtcblxuICAgIHRoaXMuZW1pdChcbiAgICAgIFwiY29ubmVjdGlvblBhcmFtZXRlclVwZGF0ZVJlcXVlc3RcIixcbiAgICAgIHRoaXMuX2hhbmRsZSxcbiAgICAgIG1pbkludGVydmFsLFxuICAgICAgbWF4SW50ZXJ2YWwsXG4gICAgICBsYXRlbmN5LFxuICAgICAgc3VwZXJ2aXNpb25UaW1lb3V0LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2lnbmFsaW5nO1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/central/smp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const events = __webpack_require__("./node_modules/events/events.js");
const crypto = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/central/crypto.js");
const SMP_CID = 0x0006;
const SMP_PAIRING_REQUEST = 0x01;
const SMP_PAIRING_RESPONSE = 0x02;
const SMP_PAIRING_CONFIRM = 0x03;
const SMP_PAIRING_RANDOM = 0x04;
const SMP_PAIRING_FAILED = 0x05;
const SMP_ENCRYPT_INFO = 0x06;
const SMP_MASTER_IDENT = 0x07;
class Smp extends events.EventEmitter {
    constructor(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._aclStream = aclStream;
        this._iat = Buffer.from([localAddressType === "random" ? 0x01 : 0x00]);
        this._ia = Buffer.from(localAddress
            .split(":")
            .reverse()
            .join(""), "hex");
        this._rat = Buffer.from([remoteAddressType === "random" ? 0x01 : 0x00]);
        this._ra = Buffer.from(remoteAddress
            .split(":")
            .reverse()
            .join(""), "hex");
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    sendPairingRequest() {
        this._preq = Buffer.from([
            SMP_PAIRING_REQUEST,
            0x03,
            0x00,
            0x01,
            0x10,
            0x00,
            0x01,
        ]);
        this.write(this._preq);
    }
    onAclStreamData(cid, data) {
        if (cid !== SMP_CID) {
            return;
        }
        const code = data.readUInt8(0);
        if (SMP_PAIRING_RESPONSE === code) {
            this.handlePairingResponse(data);
        }
        else if (SMP_PAIRING_CONFIRM === code) {
            this.handlePairingConfirm(data);
        }
        else if (SMP_PAIRING_RANDOM === code) {
            this.handlePairingRandom(data);
        }
        else if (SMP_PAIRING_FAILED === code) {
            this.handlePairingFailed(data);
        }
        else if (SMP_ENCRYPT_INFO === code) {
            this.handleEncryptInfo(data);
        }
        else if (SMP_MASTER_IDENT === code) {
            this.handleMasterIdent(data);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
        this.emit("end");
    }
    handlePairingResponse(data) {
        this._pres = data;
        this._tk = Buffer.from("00000000000000000000000000000000", "hex");
        this._r = crypto.r();
        this.write(Buffer.concat([
            Buffer.from([SMP_PAIRING_CONFIRM]),
            crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]));
    }
    handlePairingConfirm(data) {
        this._pcnf = data;
        this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));
    }
    handlePairingRandom(data) {
        const r = data.slice(1);
        const pcnf = Buffer.concat([
            Buffer.from([SMP_PAIRING_CONFIRM]),
            crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]);
        if (this._pcnf.toString("hex") === pcnf.toString("hex")) {
            const stk = crypto.s1(this._tk, r, this._r);
            this.emit("stk", stk);
        }
        else {
            this.write(Buffer.from([SMP_PAIRING_RANDOM, SMP_PAIRING_CONFIRM]));
            this.emit("fail");
        }
    }
    handlePairingFailed(data) {
        this.emit("fail");
    }
    handleEncryptInfo(data) {
        const ltk = data.slice(1);
        this.emit("ltk", ltk);
    }
    handleMasterIdent(data) {
        const ediv = data.slice(1, 3);
        const rand = data.slice(3);
        this.emit("masterIdent", ediv, rand);
    }
    write(data) {
        this._aclStream.write(SMP_CID, data);
    }
}
exports.default = Smp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBUSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdEMsTUFBTSxNQUFNLEdBQVEsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRXhDLE1BQU0sT0FBTyxHQUFRLE1BQU0sQ0FBQztBQUU1QixNQUFNLG1CQUFtQixHQUFRLElBQUksQ0FBQztBQUN0QyxNQUFNLG9CQUFvQixHQUFRLElBQUksQ0FBQztBQUN2QyxNQUFNLG1CQUFtQixHQUFRLElBQUksQ0FBQztBQUN0QyxNQUFNLGtCQUFrQixHQUFRLElBQUksQ0FBQztBQUNyQyxNQUFNLGtCQUFrQixHQUFRLElBQUksQ0FBQztBQUNyQyxNQUFNLGdCQUFnQixHQUFRLElBQUksQ0FBQztBQUNuQyxNQUFNLGdCQUFnQixHQUFRLElBQUksQ0FBQztBQUVuQyxNQUFNLEdBQUksU0FBUSxNQUFNLENBQUMsWUFBWTtJQWVuQyxZQUNFLFNBQWMsRUFDZCxnQkFBcUIsRUFDckIsWUFBaUIsRUFDakIsaUJBQXNCLEVBQ3RCLGFBQWtCO1FBRWxCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFNUIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUNwQixZQUFZO2FBQ1QsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLE9BQU8sRUFBRTthQUNULElBQUksQ0FBQyxFQUFFLENBQUMsRUFDWCxLQUFLLENBQ04sQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FDcEIsYUFBYTthQUNWLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQ1gsS0FBSyxDQUNOLENBQUM7UUFFRixJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLGtCQUFrQjtRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDdkIsbUJBQW1CO1lBQ25CLElBQUk7WUFDSixJQUFJO1lBQ0osSUFBSTtZQUNKLElBQUk7WUFDSixJQUFJO1lBQ0osSUFBSTtTQUNMLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxlQUFlLENBQUMsR0FBUSxFQUFFLElBQVU7UUFDekMsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ25CLE9BQU87U0FDUjtRQUVELE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEMsSUFBSSxvQkFBb0IsS0FBSyxJQUFJLEVBQUU7WUFDakMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxtQkFBbUIsS0FBSyxJQUFJLEVBQUU7WUFDdkMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDdEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO2FBQU0sSUFBSSxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDdEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO2FBQU0sSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU0sSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDcEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVqRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxJQUFTO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWxCLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsS0FBSyxDQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsRUFBRSxDQUNQLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FDVDtTQUNGLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVNLG9CQUFvQixDQUFDLElBQVM7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxJQUFTO1FBQ2xDLE1BQU0sQ0FBQyxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0IsTUFBTSxJQUFJLEdBQVEsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsRUFBRSxDQUNQLElBQUksQ0FBQyxHQUFHLEVBQ1IsQ0FBQyxFQUNELElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsSUFBSSxFQUNULElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsR0FBRyxDQUNUO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELE1BQU0sR0FBRyxHQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVuRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVNLG1CQUFtQixDQUFDLElBQVM7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRU0saUJBQWlCLENBQUMsSUFBUztRQUNoQyxNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxJQUFTO1FBQ2hDLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBUztRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBRUQsa0JBQWUsR0FBRyxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zbXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBldmVudHM6IGFueSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5cbmNvbnN0IGNyeXB0bzogYW55ID0gcmVxdWlyZShcIi4vY3J5cHRvXCIpO1xuXG5jb25zdCBTTVBfQ0lEOiBhbnkgPSAweDAwMDY7XG5cbmNvbnN0IFNNUF9QQUlSSU5HX1JFUVVFU1Q6IGFueSA9IDB4MDE7XG5jb25zdCBTTVBfUEFJUklOR19SRVNQT05TRTogYW55ID0gMHgwMjtcbmNvbnN0IFNNUF9QQUlSSU5HX0NPTkZJUk06IGFueSA9IDB4MDM7XG5jb25zdCBTTVBfUEFJUklOR19SQU5ET006IGFueSA9IDB4MDQ7XG5jb25zdCBTTVBfUEFJUklOR19GQUlMRUQ6IGFueSA9IDB4MDU7XG5jb25zdCBTTVBfRU5DUllQVF9JTkZPOiBhbnkgPSAweDA2O1xuY29uc3QgU01QX01BU1RFUl9JREVOVDogYW55ID0gMHgwNztcblxuY2xhc3MgU21wIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG4gIHB1YmxpYyBfYWNsU3RyZWFtOiBhbnk7XG4gIHB1YmxpYyBfaWF0OiBhbnk7XG4gIHB1YmxpYyBfaWE6IGFueTtcbiAgcHVibGljIF9yYXQ6IGFueTtcbiAgcHVibGljIF9yYTogYW55O1xuICBwdWJsaWMgb25BY2xTdHJlYW1EYXRhQmluZGVkOiBhbnk7XG4gIHB1YmxpYyBvbkFjbFN0cmVhbUVuZEJpbmRlZDogYW55O1xuICBwdWJsaWMgX3ByZXE6IGFueTtcbiAgcHVibGljIGVtaXQ6IGFueTtcbiAgcHVibGljIF9wcmVzOiBhbnk7XG4gIHB1YmxpYyBfdGs6IGFueTtcbiAgcHVibGljIF9yOiBhbnk7XG4gIHB1YmxpYyBfcGNuZjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFjbFN0cmVhbTogYW55LFxuICAgIGxvY2FsQWRkcmVzc1R5cGU6IGFueSxcbiAgICBsb2NhbEFkZHJlc3M6IGFueSxcbiAgICByZW1vdGVBZGRyZXNzVHlwZTogYW55LFxuICAgIHJlbW90ZUFkZHJlc3M6IGFueSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hY2xTdHJlYW0gPSBhY2xTdHJlYW07XG5cbiAgICB0aGlzLl9pYXQgPSBCdWZmZXIuZnJvbShbbG9jYWxBZGRyZXNzVHlwZSA9PT0gXCJyYW5kb21cIiA/IDB4MDEgOiAweDAwXSk7XG4gICAgdGhpcy5faWEgPSBCdWZmZXIuZnJvbShcbiAgICAgIGxvY2FsQWRkcmVzc1xuICAgICAgICAuc3BsaXQoXCI6XCIpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLmpvaW4oXCJcIiksXG4gICAgICBcImhleFwiLFxuICAgICk7XG4gICAgdGhpcy5fcmF0ID0gQnVmZmVyLmZyb20oW3JlbW90ZUFkZHJlc3NUeXBlID09PSBcInJhbmRvbVwiID8gMHgwMSA6IDB4MDBdKTtcbiAgICB0aGlzLl9yYSA9IEJ1ZmZlci5mcm9tKFxuICAgICAgcmVtb3RlQWRkcmVzc1xuICAgICAgICAuc3BsaXQoXCI6XCIpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLmpvaW4oXCJcIiksXG4gICAgICBcImhleFwiLFxuICAgICk7XG5cbiAgICB0aGlzLm9uQWNsU3RyZWFtRGF0YUJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1EYXRhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1FbmQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImRhdGFcIiwgdGhpcy5vbkFjbFN0cmVhbURhdGFCaW5kZWQpO1xuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImVuZFwiLCB0aGlzLm9uQWNsU3RyZWFtRW5kQmluZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kUGFpcmluZ1JlcXVlc3QoKSB7XG4gICAgdGhpcy5fcHJlcSA9IEJ1ZmZlci5mcm9tKFtcbiAgICAgIFNNUF9QQUlSSU5HX1JFUVVFU1QsXG4gICAgICAweDAzLCAvLyBJTyBjYXBhYmlsaXR5OiBOb0lucHV0Tm9PdXRwdXRcbiAgICAgIDB4MDAsIC8vIE9PQiBkYXRhOiBBdXRoZW50aWNhdGlvbiBkYXRhIG5vdCBwcmVzZW50XG4gICAgICAweDAxLCAvLyBBdXRoZW50aWNhdGlvbiByZXF1aXJlbWVudDogQm9uZGluZyAtIE5vIE1JVE1cbiAgICAgIDB4MTAsIC8vIE1heCBlbmNyeXB0aW9uIGtleSBzaXplXG4gICAgICAweDAwLCAvLyBJbml0aWF0b3Iga2V5IGRpc3RyaWJ1dGlvbjogPG5vbmU+XG4gICAgICAweDAxLCAvLyBSZXNwb25kZXIga2V5IGRpc3RyaWJ1dGlvbjogRW5jS2V5XG4gICAgXSk7XG5cbiAgICB0aGlzLndyaXRlKHRoaXMuX3ByZXEpO1xuICB9XG5cbiAgcHVibGljIG9uQWNsU3RyZWFtRGF0YShjaWQ6IGFueSwgZGF0YT86IGFueSkge1xuICAgIGlmIChjaWQgIT09IFNNUF9DSUQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2RlOiBhbnkgPSBkYXRhLnJlYWRVSW50OCgwKTtcblxuICAgIGlmIChTTVBfUEFJUklOR19SRVNQT05TRSA9PT0gY29kZSkge1xuICAgICAgdGhpcy5oYW5kbGVQYWlyaW5nUmVzcG9uc2UoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChTTVBfUEFJUklOR19DT05GSVJNID09PSBjb2RlKSB7XG4gICAgICB0aGlzLmhhbmRsZVBhaXJpbmdDb25maXJtKGRhdGEpO1xuICAgIH0gZWxzZSBpZiAoU01QX1BBSVJJTkdfUkFORE9NID09PSBjb2RlKSB7XG4gICAgICB0aGlzLmhhbmRsZVBhaXJpbmdSYW5kb20oZGF0YSk7XG4gICAgfSBlbHNlIGlmIChTTVBfUEFJUklOR19GQUlMRUQgPT09IGNvZGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlUGFpcmluZ0ZhaWxlZChkYXRhKTtcbiAgICB9IGVsc2UgaWYgKFNNUF9FTkNSWVBUX0lORk8gPT09IGNvZGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlRW5jcnlwdEluZm8oZGF0YSk7XG4gICAgfSBlbHNlIGlmIChTTVBfTUFTVEVSX0lERU5UID09PSBjb2RlKSB7XG4gICAgICB0aGlzLmhhbmRsZU1hc3RlcklkZW50KGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkFjbFN0cmVhbUVuZCgpIHtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsIHRoaXMub25BY2xTdHJlYW1EYXRhQmluZGVkKTtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCk7XG5cbiAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlUGFpcmluZ1Jlc3BvbnNlKGRhdGE6IGFueSkge1xuICAgIHRoaXMuX3ByZXMgPSBkYXRhO1xuXG4gICAgdGhpcy5fdGsgPSBCdWZmZXIuZnJvbShcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsIFwiaGV4XCIpO1xuICAgIHRoaXMuX3IgPSBjcnlwdG8ucigpO1xuXG4gICAgdGhpcy53cml0ZShcbiAgICAgIEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICBCdWZmZXIuZnJvbShbU01QX1BBSVJJTkdfQ09ORklSTV0pLFxuICAgICAgICBjcnlwdG8uYzEoXG4gICAgICAgICAgdGhpcy5fdGssXG4gICAgICAgICAgdGhpcy5fcixcbiAgICAgICAgICB0aGlzLl9wcmVzLFxuICAgICAgICAgIHRoaXMuX3ByZXEsXG4gICAgICAgICAgdGhpcy5faWF0LFxuICAgICAgICAgIHRoaXMuX2lhLFxuICAgICAgICAgIHRoaXMuX3JhdCxcbiAgICAgICAgICB0aGlzLl9yYSxcbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlUGFpcmluZ0NvbmZpcm0oZGF0YTogYW55KSB7XG4gICAgdGhpcy5fcGNuZiA9IGRhdGE7XG5cbiAgICB0aGlzLndyaXRlKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFtTTVBfUEFJUklOR19SQU5ET01dKSwgdGhpcy5fcl0pKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVQYWlyaW5nUmFuZG9tKGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHI6IGFueSA9IGRhdGEuc2xpY2UoMSk7XG5cbiAgICBjb25zdCBwY25mOiBhbnkgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgIEJ1ZmZlci5mcm9tKFtTTVBfUEFJUklOR19DT05GSVJNXSksXG4gICAgICBjcnlwdG8uYzEoXG4gICAgICAgIHRoaXMuX3RrLFxuICAgICAgICByLFxuICAgICAgICB0aGlzLl9wcmVzLFxuICAgICAgICB0aGlzLl9wcmVxLFxuICAgICAgICB0aGlzLl9pYXQsXG4gICAgICAgIHRoaXMuX2lhLFxuICAgICAgICB0aGlzLl9yYXQsXG4gICAgICAgIHRoaXMuX3JhLFxuICAgICAgKSxcbiAgICBdKTtcblxuICAgIGlmICh0aGlzLl9wY25mLnRvU3RyaW5nKFwiaGV4XCIpID09PSBwY25mLnRvU3RyaW5nKFwiaGV4XCIpKSB7XG4gICAgICBjb25zdCBzdGs6IGFueSA9IGNyeXB0by5zMSh0aGlzLl90aywgciwgdGhpcy5fcik7XG5cbiAgICAgIHRoaXMuZW1pdChcInN0a1wiLCBzdGspO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyaXRlKEJ1ZmZlci5mcm9tKFtTTVBfUEFJUklOR19SQU5ET00sIFNNUF9QQUlSSU5HX0NPTkZJUk1dKSk7XG5cbiAgICAgIHRoaXMuZW1pdChcImZhaWxcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVBhaXJpbmdGYWlsZWQoZGF0YTogYW55KSB7XG4gICAgdGhpcy5lbWl0KFwiZmFpbFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVFbmNyeXB0SW5mbyhkYXRhOiBhbnkpIHtcbiAgICBjb25zdCBsdGs6IGFueSA9IGRhdGEuc2xpY2UoMSk7XG5cbiAgICB0aGlzLmVtaXQoXCJsdGtcIiwgbHRrKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVNYXN0ZXJJZGVudChkYXRhOiBhbnkpIHtcbiAgICBjb25zdCBlZGl2OiBhbnkgPSBkYXRhLnNsaWNlKDEsIDMpO1xuICAgIGNvbnN0IHJhbmQ6IGFueSA9IGRhdGEuc2xpY2UoMyk7XG5cbiAgICB0aGlzLmVtaXQoXCJtYXN0ZXJJZGVudFwiLCBlZGl2LCByYW5kKTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShkYXRhOiBhbnkpIHtcbiAgICB0aGlzLl9hY2xTdHJlYW0ud3JpdGUoU01QX0NJRCwgZGF0YSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU21wO1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/hci-status.json":
/***/ (function(module) {

module.exports = JSON.parse("[\"Success\",\"Unknown HCI Command\",\"Unknown Connection Identifier\",\"Hardware Failure\",\"Page Timeout\",\"Authentication Failure\",\"PIN or Key Missing\",\"Memory Capacity Exceeded\",\"Connection Timeout\",\"Connection Limit Exceeded\",\"Synchronous Connection Limit to a Device Exceeded\",\"ACL Connection Already Exists\",\"Command Disallowed\",\"Connection Rejected due to Limited Resources\",\"Connection Rejected due to Security Reasons\",\"Connection Rejected due to Unacceptable BD_ADDR\",\"Connection Accept Timeout Exceeded\",\"Unsupported Feature or Parameter Value\",\"Invalid HCI Command Parameters\",\"Remote User Terminated Connection\",\"Remote Device Terminated due to Low Resources\",\"Remote Device Terminated due to Power Off\",\"Connection Terminated By Local Host\",\"Repeated Attempts\",\"Pairing Not Allowed\",\"Unknown LMP PDU\",\"Unsupported Remote Feature / Unsupported LMP Feature\",\"SCO Offset Rejected\",\"SCO Interval Rejected\",\"SCO Air Mode Rejected\",\"Invalid LMP Parameters / Invalid LL Parameters\",\"Unspecified Error\",\"Unsupported LMP Parameter Value / Unsupported LL Parameter Value\",\"Role Change Not Allowed\",\"LMP Response Timeout / LL Response Timeout\",\"LMP Error Transaction Collision\",\"LMP PDU Not Allowed\",\"Encryption Mode Not Acceptable\",\"Link Key cannot be Changed\",\"Requested QoS Not Supported\",\"Instant Passed\",\"Pairing With Unit Key Not Supported\",\"Different Transaction Collision\",\"Reserved\",\"QoS Unacceptable Parameter\",\"QoS Rejected\",\"Channel Classification Not Supported\",\"Insufficient Security\",\"Parameter Out Of Manadatory Range\",\"Reserved\",\"Role Switch Pending\",\"Reserved\",\"Reserved Slot Violation\",\"Role Switch Failed\",\"Extended Inquiry Response Too Large\",\"Secure Simple Pairing Not Supported By Host\",\"Host Busy - Pairing\",\"Connection Rejected due to No Suitable Channel Found\",\"Controller Busy\",\"Unacceptable Connection Parameters\",\"Directed Advertising Timeout\",\"Connection Terminated due to MIC Failure\",\"Connection Failed to be Established\",\"MAC Connection Failed\",\"Coarse Clock Adjustment Rejected but Will Try to Adjust Using Clock Dragging\"]");

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('hci');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
const HCI_COMMAND_PKT = 0x01;
const HCI_ACLDATA_PKT = 0x02;
const HCI_EVENT_PKT = 0x04;
const ACL_START_NO_FLUSH = 0x00;
const ACL_CONT = 0x01;
const ACL_START = 0x02;
const EVT_DISCONN_COMPLETE = 0x05;
const EVT_ENCRYPT_CHANGE = 0x08;
const EVT_CMD_COMPLETE = 0x0e;
const EVT_CMD_STATUS = 0x0f;
const EVT_NUMBER_OF_COMPLETED_PACKETS = 0x13;
const EVT_LE_META_EVENT = 0x3e;
const EVT_LE_CONN_COMPLETE = 0x01;
const EVT_LE_ADVERTISING_REPORT = 0x02;
const EVT_LE_CONN_UPDATE_COMPLETE = 0x03;
const OGF_LINK_CTL = 0x01;
const OCF_DISCONNECT = 0x0006;
const OGF_HOST_CTL = 0x03;
const OCF_SET_EVENT_MASK = 0x0001;
const OCF_RESET = 0x0003;
const OCF_READ_LE_HOST_SUPPORTED = 0x006c;
const OCF_WRITE_LE_HOST_SUPPORTED = 0x006d;
const OGF_INFO_PARAM = 0x04;
const OCF_READ_LOCAL_VERSION = 0x0001;
const OCF_READ_BUFFER_SIZE = 0x0005;
const OCF_READ_BD_ADDR = 0x0009;
const OGF_STATUS_PARAM = 0x05;
const OCF_READ_RSSI = 0x0005;
const OGF_LE_CTL = 0x08;
const OCF_LE_SET_EVENT_MASK = 0x0001;
const OCF_LE_READ_BUFFER_SIZE = 0x0002;
const OCF_LE_SET_ADVERTISING_PARAMETERS = 0x0006;
const OCF_LE_SET_ADVERTISING_DATA = 0x0008;
const OCF_LE_SET_SCAN_RESPONSE_DATA = 0x0009;
const OCF_LE_SET_ADVERTISE_ENABLE = 0x000a;
const OCF_LE_SET_SCAN_PARAMETERS = 0x000b;
const OCF_LE_SET_SCAN_ENABLE = 0x000c;
const OCF_LE_CREATE_CONN = 0x000d;
const OCF_LE_CONN_UPDATE = 0x0013;
const OCF_LE_START_ENCRYPTION = 0x0019;
const OCF_LE_LTK_NEG_REPLY = 0x001b;
const DISCONNECT_CMD = OCF_DISCONNECT | (OGF_LINK_CTL << 10);
const SET_EVENT_MASK_CMD = OCF_SET_EVENT_MASK | (OGF_HOST_CTL << 10);
const RESET_CMD = OCF_RESET | (OGF_HOST_CTL << 10);
const READ_LE_HOST_SUPPORTED_CMD = OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);
const WRITE_LE_HOST_SUPPORTED_CMD = OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);
const READ_LOCAL_VERSION_CMD = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);
const READ_BUFFER_SIZE_CMD = OCF_READ_BUFFER_SIZE | (OGF_INFO_PARAM << 10);
const READ_BD_ADDR_CMD = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);
const READ_RSSI_CMD = OCF_READ_RSSI | (OGF_STATUS_PARAM << 10);
const LE_SET_EVENT_MASK_CMD = OCF_LE_SET_EVENT_MASK | (OGF_LE_CTL << 10);
const LE_READ_BUFFER_SIZE_CMD = OCF_LE_READ_BUFFER_SIZE | (OGF_LE_CTL << 10);
const LE_SET_SCAN_PARAMETERS_CMD = OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL << 10);
const LE_SET_SCAN_ENABLE_CMD = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL << 10);
const LE_CREATE_CONN_CMD = OCF_LE_CREATE_CONN | (OGF_LE_CTL << 10);
const LE_CONN_UPDATE_CMD = OCF_LE_CONN_UPDATE | (OGF_LE_CTL << 10);
const LE_START_ENCRYPTION_CMD = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL << 10);
const LE_SET_ADVERTISING_PARAMETERS_CMD = OCF_LE_SET_ADVERTISING_PARAMETERS | (OGF_LE_CTL << 10);
const LE_SET_ADVERTISING_DATA_CMD = OCF_LE_SET_ADVERTISING_DATA | (OGF_LE_CTL << 10);
const LE_SET_SCAN_RESPONSE_DATA_CMD = OCF_LE_SET_SCAN_RESPONSE_DATA | (OGF_LE_CTL << 10);
const LE_SET_ADVERTISE_ENABLE_CMD = OCF_LE_SET_ADVERTISE_ENABLE | (OGF_LE_CTL << 10);
const LE_LTK_NEG_REPLY_CMD = OCF_LE_LTK_NEG_REPLY | (OGF_LE_CTL << 10);
const HCI_OE_USER_ENDED_CONNECTION = 0x13;
const STATUS_MAPPER = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci-status.json");
class Hci extends events.EventEmitter {
    constructor(obnizHci) {
        super();
        this._obnizHci = obnizHci;
        this._state = null;
        this._handleBuffers = {};
        this.on("stateChange", this.onStateChange.bind(this));
        this._socket = {
            write: (data) => {
                const arr = Array.from(data);
                this._obnizHci.write(arr);
            },
        };
        this._obnizHci.onread = this.onSocketData.bind(this);
    }
    initWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reset();
            // this.setEventMask();
            // this.setLeEventMask();
            // this.readLocalVersion();
            // this.writeLeHostSupported();
            // this.readLeHostSupported();
            // this.readBdAddr();
            return new Promise((resolve) => {
                this.once("stateChange", () => {
                    // console.log('te');
                    resolve();
                });
            });
        });
    }
    setEventMask() {
        const cmd = Buffer.alloc(12);
        const eventMask = Buffer.from("fffffbff07f8bf3d", "hex");
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(SET_EVENT_MASK_CMD, 1);
        // length
        cmd.writeUInt8(eventMask.length, 3);
        eventMask.copy(cmd, 4);
        debug("set event mask - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    reset() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(OCF_RESET | (OGF_HOST_CTL << 10), 1);
        // length
        cmd.writeUInt8(0x00, 3);
        debug("reset - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    resetBuffers() {
        this._handleAclsInProgress = {};
        this._handleBuffers = {};
        this._aclOutQueue = [];
    }
    readLocalVersion() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(READ_LOCAL_VERSION_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        debug("read local version - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    readBdAddr() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(READ_BD_ADDR_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        debug("read bd addr - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setLeEventMask() {
        const cmd = Buffer.alloc(12);
        const leEventMask = Buffer.from("1f00000000000000", "hex");
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_EVENT_MASK_CMD, 1);
        // length
        cmd.writeUInt8(leEventMask.length, 3);
        leEventMask.copy(cmd, 4);
        debug("set le event mask - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    readLeHostSupported() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(READ_LE_HOST_SUPPORTED_CMD, 1);
        // length
        cmd.writeUInt8(0x00, 3);
        debug("read LE host supported - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    writeLeHostSupported() {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(WRITE_LE_HOST_SUPPORTED_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt8(0x01, 4); // le
        cmd.writeUInt8(0x00, 5); // simul
        debug("write LE host supported - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setScanParameters() {
        const cmd = Buffer.alloc(11);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_SCAN_PARAMETERS_CMD, 1);
        // length
        cmd.writeUInt8(0x07, 3);
        // data
        cmd.writeUInt8(0x01, 4); // type: 0 -> passive, 1 -> active
        cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6
        cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6
        cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random
        cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types
        debug("set scan parameters - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setScanEnabled(enabled, filterDuplicates) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_SCAN_ENABLE_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled
        cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates
        debug("set scan enabled - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    createLeConn(address, addressType) {
        const cmd = Buffer.alloc(29);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_CREATE_CONN_CMD, 1);
        // length
        cmd.writeUInt8(0x19, 3);
        // data
        cmd.writeUInt16LE(0x0060, 4); // interval
        cmd.writeUInt16LE(0x0030, 6); // window
        cmd.writeUInt8(0x00, 8); // initiator filter
        cmd.writeUInt8(addressType === "random" ? 0x01 : 0x00, 9); // peer address type
        Buffer.from(address
            .split(":")
            .reverse()
            .join(""), "hex").copy(cmd, 10); // peer address
        cmd.writeUInt8(0x00, 16); // own address type
        cmd.writeUInt16LE(0x0006, 17); // min interval
        cmd.writeUInt16LE(0x000c, 19); // max interval
        cmd.writeUInt16LE(0x0000, 21); // latency
        cmd.writeUInt16LE(0x00c8, 23); // supervision timeout
        cmd.writeUInt16LE(0x0004, 25); // min ce length
        cmd.writeUInt16LE(0x0006, 27); // max ce length
        debug("create le conn - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    connUpdateLe(handle, minInterval, maxInterval, latency, supervisionTimeout) {
        const cmd = Buffer.alloc(18);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_CONN_UPDATE_CMD, 1);
        // length
        cmd.writeUInt8(0x0e, 3);
        // data
        cmd.writeUInt16LE(handle, 4);
        cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval
        cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval
        cmd.writeUInt16LE(latency, 10); // latency
        cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout
        cmd.writeUInt16LE(0x0000, 14); // min ce length
        cmd.writeUInt16LE(0x0000, 16); // max ce length
        debug("conn update le - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    startLeEncryption(handle, random, diversifier, key) {
        const cmd = Buffer.alloc(32);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_START_ENCRYPTION_CMD, 1);
        // length
        cmd.writeUInt8(0x1c, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        random.copy(cmd, 6);
        diversifier.copy(cmd, 14);
        key.copy(cmd, 16);
        debug("start le encryption - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    disconnect(handle, reason) {
        const cmd = Buffer.alloc(7);
        reason = reason || HCI_OE_USER_ENDED_CONNECTION;
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(DISCONNECT_CMD, 1);
        // length
        cmd.writeUInt8(0x03, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        cmd.writeUInt8(reason, 6); // reason
        debug("disconnect - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    readRssi(handle) {
        const cmd = Buffer.alloc(6);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(READ_RSSI_CMD, 1);
        // length
        cmd.writeUInt8(0x02, 3);
        // data
        cmd.writeUInt16LE(handle, 4); // handle
        debug("read rssi - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    writeAclDataPkt(handle, cid, data) {
        const pkt = Buffer.alloc(9 + data.length);
        // header
        pkt.writeUInt8(HCI_ACLDATA_PKT, 0);
        pkt.writeUInt16LE(handle | (ACL_START_NO_FLUSH << 12), 1);
        pkt.writeUInt16LE(data.length + 4, 3); // data length 1
        pkt.writeUInt16LE(data.length, 5); // data length 2
        pkt.writeUInt16LE(cid, 7);
        data.copy(pkt, 9);
        debug("write acl data pkt - writing: " + pkt.toString("hex"));
        this._socket.write(pkt);
    }
    setAdvertisingParameters() {
        const cmd = Buffer.alloc(19);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_ADVERTISING_PARAMETERS_CMD, 1);
        // length
        cmd.writeUInt8(15, 3);
        const advertisementInterval = Math.floor((process.env.BLENO_ADVERTISING_INTERVAL
            ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL)
            : 100) * 1.6);
        // data
        cmd.writeUInt16LE(advertisementInterval, 4); // min interval
        cmd.writeUInt16LE(advertisementInterval, 6); // max interval
        cmd.writeUInt8(0x00, 8); // adv type
        cmd.writeUInt8(0x00, 9); // own addr typ
        cmd.writeUInt8(0x00, 10); // direct addr type
        Buffer.from("000000000000", "hex").copy(cmd, 11); // direct addr
        cmd.writeUInt8(0x07, 17);
        cmd.writeUInt8(0x00, 18);
        debug("set advertisement parameters - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setAdvertisingData(data) {
        const cmd = Buffer.alloc(36);
        cmd.fill(0x00);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_ADVERTISING_DATA_CMD, 1);
        // length
        cmd.writeUInt8(32, 3);
        // data
        cmd.writeUInt8(data.length, 4);
        data.copy(cmd, 5);
        debug("set advertisement data - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setScanResponseData(data) {
        const cmd = Buffer.alloc(36);
        cmd.fill(0x00);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_SCAN_RESPONSE_DATA_CMD, 1);
        // length
        cmd.writeUInt8(32, 3);
        // data
        cmd.writeUInt8(data.length, 4);
        data.copy(cmd, 5);
        debug("set scan response data - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    setAdvertiseEnable(enabled) {
        const cmd = Buffer.alloc(5);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_SET_ADVERTISE_ENABLE_CMD, 1);
        // length
        cmd.writeUInt8(0x01, 3);
        // data
        cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled
        debug("set advertise enable - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    leReadBufferSize() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(LE_READ_BUFFER_SIZE_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        debug("le read buffer size - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    readBufferSize() {
        const cmd = Buffer.alloc(4);
        // header
        cmd.writeUInt8(HCI_COMMAND_PKT, 0);
        cmd.writeUInt16LE(READ_BUFFER_SIZE_CMD, 1);
        // length
        cmd.writeUInt8(0x0, 3);
        debug("read buffer size - writing: " + cmd.toString("hex"));
        this._socket.write(cmd);
    }
    queueAclDataPkt(handle, cid, data) {
        let hf = handle | (ACL_START_NO_FLUSH << 12);
        // l2cap pdu may be fragmented on hci level
        let l2capPdu = Buffer.alloc(4 + data.length);
        l2capPdu.writeUInt16LE(data.length, 0);
        l2capPdu.writeUInt16LE(cid, 2);
        data.copy(l2capPdu, 4);
        let fragId = 0;
        while (l2capPdu.length) {
            const frag = l2capPdu.slice(0, this._aclMtu);
            l2capPdu = l2capPdu.slice(frag.length);
            const pkt = Buffer.alloc(5 + frag.length);
            // hci header
            pkt.writeUInt8(HCI_ACLDATA_PKT, 0);
            pkt.writeUInt16LE(hf, 1);
            hf |= ACL_CONT << 12;
            pkt.writeUInt16LE(frag.length, 3); // hci pdu length
            frag.copy(pkt, 5);
            this._aclOutQueue.push({
                handle,
                pkt,
                fragId: fragId++,
            });
        }
        this.pushAclOutQueue();
    }
    pushAclOutQueue() {
        debug("pushAclOutQueue");
        let inProgress = 0;
        for (const handle in this._handleAclsInProgress) {
            inProgress += this._handleAclsInProgress[handle];
        }
        debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);
        while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {
            inProgress++;
            this.writeOneAclDataPkt();
        }
        if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {
            debug("acl out queue congested");
            debug("\tin progress = " + inProgress);
            debug("\twaiting = " + this._aclOutQueue.length);
        }
    }
    writeOneAclDataPkt() {
        debug("writeOneAclDataPkt");
        const pkt = this._aclOutQueue.shift();
        this._handleAclsInProgress[pkt.handle]++;
        debug("write acl data pkt frag " +
            pkt.fragId +
            " handle " +
            pkt.handle +
            " - writing: " +
            pkt.pkt.toString("hex"));
        this._socket.write(pkt.pkt);
    }
    onSocketData(array) {
        const data = Buffer.from(array);
        debug("onSocketData: " + data.toString("hex"));
        const eventType = data.readUInt8(0);
        debug("\tevent type = " + eventType);
        if (HCI_EVENT_PKT === eventType) {
            const subEventType = data.readUInt8(1);
            debug("\tsub event type = " + subEventType);
            if (subEventType === EVT_DISCONN_COMPLETE) {
                const handle = data.readUInt16LE(4);
                const reason = data.readUInt8(6);
                debug("\t\thandle = " + handle);
                debug("\t\treason = " + reason);
                delete this._handleAclsInProgress[handle];
                const aclOutQueue = [];
                let discarded = 0;
                for (const i in this._aclOutQueue) {
                    if (this._aclOutQueue[i].handle !== handle) {
                        aclOutQueue.push(this._aclOutQueue[i]);
                    }
                    else {
                        discarded++;
                    }
                }
                if (discarded) {
                    debug("\t\tacls discarded = " + discarded);
                }
                this._aclOutQueue = aclOutQueue;
                this.pushAclOutQueue();
                this.emit("disconnComplete", handle, reason);
            }
            else if (subEventType === EVT_ENCRYPT_CHANGE) {
                const handle = data.readUInt16LE(4);
                const encrypt = data.readUInt8(6);
                debug("\t\thandle = " + handle);
                debug("\t\tencrypt = " + encrypt);
                this.emit("encryptChange", handle, encrypt);
            }
            else if (subEventType === EVT_CMD_COMPLETE) {
                const ncmd = data.readUInt8(3);
                const cmd = data.readUInt16LE(4);
                const status = data.readUInt8(6);
                const result = data.slice(7);
                debug("\t\tncmd = " + ncmd);
                debug("\t\tcmd = " + cmd);
                debug("\t\tstatus = " + status);
                debug("\t\tresult = " + result.toString("hex"));
                this.processCmdCompleteEvent(cmd, status, result);
            }
            else if (subEventType === EVT_CMD_STATUS) {
                const status = data.readUInt8(3);
                const cmd = data.readUInt16LE(5);
                debug("\t\tstatus = " + status);
                debug("\t\tcmd = " + cmd);
                this.processCmdStatusEvent(cmd, status);
            }
            else if (subEventType === EVT_LE_META_EVENT) {
                const leMetaEventType = data.readUInt8(3);
                const leMetaEventStatus = data.readUInt8(4);
                const leMetaEventData = data.slice(5);
                debug("\t\tLE meta event type = " + leMetaEventType);
                debug("\t\tLE meta event status = " + leMetaEventStatus);
                debug("\t\tLE meta event data = " + leMetaEventData.toString("hex"));
                this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);
            }
            else if (subEventType === EVT_NUMBER_OF_COMPLETED_PACKETS) {
                const handles = data.readUInt8(3);
                for (let i = 0; i < handles; i++) {
                    const handle = data.readUInt16LE(4 + i * 4);
                    const pkts = data.readUInt16LE(6 + i * 4);
                    debug("\thandle = " + handle);
                    debug("\t\tcompleted = " + pkts);
                    if (this._handleAclsInProgress[handle] === undefined) {
                        debug("\t\talready closed");
                        continue;
                    }
                    if (pkts > this._handleAclsInProgress[handle]) {
                        // Linux kernel may send acl packets by itself, so be ready for underflow
                        this._handleAclsInProgress[handle] = 0;
                    }
                    else {
                        this._handleAclsInProgress[handle] -= pkts;
                    }
                    debug("\t\tin progress = " + this._handleAclsInProgress[handle]);
                }
                this.pushAclOutQueue();
            }
        }
        else if (HCI_ACLDATA_PKT === eventType) {
            const flags = data.readUInt16LE(1) >> 12;
            const handle = data.readUInt16LE(1) & 0x0fff;
            if (ACL_START === flags) {
                const cid = data.readUInt16LE(7);
                const length = data.readUInt16LE(5);
                const pktData = data.slice(9);
                debug("\t\tcid = " + cid);
                if (length === pktData.length) {
                    debug("\t\thandle = " + handle);
                    debug("\t\tdata = " + pktData.toString("hex"));
                    this.emit("aclDataPkt", handle, cid, pktData);
                }
                else {
                    this._handleBuffers[handle] = {
                        length,
                        cid,
                        data: pktData,
                    };
                }
            }
            else if (ACL_CONT === flags) {
                if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {
                    return;
                }
                this._handleBuffers[handle].data = Buffer.concat([
                    this._handleBuffers[handle].data,
                    data.slice(5),
                ]);
                if (this._handleBuffers[handle].data.length ===
                    this._handleBuffers[handle].length) {
                    this.emit("aclDataPkt", handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);
                    delete this._handleBuffers[handle];
                }
            }
        }
        else if (HCI_COMMAND_PKT === eventType) {
            const cmd = data.readUInt16LE(1);
            const len = data.readUInt8(3);
            debug("\t\tcmd = " + cmd);
            debug("\t\tdata len = " + len);
            if (cmd === LE_SET_SCAN_ENABLE_CMD) {
                const enable = data.readUInt8(4) === 0x1;
                const filterDuplicates = data.readUInt8(5) === 0x1;
                debug("\t\t\tLE enable scan command");
                debug("\t\t\tenable scanning = " + enable);
                debug("\t\t\tfilter duplicates = " + filterDuplicates);
                this.emit("leScanEnableSetCmd", enable, filterDuplicates);
            }
        }
    }
    onSocketError(error) {
        debug("onSocketError: " + error.message);
        if (error.message === "Operation not permitted") {
            this.emit("stateChange", "unauthorized");
        }
        else if (error.message === "Network is down") {
            // no-op
        }
    }
    processCmdCompleteEvent(cmd, status, result) {
        if (cmd === RESET_CMD) {
            this.resetBuffers();
            this.setEventMask();
            this.setLeEventMask();
            this.readLocalVersion();
            this.readBdAddr();
            this.writeLeHostSupported();
            this.readLeHostSupported();
            this.leReadBufferSize();
        }
        else if (cmd === READ_LE_HOST_SUPPORTED_CMD) {
            if (status === 0) {
                const le = result.readUInt8(0);
                const simul = result.readUInt8(1);
                debug("\t\t\tle = " + le);
                debug("\t\t\tsimul = " + simul);
            }
        }
        else if (cmd === READ_LOCAL_VERSION_CMD) {
            const hciVer = result.readUInt8(0);
            const hciRev = result.readUInt16LE(1);
            const lmpVer = result.readInt8(3);
            const manufacturer = result.readUInt16LE(4);
            const lmpSubVer = result.readUInt16LE(6);
            if (hciVer < 0x06) {
                this.emit("stateChange", "unsupported");
            }
            else if (this._state !== "poweredOn") {
                this.setScanEnabled(false, true);
                this.setScanParameters();
            }
            this.emit("readLocalVersion", hciVer, hciRev, lmpVer, manufacturer, lmpSubVer);
        }
        else if (cmd === READ_BD_ADDR_CMD) {
            this.addressType = "public";
            this.address = result
                .toString("hex")
                .match(/.{1,2}/g)
                .reverse()
                .join(":");
            debug("address = " + this.address);
            this.emit("addressChange", this.address);
        }
        else if (cmd === LE_SET_SCAN_PARAMETERS_CMD) {
            this.emit("stateChange", "poweredOn");
            this.emit("leScanParametersSet");
        }
        else if (cmd === LE_SET_SCAN_ENABLE_CMD) {
            this.emit("leScanEnableSet", status);
        }
        else if (cmd === LE_SET_ADVERTISING_PARAMETERS_CMD) {
            this.emit("stateChange", "poweredOn");
            this.emit("leAdvertisingParametersSet", status);
        }
        else if (cmd === LE_SET_ADVERTISING_DATA_CMD) {
            this.emit("leAdvertisingDataSet", status);
        }
        else if (cmd === LE_SET_SCAN_RESPONSE_DATA_CMD) {
            this.emit("leScanResponseDataSet", status);
        }
        else if (cmd === LE_SET_ADVERTISE_ENABLE_CMD) {
            this.emit("leAdvertiseEnableSet", status);
        }
        else if (cmd === READ_RSSI_CMD) {
            const handle = result.readUInt16LE(0);
            const rssi = result.readInt8(2);
            debug("\t\t\thandle = " + handle);
            debug("\t\t\trssi = " + rssi);
            this.emit("rssiRead", handle, rssi);
        }
        else if (cmd === LE_LTK_NEG_REPLY_CMD) {
            const handle = result.readUInt16LE(0);
            debug("\t\t\thandle = " + handle);
            this.emit("leLtkNegReply", handle);
        }
        else if (cmd === LE_READ_BUFFER_SIZE_CMD) {
            if (!status) {
                this.processLeReadBufferSize(result);
            }
        }
        else if (cmd === READ_BUFFER_SIZE_CMD) {
            if (!status) {
                const aclMtu = result.readUInt16LE(0);
                const aclMaxInProgress = result.readUInt16LE(3);
                // sanity
                if (aclMtu && aclMaxInProgress) {
                    debug("br/edr acl mtu = " + aclMtu);
                    debug("br/edr acl max pkts = " + aclMaxInProgress);
                    this._aclMtu = aclMtu;
                    this._aclMaxInProgress = aclMaxInProgress;
                }
            }
        }
    }
    processLeMetaEvent(eventType, status, data) {
        if (eventType === EVT_LE_CONN_COMPLETE) {
            this.processLeConnComplete(status, data);
        }
        else if (eventType === EVT_LE_ADVERTISING_REPORT) {
            this.processLeAdvertisingReport(status, data);
        }
        else if (eventType === EVT_LE_CONN_UPDATE_COMPLETE) {
            this.processLeConnUpdateComplete(status, data);
        }
    }
    processLeConnComplete(status, data) {
        const handle = data.readUInt16LE(0);
        const role = data.readUInt8(2);
        const addressType = data.readUInt8(3) === 0x01 ? "random" : "public";
        const address = data
            .slice(4, 10)
            .toString("hex")
            .match(/.{1,2}/g)
            .reverse()
            .join(":");
        const interval = data.readUInt16LE(10) * 1.25;
        const latency = data.readUInt16LE(12); // TODO: multiplier?
        const supervisionTimeout = data.readUInt16LE(14) * 10;
        const masterClockAccuracy = data.readUInt8(16); // TODO: multiplier?
        debug("\t\t\thandle = " + handle);
        debug("\t\t\trole = " + role);
        debug("\t\t\taddress type = " + addressType);
        debug("\t\t\taddress = " + address);
        debug("\t\t\tinterval = " + interval);
        debug("\t\t\tlatency = " + latency);
        debug("\t\t\tsupervision timeout = " + supervisionTimeout);
        debug("\t\t\tmaster clock accuracy = " + masterClockAccuracy);
        this._handleAclsInProgress[handle] = 0;
        this.emit("leConnComplete", status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy);
    }
    processLeAdvertisingReport(count, data) {
        for (let i = 0; i < count; i++) {
            const type = data.readUInt8(0);
            const addressType = data.readUInt8(1) === 0x01 ? "random" : "public";
            const address = data
                .slice(2, 8)
                .toString("hex")
                .match(/.{1,2}/g)
                .reverse()
                .join(":");
            const eirLength = data.readUInt8(8);
            const eir = data.slice(9, eirLength + 9);
            const rssi = data.readInt8(eirLength + 9);
            debug("\t\t\ttype = " + type);
            debug("\t\t\taddress = " + address);
            debug("\t\t\taddress type = " + addressType);
            debug("\t\t\teir = " + eir.toString("hex"));
            debug("\t\t\trssi = " + rssi);
            this.emit("leAdvertisingReport", 0, type, address, addressType, eir, rssi);
            data = data.slice(eirLength + 10);
        }
    }
    processLeConnUpdateComplete(status, data) {
        const handle = data.readUInt16LE(0);
        const interval = data.readUInt16LE(2) * 1.25;
        const latency = data.readUInt16LE(4); // TODO: multiplier?
        const supervisionTimeout = data.readUInt16LE(6) * 10;
        debug("\t\t\thandle = " + handle);
        debug("\t\t\tinterval = " + interval);
        debug("\t\t\tlatency = " + latency);
        debug("\t\t\tsupervision timeout = " + supervisionTimeout);
        this.emit("leConnUpdateComplete", status, handle, interval, latency, supervisionTimeout);
    }
    processCmdStatusEvent(cmd, status) {
        if (cmd === LE_CREATE_CONN_CMD) {
            if (status !== 0) {
                this.emit("leConnComplete", status);
            }
        }
    }
    processLeReadBufferSize(result) {
        const aclMtu = result.readUInt16LE(0);
        const aclMaxInProgress = result.readUInt8(2);
        if (!aclMtu) {
            // as per Bluetooth specs
            debug("falling back to br/edr buffer size");
            this.readBufferSize();
        }
        else {
            debug("le acl mtu = " + aclMtu);
            debug("le acl max in progress = " + aclMaxInProgress);
            this._aclMtu = aclMtu;
            this._aclMaxInProgress = aclMaxInProgress;
        }
    }
    onStateChange(state) {
        this._state = state;
    }
}
Hci.STATUS_MAPPER = STATUS_MAPPER;
exports.default = Hci;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const events = __webpack_require__("./node_modules/events/events.js");
const Smp = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.js");
class AclStream extends events.EventEmitter {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._hci = hci;
        this._handle = handle;
        this.encypted = false;
        this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress, this._hci);
    }
    rite(cid, data) {
        this._hci.queueAclDataPkt(this._handle, cid, data);
    }
    ush(cid, data) {
        if (data) {
            this.emit("data", cid, data);
        }
        else {
            this.emit("end");
        }
    }
    ushEncrypt(encrypt) {
        this.encrypted = encrypt ? true : false;
        this.emit("encryptChange", this.encrypted);
    }
    ushLtkNegReply() {
        this.emit("ltkNegReply");
    }
}
exports.default = AclStream;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9hY2wtc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxNQUFNLEdBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXRDLE1BQU0sR0FBRyxHQUFRLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVsQyxNQUFNLFNBQVUsU0FBUSxNQUFNLENBQUMsWUFBWTtJQVF6QyxZQUNFLEdBQVEsRUFDUixNQUFXLEVBQ1gsZ0JBQXFCLEVBQ3JCLFlBQWlCLEVBQ2pCLGlCQUFzQixFQUN0QixhQUFrQjtRQUVsQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXRCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQ2pCLElBQUksRUFDSixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixhQUFhLEVBQ2IsSUFBSSxDQUFDLElBQUksQ0FDVixDQUFDO0lBQ0osQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFRLEVBQUUsSUFBUztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQVEsRUFBRSxJQUFTO1FBQzVCLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFZO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUV4QyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxTQUFTLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9wcm90b2NvbC9wZXJpcGhlcmFsL2FjbC1zdHJlYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBldmVudHM6IGFueSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5cbmNvbnN0IFNtcDogYW55ID0gcmVxdWlyZShcIi4vc21wXCIpO1xuXG5jbGFzcyBBY2xTdHJlYW0gZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgcHVibGljIF9oY2k6IGFueTtcbiAgcHVibGljIF9oYW5kbGU6IGFueTtcbiAgcHVibGljIGVuY3lwdGVkOiBhbnk7XG4gIHB1YmxpYyBfc21wOiBhbnk7XG4gIHB1YmxpYyBlbWl0OiBhbnk7XG4gIHB1YmxpYyBlbmNyeXB0ZWQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBoY2k6IGFueSxcbiAgICBoYW5kbGU6IGFueSxcbiAgICBsb2NhbEFkZHJlc3NUeXBlOiBhbnksXG4gICAgbG9jYWxBZGRyZXNzOiBhbnksXG4gICAgcmVtb3RlQWRkcmVzc1R5cGU6IGFueSxcbiAgICByZW1vdGVBZGRyZXNzOiBhbnksXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faGNpID0gaGNpO1xuICAgIHRoaXMuX2hhbmRsZSA9IGhhbmRsZTtcbiAgICB0aGlzLmVuY3lwdGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9zbXAgPSBuZXcgU21wKFxuICAgICAgdGhpcyxcbiAgICAgIGxvY2FsQWRkcmVzc1R5cGUsXG4gICAgICBsb2NhbEFkZHJlc3MsXG4gICAgICByZW1vdGVBZGRyZXNzVHlwZSxcbiAgICAgIHJlbW90ZUFkZHJlc3MsXG4gICAgICB0aGlzLl9oY2ksXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyByaXRlKGNpZDogYW55LCBkYXRhOiBhbnkpIHtcbiAgICB0aGlzLl9oY2kucXVldWVBY2xEYXRhUGt0KHRoaXMuX2hhbmRsZSwgY2lkLCBkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyB1c2goY2lkOiBhbnksIGRhdGE6IGFueSkge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGNpZCwgZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdXNoRW5jcnlwdChlbmNyeXB0OiBhbnkpIHtcbiAgICB0aGlzLmVuY3J5cHRlZCA9IGVuY3J5cHQgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB0aGlzLmVtaXQoXCJlbmNyeXB0Q2hhbmdlXCIsIHRoaXMuZW5jcnlwdGVkKTtcbiAgfVxuXG4gIHB1YmxpYyB1c2hMdGtOZWdSZXBseSgpIHtcbiAgICB0aGlzLmVtaXQoXCJsdGtOZWdSZXBseVwiKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBY2xTdHJlYW07XG4iXX0=


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// var debug = require('debug')('bindings');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
const os = __webpack_require__("./node_modules/os-browserify/browser.js");
const AclStream = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.js");
const Gap = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.js");
const Gatt = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.js");
class BlenoBindings extends events.EventEmitter {
    constructor(hciProtocol) {
        super();
        this._state = null;
        this._advertising = false;
        this._hci = hciProtocol;
        this._gap = new Gap(this._hci);
        this._gatt = new Gatt(this._hci);
        this._address = null;
        this._handle = null;
        this._aclStream = null;
    }
    startAdvertising(name, serviceUuids) {
        this._advertising = true;
        this._gap.startAdvertising(name, serviceUuids);
    }
    startAdvertisingIBeacon(data) {
        this._advertising = true;
        this._gap.startAdvertisingIBeacon(data);
    }
    startAdvertisingWithEIRData(advertisementData, scanData) {
        this._advertising = true;
        this._gap.startAdvertisingWithEIRData(advertisementData, scanData);
    }
    stopAdvertising() {
        this._advertising = false;
        this._gap.stopAdvertising();
    }
    setServices(services) {
        this._gatt.setServices(services);
        this.emit("servicesSet");
    }
    disconnect() {
        if (this._handle) {
            debug("disconnect by server");
            this._hci.disconnect(this._handle);
        }
    }
    updateRssi() {
        if (this._handle) {
            this._hci.readRssi(this._handle);
        }
    }
    init() {
        this._gap.on("advertisingStart", this.onAdvertisingStart.bind(this));
        this._gap.on("advertisingStop", this.onAdvertisingStop.bind(this));
        this._gatt.on("mtuChange", this.onMtuChange.bind(this));
        this._hci.on("stateChange", this.onStateChange.bind(this));
        this._hci.on("addressChange", this.onAddressChange.bind(this));
        this._hci.on("readLocalVersion", this.onReadLocalVersion.bind(this));
        this._hci.on("leConnComplete", this.onLeConnComplete.bind(this));
        this._hci.on("leConnUpdateComplete", this.onLeConnUpdateComplete.bind(this));
        this._hci.on("rssiRead", this.onRssiRead.bind(this));
        this._hci.on("disconnComplete", this.onDisconnComplete.bind(this));
        this._hci.on("encryptChange", this.onEncryptChange.bind(this));
        this._hci.on("leLtkNegReply", this.onLeLtkNegReply.bind(this));
        this._hci.on("aclDataPkt", this.onAclDataPkt.bind(this));
        this.emit("platform", os.platform());
    }
    onStateChange(state) {
        if (this._state === state) {
            return;
        }
        this._state = state;
        if (state === "unauthorized") {
            console.log("bleno warning: adapter state unauthorized, please run as root or with sudo");
            console.log("               or see README for information on running without root/sudo:");
            console.log("               https://github.com/sandeepmistry/bleno#running-on-linux");
        }
        else if (state === "unsupported") {
            console.log("bleno warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).");
            console.log("               Try to run with environment variable:");
            console.log("               [sudo] BLENO_HCI_DEVICE_ID=x node ...");
        }
        this.emit("stateChange", state);
    }
    onAddressChange(address) {
        this.emit("addressChange", address);
    }
    onReadLocalVersion(hciVer, hciRev, lmpVer, manufacturer, lmpSubVer) {
    }
    onAdvertisingStart(error) {
        this.emit("advertisingStart", error);
    }
    onAdvertisingStop() {
        this.emit("advertisingStop");
    }
    onLeConnComplete(status, handle, role, addressType, address, interval, latency, supervisionTimeout, masterClockAccuracy) {
        if (role !== 1) {
            // not slave, ignore
            return;
        }
        this._address = address;
        this._handle = handle;
        this._aclStream = new AclStream(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);
        this._gatt.setAclStream(this._aclStream);
        this.emit("accept", address);
    }
    onLeConnUpdateComplete(handle, interval, latency, supervisionTimeout) {
        // no-op
    }
    onDisconnComplete(handle, reason) {
        if (this._handle !== handle) {
            return; // not peripheral
        }
        if (this._aclStream) {
            this._aclStream.push(null, null);
        }
        const address = this._address;
        this._address = null;
        this._handle = null;
        this._aclStream = null;
        if (address) {
            this.emit("disconnect", address); // TODO: use reason
        }
        if (this._advertising) {
            this._gap.restartAdvertising();
        }
    }
    onEncryptChange(handle, encrypt) {
        if (this._handle === handle && this._aclStream) {
            this._aclStream.pushEncrypt(encrypt);
        }
    }
    onLeLtkNegReply(handle) {
        if (this._handle === handle && this._aclStream) {
            this._aclStream.pushLtkNegReply();
        }
    }
    onMtuChange(mtu) {
        this.emit("mtuChange", mtu);
    }
    onRssiRead(handle, rssi) {
        this.emit("rssiUpdate", rssi);
    }
    onAclDataPkt(handle, cid, data) {
        if (this._handle === handle && this._aclStream) {
            this._aclStream.push(cid, data);
        }
    }
}
exports.default = BlenoBindings;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/crypto.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = __webpack_require__("./node_modules/crypto-browserify/index.js");
function r() {
    return crypto.randomBytes(16);
}
function c1(k, _r, pres, preq, iat, ia, rat, ra) {
    const p1 = Buffer.concat([iat, rat, preq, pres]);
    const p2 = Buffer.concat([ra, ia, Buffer.from("00000000", "hex")]);
    let res = xor(_r, p1);
    res = e(k, res);
    res = xor(res, p2);
    res = e(k, res);
    return res;
}
function s1(k, r1, r2) {
    return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));
}
function e(key, data) {
    key = swap(key);
    data = swap(data);
    const cipher = crypto.createCipheriv("aes-128-ecb", key, "");
    cipher.setAutoPadding(false);
    return swap(Buffer.concat([cipher.update(data), cipher.final()]));
}
function xor(b1, b2) {
    const result = Buffer.alloc(b1.length);
    for (let i = 0; i < b1.length; i++) {
        result[i] = b1[i] ^ b2[i];
    }
    return result;
}
function swap(input) {
    const output = Buffer.alloc(input.length);
    for (let i = 0; i < output.length; i++) {
        output[i] = input[input.length - i - 1];
    }
    return output;
}
exports.default = {
    r,
    c1,
    s1,
    e,
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBUSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdEMsU0FBUyxDQUFDO0lBQ1IsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsR0FBUSxFQUFFLEVBQU8sRUFBRSxHQUFRLEVBQUUsRUFBTztJQUNyRixNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV0RCxNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEUsSUFBSSxHQUFHLEdBQVEsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVoQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLEVBQU87SUFDbEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLElBQVM7SUFDNUIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUMsRUFBTyxFQUFFLEVBQU87SUFDM0IsTUFBTSxNQUFNLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUMsS0FBVTtJQUN0QixNQUFNLE1BQU0sR0FBUSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELGtCQUFlO0lBQ2IsQ0FBQztJQUNELEVBQUU7SUFDRixFQUFFO0lBQ0YsQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9wcm90b2NvbC9wZXJpcGhlcmFsL2NyeXB0by5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0bzogYW55ID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuZnVuY3Rpb24gcigpIHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcygxNik7XG59XG5cbmZ1bmN0aW9uIGMxKGs6IGFueSwgX3I6IGFueSwgcHJlczogYW55LCBwcmVxOiBhbnksIGlhdDogYW55LCBpYTogYW55LCByYXQ6IGFueSwgcmE6IGFueSkge1xuICBjb25zdCBwMTogYW55ID0gQnVmZmVyLmNvbmNhdChbaWF0LCByYXQsIHByZXEsIHByZXNdKTtcblxuICBjb25zdCBwMjogYW55ID0gQnVmZmVyLmNvbmNhdChbcmEsIGlhLCBCdWZmZXIuZnJvbShcIjAwMDAwMDAwXCIsIFwiaGV4XCIpXSk7XG5cbiAgbGV0IHJlczogYW55ID0geG9yKF9yLCBwMSk7XG4gIHJlcyA9IGUoaywgcmVzKTtcbiAgcmVzID0geG9yKHJlcywgcDIpO1xuICByZXMgPSBlKGssIHJlcyk7XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gczEoazogYW55LCByMTogYW55LCByMjogYW55KSB7XG4gIHJldHVybiBlKGssIEJ1ZmZlci5jb25jYXQoW3IyLnNsaWNlKDAsIDgpLCByMS5zbGljZSgwLCA4KV0pKTtcbn1cblxuZnVuY3Rpb24gZShrZXk6IGFueSwgZGF0YTogYW55KSB7XG4gIGtleSA9IHN3YXAoa2V5KTtcbiAgZGF0YSA9IHN3YXAoZGF0YSk7XG5cbiAgY29uc3QgY2lwaGVyOiBhbnkgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoXCJhZXMtMTI4LWVjYlwiLCBrZXksIFwiXCIpO1xuICBjaXBoZXIuc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuXG4gIHJldHVybiBzd2FwKEJ1ZmZlci5jb25jYXQoW2NpcGhlci51cGRhdGUoZGF0YSksIGNpcGhlci5maW5hbCgpXSkpO1xufVxuXG5mdW5jdGlvbiB4b3IoYjE6IGFueSwgYjI6IGFueSkge1xuICBjb25zdCByZXN1bHQ6IGFueSA9IEJ1ZmZlci5hbGxvYyhiMS5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBiMVtpXSBeIGIyW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3dhcChpbnB1dDogYW55KSB7XG4gIGNvbnN0IG91dHB1dDogYW55ID0gQnVmZmVyLmFsbG9jKGlucHV0Lmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXQubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbaV0gPSBpbnB1dFtpbnB1dC5sZW5ndGggLSBpIC0gMV07XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHIsXG4gIGMxLFxuICBzMSxcbiAgZSxcbn07XG4iXX0=

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// var debug = require('debug')('gap');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
const os = __webpack_require__("./node_modules/os-browserify/browser.js");
const Hci = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/hci.js");
const isLinux = os.platform() === "linux";
const isIntelEdison = isLinux && os.release().indexOf("edison") !== -1;
const isYocto = isLinux && os.release().indexOf("yocto") !== -1;
class Gap extends events.EventEmitter {
    constructor(hci) {
        super();
        this._hci = hci;
        this._advertiseState = null;
        this._hci.on("error", this.onHciError.bind(this));
        this._hci.on("leAdvertisingParametersSet", this.onHciLeAdvertisingParametersSet.bind(this));
        this._hci.on("leAdvertisingDataSet", this.onHciLeAdvertisingDataSet.bind(this));
        this._hci.on("leScanResponseDataSet", this.onHciLeScanResponseDataSet.bind(this));
        this._hci.on("leAdvertiseEnableSet", this.onHciLeAdvertiseEnableSet.bind(this));
    }
    startAdvertising(name, serviceUuids) {
        debug("startAdvertising: name = " +
            name +
            ", serviceUuids = " +
            JSON.stringify(serviceUuids, null, 2));
        let advertisementDataLength = 3;
        let scanDataLength = 0;
        const serviceUuids16bit = [];
        const serviceUuids128bit = [];
        let i = 0;
        if (name && name.length) {
            scanDataLength += 2 + name.length;
        }
        if (serviceUuids && serviceUuids.length) {
            for (i = 0; i < serviceUuids.length; i++) {
                const serviceUuid = Buffer.from(serviceUuids[i]
                    .match(/.{1,2}/g)
                    .reverse()
                    .join(""), "hex");
                if (serviceUuid.length === 2) {
                    serviceUuids16bit.push(serviceUuid);
                }
                else if (serviceUuid.length === 16) {
                    serviceUuids128bit.push(serviceUuid);
                }
            }
        }
        if (serviceUuids16bit.length) {
            advertisementDataLength += 2 + 2 * serviceUuids16bit.length;
        }
        if (serviceUuids128bit.length) {
            advertisementDataLength += 2 + 16 * serviceUuids128bit.length;
        }
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(scanDataLength);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        let advertisementDataOffset = 3;
        if (serviceUuids16bit.length) {
            advertisementData.writeUInt8(1 + 2 * serviceUuids16bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x03, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids16bit.length; i++) {
                serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids16bit[i].length;
            }
        }
        if (serviceUuids128bit.length) {
            advertisementData.writeUInt8(1 + 16 * serviceUuids128bit.length, advertisementDataOffset);
            advertisementDataOffset++;
            advertisementData.writeUInt8(0x06, advertisementDataOffset);
            advertisementDataOffset++;
            for (i = 0; i < serviceUuids128bit.length; i++) {
                serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);
                advertisementDataOffset += serviceUuids128bit[i].length;
            }
        }
        // name
        if (name && name.length) {
            const nameBuffer = Buffer.alloc(name);
            scanData.writeUInt8(1 + nameBuffer.length, 0);
            scanData.writeUInt8(0x08, 1);
            nameBuffer.copy(scanData, 2);
        }
        this.startAdvertisingWithEIRData(advertisementData, scanData);
    }
    startAdvertisingIBeacon(data) {
        debug("startAdvertisingIBeacon: data = " + data.toString("hex"));
        const dataLength = data.length;
        const manufacturerDataLength = 4 + dataLength;
        const advertisementDataLength = 5 + manufacturerDataLength;
        // let scanDataLength = 0;
        const advertisementData = Buffer.alloc(advertisementDataLength);
        const scanData = Buffer.alloc(0);
        // flags
        advertisementData.writeUInt8(2, 0);
        advertisementData.writeUInt8(0x01, 1);
        advertisementData.writeUInt8(0x06, 2);
        advertisementData.writeUInt8(manufacturerDataLength + 1, 3);
        advertisementData.writeUInt8(0xff, 4);
        advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)
        advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon
        advertisementData.writeUInt8(dataLength, 8);
        data.copy(advertisementData, 9);
        this.startAdvertisingWithEIRData(advertisementData, scanData);
    }
    startAdvertisingWithEIRData(advertisementData, scanData) {
        advertisementData = advertisementData || Buffer.alloc(0);
        scanData = scanData || Buffer.alloc(0);
        debug("startAdvertisingWithEIRData: advertisement data = " +
            advertisementData.toString("hex") +
            ", scan data = " +
            scanData.toString("hex"));
        let error = null;
        if (advertisementData.length > 31) {
            error = new Error("Advertisement data is over maximum limit of 31 bytes");
        }
        else if (scanData.length > 31) {
            error = new Error("Scan data is over maximum limit of 31 bytes");
        }
        if (error) {
            this.emit("advertisingStart", error);
        }
        else {
            this._advertiseState = "starting";
            if (isIntelEdison || isYocto) {
                // work around for Intel Edison
                debug("skipping first set of scan response and advertisement data");
            }
            else {
                this._hci.setScanResponseData(scanData);
                this._hci.setAdvertisingData(advertisementData);
            }
            this._hci.setAdvertiseEnable(true);
            this._hci.setScanResponseData(scanData);
            this._hci.setAdvertisingData(advertisementData);
        }
    }
    restartAdvertising() {
        this._advertiseState = "restarting";
        this._hci.setAdvertiseEnable(true);
    }
    stopAdvertising() {
        this._advertiseState = "stopping";
        this._hci.setAdvertiseEnable(false);
    }
    onHciError(error) {
    }
    onHciLeAdvertisingParametersSet(status) {
    }
    onHciLeAdvertisingDataSet(status) {
    }
    onHciLeScanResponseDataSet(status) {
    }
    onHciLeAdvertiseEnableSet(status) {
        if (this._advertiseState === "starting") {
            this._advertiseState = "started";
            let error = null;
            if (status) {
                error = new Error(Hci.STATUS_MAPPER[status] || "Unknown (" + status + ")");
            }
            this.emit("advertisingStart", error);
        }
        else if (this._advertiseState === "stopping") {
            this._advertiseState = "stopped";
            this.emit("advertisingStop");
        }
    }
}
exports.default = Gap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/gatt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// var debug = require('debug')('gatt');
const debug = () => {
};
const events = __webpack_require__("./node_modules/events/events.js");
/* eslint-disable no-unused-vars */
const ATT_OP_ERROR = 0x01;
const ATT_OP_MTU_REQ = 0x02;
const ATT_OP_MTU_RESP = 0x03;
const ATT_OP_FIND_INFO_REQ = 0x04;
const ATT_OP_FIND_INFO_RESP = 0x05;
const ATT_OP_FIND_BY_TYPE_REQ = 0x06;
const ATT_OP_FIND_BY_TYPE_RESP = 0x07;
const ATT_OP_READ_BY_TYPE_REQ = 0x08;
const ATT_OP_READ_BY_TYPE_RESP = 0x09;
const ATT_OP_READ_REQ = 0x0a;
const ATT_OP_READ_RESP = 0x0b;
const ATT_OP_READ_BLOB_REQ = 0x0c;
const ATT_OP_READ_BLOB_RESP = 0x0d;
const ATT_OP_READ_MULTI_REQ = 0x0e;
const ATT_OP_READ_MULTI_RESP = 0x0f;
const ATT_OP_READ_BY_GROUP_REQ = 0x10;
const ATT_OP_READ_BY_GROUP_RESP = 0x11;
const ATT_OP_WRITE_REQ = 0x12;
const ATT_OP_WRITE_RESP = 0x13;
const ATT_OP_WRITE_CMD = 0x52;
const ATT_OP_PREP_WRITE_REQ = 0x16;
const ATT_OP_PREP_WRITE_RESP = 0x17;
const ATT_OP_EXEC_WRITE_REQ = 0x18;
const ATT_OP_EXEC_WRITE_RESP = 0x19;
const ATT_OP_HANDLE_NOTIFY = 0x1b;
const ATT_OP_HANDLE_IND = 0x1d;
const ATT_OP_HANDLE_CNF = 0x1e;
const ATT_OP_SIGNED_WRITE_CMD = 0xd2;
const GATT_PRIM_SVC_UUID = 0x2800;
const GATT_INCLUDE_UUID = 0x2802;
const GATT_CHARAC_UUID = 0x2803;
const GATT_CLIENT_CHARAC_CFG_UUID = 0x2902;
const GATT_SERVER_CHARAC_CFG_UUID = 0x2903;
const ATT_ECODE_SUCCESS = 0x00;
const ATT_ECODE_INVALID_HANDLE = 0x01;
const ATT_ECODE_READ_NOT_PERM = 0x02;
const ATT_ECODE_WRITE_NOT_PERM = 0x03;
const ATT_ECODE_INVALID_PDU = 0x04;
const ATT_ECODE_AUTHENTICATION = 0x05;
const ATT_ECODE_REQ_NOT_SUPP = 0x06;
const ATT_ECODE_INVALID_OFFSET = 0x07;
const ATT_ECODE_AUTHORIZATION = 0x08;
const ATT_ECODE_PREP_QUEUE_FULL = 0x09;
const ATT_ECODE_ATTR_NOT_FOUND = 0x0a;
const ATT_ECODE_ATTR_NOT_LONG = 0x0b;
const ATT_ECODE_INSUFF_ENCR_KEY_SIZE = 0x0c;
const ATT_ECODE_INVAL_ATTR_VALUE_LEN = 0x0d;
const ATT_ECODE_UNLIKELY = 0x0e;
const ATT_ECODE_INSUFF_ENC = 0x0f;
const ATT_ECODE_UNSUPP_GRP_TYPE = 0x10;
const ATT_ECODE_INSUFF_RESOURCES = 0x11;
/* eslint-enable no-unused-vars */
const ATT_CID = 0x0004;
class Gatt extends events.EventEmitter {
    constructor() {
        super();
        this.maxMtu = 256;
        this._mtu = 23;
        this._preparedWriteRequest = null;
        this.setServices([]);
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
    }
    setServices(services) {
        // var deviceName = process.env.BLENO_DEVICE_NAME || os.hostname();
        // base services and characteristics
        const allServices = [
        // {
        //   uuid: '1800',
        //   characteristics: [
        //     {
        //       uuid: '2a00',
        //       properties: ['read'],
        //       secure: [],
        //       value: Buffer.from(deviceName),
        //       descriptors: []
        //     },
        //     {
        //       uuid: '2a01',
        //       properties: ['read'],
        //       secure: [],
        //       value: Buffer.from([0x80, 0x00]),
        //       descriptors: []
        //     }
        //   ]
        // },
        // {
        //   uuid: '1801',
        //   characteristics: [
        //     {
        //       uuid: '2a05',
        //       properties: ['indicate'],
        //       secure: [],
        //       value: Buffer.from([0x00, 0x00, 0x00, 0x00]),
        //       descriptors: []
        //     }
        //   ]
        // }
        ].concat(services);
        this._handles = [];
        let handle = 0;
        let i;
        let j;
        for (i = 0; i < allServices.length; i++) {
            const service = allServices[i];
            handle++;
            const serviceHandle = handle;
            this._handles[serviceHandle] = {
                type: "service",
                uuid: service.uuid,
                attribute: service,
                startHandle: serviceHandle,
            };
            for (j = 0; j < service.characteristics.length; j++) {
                const characteristic = service.characteristics[j];
                let properties = 0;
                let secure = 0;
                if (characteristic.properties.indexOf("read") !== -1) {
                    properties |= 0x02;
                    if (characteristic.secure.indexOf("read") !== -1) {
                        secure |= 0x02;
                    }
                }
                if (characteristic.properties.indexOf("writeWithoutResponse") !== -1) {
                    properties |= 0x04;
                    if (characteristic.secure.indexOf("writeWithoutResponse") !== -1) {
                        secure |= 0x04;
                    }
                }
                if (characteristic.properties.indexOf("write") !== -1) {
                    properties |= 0x08;
                    if (characteristic.secure.indexOf("write") !== -1) {
                        secure |= 0x08;
                    }
                }
                if (characteristic.properties.indexOf("notify") !== -1) {
                    properties |= 0x10;
                    if (characteristic.secure.indexOf("notify") !== -1) {
                        secure |= 0x10;
                    }
                }
                if (characteristic.properties.indexOf("indicate") !== -1) {
                    properties |= 0x20;
                    if (characteristic.secure.indexOf("indicate") !== -1) {
                        secure |= 0x20;
                    }
                }
                handle++;
                const characteristicHandle = handle;
                handle++;
                const characteristicValueHandle = handle;
                this._handles[characteristicHandle] = {
                    type: "characteristic",
                    uuid: characteristic.uuid,
                    properties,
                    secure,
                    attribute: characteristic,
                    startHandle: characteristicHandle,
                    valueHandle: characteristicValueHandle,
                };
                this._handles[characteristicValueHandle] = {
                    type: "characteristicValue",
                    handle: characteristicValueHandle,
                    value: characteristic.value,
                };
                const hasCCCD = characteristic.descriptors.find((e) => e.uuid === "2902");
                if (hasCCCD || properties & 0x30) {
                    // notify or indicate
                    // add client characteristic configuration descriptor
                    handle++;
                    const clientCharacteristicConfigurationDescriptorHandle = handle;
                    this._handles[clientCharacteristicConfigurationDescriptorHandle] = {
                        type: "descriptor",
                        handle: clientCharacteristicConfigurationDescriptorHandle,
                        uuid: "2902",
                        attribute: characteristic,
                        properties: 0x02 | 0x04 | 0x08,
                        secure: secure & 0x10 ? 0x02 | 0x04 | 0x08 : 0,
                        value: Buffer.from([0x00, 0x00]),
                    };
                }
                for (let k = 0; k < characteristic.descriptors.length; k++) {
                    const descriptor = characteristic.descriptors[k];
                    if (descriptor.uuid === "2902") {
                        continue;
                    }
                    handle++;
                    const descriptorHandle = handle;
                    this._handles[descriptorHandle] = {
                        type: "descriptor",
                        handle: descriptorHandle,
                        uuid: descriptor.uuid,
                        attribute: descriptor,
                        properties: 0x02,
                        secure: 0x00,
                        value: descriptor.value,
                    };
                }
            }
            this._handles[serviceHandle].endHandle = handle;
        }
        const debugHandles = [];
        for (i = 0; i < this._handles.length; i++) {
            handle = this._handles[i];
            debugHandles[i] = {};
            for (j in handle) {
                if (Buffer.isBuffer(handle[j])) {
                    debugHandles[i][j] = handle[j]
                        ? "Buffer('" + handle[j].toString("hex") + "', 'hex')"
                        : null;
                }
                else if (j !== "attribute") {
                    debugHandles[i][j] = handle[j];
                }
            }
        }
        debug("handles = " + JSON.stringify(debugHandles, null, 2));
    }
    setAclStream(aclStream) {
        this._mtu = 23;
        this._preparedWriteRequest = null;
        this._aclStream = aclStream;
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== ATT_CID) {
            return;
        }
        this.handleRequest(data);
    }
    onAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
        for (let i = 0; i < this._handles.length; i++) {
            if (this._handles[i] &&
                this._handles[i].type === "descriptor" &&
                this._handles[i].uuid === "2902" &&
                this._handles[i].value.readUInt16LE(0) !== 0) {
                this._handles[i].value = Buffer.from([0x00, 0x00]);
                if (this._handles[i].attribute && this._handles[i].attribute.emit) {
                    this._handles[i].attribute.emit("unsubscribe");
                }
            }
        }
    }
    send(data) {
        debug("send: " + data.toString("hex"));
        this._aclStream.write(ATT_CID, data);
    }
    errorResponse(opcode, handle, status) {
        const buf = Buffer.alloc(5);
        buf.writeUInt8(ATT_OP_ERROR, 0);
        buf.writeUInt8(opcode, 1);
        buf.writeUInt16LE(handle, 2);
        buf.writeUInt8(status, 4);
        return buf;
    }
    handleRequest(request) {
        debug("handing request: " + request.toString("hex"));
        const requestType = request[0];
        let response = null;
        switch (requestType) {
            case ATT_OP_MTU_REQ:
                response = this.handleMtuRequest(request);
                break;
            case ATT_OP_FIND_INFO_REQ:
                response = this.handleFindInfoRequest(request);
                break;
            case ATT_OP_FIND_BY_TYPE_REQ:
                response = this.handleFindByTypeRequest(request);
                break;
            case ATT_OP_READ_BY_TYPE_REQ:
                response = this.handleReadByTypeRequest(request);
                break;
            case ATT_OP_READ_REQ:
            case ATT_OP_READ_BLOB_REQ:
                response = this.handleReadOrReadBlobRequest(request);
                break;
            case ATT_OP_READ_BY_GROUP_REQ:
                response = this.handleReadByGroupRequest(request);
                break;
            case ATT_OP_WRITE_REQ:
            case ATT_OP_WRITE_CMD:
                response = this.handleWriteRequestOrCommand(request);
                break;
            case ATT_OP_PREP_WRITE_REQ:
                response = this.handlePrepareWriteRequest(request);
                break;
            case ATT_OP_EXEC_WRITE_REQ:
                response = this.handleExecuteWriteRequest(request);
                break;
            case ATT_OP_HANDLE_CNF:
                response = this.handleConfirmation(request);
                break;
            default:
            case ATT_OP_READ_MULTI_REQ:
            case ATT_OP_SIGNED_WRITE_CMD:
                response = this.errorResponse(requestType, 0x0000, ATT_ECODE_REQ_NOT_SUPP);
                break;
        }
        if (response) {
            debug("response: " + response.toString("hex"));
            this.send(response);
        }
    }
    handleMtuRequest(request) {
        let mtu = request.readUInt16LE(1);
        if (mtu < 23) {
            mtu = 23;
        }
        else if (mtu > this.maxMtu) {
            mtu = this.maxMtu;
        }
        this._mtu = mtu;
        this.emit("mtuChange", this._mtu);
        const response = Buffer.alloc(3);
        response.writeUInt8(ATT_OP_MTU_RESP, 0);
        response.writeUInt16LE(mtu, 1);
        return response;
    }
    handleFindInfoRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const infos = [];
        let uuid = null;
        let i;
        for (i = startHandle; i <= endHandle; i++) {
            const handle = this._handles[i];
            if (!handle) {
                break;
            }
            uuid = null;
            if ("service" === handle.type) {
                uuid = "2800";
            }
            else if ("includedService" === handle.type) {
                uuid = "2802";
            }
            else if ("characteristic" === handle.type) {
                uuid = "2803";
            }
            else if ("characteristicValue" === handle.type) {
                uuid = this._handles[i - 1].uuid;
            }
            else if ("descriptor" === handle.type) {
                uuid = handle.uuid;
            }
            if (uuid) {
                infos.push({
                    handle: i,
                    uuid,
                });
            }
        }
        if (infos.length) {
            const uuidSize = infos[0].uuid.length / 2;
            let numInfo = 1;
            for (i = 1; i < infos.length; i++) {
                if (infos[0].uuid.length !== infos[i].uuid.length) {
                    break;
                }
                numInfo++;
            }
            const lengthPerInfo = uuidSize === 2 ? 4 : 18;
            const maxInfo = Math.floor((this._mtu - 2) / lengthPerInfo);
            numInfo = Math.min(numInfo, maxInfo);
            response = Buffer.alloc(2 + numInfo * lengthPerInfo);
            response[0] = ATT_OP_FIND_INFO_RESP;
            response[1] = uuidSize === 2 ? 0x01 : 0x2;
            for (i = 0; i < numInfo; i++) {
                const info = infos[i];
                response.writeUInt16LE(info.handle, 2 + i * lengthPerInfo);
                uuid = Buffer.from(info.uuid
                    .match(/.{1,2}/g)
                    .reverse()
                    .join(""), "hex");
                for (let j = 0; j < uuid.length; j++) {
                    response[2 + i * lengthPerInfo + 2 + j] = uuid[j];
                }
            }
        }
        else {
            response = this.errorResponse(ATT_OP_FIND_INFO_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);
        }
        return response;
    }
    handleFindByTypeRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = request
            .slice(5, 7)
            .toString("hex")
            .match(/.{1,2}/g)
            .reverse()
            .join("");
        const value = request
            .slice(7)
            .toString("hex")
            .match(/.{1,2}/g)
            .reverse()
            .join("");
        const handles = [];
        let handle;
        for (let i = startHandle; i <= endHandle; i++) {
            handle = this._handles[i];
            if (!handle) {
                break;
            }
            if ("2800" === uuid &&
                handle.type === "service" &&
                handle.uuid === value) {
                handles.push({
                    start: handle.startHandle,
                    end: handle.endHandle,
                });
            }
        }
        if (handles.length) {
            const lengthPerHandle = 4;
            let numHandles = handles.length;
            const maxHandles = Math.floor((this._mtu - 1) / lengthPerHandle);
            numHandles = Math.min(numHandles, maxHandles);
            response = Buffer.alloc(1 + numHandles * lengthPerHandle);
            response[0] = ATT_OP_FIND_BY_TYPE_RESP;
            for (let i = 0; i < numHandles; i++) {
                handle = handles[i];
                response.writeUInt16LE(handle.start, 1 + i * lengthPerHandle);
                response.writeUInt16LE(handle.end, 1 + i * lengthPerHandle + 2);
            }
        }
        else {
            response = this.errorResponse(ATT_OP_FIND_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);
        }
        return response;
    }
    handleReadByGroupRequest(request) {
        let response = null;
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = request
            .slice(5)
            .toString("hex")
            .match(/.{1,2}/g)
            .reverse()
            .join("");
        debug("read by group: startHandle = 0x" +
            startHandle.toString(16) +
            ", endHandle = 0x" +
            endHandle.toString(16) +
            ", uuid = 0x" +
            uuid.toString(16));
        if ("2800" === uuid || "2802" === uuid) {
            const services = [];
            const type = "2800" === uuid ? "service" : "includedService";
            let i;
            for (i = startHandle; i <= endHandle; i++) {
                const handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === type) {
                    services.push(handle);
                }
            }
            if (services.length) {
                const uuidSize = services[0].uuid.length / 2;
                let numServices = 1;
                for (i = 1; i < services.length; i++) {
                    if (services[0].uuid.length !== services[i].uuid.length) {
                        break;
                    }
                    numServices++;
                }
                const lengthPerService = uuidSize === 2 ? 6 : 20;
                const maxServices = Math.floor((this._mtu - 2) / lengthPerService);
                numServices = Math.min(numServices, maxServices);
                response = Buffer.alloc(2 + numServices * lengthPerService);
                response[0] = ATT_OP_READ_BY_GROUP_RESP;
                response[1] = lengthPerService;
                for (i = 0; i < numServices; i++) {
                    const service = services[i];
                    response.writeUInt16LE(service.startHandle, 2 + i * lengthPerService);
                    response.writeUInt16LE(service.endHandle, 2 + i * lengthPerService + 2);
                    const serviceUuid = Buffer.from(service.uuid
                        .match(/.{1,2}/g)
                        .reverse()
                        .join(""), "hex");
                    for (let j = 0; j < serviceUuid.length; j++) {
                        response[2 + i * lengthPerService + 4 + j] = serviceUuid[j];
                    }
                }
            }
            else {
                response = this.errorResponse(ATT_OP_READ_BY_GROUP_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);
            }
        }
        else {
            response = this.errorResponse(ATT_OP_READ_BY_GROUP_REQ, startHandle, ATT_ECODE_UNSUPP_GRP_TYPE);
        }
        return response;
    }
    handleReadByTypeRequest(request) {
        let response = null;
        const requestType = request[0];
        const startHandle = request.readUInt16LE(1);
        const endHandle = request.readUInt16LE(3);
        const uuid = request
            .slice(5)
            .toString("hex")
            .match(/.{1,2}/g)
            .reverse()
            .join("");
        let i;
        let handle;
        debug("read by type: startHandle = 0x" +
            startHandle.toString(16) +
            ", endHandle = 0x" +
            endHandle.toString(16) +
            ", uuid = 0x" +
            uuid.toString(16));
        if ("2803" === uuid) {
            const characteristics = [];
            for (i = startHandle; i <= endHandle; i++) {
                handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === "characteristic") {
                    characteristics.push(handle);
                }
            }
            if (characteristics.length) {
                const uuidSize = characteristics[0].uuid.length / 2;
                let numCharacteristics = 1;
                for (i = 1; i < characteristics.length; i++) {
                    if (characteristics[0].uuid.length !== characteristics[i].uuid.length) {
                        break;
                    }
                    numCharacteristics++;
                }
                const lengthPerCharacteristic = uuidSize === 2 ? 7 : 21;
                const maxCharacteristics = Math.floor((this._mtu - 2) / lengthPerCharacteristic);
                numCharacteristics = Math.min(numCharacteristics, maxCharacteristics);
                response = Buffer.alloc(2 + numCharacteristics * lengthPerCharacteristic);
                response[0] = ATT_OP_READ_BY_TYPE_RESP;
                response[1] = lengthPerCharacteristic;
                for (i = 0; i < numCharacteristics; i++) {
                    const characteristic = characteristics[i];
                    response.writeUInt16LE(characteristic.startHandle, 2 + i * lengthPerCharacteristic);
                    response.writeUInt8(characteristic.properties, 2 + i * lengthPerCharacteristic + 2);
                    response.writeUInt16LE(characteristic.valueHandle, 2 + i * lengthPerCharacteristic + 3);
                    const characteristicUuid = Buffer.from(characteristic.uuid
                        .match(/.{1,2}/g)
                        .reverse()
                        .join(""), "hex");
                    for (let j = 0; j < characteristicUuid.length; j++) {
                        response[2 + i * lengthPerCharacteristic + 5 + j] =
                            characteristicUuid[j];
                    }
                }
            }
            else {
                response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);
            }
        }
        else {
            let handleAttribute = null;
            let valueHandle = null;
            let secure = false;
            for (i = startHandle; i <= endHandle; i++) {
                handle = this._handles[i];
                if (!handle) {
                    break;
                }
                if (handle.type === "characteristic" && handle.uuid === uuid) {
                    handleAttribute = handle.attribute;
                    valueHandle = handle.valueHandle;
                    secure = handle.secure & 0x02;
                    break;
                }
                else if (handle.type === "descriptor" && handle.uuid === uuid) {
                    valueHandle = i;
                    secure = handle.secure & 0x02;
                    break;
                }
            }
            if (secure && !this._aclStream.encrypted) {
                response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_AUTHENTICATION);
            }
            else if (valueHandle) {
                const callback = ((_valueHandle) => {
                    return (result, _data) => {
                        let callbackResponse = null;
                        if (ATT_ECODE_SUCCESS === result) {
                            const dataLength = Math.min(_data.length, this._mtu - 4);
                            callbackResponse = Buffer.alloc(4 + dataLength);
                            callbackResponse[0] = ATT_OP_READ_BY_TYPE_RESP;
                            callbackResponse[1] = dataLength + 2;
                            callbackResponse.writeUInt16LE(_valueHandle, 2);
                            for (i = 0; i < dataLength; i++) {
                                callbackResponse[4 + i] = _data[i];
                            }
                        }
                        else {
                            callbackResponse = this.errorResponse(requestType, _valueHandle, result);
                        }
                        debug("read by type response: " + callbackResponse.toString("hex"));
                        this.send(callbackResponse);
                    };
                })(valueHandle);
                const data = this._handles[valueHandle].value;
                if (data) {
                    callback(ATT_ECODE_SUCCESS, data);
                }
                else if (handleAttribute) {
                    handleAttribute.emit("readRequest", 0, callback);
                }
                else {
                    callback(ATT_ECODE_UNLIKELY);
                }
            }
            else {
                response = this.errorResponse(ATT_OP_READ_BY_TYPE_REQ, startHandle, ATT_ECODE_ATTR_NOT_FOUND);
            }
        }
        return response;
    }
    handleReadOrReadBlobRequest(request) {
        let response = null;
        const requestType = request[0];
        const valueHandle = request.readUInt16LE(1);
        const offset = requestType === ATT_OP_READ_BLOB_REQ ? request.readUInt16LE(3) : 0;
        const handle = this._handles[valueHandle];
        let i;
        if (handle) {
            let result = null;
            let data = null;
            const handleType = handle.type;
            const callback = ((_requestType, _valueHandle) => {
                return (_result, _data) => {
                    let callbackResponse = null;
                    if (ATT_ECODE_SUCCESS === _result) {
                        const dataLength = Math.min(_data.length, this._mtu - 1);
                        callbackResponse = Buffer.alloc(1 + dataLength);
                        callbackResponse[0] =
                            _requestType === ATT_OP_READ_BLOB_REQ
                                ? ATT_OP_READ_BLOB_RESP
                                : ATT_OP_READ_RESP;
                        for (i = 0; i < dataLength; i++) {
                            callbackResponse[1 + i] = _data[i];
                        }
                    }
                    else {
                        callbackResponse = this.errorResponse(_requestType, _valueHandle, _result);
                    }
                    debug("read response: " + callbackResponse.toString("hex"));
                    this.send(callbackResponse);
                };
            })(requestType, valueHandle);
            if (handleType === "service" || handleType === "includedService") {
                result = ATT_ECODE_SUCCESS;
                data = Buffer.from(handle.uuid
                    .match(/.{1,2}/g)
                    .reverse()
                    .join(""), "hex");
            }
            else if (handleType === "characteristic") {
                const uuid = Buffer.from(handle.uuid
                    .match(/.{1,2}/g)
                    .reverse()
                    .join(""), "hex");
                result = ATT_ECODE_SUCCESS;
                data = Buffer.alloc(3 + uuid.length);
                data.writeUInt8(handle.properties, 0);
                data.writeUInt16LE(handle.valueHandle, 1);
                for (i = 0; i < uuid.length; i++) {
                    data[i + 3] = uuid[i];
                }
            }
            else if (handleType === "characteristicValue" ||
                handleType === "descriptor") {
                let handleProperties = handle.properties;
                let handleSecure = handle.secure;
                let handleAttribute = handle.attribute;
                if (handleType === "characteristicValue") {
                    handleProperties = this._handles[valueHandle - 1].properties;
                    handleSecure = this._handles[valueHandle - 1].secure;
                    handleAttribute = this._handles[valueHandle - 1].attribute;
                }
                if (handleProperties & 0x02) {
                    if (handleSecure & 0x02 && !this._aclStream.encrypted) {
                        result = ATT_ECODE_AUTHENTICATION;
                    }
                    else {
                        data = handle.value;
                        if (data) {
                            result = ATT_ECODE_SUCCESS;
                        }
                        else {
                            handleAttribute.emit("readRequest", offset, callback);
                        }
                    }
                }
                else {
                    result = ATT_ECODE_READ_NOT_PERM; // non-readable
                }
            }
            if (data && typeof data === "string") {
                data = Buffer.from(data);
            }
            if (result === ATT_ECODE_SUCCESS && data && offset) {
                if (data.length < offset) {
                    result = ATT_ECODE_INVALID_OFFSET;
                    data = null;
                }
                else {
                    data = data.slice(offset);
                }
            }
            if (result !== null) {
                callback(result, data);
            }
        }
        else {
            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handleWriteRequestOrCommand(request) {
        let response = null;
        const requestType = request[0];
        const withoutResponse = requestType === ATT_OP_WRITE_CMD;
        const valueHandle = request.readUInt16LE(1);
        const data = request.slice(3);
        const offset = 0;
        let handle = this._handles[valueHandle];
        if (handle) {
            if (handle.type === "characteristicValue") {
                handle = this._handles[valueHandle - 1];
            }
            const handleProperties = handle.properties;
            const handleSecure = handle.secure;
            if (handleProperties &&
                (withoutResponse ? handleProperties & 0x04 : handleProperties & 0x08)) {
                const callback = ((_requestType, _valueHandle, _withoutResponse) => {
                    return (result) => {
                        if (!_withoutResponse) {
                            let callbackResponse = null;
                            if (ATT_ECODE_SUCCESS === result) {
                                callbackResponse = Buffer.from([ATT_OP_WRITE_RESP]);
                            }
                            else {
                                callbackResponse = this.errorResponse(_requestType, _valueHandle, result);
                            }
                            debug("write response: " + callbackResponse.toString("hex"));
                            this.send(callbackResponse);
                        }
                    };
                })(requestType, valueHandle, withoutResponse);
                if (handleSecure & (withoutResponse ? 0x04 : 0x08) &&
                    !this._aclStream.encrypted) {
                    response = this.errorResponse(requestType, valueHandle, ATT_ECODE_AUTHENTICATION);
                }
                else if (handle.type === "descriptor" || handle.uuid === "2902") {
                    let result = null;
                    if (data.length !== 2) {
                        result = ATT_ECODE_INVAL_ATTR_VALUE_LEN;
                    }
                    else {
                        const value = data.readUInt16LE(0);
                        const handleAttribute = handle.attribute;
                        handle.value = data;
                        if (value & 0x0003) {
                            const updateValueCallback = ((_valueHandle, _attribute) => {
                                return (_data) => {
                                    const dataLength = Math.min(_data.length, this._mtu - 3);
                                    const useNotify = _attribute.properties.indexOf("notify") !== -1;
                                    const useIndicate = _attribute.properties.indexOf("indicate") !== -1;
                                    let i;
                                    if (useNotify) {
                                        const notifyMessage = Buffer.alloc(3 + dataLength);
                                        notifyMessage.writeUInt8(ATT_OP_HANDLE_NOTIFY, 0);
                                        notifyMessage.writeUInt16LE(_valueHandle, 1);
                                        for (i = 0; i < dataLength; i++) {
                                            notifyMessage[3 + i] = _data[i];
                                        }
                                        debug("notify message: " + notifyMessage.toString("hex"));
                                        this.send(notifyMessage);
                                        _attribute.emit("notify");
                                    }
                                    else if (useIndicate) {
                                        const indicateMessage = Buffer.alloc(3 + dataLength);
                                        indicateMessage.writeUInt8(ATT_OP_HANDLE_IND, 0);
                                        indicateMessage.writeUInt16LE(_valueHandle, 1);
                                        for (i = 0; i < dataLength; i++) {
                                            indicateMessage[3 + i] = _data[i];
                                        }
                                        this._lastIndicatedAttribute = _attribute;
                                        debug("indicate message: " + indicateMessage.toString("hex"));
                                        this.send(indicateMessage);
                                    }
                                };
                            })(valueHandle - 1, handleAttribute);
                            if (handleAttribute.emit) {
                                handleAttribute.emit("subscribe", this._mtu - 3, updateValueCallback);
                            }
                        }
                        else {
                            handleAttribute.emit("unsubscribe");
                        }
                        result = ATT_ECODE_SUCCESS;
                    }
                    callback(result);
                }
                else {
                    handle.attribute.emit("writeRequest", data, offset, withoutResponse, callback);
                }
            }
            else {
                response = this.errorResponse(requestType, valueHandle, ATT_ECODE_WRITE_NOT_PERM);
            }
        }
        else {
            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handlePrepareWriteRequest(request) {
        let response = null;
        const requestType = request[0];
        const valueHandle = request.readUInt16LE(1);
        const offset = request.readUInt16LE(3);
        const data = request.slice(5);
        let handle = this._handles[valueHandle];
        if (handle) {
            if (handle.type === "characteristicValue") {
                handle = this._handles[valueHandle - 1];
                const handleProperties = handle.properties;
                const handleSecure = handle.secure;
                if (handleProperties && handleProperties & 0x08) {
                    if (handleSecure & 0x08 && !this._aclStream.encrypted) {
                        response = this.errorResponse(requestType, valueHandle, ATT_ECODE_AUTHENTICATION);
                    }
                    else if (this._preparedWriteRequest) {
                        if (this._preparedWriteRequest.handle !== handle) {
                            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_UNLIKELY);
                        }
                        else if (offset ===
                            this._preparedWriteRequest.offset +
                                this._preparedWriteRequest.data.length) {
                            this._preparedWriteRequest.data = Buffer.concat([
                                this._preparedWriteRequest.data,
                                data,
                            ]);
                            response = Buffer.alloc(request.length);
                            request.copy(response);
                            response[0] = ATT_OP_PREP_WRITE_RESP;
                        }
                        else {
                            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_OFFSET);
                        }
                    }
                    else {
                        this._preparedWriteRequest = {
                            handle,
                            valueHandle,
                            offset,
                            data,
                        };
                        response = Buffer.alloc(request.length);
                        request.copy(response);
                        response[0] = ATT_OP_PREP_WRITE_RESP;
                    }
                }
                else {
                    response = this.errorResponse(requestType, valueHandle, ATT_ECODE_WRITE_NOT_PERM);
                }
            }
            else {
                response = this.errorResponse(requestType, valueHandle, ATT_ECODE_ATTR_NOT_LONG);
            }
        }
        else {
            response = this.errorResponse(requestType, valueHandle, ATT_ECODE_INVALID_HANDLE);
        }
        return response;
    }
    handleExecuteWriteRequest(request) {
        let response = null;
        const requestType = request[0];
        const flag = request[1];
        if (this._preparedWriteRequest) {
            if (flag === 0x00) {
                response = Buffer.from([ATT_OP_EXEC_WRITE_RESP]);
            }
            else if (flag === 0x01) {
                const callback = ((_requestType, _valueHandle) => {
                    return (result) => {
                        let callbackResponse = null;
                        if (ATT_ECODE_SUCCESS === result) {
                            callbackResponse = Buffer.from([ATT_OP_EXEC_WRITE_RESP]);
                        }
                        else {
                            callbackResponse = this.errorResponse(_requestType, _valueHandle, result);
                        }
                        debug("execute write response: " + callbackResponse.toString("hex"));
                        this.send(callbackResponse);
                    };
                })(requestType, this._preparedWriteRequest.valueHandle);
                this._preparedWriteRequest.handle.attribute.emit("writeRequest", this._preparedWriteRequest.data, this._preparedWriteRequest.offset, false, callback);
            }
            else {
                response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);
            }
            this._preparedWriteRequest = null;
        }
        else {
            response = this.errorResponse(requestType, 0x0000, ATT_ECODE_UNLIKELY);
        }
        return response;
    }
    handleConfirmation(request) {
        if (this._lastIndicatedAttribute) {
            if (this._lastIndicatedAttribute.emit) {
                this._lastIndicatedAttribute.emit("indicate");
            }
            this._lastIndicatedAttribute = null;
        }
    }
}
exports.default = Gatt;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('mgmt');
const debug = () => {
};
const LTK_INFO_SIZE = 36;
const MGMT_OP_LOAD_LONG_TERM_KEYS = 0x0013;
class Mgmt {
    construcotr(hciProtocol) {
        this._ltkInfos = [];
        this._hci = hciProtocol;
    }
    nSocketData(data) {
        debug("on data ->" + data.toString("hex"));
    }
    nSocketError(error) {
        debug("on error ->" + error.message);
    }
    ddLongTermKey(address, addressType, authenticated, master, ediv, rand, key) {
        const ltkInfo = Buffer.alloc(LTK_INFO_SIZE);
        address.copy(ltkInfo, 0);
        ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one
        ltkInfo.writeUInt8(authenticated, 7);
        ltkInfo.writeUInt8(master, 8);
        ltkInfo.writeUInt8(key.length, 9);
        ediv.copy(ltkInfo, 10);
        rand.copy(ltkInfo, 12);
        key.copy(ltkInfo, 20);
        this._ltkInfos.push(ltkInfo);
        this.loadLongTermKeys();
    }
    learLongTermKeys() {
        this._ltkInfos = [];
        this.loadLongTermKeys();
    }
    oadLongTermKeys() {
        const numLongTermKeys = this._ltkInfos.length;
        const op = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);
        op.writeUInt16LE(numLongTermKeys, 0);
        for (let i = 0; i < numLongTermKeys; i++) {
            this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);
        }
        this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);
    }
    rite(opcode, index, data) {
        let length = 0;
        if (data) {
            length = data.length;
        }
        const pkt = Buffer.alloc(6 + length);
        pkt.writeUInt16LE(opcode, 0);
        pkt.writeUInt16LE(index, 2);
        pkt.writeUInt16LE(length, 4);
        if (length) {
            data.copy(pkt, 6);
        }
        debug("writing -> " + pkt.toString("hex"));
        this._hci._socket.write(pkt);
    }
}
exports.default = Mgmt;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9tZ210LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLE1BQU0sS0FBSyxHQUFRLEdBQUcsRUFBRTtBQUN4QixDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBUSxFQUFFLENBQUM7QUFFOUIsTUFBTSwyQkFBMkIsR0FBUSxNQUFNLENBQUM7QUFFaEQsTUFBTSxJQUFJO0lBTUQsV0FBVyxDQUFDLFdBQWdCO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXLENBQUMsSUFBUztRQUMxQixLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQVU7UUFDNUIsS0FBSyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLGFBQWEsQ0FBQyxPQUFZLEVBQUUsV0FBZ0IsRUFBRSxhQUFrQixFQUFFLE1BQVcsRUFBRSxJQUFTLEVBQUUsSUFBUyxFQUFFLEdBQVE7UUFDbEgsTUFBTSxPQUFPLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqRCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO1FBRWxILE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxlQUFlO1FBQ3BCLE1BQU0sZUFBZSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ25ELE1BQU0sRUFBRSxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLGVBQWUsR0FBRyxhQUFhLENBQUMsQ0FBQztRQUVsRSxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFXLEVBQUUsS0FBVSxFQUFFLElBQVM7UUFDNUMsSUFBSSxNQUFNLEdBQVEsQ0FBQyxDQUFDO1FBRXBCLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdEI7UUFFRCxNQUFNLEdBQUcsR0FBUSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUUxQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsS0FBSyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQUVELGtCQUFlLElBQUksQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL3Byb3RvY29sL3BlcmlwaGVyYWwvbWdtdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxldCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ21nbXQnKTtcbmNvbnN0IGRlYnVnOiBhbnkgPSAoKSA9PiB7XG59O1xuXG5jb25zdCBMVEtfSU5GT19TSVpFOiBhbnkgPSAzNjtcblxuY29uc3QgTUdNVF9PUF9MT0FEX0xPTkdfVEVSTV9LRVlTOiBhbnkgPSAweDAwMTM7XG5cbmNsYXNzIE1nbXQge1xuICBwdWJsaWMgX2x0a0luZm9zOiBhbnk7XG4gIHB1YmxpYyBfaGNpOiBhbnk7XG4gIHB1YmxpYyBsb2FkTG9uZ1Rlcm1LZXlzOiBhbnk7XG4gIHB1YmxpYyB3cml0ZTogYW55O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y290cihoY2lQcm90b2NvbDogYW55KSB7XG4gICAgdGhpcy5fbHRrSW5mb3MgPSBbXTtcbiAgICB0aGlzLl9oY2kgPSBoY2lQcm90b2NvbDtcbiAgfVxuXG4gIHB1YmxpYyBuU29ja2V0RGF0YShkYXRhOiBhbnkpIHtcbiAgICBkZWJ1ZyhcIm9uIGRhdGEgLT5cIiArIGRhdGEudG9TdHJpbmcoXCJoZXhcIikpO1xuICB9XG5cbiAgcHVibGljIG5Tb2NrZXRFcnJvcihlcnJvcjogYW55KSB7XG4gICAgZGVidWcoXCJvbiBlcnJvciAtPlwiICsgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICBwdWJsaWMgZGRMb25nVGVybUtleShhZGRyZXNzOiBhbnksIGFkZHJlc3NUeXBlOiBhbnksIGF1dGhlbnRpY2F0ZWQ6IGFueSwgbWFzdGVyOiBhbnksIGVkaXY6IGFueSwgcmFuZDogYW55LCBrZXk6IGFueSkge1xuICAgIGNvbnN0IGx0a0luZm86IGFueSA9IEJ1ZmZlci5hbGxvYyhMVEtfSU5GT19TSVpFKTtcblxuICAgIGFkZHJlc3MuY29weShsdGtJbmZvLCAwKTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgoYWRkcmVzc1R5cGUucmVhZFVJbnQ4KDApICsgMSwgNik7IC8vIEJEQUREUl9MRV9QVUJMSUMgPSAweDAxLCBCREFERFJfTEVfUkFORE9NIDB4MDIsIHNvIGFkZCBvbmVcblxuICAgIGx0a0luZm8ud3JpdGVVSW50OChhdXRoZW50aWNhdGVkLCA3KTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgobWFzdGVyLCA4KTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgoa2V5Lmxlbmd0aCwgOSk7XG5cbiAgICBlZGl2LmNvcHkobHRrSW5mbywgMTApO1xuICAgIHJhbmQuY29weShsdGtJbmZvLCAxMik7XG4gICAga2V5LmNvcHkobHRrSW5mbywgMjApO1xuXG4gICAgdGhpcy5fbHRrSW5mb3MucHVzaChsdGtJbmZvKTtcblxuICAgIHRoaXMubG9hZExvbmdUZXJtS2V5cygpO1xuICB9XG5cbiAgcHVibGljIGxlYXJMb25nVGVybUtleXMoKSB7XG4gICAgdGhpcy5fbHRrSW5mb3MgPSBbXTtcblxuICAgIHRoaXMubG9hZExvbmdUZXJtS2V5cygpO1xuICB9XG5cbiAgcHVibGljIG9hZExvbmdUZXJtS2V5cygpIHtcbiAgICBjb25zdCBudW1Mb25nVGVybUtleXM6IGFueSA9IHRoaXMuX2x0a0luZm9zLmxlbmd0aDtcbiAgICBjb25zdCBvcDogYW55ID0gQnVmZmVyLmFsbG9jKDIgKyBudW1Mb25nVGVybUtleXMgKiBMVEtfSU5GT19TSVpFKTtcblxuICAgIG9wLndyaXRlVUludDE2TEUobnVtTG9uZ1Rlcm1LZXlzLCAwKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTG9uZ1Rlcm1LZXlzOyBpKyspIHtcbiAgICAgIHRoaXMuX2x0a0luZm9zW2ldLmNvcHkob3AsIDIgKyBpICogTFRLX0lORk9fU0laRSk7XG4gICAgfVxuXG4gICAgdGhpcy53cml0ZShNR01UX09QX0xPQURfTE9OR19URVJNX0tFWVMsIDAsIG9wKTtcbiAgfVxuXG4gIHB1YmxpYyByaXRlKG9wY29kZTogYW55LCBpbmRleDogYW55LCBkYXRhOiBhbnkpIHtcbiAgICBsZXQgbGVuZ3RoOiBhbnkgPSAwO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0IHBrdDogYW55ID0gQnVmZmVyLmFsbG9jKDYgKyBsZW5ndGgpO1xuXG4gICAgcGt0LndyaXRlVUludDE2TEUob3Bjb2RlLCAwKTtcbiAgICBwa3Qud3JpdGVVSW50MTZMRShpbmRleCwgMik7XG4gICAgcGt0LndyaXRlVUludDE2TEUobGVuZ3RoLCA0KTtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGRhdGEuY29weShwa3QsIDYpO1xuICAgIH1cblxuICAgIGRlYnVnKFwid3JpdGluZyAtPiBcIiArIHBrdC50b1N0cmluZyhcImhleFwiKSk7XG4gICAgdGhpcy5faGNpLl9zb2NrZXQud3JpdGUocGt0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZ210O1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const events = __webpack_require__("./node_modules/events/events.js");
const crypto = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/crypto.js");
const Mgmt = __webpack_require__("./dist/src/obniz/libs/embeds/bleHci/protocol/peripheral/mgmt.js");
const SMP_CID = 0x0006;
const SMP_PAIRING_REQUEST = 0x01;
const SMP_PAIRING_RESPONSE = 0x02;
const SMP_PAIRING_CONFIRM = 0x03;
const SMP_PAIRING_RANDOM = 0x04;
const SMP_PAIRING_FAILED = 0x05;
const SMP_ENCRYPT_INFO = 0x06;
const SMP_MASTER_IDENT = 0x07;
const SMP_UNSPECIFIED = 0x08;
class Smp extends events.EventEmitter {
    constructor(aclStream, localAddressType, localAddress, remoteAddressType, remoteAddress, hciProtocol) {
        super();
        this._aclStream = aclStream;
        this._mgmt = new Mgmt(hciProtocol);
        this._iat = Buffer.from([remoteAddressType === "random" ? 0x01 : 0x00]);
        this._ia = Buffer.from(remoteAddress
            .split(":")
            .reverse()
            .join(""), "hex");
        this._rat = Buffer.from([localAddressType === "random" ? 0x01 : 0x00]);
        this._ra = Buffer.from(localAddress
            .split(":")
            .reverse()
            .join(""), "hex");
        this._stk = null;
        this._random = null;
        this._diversifier = null;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(this);
        this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("encryptChange", this.onAclStreamEncryptChangeBinded);
        this._aclStream.on("ltkNegReply", this.onAclStreamLtkNegReplyBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    nAclStreamData(cid, data) {
        if (cid !== SMP_CID) {
            return;
        }
        const code = data.readUInt8(0);
        if (SMP_PAIRING_REQUEST === code) {
            this.handlePairingRequest(data);
        }
        else if (SMP_PAIRING_CONFIRM === code) {
            this.handlePairingConfirm(data);
        }
        else if (SMP_PAIRING_RANDOM === code) {
            this.handlePairingRandom(data);
        }
        else if (SMP_PAIRING_FAILED === code) {
            this.handlePairingFailed(data);
        }
    }
    nAclStreamEncryptChange(encrypted) {
        if (encrypted) {
            if (this._stk && this._diversifier && this._random) {
                this.write(Buffer.concat([Buffer.from([SMP_ENCRYPT_INFO]), this._stk]));
                this.write(Buffer.concat([
                    Buffer.from([SMP_MASTER_IDENT]),
                    this._diversifier,
                    this._random,
                ]));
            }
        }
    }
    nAclStreamLtkNegReply() {
        this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_UNSPECIFIED]));
        this.emit("fail");
    }
    nAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("encryptChange", this.onAclStreamEncryptChangeBinded);
        this._aclStream.removeListener("ltkNegReply", this.onAclStreamLtkNegReplyBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
    }
    andlePairingRequest(data) {
        this._preq = data;
        this._pres = Buffer.from([
            SMP_PAIRING_RESPONSE,
            0x03,
            0x00,
            0x01,
            0x10,
            0x00,
            0x01,
        ]);
        this.write(this._pres);
    }
    andlePairingConfirm(data) {
        this._pcnf = data;
        this._tk = Buffer.from("00000000000000000000000000000000", "hex");
        this._r = crypto.r();
        this.write(Buffer.concat([
            Buffer.from([SMP_PAIRING_CONFIRM]),
            crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]));
    }
    andlePairingRandom(data) {
        const r = data.slice(1);
        const pcnf = Buffer.concat([
            Buffer.from([SMP_PAIRING_CONFIRM]),
            crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),
        ]);
        if (this._pcnf.toString("hex") === pcnf.toString("hex")) {
            this._diversifier = Buffer.from("0000", "hex");
            this._random = Buffer.from("0000000000000000", "hex");
            this._stk = crypto.s1(this._tk, this._r, r);
            this._mgmt.addLongTermKey(this._ia, this._iat, 0, 0, this._diversifier, this._random, this._stk);
            this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));
        }
        else {
            this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_PAIRING_CONFIRM]));
            this.emit("fail");
        }
    }
    andlePairingFailed(data) {
        this.emit("fail");
    }
    rite(data) {
        this._aclStream.write(SMP_CID, data);
    }
}
exports.default = Smp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/embeds/display.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Display {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this.width = 128;
        this.height = 64;
        this._canvas = null;
        this._reset();
    }
    _reset() {
        this._pos = { x: 0, y: 0 };
        this.autoFlush = true;
    }
    warnCanvasAvailability() {
        if (this.Obniz.isNode) {
            throw new Error("obniz.js require node-canvas to draw rich contents. see more detail on docs");
        }
        else {
            throw new Error("obniz.js cant create canvas element to body");
        }
    }
    _preparedCanvas() {
        if (this._canvas) {
            return this._canvas;
        }
        if (this.Obniz.isNode) {
            try {
                const { createCanvas } = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
                this._canvas = createCanvas(this.width, this.height);
            }
            catch (e) {
                // this.warnCanvasAvailability();
                return null;
            }
        }
        else {
            const identifier = "obnizcanvas-" + this.Obniz.id;
            let canvas = document.getElementById(identifier);
            if (!canvas) {
                canvas = document.createElement("canvas");
                canvas.setAttribute("id", identifier);
                canvas.style.visibility = "hidden";
                canvas.width = this.width;
                canvas.height = this.height;
                canvas.style["-webkit-font-smoothing"] = "none";
                const body = document.getElementsByTagName("body")[0];
                body.appendChild(canvas);
            }
            this._canvas = canvas;
        }
        const ctx = this._canvas.getContext("2d");
        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, this.width, this.height);
        ctx.fillStyle = "#FFF";
        ctx.strokeStyle = "#FFF";
        this._pos.x = 0;
        this._pos.y = 0;
        this.fontSize = 16;
        ctx.font = `${this.fontSize}px Arial`;
        return this._canvas;
    }
    _ctx() {
        const canvas = this._preparedCanvas();
        if (canvas) {
            return canvas.getContext("2d");
        }
    }
    font(font, size) {
        const ctx = this._ctx();
        if (typeof size !== "number") {
            size = 16;
        }
        if (typeof font !== "string") {
            font = "Arial";
        }
        this.fontSize = size;
        ctx.font = "" + +" " + size + "px " + font;
    }
    clear() {
        const ctx = this._ctx();
        this._pos.x = 0;
        this._pos.y = 0;
        if (ctx) {
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, this.width, this.height);
            ctx.fillStyle = "#FFF";
            ctx.strokeStyle = "#FFF";
            this.draw(ctx);
        }
        else {
            const obj = {};
            obj.display = {
                clear: true,
            };
            this.Obniz.send(obj);
        }
    }
    pos(x, y) {
        this._ctx(); // crete first
        if (typeof x === "number") {
            this._pos.x = x;
        }
        if (typeof y === "number") {
            this._pos.y = y;
        }
        return this._pos;
    }
    print(text) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);
            this.draw(ctx);
            this._pos.y += this.fontSize;
        }
        else {
            const obj = {};
            obj.display = {
                text: "" + text,
            };
            this.Obniz.send(obj);
        }
    }
    line(x_0, y_0, x_1, y_1) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x_0, y_0);
            ctx.lineTo(x_1, y_1);
            ctx.stroke();
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    rect(x, y, width, height, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            if (mustFill) {
                ctx.fillRect(x, y, width, height);
            }
            else {
                ctx.strokeRect(x, y, width, height);
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    circle(x, y, r, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.arc(x, y, r, 0, Math.PI * 2);
            if (mustFill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    qr(text, correction) {
        const obj = {};
        obj.display = {
            qr: {
                text,
            },
        };
        if (correction) {
            obj.display.qr.correction = correction;
        }
        this.Obniz.send(obj);
    }
    raw(data) {
        const obj = {};
        obj.display = {
            raw: data,
        };
        this.Obniz.send(obj);
    }
    setPinName(io, moduleName, funcName) {
        const obj = {};
        obj.display = {};
        obj.display.pin_assign = {};
        obj.display.pin_assign[io] = {
            module_name: moduleName,
            pin_name: funcName,
        };
        this.Obniz.send(obj);
    }
    setPinNames(moduleName, data) {
        const obj = {};
        obj.display = {};
        obj.display.pin_assign = {};
        let noAssignee = true;
        for (const key in data) {
            noAssignee = false;
            obj.display.pin_assign[key] = {
                module_name: moduleName,
                pin_name: data[key],
            };
        }
        if (!noAssignee) {
            this.Obniz.send(obj);
        }
    }
    _draw(ctx) {
        const stride = this.width / 8;
        const vram = new Array(stride * 64);
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            const index = Math.floor(i / 4);
            const line = Math.floor(index / this.width);
            const col = Math.floor((index - line * this.width) / 8);
            const bits = Math.floor(index - line * this.width) % 8;
            if (bits === 0) {
                vram[line * stride + col] = 0x00;
            }
            if (brightness > 0x7f) {
                vram[line * stride + col] |= 0x80 >> bits;
            }
        }
        this.raw(vram);
    }
    draw(ctx) {
        if (this.autoFlush) {
            this._draw(ctx);
        }
    }
    drawing(autoFlush) {
        this.autoFlush = autoFlush === true;
        const ctx = this._ctx();
        if (ctx) {
            this.draw(ctx);
        }
    }
}
exports.default = Display;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/embeds/switch.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ObnizSwitch {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this._reset();
    }
    _reset() {
        this.observers = [];
        this.onChangeForStateWait = () => {
        };
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    getWait() {
        const self = this;
        return new Promise((resolve, reject) => {
            const obj = {};
            obj.switch = "get";
            self.Obniz.send(obj);
            self.addObserver(resolve);
        });
    }
    stateWait(isPressed) {
        const self = this;
        return new Promise((resolve, reject) => {
            self.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    self.onChangeForStateWait = () => {
                    };
                    resolve();
                }
            };
        });
    }
    notified(obj) {
        this.state = obj.state;
        if (this.onchange) {
            this.onchange(this.state);
        }
        this.onChangeForStateWait(this.state);
        const callback = this.observers.shift();
        if (callback) {
            callback(this.state);
        }
    }
}
exports.default = ObnizSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9zd2l0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFdBQVc7SUFPZixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsRUFBRTtRQUNqQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWE7UUFDOUIsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDL0MsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sU0FBUyxDQUFDLFNBQWM7UUFDN0IsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsT0FBWSxFQUFHLEVBQUU7Z0JBQzVDLElBQUksU0FBUyxLQUFLLE9BQU8sRUFBRTtvQkFDekIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsRUFBRTtvQkFDakMsQ0FBQyxDQUFDO29CQUNGLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVE7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsTUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QyxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL3N3aXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE9ibml6U3dpdGNoIHtcbiAgcHVibGljIE9ibml6OiBhbnk7XG4gIHB1YmxpYyBvYnNlcnZlcnM6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlRm9yU3RhdGVXYWl0OiBhbnk7XG4gIHB1YmxpYyBzdGF0ZTogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcihPYm5pejogYW55KSB7XG4gICAgdGhpcy5PYm5peiA9IE9ibml6O1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBwdWJsaWMgX3Jlc2V0KCkge1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5vbkNoYW5nZUZvclN0YXRlV2FpdCA9ICgpID0+IHtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFkZE9ic2VydmVyKGNhbGxiYWNrOiBhbnkpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRXYWl0KCkge1xuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XG4gICAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgICAgb2JqLnN3aXRjaCA9IFwiZ2V0XCI7XG4gICAgICBzZWxmLk9ibml6LnNlbmQob2JqKTtcbiAgICAgIHNlbGYuYWRkT2JzZXJ2ZXIocmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGVXYWl0KGlzUHJlc3NlZDogYW55KSB7XG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcbiAgICAgIHNlbGYub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAocHJlc3NlZDogYW55ICkgPT4ge1xuICAgICAgICBpZiAoaXNQcmVzc2VkID09PSBwcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5vbkNoYW5nZUZvclN0YXRlV2FpdCA9ICgpID0+IHtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBub3RpZmllZChvYmo6IGFueSkge1xuICAgIHRoaXMuc3RhdGUgPSBvYmouc3RhdGU7XG4gICAgaWYgKHRoaXMub25jaGFuZ2UpIHtcbiAgICAgIHRoaXMub25jaGFuZ2UodGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQodGhpcy5zdGF0ZSk7XG5cbiAgICBjb25zdCBjYWxsYmFjazogYW55ID0gdGhpcy5vYnNlcnZlcnMuc2hpZnQoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuc3RhdGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPYm5pelN3aXRjaDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/hw/encored.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"1\",\"hw\":\"encored\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"25\":{},\"26\":{},\"27\":{}}},\"ad\":{\"units\":{}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/esp32p.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"1\",\"hw\":\"esp32w\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"5\":{},\"9\":{},\"10\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"18\":{},\"19\":{},\"21\":{},\"22\":{},\"23\":{},\"25\":{},\"26\":{},\"27\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"ad\":{\"units\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/esp32w.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"1\",\"hw\":\"esp32w\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"2\":{},\"4\":{},\"5\":{},\"12\":{},\"13\":{},\"14\":{},\"15\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"21\":{},\"22\":{},\"23\":{},\"25\":{},\"26\":{},\"27\":{},\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"37\":{},\"38\":{},\"39\":{}}},\"ad\":{\"units\":{\"32\":{},\"33\":{},\"34\":{},\"35\":{},\"36\":{},\"39\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class HW {
    static getDefinitionFor(hw) {
        if (hw === "obnizb1") {
            return __webpack_require__("./dist/src/obniz/libs/hw/obnizb1.json");
        }
        else if (hw === "obnizb2") {
            return __webpack_require__("./dist/src/obniz/libs/hw/obnizb2.json");
        }
        else if (hw === "esp32w") {
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32w.json");
        }
        else if (hw === "esp32p") {
            return __webpack_require__("./dist/src/obniz/libs/hw/esp32p.json");
        }
        else if (hw === "encored") {
            return __webpack_require__("./dist/src/obniz/libs/hw/encored.json");
        }
        return undefined;
    }
}
exports.default = HW;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2h3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBcUIsRUFBRTtJQUVkLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3BDLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUNwQixPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQzNCLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbEM7YUFBTSxJQUFJLEVBQUUsS0FBSyxRQUFRLEVBQUU7WUFDMUIsT0FBTyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLEVBQUUsS0FBSyxRQUFRLEVBQUU7WUFDMUIsT0FBTyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDM0IsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNsQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQWhCRCxxQkFnQkMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvaHcvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBIVyB7XG5cbiAgcHVibGljIHN0YXRpYyBnZXREZWZpbml0aW9uRm9yKGh3OiBhbnkpIHtcbiAgICBpZiAoaHcgPT09IFwib2JuaXpiMVwiKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZShcIi4vb2JuaXpiMS5qc29uXCIpO1xuICAgIH0gZWxzZSBpZiAoaHcgPT09IFwib2JuaXpiMlwiKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZShcIi4vb2JuaXpiMi5qc29uXCIpO1xuICAgIH0gZWxzZSBpZiAoaHcgPT09IFwiZXNwMzJ3XCIpIHtcbiAgICAgIHJldHVybiByZXF1aXJlKFwiLi9lc3AzMncuanNvblwiKTtcbiAgICB9IGVsc2UgaWYgKGh3ID09PSBcImVzcDMycFwiKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZShcIi4vZXNwMzJwLmpzb25cIik7XG4gICAgfSBlbHNlIGlmIChodyA9PT0gXCJlbmNvcmVkXCIpIHtcbiAgICAgIHJldHVybiByZXF1aXJlKFwiLi9lbmNvcmVkLmpzb25cIik7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/hw/obnizb1.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"1\",\"hw\":\"obnizb1\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/hw/obnizb2.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"rev\":\"1\",\"hw\":\"obnizb2\",\"peripherals\":{\"io\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"ad\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{}}},\"pwm\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{}}},\"uart\":{\"units\":{\"0\":{},\"1\":{}}},\"spi\":{\"units\":{\"0\":{},\"1\":{}}},\"i2c\":{\"units\":{\"0\":{}}}},\"embeds\":{\"ble\":{},\"display\":{},\"switch\":{}},\"protocol\":{\"tcp\":{\"units\":{\"0\":{},\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{}}}}}");

/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/ad.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class PeripheralAD {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.value = 0.0;
        this.observers = [];
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    start(callback) {
        this.onchange = callback;
        const obj = {};
        obj["ad" + this.id] = {
            stream: true,
        };
        this.Obniz.send(obj);
        return this.value;
    }
    getWait() {
        const self = this;
        return new Promise((resolve, reject) => {
            self.addObserver(resolve);
            const obj = {};
            obj["ad" + self.id] = {
                stream: false,
            };
            self.Obniz.send(obj);
        });
    }
    end() {
        this.onchange = null;
        const obj = {};
        obj["ad" + this.id] = null;
        this.Obniz.send(obj);
        return;
    }
    notified(obj) {
        this.value = obj;
        if (this.onchange) {
            this.onchange(obj);
        }
        const callback = this.observers.shift();
        if (callback) {
            callback(obj);
        }
    }
}
exports.default = PeripheralAD;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2lvX3BlcmlwaGVyYWxzL2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxZQUFZO0lBT2hCLFlBQVksS0FBVSxFQUFFLEVBQU87UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU07UUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWE7UUFDOUIsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsUUFBYTtRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDcEIsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7WUFDcEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7Z0JBQ3BCLE1BQU0sRUFBRSxLQUFLO2FBQ2QsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEdBQUc7UUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE9BQU87SUFDVCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVE7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDakIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7UUFDRCxNQUFNLFFBQVEsR0FBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdDLElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxZQUFZLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvaW9fcGVyaXBoZXJhbHMvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQZXJpcGhlcmFsQUQge1xuICBwdWJsaWMgT2JuaXo6IGFueTtcbiAgcHVibGljIGlkOiBhbnk7XG4gIHB1YmxpYyB2YWx1ZTogYW55O1xuICBwdWJsaWMgb2JzZXJ2ZXJzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKE9ibml6OiBhbnksIGlkOiBhbnkpIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBwdWJsaWMgX3Jlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSAwLjA7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRPYnNlcnZlcihjYWxsYmFjazogYW55KSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMub25jaGFuZ2UgPSBjYWxsYmFjaztcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIG9ialtcImFkXCIgKyB0aGlzLmlkXSA9IHtcbiAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICB9O1xuICAgIHRoaXMuT2JuaXouc2VuZChvYmopO1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldFdhaXQoKSB7XG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcbiAgICAgIHNlbGYuYWRkT2JzZXJ2ZXIocmVzb2x2ZSk7XG4gICAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgICAgb2JqW1wiYWRcIiArIHNlbGYuaWRdID0ge1xuICAgICAgICBzdHJlYW06IGZhbHNlLFxuICAgICAgfTtcbiAgICAgIHNlbGYuT2JuaXouc2VuZChvYmopO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGVuZCgpIHtcbiAgICB0aGlzLm9uY2hhbmdlID0gbnVsbDtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIG9ialtcImFkXCIgKyB0aGlzLmlkXSA9IG51bGw7XG4gICAgdGhpcy5PYm5pei5zZW5kKG9iaik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIG5vdGlmaWVkKG9iajogYW55KSB7XG4gICAgdGhpcy52YWx1ZSA9IG9iajtcbiAgICBpZiAodGhpcy5vbmNoYW5nZSkge1xuICAgICAgdGhpcy5vbmNoYW5nZShvYmopO1xuICAgIH1cbiAgICBjb25zdCBjYWxsYmFjazogYW55ID0gdGhpcy5vYnNlcnZlcnMuc2hpZnQoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKG9iaik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBlcmlwaGVyYWxBRDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/directive.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const semver = __webpack_require__("./node_modules/semver/semver.js");
class Directive {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.observers = [];
        this._reset();
    }
    _reset() {
        for (let i = 0; i < this.observers.length; i++) {
            this.observers[i].reject(new Error("reset called"));
        }
        this.observers = [];
        this._animationIdentifier = 0;
    }
    addObserver(name, resolve, reject) {
        if (name && resolve && reject) {
            this.observers.push({
                name,
                resolve,
                reject,
            });
        }
    }
    animation(name, status, array, repeat) {
        if ((typeof repeat === "number" || status === "registrate") &&
            semver.lt(this.Obniz.firmware_ver, "2.0.0")) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        const obj = {};
        obj.io = {
            animation: {
                name,
                status,
            },
        };
        if (typeof repeat === "number") {
            obj.io.animation.repeat = repeat;
        }
        if (!array) {
            array = [];
        }
        const states = [];
        for (let i = 0; i < array.length; i++) {
            const state = array[i];
            const duration = state.duration;
            const operation = state.state;
            // dry run. and get json commands
            this.Obniz.sendPool = [];
            operation(i);
            const pooledJsonArray = this.Obniz.sendPool;
            this.Obniz.sendPool = null;
            states.push({
                duration,
                state: pooledJsonArray,
            });
        }
        if (status === "loop" || status === "registrate") {
            obj.io.animation.states = states;
        }
        this.Obniz.send(obj);
    }
    repeatWait(array, repeat) {
        if (semver.lt(this.Obniz.firmware_ver, "2.0.0")) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        if (typeof repeat !== "number" || repeat < 1) {
            throw new Error("please specify repeat count > 0");
        }
        if (Math.floor(repeat) !== repeat) {
            throw new Error("please provide integer number like 1, 2, 3,,,");
        }
        return new Promise((resolve, reject) => {
            const name = "_repeatwait" + Date.now() + this._animationIdentifier;
            if (++this._animationIdentifier > 1000) {
                this._animationIdentifier = 0;
            }
            this.animation(name, "loop", array, repeat);
            this.addObserver(name, resolve, reject);
        });
    }
    notified(obj) {
        if (obj.animation.status === "finish") {
            for (let i = this.observers.length - 1; i >= 0; i--) {
                if (obj.animation.name === this.observers[i].name) {
                    this.observers[i].resolve();
                    this.observers.splice(i, 1);
                }
            }
        }
    }
}
exports.default = Directive;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/i2c.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class PeripheralI2C {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
        this.onerror = undefined;
    }
    _reset() {
        this.observers = [];
        this.state = {};
        this.used = false;
        this.onwritten = undefined;
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    start(arg) {
        const err = util_1.default._requiredKeys(arg, ["mode", "sda", "scl"]);
        if (err) {
            throw new Error("I2C start param '" + err + "' required, but not found ");
        }
        this.state = util_1.default._keyFilter(arg, [
            "mode",
            "sda",
            "scl",
            "pull",
            "gnd",
        ]);
        const ioKeys = ["sda", "scl", "gnd"];
        for (const key of ioKeys) {
            if (this.state[key] && !this.Obniz.isValidIO(this.state[key])) {
                throw new Error("i2c start param '" + key + "' are to be valid io no");
            }
        }
        const mode = this.state.mode;
        const clock = typeof arg.clock === "number" ? parseInt(arg.clock) : null;
        const slave_address = typeof arg.slave_address === "number"
            ? parseInt(arg.slave_address)
            : null;
        const slave_address_length = typeof arg.slave_address_length === "number"
            ? parseInt(arg.slave_address_length)
            : null;
        if (mode !== "master" && mode !== "slave") {
            throw new Error("i2c: invalid mode " + mode);
        }
        if (mode === "master") {
            if (clock === null) {
                throw new Error("i2c: please specify clock when master mode");
            }
            if (clock <= 0 || clock > 1 * 1000 * 1000) {
                throw new Error("i2c: invalid clock " + clock);
            }
            if (arg.pull === "5v" && clock > 400 * 1000) {
                throw new Error("i2c: please use under 400khz when internal 5v internal pull-up");
            }
            if (arg.pull === "3v" && clock > 100 * 1000) {
                throw new Error("i2c: please use under 100khz when internal 3v internal pull-up");
            }
        }
        else {
            if (slave_address === null) {
                throw new Error("i2c: please specify slave_address");
            }
            if (slave_address < 0 || slave_address > 0x7f) {
                throw new Error("i2c: invalid slave_address");
            }
            if (slave_address < 0 || slave_address > 0x7f) {
                throw new Error("i2c: invalid slave_address");
            }
            if (slave_address_length !== null && slave_address_length !== 7) {
                throw new Error("i2c: invalid slave_address_length. please specify 7");
            }
        }
        this.Obniz.getIO(this.state.sda).drive("open-drain");
        this.Obniz.getIO(this.state.scl).drive("open-drain");
        if (this.state.pull) {
            this.Obniz.getIO(this.state.sda).pull(this.state.pull);
            this.Obniz.getIO(this.state.scl).pull(this.state.pull);
        }
        else {
            this.Obniz.getIO(this.state.sda).pull(null);
            this.Obniz.getIO(this.state.scl).pull(null);
        }
        if (this.state.gnd !== undefined) {
            this.Obniz.getIO(this.state.gnd).output(false);
            const ioNames = {};
            ioNames[this.state.gnd] = "gnd";
            this.Obniz.display.setPinNames("i2c" + this.id, ioNames);
        }
        const startObj = util_1.default._keyFilter(this.state, ["mode", "sda", "scl"]);
        if (mode === "master") {
            startObj.clock = clock;
        }
        else {
            startObj.slave_address = slave_address;
            if (slave_address_length) {
                startObj.slave_address_length = slave_address_length;
            }
        }
        const obj = {};
        obj["i2c" + this.id] = startObj;
        this.used = true;
        this.Obniz.send(obj);
    }
    write(address, data) {
        if (!this.used) {
            throw new Error(`i2c${this.id} is not started`);
        }
        address = parseInt(address);
        if (isNaN(address)) {
            throw new Error("i2c: please specify address");
        }
        if (address < 0 || address > 0x7f) {
            throw new Error("i2c: invalid address");
        }
        if (!data) {
            throw new Error("i2c: please provide data");
        }
        if (data.length > 1024) {
            throw new Error("i2c: data should be under 1024 bytes");
        }
        const obj = {};
        obj["i2c" + this.id] = {
            address,
            data,
        };
        this.Obniz.send(obj);
    }
    readWait(address, length) {
        if (!this.used) {
            throw new Error(`i2c${this.id} is not started`);
        }
        address = parseInt(address);
        if (isNaN(address)) {
            throw new Error("i2c: please specify address");
        }
        if (address < 0 || address > 0x7f) {
            throw new Error("i2c: invalid address");
        }
        length = parseInt(length);
        if (isNaN(length) || length < 0) {
            throw new Error("i2c: invalid length to read");
        }
        if (length > 1024) {
            throw new Error("i2c: data length should be under 1024 bytes");
        }
        const self = this;
        return new Promise((resolve, reject) => {
            self.addObserver(resolve);
            const obj = {};
            obj["i2c" + self.id] = {
                address,
                read: length,
            };
            self.Obniz.send(obj);
        });
    }
    notified(obj) {
        if (obj && typeof obj === "object") {
            if (obj.data) {
                if (obj.mode === "slave" && typeof this.onwritten === "function") {
                    this.onwritten(obj.data, obj.address);
                }
                else {
                    // TODO: we should compare byte length from sent
                    const callback = this.observers.shift();
                    if (callback) {
                        callback(obj.data);
                    }
                }
            }
            if (obj.warning) {
                this.Obniz.warning({
                    alert: "warning",
                    message: `i2c${this.id}: ${obj.warning.message}`,
                });
            }
            if (obj.error) {
                const message = `i2c${this.id}: ${obj.error.message}`;
                if (typeof this.onerror === "function") {
                    this.onerror(new Error(message));
                }
                else {
                    this.Obniz.error({
                        alert: "error",
                        message,
                    });
                }
            }
        }
    }
    isUsed() {
        return this.used;
    }
    end() {
        this.state = {};
        const obj = {};
        obj["i2c" + this.id] = null;
        this.Obniz.send(obj);
        this.used = false;
    }
}
exports.default = PeripheralI2C;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/io.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class PeripheralIO {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.value = 0;
        this.observers = [];
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    output(value) {
        value = value === true;
        const obj = {};
        obj["io" + this.id] = value;
        this.value = value;
        this.Obniz.send(obj);
    }
    drive(drive) {
        if (typeof drive !== "string") {
            throw new Error("please specify drive methods in string");
        }
        let output_type = "";
        switch (drive) {
            case "5v":
                output_type = "push-pull5v";
                break;
            case "3v":
                output_type = "push-pull3v";
                break;
            case "open-drain":
                output_type = "open-drain";
                break;
            default:
                throw new Error("unknown drive method");
        }
        const obj = {};
        obj["io" + this.id] = {
            output_type,
        };
        this.Obniz.send(obj);
    }
    pull(updown) {
        if (typeof updown !== "string" && updown !== null) {
            throw new Error("please specify pull methods in string");
        }
        let pull_type = "";
        switch (updown) {
            case "5v":
            case "pull-up5v":
                pull_type = "pull-up5v";
                break;
            case "3v":
            case "pull-up3v":
                pull_type = "pull-up3v";
                break;
            case "0v":
            case "pull-down":
                pull_type = "pull-down";
                break;
            case null:
            case "float":
                pull_type = "float";
                break;
            default:
                throw new Error("unknown pull_type method");
        }
        const obj = {};
        obj["io" + this.id] = {
            pull_type,
        };
        this.Obniz.send(obj);
    }
    input(callback) {
        this.onchange = callback;
        const obj = {};
        obj["io" + this.id] = {
            direction: "input",
            stream: true,
        };
        this.Obniz.send(obj);
        return this.value;
    }
    inputWait() {
        const self = this;
        return new Promise((resolve, reject) => {
            self.addObserver(resolve);
            const obj = {};
            obj["io" + self.id] = {
                direction: "input",
                stream: false,
            };
            self.Obniz.send(obj);
        });
    }
    end() {
        const obj = {};
        obj["io" + this.id] = null;
        this.Obniz.send(obj);
    }
    notified(obj) {
        if (typeof obj === "boolean") {
            this.value = obj;
            const callback = this.observers.shift();
            if (callback) {
                callback(obj);
            }
            if (typeof this.onchange === "function") {
                this.onchange(obj);
            }
        }
        else if (obj && typeof obj === "object") {
            if (obj.warning) {
                this.Obniz.warning({
                    alert: "warning",
                    message: `io${this.id}: ${obj.warning.message}`,
                });
            }
            if (obj.error) {
                this.Obniz.error({
                    alert: "error",
                    message: `io${this.id}: ${obj.error.message}`,
                });
            }
        }
    }
}
exports.default = PeripheralIO;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/pwm.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class PeripheralPWM {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.state = {};
        this.used = false;
    }
    sendWS(obj) {
        const wsObj = {};
        wsObj["pwm" + this.id] = obj;
        this.Obniz.send(wsObj);
    }
    start(params) {
        const err = util_1.default._requiredKeys(params, ["io"]);
        if (err) {
            throw new Error("pwm start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, ["io", "drive", "pull"]);
        const io = this.params.io;
        const ioObj = this.Obniz.getIO(io);
        ioObj.drive(this.params.drive || "5v");
        ioObj.pull(this.params.pull || null);
        this.state = {
            io,
            freq: 1000,
        };
        this.sendWS({
            io,
        });
        this.used = true;
    }
    freq(freq) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        freq *= 1;
        if (typeof freq !== "number") {
            throw new Error("please provide freq in number");
        }
        this.state.freq = freq;
        this.sendWS({
            freq,
        });
        if (typeof this.state.duty === "number") {
            this.duty(this.state.duty);
        }
    }
    pulse(pulse_width) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.state.pulse = pulse_width;
        delete this.state.duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    duty(duty) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        duty *= 1;
        if (typeof this.state.freq !== "number" || this.state.freq <= 0) {
            throw new Error("please provide freq first.");
        }
        if (typeof duty !== "number") {
            throw new Error("please provide duty in number");
        }
        if (duty < 0) {
            duty = 0;
        }
        if (duty > 100) {
            duty = 100;
        }
        const pulse_width = (1.0 / this.state.freq) * 1000 * duty * 0.01;
        this.state.duty = duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    isUsed() {
        return this.used;
    }
    end() {
        this.state = {};
        this.sendWS(null);
        this.used = false;
    }
    modulate(type, symbol_length, data) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.sendWS({
            modulate: {
                type,
                symbol_length,
                data,
            },
        });
    }
}
exports.default = PeripheralPWM;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/spi.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver = __webpack_require__("./node_modules/semver/semver.js");
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class PeripheralSPI {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.observers = [];
        this.used = false;
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    start(params) {
        const err = util_1.default._requiredKeys(params, ["mode", "frequency"]);
        if (err) {
            throw new Error("spi start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            "mode",
            "clk",
            "mosi",
            "miso",
            "frequency",
            "drive",
            "pull",
            "gnd",
        ]);
        const obj = {};
        const ioKeys = ["clk", "mosi", "miso", "gnd"];
        for (const key of ioKeys) {
            if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {
                throw new Error("spi start param '" + key + "' are to be valid io no");
            }
        }
        obj["spi" + this.id] = {
            mode: this.params.mode,
            clock: this.params.frequency,
        };
        if (this.params.clk !== undefined) {
            obj["spi" + this.id].clk = this.params.clk;
        }
        if (this.params.mosi !== undefined) {
            obj["spi" + this.id].mosi = this.params.mosi;
        }
        if (this.params.miso !== undefined) {
            obj["spi" + this.id].miso = this.params.miso;
        }
        if (this.params.drive) {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).drive(this.params.drive);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).drive(this.params.drive);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).drive(this.params.drive);
            }
        }
        else {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).drive("5v");
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).drive("5v");
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).drive("5v");
            }
        }
        if (this.params.pull) {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).pull(this.params.pull);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).pull(this.params.pull);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).pull(this.params.pull);
            }
        }
        else {
            if (this.params.clk !== undefined) {
                this.Obniz.getIO(this.params.clk).pull(null);
            }
            if (this.params.mosi !== undefined) {
                this.Obniz.getIO(this.params.mosi).pull(null);
            }
            if (this.params.miso !== undefined) {
                this.Obniz.getIO(this.params.miso).pull(null);
            }
        }
        if (this.params.gnd !== undefined) {
            this.Obniz.getIO(this.params.gnd).output(false);
            const ioNames = {};
            ioNames[this.params.gnd] = "gnd";
            this.Obniz.display.setPinNames("spi" + this.id, ioNames);
        }
        this.used = true;
        this.Obniz.send(obj);
    }
    writeWait(data) {
        if (!this.used) {
            throw new Error(`spi${this.id} is not started`);
        }
        if (semver.lte(this.Obniz.firmware_ver, "1.0.2") && data.length > 32) {
            throw new Error(`with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`);
        }
        const self = this;
        return new Promise((resolve, reject) => {
            self.addObserver(resolve);
            const obj = {};
            obj["spi" + self.id] = {
                data,
                read: true,
            };
            self.Obniz.send(obj);
        });
    }
    write(data) {
        if (!this.used) {
            throw new Error(`spi${this.id} is not started`);
        }
        if (semver.lte(this.Obniz.firmware_ver, "1.0.2") && data.length > 32) {
            throw new Error(`with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`);
        }
        const self = this;
        const obj = {};
        obj["spi" + self.id] = {
            data,
            read: false,
        };
        self.Obniz.send(obj);
    }
    notified(obj) {
        // TODO: we should compare byte length from sent
        const callback = this.observers.shift();
        if (callback) {
            callback(obj.data);
        }
    }
    isUsed() {
        return this.used;
    }
    end(reuse) {
        const self = this;
        const obj = {};
        obj["spi" + self.id] = null;
        this.params = null;
        self.Obniz.send(obj);
        if (!reuse) {
            this.used = false;
        }
    }
}
exports.default = PeripheralSPI;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/obniz/libs/io_peripherals/uart.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
const isNode = typeof window === "undefined";
class PeripheralUART {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.received = new Uint8Array([]);
        this.used = false;
    }
    start(params) {
        const err = util_1.default._requiredKeys(params, ["tx", "rx"]);
        if (err) {
            throw new Error("uart start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            "tx",
            "rx",
            "baud",
            "stop",
            "bits",
            "parity",
            "flowcontrol",
            "rts",
            "cts",
            "drive",
            "pull",
            "gnd",
        ]);
        const ioKeys = ["rx", "tx", "rts", "cts", "gnd"];
        for (const key of ioKeys) {
            if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {
                throw new Error("uart start param '" + key + "' are to be valid io no");
            }
        }
        if (this.params.hasOwnProperty("drive")) {
            this.Obniz.getIO(this.params.rx).drive(this.params.drive);
            this.Obniz.getIO(this.params.tx).drive(this.params.drive);
        }
        else {
            this.Obniz.getIO(this.params.rx).drive("5v");
            this.Obniz.getIO(this.params.tx).drive("5v");
        }
        if (this.params.hasOwnProperty("pull")) {
            this.Obniz.getIO(this.params.rx).pull(this.params.pull);
            this.Obniz.getIO(this.params.tx).pull(this.params.pull);
        }
        else {
            this.Obniz.getIO(this.params.rx).pull(null);
            this.Obniz.getIO(this.params.tx).pull(null);
        }
        if (this.params.hasOwnProperty("gnd")) {
            this.Obniz.getIO(this.params.gnd).output(false);
            const ioNames = {};
            ioNames[this.params.gnd] = "gnd";
            this.Obniz.display.setPinNames("uart" + this.id, ioNames);
        }
        const obj = {};
        const sendParams = util_1.default._keyFilter(this.params, [
            "tx",
            "rx",
            "baud",
            "stop",
            "bits",
            "parity",
            "flowcontrol",
            "rts",
            "cts",
        ]);
        obj["uart" + this.id] = sendParams;
        this.Obniz.send(obj);
        this.received = [];
        this.used = true;
    }
    send(data) {
        if (!this.used) {
            throw new Error(`uart${this.id} is not started`);
        }
        let send_data = null;
        if (data === undefined) {
            return;
        }
        if (typeof data === "number") {
            data = [data];
        }
        if (isNode && data instanceof Buffer) {
            send_data = [...data];
        }
        else if (data.constructor === Array) {
            send_data = data;
        }
        else if (typeof data === "string") {
            const buf = Buffer.from(data);
            send_data = [...buf];
        }
        const obj = {};
        obj["uart" + this.id] = {};
        obj["uart" + this.id].data = send_data;
        //  console.log(obj);
        this.Obniz.send(obj);
    }
    isDataExists() {
        return this.received && this.received.length > 0;
    }
    readBytes() {
        const results = [];
        if (this.isDataExists()) {
            for (let i = 0; i < this.received.length; i++) {
                results.push(this.received[i]);
            }
        }
        this.received = [];
        return results;
    }
    readByte() {
        const results = [];
        if (this.isDataExists()) {
            return results.unshift();
        }
        return null;
    }
    readText() {
        let string = null;
        if (this.isDataExists()) {
            const data = this.readBytes();
            string = this.tryConvertString(data);
        }
        this.received = [];
        return string;
    }
    tryConvertString(data) {
        return util_1.default.dataArray2string(data);
    }
    notified(obj) {
        if (this.onreceive) {
            const string = this.tryConvertString(obj.data);
            this.onreceive(obj.data, string);
        }
        else {
            if (!this.received) {
                this.received = [];
            }
            this.received.push.apply(this.received, obj.data);
        }
    }
    isUsed() {
        return this.used;
    }
    end() {
        const obj = {};
        obj["uart" + this.id] = null;
        this.params = null;
        this.Obniz.send(obj);
        this.used = false;
    }
}
exports.default = PeripheralUART;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/measurements/logicanalyzer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class LogicAnalyzer {
    constructor(obniz) {
        this.obniz = obniz;
        this._reset();
    }
    _reset() {
        this.onmeasured = undefined;
    }
    start(params) {
        const err = util_1.default._requiredKeys(params, ["io", "interval", "duration"]);
        if (err) {
            throw new Error("LogicAnalyzer start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            "io",
            "interval",
            "duration",
            "triggerValue",
            "triggerValueSamples",
        ]);
        const obj = {};
        obj.logic_analyzer = {
            io: [this.params.io],
            interval: this.params.interval,
            duration: this.params.duration,
        };
        if (this.params.triggerValueSamples > 0) {
            obj.logic_analyzer.trigger = {
                value: !!this.params.triggerValue,
                samples: this.params.triggerValueSamples,
            };
        }
        this.obniz.send(obj);
        return;
    }
    end() {
        const obj = {};
        obj.logic_analyzer = null;
        this.obniz.send(obj);
        return;
    }
    notified(obj) {
        if (this.onmeasured) {
            this.onmeasured(obj.data);
        }
        else {
            if (!this.measured) {
                this.measured = [];
            }
            this.measured.push(obj.data);
        }
        return;
    }
}
exports.default = LogicAnalyzer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL21lYXN1cmVtZW50cy9sb2dpY2FuYWx5emVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXNDO0FBRXRDLE1BQU0sYUFBYTtJQU1qQixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFXO1FBQ3RCLE1BQU0sR0FBRyxHQUFRLGNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLElBQUksR0FBRyxFQUFFO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FDYiw2QkFBNkIsR0FBRyxHQUFHLEdBQUcsNEJBQTRCLENBQ25FLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDekMsSUFBSTtZQUNKLFVBQVU7WUFDVixVQUFVO1lBQ1YsY0FBYztZQUNkLHFCQUFxQjtTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLGNBQWMsR0FBRztZQUNuQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNwQixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQzlCLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7U0FDL0IsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEVBQUU7WUFDdkMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEdBQUc7Z0JBQzNCLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZO2dCQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7YUFDekMsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsT0FBTztJQUNULENBQUM7SUFFTSxHQUFHO1FBQ1IsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE9BQU87SUFDVCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVE7UUFDdEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7YUFDcEI7WUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPO0lBQ1QsQ0FBQztDQUNGO0FBRUQsa0JBQWUsYUFBYSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL21lYXN1cmVtZW50cy9sb2dpY2FuYWx5emVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9ibml6VXRpbCBmcm9tIFwiLi4vdXRpbHMvdXRpbFwiO1xuXG5jbGFzcyBMb2dpY0FuYWx5emVyIHtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBvbm1lYXN1cmVkOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIG1lYXN1cmVkOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLl9yZXNldCgpO1xuICB9XG5cbiAgcHVibGljIF9yZXNldCgpIHtcbiAgICB0aGlzLm9ubWVhc3VyZWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQocGFyYW1zOiBhbnkpIHtcbiAgICBjb25zdCBlcnI6IGFueSA9IE9ibml6VXRpbC5fcmVxdWlyZWRLZXlzKHBhcmFtcywgW1wiaW9cIiwgXCJpbnRlcnZhbFwiLCBcImR1cmF0aW9uXCJdKTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTG9naWNBbmFseXplciBzdGFydCBwYXJhbSAnXCIgKyBlcnIgKyBcIicgcmVxdWlyZWQsIGJ1dCBub3QgZm91bmQgXCIsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnBhcmFtcyA9IE9ibml6VXRpbC5fa2V5RmlsdGVyKHBhcmFtcywgW1xuICAgICAgXCJpb1wiLFxuICAgICAgXCJpbnRlcnZhbFwiLFxuICAgICAgXCJkdXJhdGlvblwiLFxuICAgICAgXCJ0cmlnZ2VyVmFsdWVcIixcbiAgICAgIFwidHJpZ2dlclZhbHVlU2FtcGxlc1wiLFxuICAgIF0pO1xuXG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBvYmoubG9naWNfYW5hbHl6ZXIgPSB7XG4gICAgICBpbzogW3RoaXMucGFyYW1zLmlvXSxcbiAgICAgIGludGVydmFsOiB0aGlzLnBhcmFtcy5pbnRlcnZhbCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLnBhcmFtcy5kdXJhdGlvbixcbiAgICB9O1xuICAgIGlmICh0aGlzLnBhcmFtcy50cmlnZ2VyVmFsdWVTYW1wbGVzID4gMCkge1xuICAgICAgb2JqLmxvZ2ljX2FuYWx5emVyLnRyaWdnZXIgPSB7XG4gICAgICAgIHZhbHVlOiAhIXRoaXMucGFyYW1zLnRyaWdnZXJWYWx1ZSxcbiAgICAgICAgc2FtcGxlczogdGhpcy5wYXJhbXMudHJpZ2dlclZhbHVlU2FtcGxlcyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5vYm5pei5zZW5kKG9iaik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIGVuZCgpIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIG9iai5sb2dpY19hbmFseXplciA9IG51bGw7XG4gICAgdGhpcy5vYm5pei5zZW5kKG9iaik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHVibGljIG5vdGlmaWVkKG9iajogYW55KSB7XG4gICAgaWYgKHRoaXMub25tZWFzdXJlZCkge1xuICAgICAgdGhpcy5vbm1lYXN1cmVkKG9iai5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLm1lYXN1cmVkKSB7XG4gICAgICAgIHRoaXMubWVhc3VyZWQgPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWVhc3VyZWQucHVzaChvYmouZGF0YSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dpY0FuYWx5emVyO1xuIl19


/***/ }),

/***/ "./dist/src/obniz/libs/measurements/measure.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(__webpack_require__("./dist/src/obniz/libs/utils/util.js"));
class ObnizMeasure {
    constructor(obniz) {
        this.obniz = obniz;
        this._reset();
    }
    _reset() {
        this.observers = [];
    }
    echo(params) {
        const err = util_1.default._requiredKeys(params, [
            "io_pulse",
            "pulse",
            "pulse_width",
            "io_echo",
            "measure_edges",
        ]);
        if (err) {
            throw new Error("Measure start param '" + err + "' required, but not found ");
        }
        this.params = util_1.default._keyFilter(params, [
            "io_pulse",
            "pulse",
            "pulse_width",
            "io_echo",
            "measure_edges",
            "timeout",
            "callback",
        ]);
        const echo = {};
        echo.io_pulse = this.params.io_pulse;
        echo.pulse = this.params.pulse;
        echo.pulse_width = this.params.pulse_width;
        echo.io_echo = this.params.io_echo;
        echo.measure_edges = this.params.measure_edges;
        if (typeof this.params.timeout === "number") {
            echo.timeout = this.params.timeout;
        }
        this.obniz.send({
            measure: {
                echo,
            },
        });
        if (this.params.callback) {
            this.observers.push(this.params.callback);
        }
    }
    notified(obj) {
        const callback = this.observers.shift();
        if (callback) {
            callback(obj.echo);
        }
    }
}
exports.default = ObnizMeasure;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL21lYXN1cmVtZW50cy9tZWFzdXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXNDO0FBRXRDLE1BQU0sWUFBWTtJQUtoQixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFXO1FBQ3JCLE1BQU0sR0FBRyxHQUFRLGNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQy9DLFVBQVU7WUFDVixPQUFPO1lBQ1AsYUFBYTtZQUNiLFNBQVM7WUFDVCxlQUFlO1NBQ2hCLENBQUMsQ0FBQztRQUNILElBQUksR0FBRyxFQUFFO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FDYix1QkFBdUIsR0FBRyxHQUFHLEdBQUcsNEJBQTRCLENBQzdELENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDekMsVUFBVTtZQUNWLE9BQU87WUFDUCxhQUFhO1lBQ2IsU0FBUztZQUNULGVBQWU7WUFDZixTQUFTO1lBQ1QsVUFBVTtTQUNYLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFRLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDL0MsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ3BDO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDZCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSTthQUNMO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFRO1FBQ3RCLE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0MsSUFBSSxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsWUFBWSxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL21lYXN1cmVtZW50cy9tZWFzdXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9ibml6VXRpbCBmcm9tIFwiLi4vdXRpbHMvdXRpbFwiO1xuXG5jbGFzcyBPYm5pek1lYXN1cmUge1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIG9ic2VydmVyczogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLl9yZXNldCgpO1xuICB9XG5cbiAgcHVibGljIF9yZXNldCgpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICB9XG5cbiAgcHVibGljIGVjaG8ocGFyYW1zOiBhbnkpIHtcbiAgICBjb25zdCBlcnI6IGFueSA9IE9ibml6VXRpbC5fcmVxdWlyZWRLZXlzKHBhcmFtcywgW1xuICAgICAgXCJpb19wdWxzZVwiLFxuICAgICAgXCJwdWxzZVwiLFxuICAgICAgXCJwdWxzZV93aWR0aFwiLFxuICAgICAgXCJpb19lY2hvXCIsXG4gICAgICBcIm1lYXN1cmVfZWRnZXNcIixcbiAgICBdKTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTWVhc3VyZSBzdGFydCBwYXJhbSAnXCIgKyBlcnIgKyBcIicgcmVxdWlyZWQsIGJ1dCBub3QgZm91bmQgXCIsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnBhcmFtcyA9IE9ibml6VXRpbC5fa2V5RmlsdGVyKHBhcmFtcywgW1xuICAgICAgXCJpb19wdWxzZVwiLFxuICAgICAgXCJwdWxzZVwiLFxuICAgICAgXCJwdWxzZV93aWR0aFwiLFxuICAgICAgXCJpb19lY2hvXCIsXG4gICAgICBcIm1lYXN1cmVfZWRnZXNcIixcbiAgICAgIFwidGltZW91dFwiLFxuICAgICAgXCJjYWxsYmFja1wiLFxuICAgIF0pO1xuXG4gICAgY29uc3QgZWNobzogYW55ID0ge307XG4gICAgZWNoby5pb19wdWxzZSA9IHRoaXMucGFyYW1zLmlvX3B1bHNlO1xuICAgIGVjaG8ucHVsc2UgPSB0aGlzLnBhcmFtcy5wdWxzZTtcbiAgICBlY2hvLnB1bHNlX3dpZHRoID0gdGhpcy5wYXJhbXMucHVsc2Vfd2lkdGg7XG4gICAgZWNoby5pb19lY2hvID0gdGhpcy5wYXJhbXMuaW9fZWNobztcbiAgICBlY2hvLm1lYXN1cmVfZWRnZXMgPSB0aGlzLnBhcmFtcy5tZWFzdXJlX2VkZ2VzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5wYXJhbXMudGltZW91dCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgZWNoby50aW1lb3V0ID0gdGhpcy5wYXJhbXMudGltZW91dDtcbiAgICB9XG5cbiAgICB0aGlzLm9ibml6LnNlbmQoe1xuICAgICAgbWVhc3VyZToge1xuICAgICAgICBlY2hvLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnBhcmFtcy5jYWxsYmFjaykge1xuICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaCh0aGlzLnBhcmFtcy5jYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5vdGlmaWVkKG9iajogYW55KSB7XG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IHRoaXMub2JzZXJ2ZXJzLnNoaWZ0KCk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhvYmouZWNobyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9ibml6TWVhc3VyZTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/obniz/libs/protocol/tcp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const isNode = typeof window === "undefined";
const semver = __webpack_require__("./node_modules/semver/semver.js");
class Tcp {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.connectObservers = [];
        this.readObservers = [];
        this.used = false;
    }
    _addConnectObserver(callback) {
        if (callback) {
            this.connectObservers.push(callback);
        }
    }
    _addReadObserver(callback) {
        if (callback) {
            this.readObservers.push(callback);
        }
    }
    connectWait(port, domain) {
        if (semver.lt(this.Obniz.firmware_ver, "2.1.0")) {
            throw new Error(`Please update obniz firmware >= 2.1.0`);
        }
        // TODO
        // if (this.used) {
        //   throw new Error(`tcp${this.id} is in used`);
        // }
        if (port < 0 || port > 65535) {
            throw new Error(`tcp${this.id} is invalid port`);
        }
        if (domain.length > 30) {
            throw new Error(`tcp${this.id} is domain length over`);
        }
        this.connectObservers = [];
        this.used = true;
        return new Promise((resolve, reject) => {
            this._addConnectObserver(resolve);
            const obj = {};
            obj["tcp" + this.id] = {
                connect: {
                    port,
                    domain,
                },
            };
            this.Obniz.send(obj);
        });
    }
    close() {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not used`);
        }
        const obj = {};
        obj["tcp" + this.id] = {
            disconnect: true,
        };
        this.Obniz.send(obj);
    }
    write(data) {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not started`);
        }
        if (data === undefined) {
            return;
        }
        if (typeof data === "number") {
            data = [data];
        }
        let send_data = null;
        if (isNode && data instanceof Buffer) {
            send_data = [...data];
        }
        else if (data.constructor === Array) {
            send_data = data;
        }
        else if (typeof data === "string") {
            const buf = Buffer.from(data);
            send_data = [...buf];
        }
        const obj = {};
        obj["tcp" + this.id] = {
            write: {
                data: send_data,
            },
        };
        this.Obniz.send(obj);
    }
    readWait() {
        if (!this.used) {
            throw new Error(`tcp${this.id} is not started`);
        }
        return new Promise((resolve, reject) => {
            this._addReadObserver(resolve);
        });
    }
    end() {
        this.close();
    }
    notified(obj) {
        if (obj.connection) {
            /* Connectino state update. response of connect(), close from destination, response from */
            if (this.onconnection) {
                this.onconnection(obj.connection.connected);
            }
            if (!obj.connection.connected) {
                this._reset();
            }
        }
        else if (obj.read) {
            if (this.onreceive) {
                this.onreceive(obj.read.data);
            }
            const callback = this.readObservers.shift();
            if (callback) {
                callback(obj.read.data);
            }
        }
        else if (obj.connect) {
            /* response of connect() */
            /* `this.connection` will called before this function */
            if (obj.connect.code !== 0) {
                if (this.onerror) {
                    this.onerror(obj.connect);
                }
            }
            const callback = this.connectObservers.shift();
            if (callback) {
                callback(obj.connect.code);
            }
        }
    }
    isUsed() {
        return this.used;
    }
}
exports.default = Tcp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/utils/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
class ObnizUtil {
    constructor(obniz) {
        this.obniz = obniz;
    }
    static _keyFilter(params, keys) {
        let filterdParams = {};
        if (typeof params !== "object") {
            return filterdParams;
        }
        filterdParams = Object.keys(params)
            .filter((key) => keys.includes(key))
            .reduce((obj, key) => {
            obj[key] = params[key];
            return obj;
        }, {});
        return filterdParams;
    }
    /**
     *
     * @return {String} key name of not found.
     */
    static _requiredKeys(params, keys) {
        if (typeof params !== "object") {
            return keys[0];
        }
        for (const index in keys) {
            if (!(keys[index] in params)) {
                return keys[index];
            }
        }
        return null;
    }
    static dataArray2string(data) {
        let string = null;
        try {
            const StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
            if (StringDecoder) {
                string = new StringDecoder("utf8").write(Buffer.from(data));
            }
        }
        catch (e) {
            // this.obniz.error(e);
        }
        return string;
    }
    static string2dataArray(str) {
        const buf = Buffer.from(str);
        return [...buf];
    }
    createCanvasContext(width, height) {
        if (this.obniz.isNode) {
            try {
                const { createCanvas } = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
                return createCanvas(this.width, this.height);
            }
            catch (e) {
                throw new Error("obniz.js require node-canvas to draw rich contents. see more detail on docs");
            }
        }
        else {
            const canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            canvas.style["-webkit-font-smoothing"] = "none";
            const body = document.getElementsByTagName("body")[0];
            body.appendChild(canvas);
            const ctx = canvas.getContext("2d");
            return ctx;
        }
    }
}
exports.default = ObnizUtil;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3V0aWxzL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFNBQVM7SUF5RGIsWUFBWSxLQUFVO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUF6RE0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFXLEVBQUUsSUFBUztRQUM3QyxJQUFJLGFBQWEsR0FBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxhQUFhLENBQUM7U0FDdEI7UUFDRCxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDaEMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ25DLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRVQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBVyxFQUFFLElBQVM7UUFDaEQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEI7UUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUU7Z0JBQzVCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BCO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBUztRQUN0QyxJQUFJLE1BQU0sR0FBUSxJQUFJLENBQUM7UUFDdkIsSUFBSTtZQUNGLE1BQU0sYUFBYSxHQUFRLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUNuRSxJQUFJLGFBQWEsRUFBRTtnQkFDakIsTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDN0Q7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsdUJBQXVCO1NBQ3hCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFRO1FBQ3JDLE1BQU0sR0FBRyxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQVdNLG1CQUFtQixDQUFDLEtBQVUsRUFBRSxNQUFXO1FBQ2hELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSTtnQkFDRixNQUFNLEVBQUMsWUFBWSxFQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN6QyxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM5QztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkVBQTZFLENBQzlFLENBQUM7YUFDSDtTQUNGO2FBQU07WUFDTCxNQUFNLE1BQU0sR0FBUSxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxLQUFhLENBQUMsd0JBQXdCLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDekQsTUFBTSxJQUFJLEdBQVEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFekIsTUFBTSxHQUFHLEdBQVEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxPQUFPLEdBQUcsQ0FBQztTQUNaO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL3V0aWxzL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBPYm5pelV0aWwge1xuXG4gIHB1YmxpYyBzdGF0aWMgX2tleUZpbHRlcihwYXJhbXM6IGFueSwga2V5czogYW55KSB7XG4gICAgbGV0IGZpbHRlcmRQYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gZmlsdGVyZFBhcmFtcztcbiAgICB9XG4gICAgZmlsdGVyZFBhcmFtcyA9IE9iamVjdC5rZXlzKHBhcmFtcylcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4ga2V5cy5pbmNsdWRlcyhrZXkpKVxuICAgICAgLnJlZHVjZSgob2JqOiBhbnksIGtleSkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSwge30pO1xuXG4gICAgcmV0dXJuIGZpbHRlcmRQYXJhbXM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfSBrZXkgbmFtZSBvZiBub3QgZm91bmQuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIF9yZXF1aXJlZEtleXMocGFyYW1zOiBhbnksIGtleXM6IGFueSkge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4ga2V5c1swXTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGluZGV4IGluIGtleXMpIHtcbiAgICAgIGlmICghKGtleXNbaW5kZXhdIGluIHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIGtleXNbaW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZGF0YUFycmF5MnN0cmluZyhkYXRhOiBhbnkpIHtcbiAgICBsZXQgc3RyaW5nOiBhbnkgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBTdHJpbmdEZWNvZGVyOiBhbnkgPSByZXF1aXJlKFwic3RyaW5nX2RlY29kZXJcIikuU3RyaW5nRGVjb2RlcjtcbiAgICAgIGlmIChTdHJpbmdEZWNvZGVyKSB7XG4gICAgICAgIHN0cmluZyA9IG5ldyBTdHJpbmdEZWNvZGVyKFwidXRmOFwiKS53cml0ZShCdWZmZXIuZnJvbShkYXRhKSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gdGhpcy5vYm5pei5lcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc3RyaW5nMmRhdGFBcnJheShzdHI6IGFueSkge1xuICAgIGNvbnN0IGJ1ZjogYW55ID0gQnVmZmVyLmZyb20oc3RyKTtcbiAgICByZXR1cm4gWy4uLmJ1Zl07XG4gIH1cblxuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHdpZHRoOiBhbnk7XG4gIHB1YmxpYyBoZWlnaHQ6IGFueTtcbiAgcHVibGljIGNyZWF0ZUNhbnZhczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlQ2FudmFzQ29udGV4dCh3aWR0aDogYW55LCBoZWlnaHQ6IGFueSkge1xuICAgIGlmICh0aGlzLm9ibml6LmlzTm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2NyZWF0ZUNhbnZhc30gPSByZXF1aXJlKFwiY2FudmFzXCIpO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ2FudmFzKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwib2JuaXouanMgcmVxdWlyZSBub2RlLWNhbnZhcyB0byBkcmF3IHJpY2ggY29udGVudHMuIHNlZSBtb3JlIGRldGFpbCBvbiBkb2NzXCIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbnZhczogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIChjYW52YXMuc3R5bGUgYXMgYW55KVtcIi13ZWJraXQtZm9udC1zbW9vdGhpbmdcIl0gPSBcIm5vbmVcIjtcbiAgICAgIGNvbnN0IGJvZHk6IGFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTtcbiAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuICAgICAgY29uc3QgY3R4OiBhbnkgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgcmV0dXJuIGN0eDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT2JuaXpVdGlsO1xuIl19

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace sync recursive":
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./dist/src/obniz/libs/webpackReplace sync recursive";

/***/ }),

/***/ "./dist/src/obniz/libs/webpackReplace/require-context.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {
Object.defineProperty(exports, "__esModule", { value: true });
let baseDir;
const fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
const yaml = __webpack_require__("./node_modules/js-yaml/index.js");
const nodeDir = __webpack_require__("./node_modules/node-dir/index.js");
const path = __webpack_require__("path");
exports.default = (directory, recursive, regExp) => {
    // Assume absolute path by default
    let basepath = directory;
    if (directory[0] === ".") {
        // Relative path
        let dir = __dirname;
        if (baseDir) {
            dir = baseDir;
        }
        basepath = path.join(dir, directory);
    }
    else if (!path.isAbsolute(directory)) {
        // Module path
        basepath = /*require.resolve*/(__webpack_require__("./dist/src/obniz/libs/webpackReplace sync recursive").resolve(directory));
    }
    const keys = nodeDir
        .files(basepath, {
        sync: true,
        recursive: recursive || false,
    })
        .filter((file) => {
        return file.match(regExp || /\.(json|js)$/);
    })
        .map((file) => {
        return path.join(".", file.slice(basepath.length + 1));
    });
    const context = (key) => {
        const modulePath = context.resolve(key);
        if (/\.(json|js)$/.test(modulePath)) {
            return __webpack_require__("./dist/src/obniz/libs/webpackReplace sync recursive")(modulePath);
        }
        else if (/\.(yaml|yml)$/.test(modulePath)) {
            return yaml.safeLoad(fs.readFileSync(modulePath, "utf8"));
        }
        else {
            throw new Error("unknown type");
        }
    };
    context.resolve = (key) => {
        return path.join(basepath, key);
    };
    context.keys = () => {
        return keys;
    };
    return context;
};
module.exports.setBaseDir = (base) => {
    baseDir = base;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dlYnBhY2tSZXBsYWNlL3JlcXVpcmUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBWSxDQUFDO0FBQ2pCLHlCQUEwQjtBQUMxQixnQ0FBaUM7QUFDakMsb0NBQXFDO0FBQ3JDLDZCQUE4QjtBQUU5QixrQkFBZSxDQUFDLFNBQWlCLEVBQUUsU0FBa0IsRUFBRSxNQUFjLEVBQU8sRUFBRTtJQUU1RSxrQ0FBa0M7SUFDbEMsSUFBSSxRQUFRLEdBQVEsU0FBUyxDQUFDO0lBRTlCLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtRQUN4QixnQkFBZ0I7UUFDaEIsSUFBSSxHQUFHLEdBQVEsU0FBUyxDQUFDO1FBQ3pCLElBQUksT0FBTyxFQUFFO1lBQ1gsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNmO1FBQ0QsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3RDO1NBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdEMsY0FBYztRQUNkLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsTUFBTSxJQUFJLEdBQVMsT0FBZTtTQUMvQixLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixTQUFTLEVBQUUsU0FBUyxJQUFJLEtBQUs7S0FDOUIsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO1NBQ0QsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVMLE1BQU0sT0FBTyxHQUFRLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxVQUFVLEdBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUI7YUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0Q7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDM0MsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNqQixDQUFDLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvd2VicGFja1JlcGxhY2UvcmVxdWlyZS1jb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGJhc2VEaXI6IGFueTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmltcG9ydCB5YW1sID0gcmVxdWlyZShcImpzLXlhbWxcIik7XG5pbXBvcnQgbm9kZURpciA9IHJlcXVpcmUoXCJub2RlLWRpclwiKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmV4cG9ydCBkZWZhdWx0IChkaXJlY3Rvcnk6IHN0cmluZywgcmVjdXJzaXZlOiBib29sZWFuLCByZWdFeHA6IFJlZ0V4cCk6IGFueSA9PiB7XG5cbiAgLy8gQXNzdW1lIGFic29sdXRlIHBhdGggYnkgZGVmYXVsdFxuICBsZXQgYmFzZXBhdGg6IGFueSA9IGRpcmVjdG9yeTtcblxuICBpZiAoZGlyZWN0b3J5WzBdID09PSBcIi5cIikge1xuICAgIC8vIFJlbGF0aXZlIHBhdGhcbiAgICBsZXQgZGlyOiBhbnkgPSBfX2Rpcm5hbWU7XG4gICAgaWYgKGJhc2VEaXIpIHtcbiAgICAgIGRpciA9IGJhc2VEaXI7XG4gICAgfVxuICAgIGJhc2VwYXRoID0gcGF0aC5qb2luKGRpciwgZGlyZWN0b3J5KTtcbiAgfSBlbHNlIGlmICghcGF0aC5pc0Fic29sdXRlKGRpcmVjdG9yeSkpIHtcbiAgICAvLyBNb2R1bGUgcGF0aFxuICAgIGJhc2VwYXRoID0gcmVxdWlyZS5yZXNvbHZlKGRpcmVjdG9yeSk7XG4gIH1cblxuICBjb25zdCBrZXlzOiBhbnkgPSAobm9kZURpciBhcyBhbnkpXG4gICAgLmZpbGVzKGJhc2VwYXRoLCB7XG4gICAgICBzeW5jOiB0cnVlLFxuICAgICAgcmVjdXJzaXZlOiByZWN1cnNpdmUgfHwgZmFsc2UsXG4gICAgfSlcbiAgICAuZmlsdGVyKChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBmaWxlLm1hdGNoKHJlZ0V4cCB8fCAvXFwuKGpzb258anMpJC8pO1xuICAgIH0pXG4gICAgLm1hcCgoZmlsZTogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gcGF0aC5qb2luKFwiLlwiLCBmaWxlLnNsaWNlKGJhc2VwYXRoLmxlbmd0aCArIDEpKTtcbiAgICB9KTtcblxuICBjb25zdCBjb250ZXh0OiBhbnkgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBtb2R1bGVQYXRoOiBhbnkgPSBjb250ZXh0LnJlc29sdmUoa2V5KTtcbiAgICBpZiAoL1xcLihqc29ufGpzKSQvLnRlc3QobW9kdWxlUGF0aCkpIHtcbiAgICAgIHJldHVybiByZXF1aXJlKG1vZHVsZVBhdGgpO1xuICAgIH0gZWxzZSBpZiAoL1xcLih5YW1sfHltbCkkLy50ZXN0KG1vZHVsZVBhdGgpKSB7XG4gICAgICByZXR1cm4geWFtbC5zYWZlTG9hZChmcy5yZWFkRmlsZVN5bmMobW9kdWxlUGF0aCwgXCJ1dGY4XCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlXCIpO1xuICAgIH1cbiAgfTtcblxuICBjb250ZXh0LnJlc29sdmUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gcGF0aC5qb2luKGJhc2VwYXRoLCBrZXkpO1xuICB9O1xuXG4gIGNvbnRleHQua2V5cyA9ICgpID0+IHtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnNldEJhc2VEaXIgPSAoYmFzZTogc3RyaW5nKSA9PiB7XG4gIGJhc2VEaXIgPSBiYXNlO1xufTtcbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./dist/src/parts sync recursive \\.js$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ADConverter/hx711/index.js": "./dist/src/parts/ADConverter/hx711/index.js",
	"./Accessory/USB/index.js": "./dist/src/parts/Accessory/USB/index.js",
	"./Biological/PULSE08-M5STICKC-S/index.js": "./dist/src/parts/Biological/PULSE08-M5STICKC-S/index.js",
	"./Ble/2jcie/index.js": "./dist/src/parts/Ble/2jcie/index.js",
	"./Camera/ArduCAMMini/index.js": "./dist/src/parts/Camera/ArduCAMMini/index.js",
	"./Camera/JpegSerialCam/index.js": "./dist/src/parts/Camera/JpegSerialCam/index.js",
	"./ColorSensor/PT550/index.js": "./dist/src/parts/ColorSensor/PT550/index.js",
	"./ColorSensor/S11059/index.js": "./dist/src/parts/ColorSensor/S11059/index.js",
	"./Display/7SegmentLED/index.js": "./dist/src/parts/Display/7SegmentLED/index.js",
	"./Display/7SegmentLEDArray/index.js": "./dist/src/parts/Display/7SegmentLEDArray/index.js",
	"./Display/7SegmentLED_MAX7219/index.js": "./dist/src/parts/Display/7SegmentLED_MAX7219/index.js",
	"./Display/MatrixLED_MAX7219/index.js": "./dist/src/parts/Display/MatrixLED_MAX7219/index.js",
	"./Display/ST7735S/index.js": "./dist/src/parts/Display/ST7735S/index.js",
	"./Display/SainSmartTFT18LCD/index.js": "./dist/src/parts/Display/SainSmartTFT18LCD/index.js",
	"./Display/SharpMemoryTFT/index.js": "./dist/src/parts/Display/SharpMemoryTFT/index.js",
	"./DistanceSensor/GP2Y0A21YK0F/index.js": "./dist/src/parts/DistanceSensor/GP2Y0A21YK0F/index.js",
	"./DistanceSensor/HC-SR04/index.js": "./dist/src/parts/DistanceSensor/HC-SR04/index.js",
	"./GPS/GYSFDMAXB/index.js": "./dist/src/parts/GPS/GYSFDMAXB/index.js",
	"./GasSensor/MQ135/index.js": "./dist/src/parts/GasSensor/MQ135/index.js",
	"./GasSensor/MQ2/index.js": "./dist/src/parts/GasSensor/MQ2/index.js",
	"./GasSensor/MQ3/index.js": "./dist/src/parts/GasSensor/MQ3/index.js",
	"./GasSensor/MQ4/index.js": "./dist/src/parts/GasSensor/MQ4/index.js",
	"./GasSensor/MQ5/index.js": "./dist/src/parts/GasSensor/MQ5/index.js",
	"./GasSensor/MQ6/index.js": "./dist/src/parts/GasSensor/MQ6/index.js",
	"./GasSensor/MQ7/index.js": "./dist/src/parts/GasSensor/MQ7/index.js",
	"./GasSensor/MQ8/index.js": "./dist/src/parts/GasSensor/MQ8/index.js",
	"./GasSensor/MQ9/index.js": "./dist/src/parts/GasSensor/MQ9/index.js",
	"./Grove/Grove_3AxisAccelerometer/index.js": "./dist/src/parts/Grove/Grove_3AxisAccelerometer/index.js",
	"./Grove/Grove_Button/index.js": "./dist/src/parts/Grove/Grove_Button/index.js",
	"./Grove/Grove_Buzzer/index.js": "./dist/src/parts/Grove/Grove_Buzzer/index.js",
	"./Grove/Grove_EarHeartRate/index.js": "./dist/src/parts/Grove/Grove_EarHeartRate/index.js",
	"./Grove/Grove_GPS/index.js": "./dist/src/parts/Grove/Grove_GPS/index.js",
	"./Grove/Grove_MP3/index.js": "./dist/src/parts/Grove/Grove_MP3/index.js",
	"./GyroSensor/ENC03R_Module/index.js": "./dist/src/parts/GyroSensor/ENC03R_Module/index.js",
	"./Infrared/IRModule/index.js": "./dist/src/parts/Infrared/IRModule/index.js",
	"./Infrared/IRSensor/index.js": "./dist/src/parts/Infrared/IRSensor/index.js",
	"./Infrared/InfraredLED/index.js": "./dist/src/parts/Infrared/InfraredLED/index.js",
	"./Infrared/YG1006/index.js": "./dist/src/parts/Infrared/YG1006/index.js",
	"./Light/FullColorLED/index.js": "./dist/src/parts/Light/FullColorLED/index.js",
	"./Light/LED/index.js": "./dist/src/parts/Light/LED/index.js",
	"./Light/WS2811/index.js": "./dist/src/parts/Light/WS2811/index.js",
	"./Light/WS2812/index.js": "./dist/src/parts/Light/WS2812/index.js",
	"./Light/WS2812B/index.js": "./dist/src/parts/Light/WS2812B/index.js",
	"./Logic/SNx4HC595/index.js": "./dist/src/parts/Logic/SNx4HC595/index.js",
	"./Magnet/CT10/index.js": "./dist/src/parts/Magnet/CT10/index.js",
	"./Magnet/HMC5883L/index.js": "./dist/src/parts/Magnet/HMC5883L/index.js",
	"./Memory/24LC256/index.js": "./dist/src/parts/Memory/24LC256/index.js",
	"./MovementSensor/AK8963/index.js": "./dist/src/parts/MovementSensor/AK8963/index.js",
	"./MovementSensor/Button/index.js": "./dist/src/parts/MovementSensor/Button/index.js",
	"./MovementSensor/FlickHat/index.js": "./dist/src/parts/MovementSensor/FlickHat/index.js",
	"./MovementSensor/HC-SR505/index.js": "./dist/src/parts/MovementSensor/HC-SR505/index.js",
	"./MovementSensor/IPM-165/index.js": "./dist/src/parts/MovementSensor/IPM-165/index.js",
	"./MovementSensor/JoyStick/index.js": "./dist/src/parts/MovementSensor/JoyStick/index.js",
	"./MovementSensor/KXR94-2050/index.js": "./dist/src/parts/MovementSensor/KXR94-2050/index.js",
	"./MovementSensor/KXSC7-2050/index.js": "./dist/src/parts/MovementSensor/KXSC7-2050/index.js",
	"./MovementSensor/MPU6050/index.js": "./dist/src/parts/MovementSensor/MPU6050/index.js",
	"./MovementSensor/MPU6886/index.js": "./dist/src/parts/MovementSensor/MPU6886/index.js",
	"./MovementSensor/MPU9250/index.js": "./dist/src/parts/MovementSensor/MPU9250/index.js",
	"./MovementSensor/PaPIRsVZ/index.js": "./dist/src/parts/MovementSensor/PaPIRsVZ/index.js",
	"./MovementSensor/Potentiometer/index.js": "./dist/src/parts/MovementSensor/Potentiometer/index.js",
	"./MovementSensor/SH200Q/index.js": "./dist/src/parts/MovementSensor/SH200Q/index.js",
	"./Moving/DCMotor/index.js": "./dist/src/parts/Moving/DCMotor/index.js",
	"./Moving/PCA9685/index.js": "./dist/src/parts/Moving/PCA9685/index.js",
	"./Moving/ServoMotor/index.js": "./dist/src/parts/Moving/ServoMotor/index.js",
	"./Moving/Solenoid/index.js": "./dist/src/parts/Moving/Solenoid/index.js",
	"./Moving/StepperMotor/index.js": "./dist/src/parts/Moving/StepperMotor/index.js",
	"./Power/AXP192/index.js": "./dist/src/parts/Power/AXP192/index.js",
	"./PressureSensor/FSR-40X/index.js": "./dist/src/parts/PressureSensor/FSR-40X/index.js",
	"./SoilSensor/SEN0114/index.js": "./dist/src/parts/SoilSensor/SEN0114/index.js",
	"./Sound/Speaker/index.js": "./dist/src/parts/Sound/Speaker/index.js",
	"./TemperatureSensor/analog/AnalogTemperatureSensor.js": "./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js",
	"./TemperatureSensor/analog/LM35DZ/index.js": "./dist/src/parts/TemperatureSensor/analog/LM35DZ/index.js",
	"./TemperatureSensor/analog/LM60/index.js": "./dist/src/parts/TemperatureSensor/analog/LM60/index.js",
	"./TemperatureSensor/analog/LM61/index.js": "./dist/src/parts/TemperatureSensor/analog/LM61/index.js",
	"./TemperatureSensor/analog/LMT87/index.js": "./dist/src/parts/TemperatureSensor/analog/LMT87/index.js",
	"./TemperatureSensor/analog/MCP9700/index.js": "./dist/src/parts/TemperatureSensor/analog/MCP9700/index.js",
	"./TemperatureSensor/analog/MCP9701/index.js": "./dist/src/parts/TemperatureSensor/analog/MCP9701/index.js",
	"./TemperatureSensor/analog/S8100B/index.js": "./dist/src/parts/TemperatureSensor/analog/S8100B/index.js",
	"./TemperatureSensor/analog/S8120C/index.js": "./dist/src/parts/TemperatureSensor/analog/S8120C/index.js",
	"./TemperatureSensor/i2c/ADT7410/index.js": "./dist/src/parts/TemperatureSensor/i2c/ADT7410/index.js",
	"./TemperatureSensor/i2c/AM2320/index.js": "./dist/src/parts/TemperatureSensor/i2c/AM2320/index.js",
	"./TemperatureSensor/i2c/AMG8833/index.js": "./dist/src/parts/TemperatureSensor/i2c/AMG8833/index.js",
	"./TemperatureSensor/i2c/BME280/index.js": "./dist/src/parts/TemperatureSensor/i2c/BME280/index.js",
	"./TemperatureSensor/i2c/D6T44L/index.js": "./dist/src/parts/TemperatureSensor/i2c/D6T44L/index.js",
	"./TemperatureSensor/i2c/DHT12/index.js": "./dist/src/parts/TemperatureSensor/i2c/DHT12/index.js",
	"./TemperatureSensor/i2c/S-5851A/index.js": "./dist/src/parts/TemperatureSensor/i2c/S-5851A/index.js",
	"./TemperatureSensor/i2c/SHT31/index.js": "./dist/src/parts/TemperatureSensor/i2c/SHT31/index.js",
	"./TemperatureSensor/spi/ADT7310/index.js": "./dist/src/parts/TemperatureSensor/spi/ADT7310/index.js",
	"./Wireless/MFRC522/index.js": "./dist/src/parts/Wireless/MFRC522/index.js",
	"./Wireless/RN42/index.js": "./dist/src/parts/Wireless/RN42/index.js",
	"./Wireless/XBee/index.js": "./dist/src/parts/Wireless/XBee/index.js",
	"./i2cParts.js": "./dist/src/parts/i2cParts.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./dist/src/parts sync recursive \\.js$";

/***/ }),

/***/ "./dist/src/parts/ADConverter/hx711/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Hx711 {
    constructor() {
        this.keys = ["vcc", "gnd", "sck", "dout"];
        this.requiredKeys = ["sck", "dout"];
        this._offset = 0;
        this._scale = 1;
    }
    static info() {
        return {
            name: "hx711",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.spi = obniz.getFreeSpi();
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        const ioKeys = ["clk", "dout"];
        for (const key of ioKeys) {
            if (this.params[key] && !this.obniz.isValidIO(this.params[key])) {
                throw new Error("spi start param '" + key + "' are to be valid io no");
            }
        }
        this.sck = obniz.getIO(this.params.sck);
        this.dout = obniz.getIO(this.params.dout);
        this.sck.output(true);
        obniz.wait(500);
    }
    readWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sck.output(false);
            while (true) {
                const val = yield this.dout.inputWait();
                if (val === false) {
                    break;
                }
            }
            this.spi.start({
                mode: "master",
                mosi: this.params.sck,
                miso: this.params.dout,
                frequency: 500 * 1000,
            });
            const ret_double = yield this.spi.writeWait([
                0xaa,
                0xaa,
                0xaa,
                0xaa,
                0xaa,
                0xaa,
                0x80,
            ]);
            this.spi.end(true);
            this.sck.output(false);
            const ret = [
                this.doubleBit2singleBit(ret_double[0], ret_double[1]),
                this.doubleBit2singleBit(ret_double[2], ret_double[3]),
                this.doubleBit2singleBit(ret_double[4], ret_double[5]),
            ];
            const flag = (ret[0] & 0x80) === 0 ? 1 : -1;
            return flag * (((ret[0] & 0x7f) << 16) + (ret[1] << 8) + (ret[2] << 0));
        });
    }
    doubleBit2singleBit(a, b) {
        return ((this.bit(a, 7) << 7) |
            (this.bit(a, 5) << 6) |
            (this.bit(a, 3) << 5) |
            (this.bit(a, 1) << 4) |
            (this.bit(b, 7) << 3) |
            (this.bit(b, 5) << 2) |
            (this.bit(b, 3) << 1) |
            (this.bit(b, 1) << 0));
    }
    bit(a, n) {
        return a & (1 << n) ? 1 : 0;
    }
    readAverageWait(times) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            for (let i = 0; i < times; i++) {
                results.push(yield this.readWait());
            }
            return (results.reduce((prev, current, i) => {
                return prev + current;
            }, 0) / results.length);
        });
    }
    powerDown() {
        this.sck.output(true);
    }
    powerUp() {
        this.sck.output(false);
    }
    zeroAdjustWait(times) {
        return __awaiter(this, void 0, void 0, function* () {
            times = parseInt(times) || 1;
            this._offset = yield this.readAverageWait(times);
        });
    }
    getValueWait(times) {
        return __awaiter(this, void 0, void 0, function* () {
            times = parseInt(times) || 1;
            const val = yield this.readAverageWait(times);
            return (val - this._offset) / this._scale;
        });
    }
    setOffset(offset) {
        if (typeof offset !== "number") {
            throw new Error("offset variable is Number");
        }
        this._offset = offset;
    }
    setScale(scale) {
        if (typeof scale !== "number") {
            throw new Error("scale variable is Number");
        }
        this._scale = scale;
    }
}
exports.default = Hx711;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Accessory/USB/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class USB {
    constructor() {
        this.keys = ["vcc", "gnd"];
        this.requiredKeys = ["vcc", "gnd"];
        this.displayIoNames = {
            vcc: "vcc",
            gnd: "gnd",
        };
    }
    static info() {
        return {
            name: "USB",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_vdd = obniz.getIO(this.params.vcc);
        this.io_gnd = obniz.getIO(this.params.gnd);
        this.io_gnd.output(false);
    }
    on() {
        this.io_vdd.output(true);
    }
    off() {
        this.io_vdd.output(false);
    }
}
exports.default = USB;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9BY2Nlc3NvcnkvVVNCL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBZ0JQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDcEIsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztTQUNYLENBQUM7SUFDSixDQUFDO0lBdEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsS0FBSztTQUNaLENBQUM7SUFDSixDQUFDO0lBb0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxFQUFFO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLEdBQUc7UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxHQUFHLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0FjY2Vzc29yeS9VU0IvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBVU0Ige1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJVU0JcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgZGlzcGxheUlvTmFtZXM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBpb192ZGQ6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fZ25kOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1widmNjXCIsIFwiZ25kXCJdO1xuXG4gICAgdGhpcy5kaXNwbGF5SW9OYW1lcyA9IHtcbiAgICAgIHZjYzogXCJ2Y2NcIixcbiAgICAgIGduZDogXCJnbmRcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgdGhpcy5pb192ZGQgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy52Y2MpO1xuICAgIHRoaXMuaW9fZ25kID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZ25kKTtcblxuICAgIHRoaXMuaW9fZ25kLm91dHB1dChmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgb24oKSB7XG4gICAgdGhpcy5pb192ZGQub3V0cHV0KHRydWUpO1xuICB9XG5cbiAgcHVibGljIG9mZigpIHtcbiAgICB0aGlzLmlvX3ZkZC5vdXRwdXQoZmFsc2UpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVTQjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Biological/PULSE08-M5STICKC-S/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
class Puls08M5stickcS {
    constructor() {
        this.keys = ["vcc", "gnd", "tx", "rx"];
        this.requiredKeys = ["tx", "rx"];
        this.delimiter = 0x0a;
    }
    static info() {
        return {
            name: "Puls08M5stickcS",
        };
    }
    onbpmupdate(data) {
        return;
    }
    onrawupdate(data) {
        return;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.uart = obniz.getFreeUart();
        this.uart.start({ tx: this.params.tx, rx: this.params.rx, baud: 19200 });
        this.receivingData = [];
        this.init();
        this.uart.onreceive = (data, text) => {
            const dataToCallback = [];
            data.forEach((e) => {
                if (e !== this.delimiter) {
                    this.receivingData.push(e);
                    return;
                }
                else {
                    const row = this.receivingData;
                    if (row[0] === "#".charCodeAt(0)) {
                        row[0] = " ".charCodeAt(0);
                        const str = this.decode(row);
                        const val = parseInt(str);
                        const bpm = val > 0 ? 60000 / val : null;
                        this.onbpmupdate(bpm);
                    }
                    else {
                        const str = this.decode(row);
                        const val = parseInt(str);
                        dataToCallback.push(val);
                    }
                    this.receivingData = [];
                }
            });
            if (dataToCallback.length > 0) {
                this.onrawupdate(dataToCallback);
            }
        };
    }
    decode(data) {
        return Buffer.from(data).toString("utf8");
        // if (typeof TextDecoder !== 'undefined') {
        //   let enc = new TextDecoder('utf-8');
        //   let arr = new Uint8Array(data);
        //   return enc.decode(arr);
        // } else if (typeof Buffer !== 'undefined') {
        // return Buffer.from(data).toString('utf8');
        // }
        // throw new Error('cannot decode');
    }
    init() {
        this.uart.send("@OF30");
        this.uart.send(0x0a);
        this.uart.send("@RG2");
        this.uart.send(0x0a);
    }
}
exports.default = Puls08M5stickcS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9CaW9sb2dpY2FsL1BVTFNFMDgtTTVTVElDS0MtUy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sZUFBZTtJQWdCbkI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsaUJBQWlCO1NBQ3hCLENBQUM7SUFDSixDQUFDO0lBZ0JNLFdBQVcsQ0FBQyxJQUFTO1FBQzFCLE9BQU87SUFDVCxDQUFDO0lBRU0sV0FBVyxDQUFDLElBQVM7UUFDMUIsT0FBTztJQUNULENBQUM7SUFFTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQVMsRUFBRSxJQUFTLEVBQUUsRUFBRTtZQUM3QyxNQUFNLGNBQWMsR0FBUSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsT0FBTztpQkFDUjtxQkFBTTtvQkFDTCxNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsYUFBYSxDQUFDO29CQUNwQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNoQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsTUFBTSxHQUFHLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxHQUFHLEdBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUMvQixNQUFNLEdBQUcsR0FBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQzlDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3ZCO3lCQUFNO3dCQUNMLE1BQU0sR0FBRyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2xDLE1BQU0sR0FBRyxHQUFRLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDL0IsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDMUI7b0JBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7aUJBQ3pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFTO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsNENBQTRDO1FBQzVDLHdDQUF3QztRQUN4QyxvQ0FBb0M7UUFDcEMsNEJBQTRCO1FBQzVCLDhDQUE4QztRQUM5Qyw2Q0FBNkM7UUFDN0MsSUFBSTtRQUNKLG9DQUFvQztJQUN0QyxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUVELGtCQUFlLGVBQWUsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvQmlvbG9naWNhbC9QVUxTRTA4LU01U1RJQ0tDLVMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQdWxzMDhNNXN0aWNrY1Mge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJQdWxzMDhNNXN0aWNrY1NcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgZGVsaW1pdGVyOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyB1YXJ0OiBhbnk7XG4gIHB1YmxpYyByZWNlaXZpbmdEYXRhOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwidHhcIiwgXCJyeFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInR4XCIsIFwicnhcIl07XG4gICAgdGhpcy5kZWxpbWl0ZXIgPSAweDBhO1xuICB9XG5cbiAgcHVibGljIG9uYnBtdXBkYXRlKGRhdGE6IGFueSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHB1YmxpYyBvbnJhd3VwZGF0ZShkYXRhOiBhbnkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLnVhcnQgPSBvYm5pei5nZXRGcmVlVWFydCgpO1xuICAgIHRoaXMudWFydC5zdGFydCh7dHg6IHRoaXMucGFyYW1zLnR4LCByeDogdGhpcy5wYXJhbXMucngsIGJhdWQ6IDE5MjAwfSk7XG4gICAgdGhpcy5yZWNlaXZpbmdEYXRhID0gW107XG5cbiAgICB0aGlzLmluaXQoKTtcblxuICAgIHRoaXMudWFydC5vbnJlY2VpdmUgPSAoZGF0YTogYW55LCB0ZXh0OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGRhdGFUb0NhbGxiYWNrOiBhbnkgPSBbXTtcbiAgICAgIGRhdGEuZm9yRWFjaCgoZTogYW55KSA9PiB7XG4gICAgICAgIGlmIChlICE9PSB0aGlzLmRlbGltaXRlcikge1xuICAgICAgICAgIHRoaXMucmVjZWl2aW5nRGF0YS5wdXNoKGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByb3c6IGFueSA9IHRoaXMucmVjZWl2aW5nRGF0YTtcbiAgICAgICAgICBpZiAocm93WzBdID09PSBcIiNcIi5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICByb3dbMF0gPSBcIiBcIi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgY29uc3Qgc3RyOiBhbnkgPSB0aGlzLmRlY29kZShyb3cpO1xuICAgICAgICAgICAgY29uc3QgdmFsOiBhbnkgPSBwYXJzZUludChzdHIpO1xuICAgICAgICAgICAgY29uc3QgYnBtOiBhbnkgPSB2YWwgPiAwID8gNjAwMDAgLyB2YWwgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbmJwbXVwZGF0ZShicG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHI6IGFueSA9IHRoaXMuZGVjb2RlKHJvdyk7XG4gICAgICAgICAgICBjb25zdCB2YWw6IGFueSA9IHBhcnNlSW50KHN0cik7XG4gICAgICAgICAgICBkYXRhVG9DYWxsYmFjay5wdXNoKHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVjZWl2aW5nRGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChkYXRhVG9DYWxsYmFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMub25yYXd1cGRhdGUoZGF0YVRvQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZGVjb2RlKGRhdGE6IGFueSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZyhcInV0ZjhcIik7XG5cbiAgICAvLyBpZiAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vICAgbGV0IGVuYyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgICAvLyAgIGxldCBhcnIgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAvLyAgIHJldHVybiBlbmMuZGVjb2RlKGFycik7XG4gICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygndXRmOCcpO1xuICAgIC8vIH1cbiAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBkZWNvZGUnKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIHRoaXMudWFydC5zZW5kKFwiQE9GMzBcIik7XG4gICAgdGhpcy51YXJ0LnNlbmQoMHgwYSk7XG4gICAgdGhpcy51YXJ0LnNlbmQoXCJAUkcyXCIpO1xuICAgIHRoaXMudWFydC5zZW5kKDB4MGEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFB1bHMwOE01c3RpY2tjUztcbiJdfQ==

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Ble/2jcie/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class OMRON_2JCIE {
    constructor() {
        this.keys = [];
        this.requiredKeys = [];
        this.periperal = null;
    }
    static info() {
        return {
            name: "2JCIE",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
    }
    findWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const target = {
                localName: "Env",
            };
            this.periperal = yield this.obniz.ble.scan.startOneWait(target);
            return this.periperal;
        });
    }
    omron_uuid(uuid) {
        return `0C4C${uuid}-7700-46F4-AA96D5E974E32A54`;
    }
    connectWait() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.periperal) {
                yield this.findWait();
            }
            if (!this.periperal) {
                throw new Error("2JCIE not found");
            }
            if (!this.periperal.connected) {
                yield this.periperal.connectWait();
            }
        });
    }
    disconnectWait() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.periperal && this.periperal.connected) {
                this.periperal.disconnectWait();
            }
        });
    }
    signedNumberFromBinary(data) {
        // little adian
        let val = data[data.length - 1] & 0x7f;
        for (let i = data.length - 2; i >= 0; i--) {
            val = val * 256 + data[i];
        }
        if ((data[data.length - 1] & 0x80) !== 0) {
            val = val - Math.pow(2, data.length * 8 - 1);
        }
        return val;
    }
    unsignedNumberFromBinary(data) {
        // little adian
        let val = data[data.length - 1];
        for (let i = data.length - 2; i >= 0; i--) {
            val = val * 256 + data[i];
        }
        return val;
    }
    getLatestData() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connectWait();
            const c = this.periperal
                .getService(this.omron_uuid("3000"))
                .getCharacteristic(this.omron_uuid("3001"));
            const data = yield c.readWait();
            const json = {
                row_number: data[0],
                temperature: this.signedNumberFromBinary(data.slice(1, 3)) * 0.01,
                relative_humidity: this.signedNumberFromBinary(data.slice(3, 5)) * 0.01,
                light: this.signedNumberFromBinary(data.slice(5, 7)) * 1,
                uv_index: this.signedNumberFromBinary(data.slice(7, 9)) * 0.01,
                barometric_pressure: this.signedNumberFromBinary(data.slice(9, 11)) * 0.1,
                soud_noise: this.signedNumberFromBinary(data.slice(11, 13)) * 0.01,
                discomfort_index: this.signedNumberFromBinary(data.slice(13, 15)) * 0.01,
                heatstroke_risk_factor: this.signedNumberFromBinary(data.slice(15, 17)) * 0.01,
                battery_voltage: this.unsignedNumberFromBinary(data.slice(17, 19)) * 0.001,
            };
            return json;
        });
    }
}
exports.default = OMRON_2JCIE;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9CbGUvMmpjaWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFdBQVc7SUFhZjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQWZNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBYU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVZLFFBQVE7O1lBQ25CLE1BQU0sTUFBTSxHQUFRO2dCQUNsQixTQUFTLEVBQUUsS0FBSzthQUNqQixDQUFDO1lBRUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFaEUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7S0FBQTtJQUVNLFVBQVUsQ0FBQyxJQUFTO1FBQ3pCLE9BQU8sT0FBTyxJQUFJLDZCQUE2QixDQUFDO0lBQ2xELENBQUM7SUFFWSxXQUFXOztZQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdkI7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFO2dCQUM3QixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEM7UUFDSCxDQUFDO0tBQUE7SUFFWSxjQUFjOztZQUN6QixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDakM7UUFDSCxDQUFDO0tBQUE7SUFFTSxzQkFBc0IsQ0FBQyxJQUFTO1FBQ3JDLGVBQWU7UUFDZixJQUFJLEdBQUcsR0FBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM5QztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLHdCQUF3QixDQUFDLElBQVM7UUFDdkMsZUFBZTtRQUNmLElBQUksR0FBRyxHQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFWSxhQUFhOztZQUN4QixNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUV6QixNQUFNLENBQUMsR0FBUSxJQUFJLENBQUMsU0FBUztpQkFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ25DLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM5QyxNQUFNLElBQUksR0FBUSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyQyxNQUFNLElBQUksR0FBUTtnQkFDaEIsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLFdBQVcsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJO2dCQUNqRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJO2dCQUN2RSxLQUFLLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztnQkFDeEQsUUFBUSxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7Z0JBQzlELG1CQUFtQixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUc7Z0JBQ3pFLFVBQVUsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJO2dCQUNsRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJO2dCQUN4RSxzQkFBc0IsRUFDcEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSTtnQkFDeEQsZUFBZSxFQUNiLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUs7YUFDNUQsQ0FBQztZQUVGLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0JsZS8yamNpZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE9NUk9OXzJKQ0lFIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiMkpDSUVcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgcGVyaXBlcmFsOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG4gICAgdGhpcy5wZXJpcGVyYWwgPSBudWxsO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluZFdhaXQoKSB7XG4gICAgY29uc3QgdGFyZ2V0OiBhbnkgPSB7XG4gICAgICBsb2NhbE5hbWU6IFwiRW52XCIsXG4gICAgfTtcblxuICAgIHRoaXMucGVyaXBlcmFsID0gYXdhaXQgdGhpcy5vYm5pei5ibGUuc2Nhbi5zdGFydE9uZVdhaXQodGFyZ2V0KTtcblxuICAgIHJldHVybiB0aGlzLnBlcmlwZXJhbDtcbiAgfVxuXG4gIHB1YmxpYyBvbXJvbl91dWlkKHV1aWQ6IGFueSkge1xuICAgIHJldHVybiBgMEM0QyR7dXVpZH0tNzcwMC00NkY0LUFBOTZENUU5NzRFMzJBNTRgO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGNvbm5lY3RXYWl0KCkge1xuICAgIGlmICghdGhpcy5wZXJpcGVyYWwpIHtcbiAgICAgIGF3YWl0IHRoaXMuZmluZFdhaXQoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnBlcmlwZXJhbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiMkpDSUUgbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucGVyaXBlcmFsLmNvbm5lY3RlZCkge1xuICAgICAgYXdhaXQgdGhpcy5wZXJpcGVyYWwuY29ubmVjdFdhaXQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGlzY29ubmVjdFdhaXQoKSB7XG4gICAgaWYgKHRoaXMucGVyaXBlcmFsICYmIHRoaXMucGVyaXBlcmFsLmNvbm5lY3RlZCkge1xuICAgICAgdGhpcy5wZXJpcGVyYWwuZGlzY29ubmVjdFdhaXQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2lnbmVkTnVtYmVyRnJvbUJpbmFyeShkYXRhOiBhbnkpIHtcbiAgICAvLyBsaXR0bGUgYWRpYW5cbiAgICBsZXQgdmFsOiBhbnkgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gJiAweDdmO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YWwgPSB2YWwgKiAyNTYgKyBkYXRhW2ldO1xuICAgIH1cbiAgICBpZiAoKGRhdGFbZGF0YS5sZW5ndGggLSAxXSAmIDB4ODApICE9PSAwKSB7XG4gICAgICB2YWwgPSB2YWwgLSBNYXRoLnBvdygyLCBkYXRhLmxlbmd0aCAqIDggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIHB1YmxpYyB1bnNpZ25lZE51bWJlckZyb21CaW5hcnkoZGF0YTogYW55KSB7XG4gICAgLy8gbGl0dGxlIGFkaWFuXG4gICAgbGV0IHZhbDogYW55ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YWwgPSB2YWwgKiAyNTYgKyBkYXRhW2ldO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldExhdGVzdERhdGEoKSB7XG4gICAgYXdhaXQgdGhpcy5jb25uZWN0V2FpdCgpO1xuXG4gICAgY29uc3QgYzogYW55ID0gdGhpcy5wZXJpcGVyYWxcbiAgICAgIC5nZXRTZXJ2aWNlKHRoaXMub21yb25fdXVpZChcIjMwMDBcIikpXG4gICAgICAuZ2V0Q2hhcmFjdGVyaXN0aWModGhpcy5vbXJvbl91dWlkKFwiMzAwMVwiKSk7XG4gICAgY29uc3QgZGF0YTogYW55ID0gYXdhaXQgYy5yZWFkV2FpdCgpO1xuICAgIGNvbnN0IGpzb246IGFueSA9IHtcbiAgICAgIHJvd19udW1iZXI6IGRhdGFbMF0sXG4gICAgICB0ZW1wZXJhdHVyZTogdGhpcy5zaWduZWROdW1iZXJGcm9tQmluYXJ5KGRhdGEuc2xpY2UoMSwgMykpICogMC4wMSxcbiAgICAgIHJlbGF0aXZlX2h1bWlkaXR5OiB0aGlzLnNpZ25lZE51bWJlckZyb21CaW5hcnkoZGF0YS5zbGljZSgzLCA1KSkgKiAwLjAxLFxuICAgICAgbGlnaHQ6IHRoaXMuc2lnbmVkTnVtYmVyRnJvbUJpbmFyeShkYXRhLnNsaWNlKDUsIDcpKSAqIDEsXG4gICAgICB1dl9pbmRleDogdGhpcy5zaWduZWROdW1iZXJGcm9tQmluYXJ5KGRhdGEuc2xpY2UoNywgOSkpICogMC4wMSxcbiAgICAgIGJhcm9tZXRyaWNfcHJlc3N1cmU6IHRoaXMuc2lnbmVkTnVtYmVyRnJvbUJpbmFyeShkYXRhLnNsaWNlKDksIDExKSkgKiAwLjEsXG4gICAgICBzb3VkX25vaXNlOiB0aGlzLnNpZ25lZE51bWJlckZyb21CaW5hcnkoZGF0YS5zbGljZSgxMSwgMTMpKSAqIDAuMDEsXG4gICAgICBkaXNjb21mb3J0X2luZGV4OiB0aGlzLnNpZ25lZE51bWJlckZyb21CaW5hcnkoZGF0YS5zbGljZSgxMywgMTUpKSAqIDAuMDEsXG4gICAgICBoZWF0c3Ryb2tlX3Jpc2tfZmFjdG9yOlxuICAgICAgICB0aGlzLnNpZ25lZE51bWJlckZyb21CaW5hcnkoZGF0YS5zbGljZSgxNSwgMTcpKSAqIDAuMDEsXG4gICAgICBiYXR0ZXJ5X3ZvbHRhZ2U6XG4gICAgICAgIHRoaXMudW5zaWduZWROdW1iZXJGcm9tQmluYXJ5KGRhdGEuc2xpY2UoMTcsIDE5KSkgKiAwLjAwMSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT01ST05fMkpDSUU7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Camera/ArduCAMMini/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ArduCAMMini {
    constructor() {
        this.keys = [
            "cs",
            "mosi",
            "miso",
            "sclk",
            "gnd",
            "vcc",
            "sda",
            "scl",
            "spi",
            "i2c",
            "spi_frequency",
            "spi_drive",
            "module_version",
        ];
        this.requiredKeys = ["cs"];
        this.ioKeys = this.keys;
        this.displayName = "Cam";
        this.regs = {
            ARDUCHIP_TEST1: 0x00,
            ARDUCHIP_MODE: 0x02,
            ARDUCHIP_FIFO: 0x04,
            BURST_FIFO_READ: 0x3c,
            ARDUCHIP_TRIG: 0x41,
            FIFO_SIZE1: 0x42,
            FIFO_SIZE2: 0x43,
            FIFO_SIZE3: 0x44,
        };
        this.configs = {
            OV2640_JPEG_INIT: [
                [0xff, 0x00],
                [0x2c, 0xff],
                [0x2e, 0xdf],
                [0xff, 0x01],
                [0x3c, 0x32],
                [0x11, 0x04],
                [0x09, 0x02],
                [0x04, 0x28],
                [0x13, 0xe5],
                [0x14, 0x48],
                [0x2c, 0x0c],
                [0x33, 0x78],
                [0x3a, 0x33],
                [0x3b, 0xfb],
                [0x3e, 0x00],
                [0x43, 0x11],
                [0x16, 0x10],
                [0x39, 0x92],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0x48, 0x00],
                [0x5b, 0x00],
                [0x42, 0x03],
                [0x4a, 0x81],
                [0x21, 0x99],
                [0x24, 0x40],
                [0x25, 0x38],
                [0x26, 0x82],
                [0x5c, 0x00],
                [0x63, 0x00],
                [0x61, 0x70],
                [0x62, 0x80],
                [0x7c, 0x05],
                [0x20, 0x80],
                [0x28, 0x30],
                [0x6c, 0x00],
                [0x6d, 0x80],
                [0x6e, 0x00],
                [0x70, 0x02],
                [0x71, 0x94],
                [0x73, 0xc1],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x37, 0xc0],
                [0x4f, 0x60],
                [0x50, 0xa8],
                [0x6d, 0x00],
                [0x3d, 0x38],
                [0x46, 0x3f],
                [0x4f, 0x60],
                [0x0c, 0x3c],
                [0xff, 0x00],
                [0xe5, 0x7f],
                [0xf9, 0xc0],
                [0x41, 0x24],
                [0xe0, 0x14],
                [0x76, 0xff],
                [0x33, 0xa0],
                [0x42, 0x20],
                [0x43, 0x18],
                [0x4c, 0x00],
                [0x87, 0xd5],
                [0x88, 0x3f],
                [0xd7, 0x03],
                [0xd9, 0x10],
                [0xd3, 0x82],
                [0xc8, 0x08],
                [0xc9, 0x80],
                [0x7c, 0x00],
                [0x7d, 0x00],
                [0x7c, 0x03],
                [0x7d, 0x48],
                [0x7d, 0x48],
                [0x7c, 0x08],
                [0x7d, 0x20],
                [0x7d, 0x10],
                [0x7d, 0x0e],
                [0x90, 0x00],
                [0x91, 0x0e],
                [0x91, 0x1a],
                [0x91, 0x31],
                [0x91, 0x5a],
                [0x91, 0x69],
                [0x91, 0x75],
                [0x91, 0x7e],
                [0x91, 0x88],
                [0x91, 0x8f],
                [0x91, 0x96],
                [0x91, 0xa3],
                [0x91, 0xaf],
                [0x91, 0xc4],
                [0x91, 0xd7],
                [0x91, 0xe8],
                [0x91, 0x20],
                [0x92, 0x00],
                [0x93, 0x06],
                [0x93, 0xe3],
                [0x93, 0x05],
                [0x93, 0x05],
                [0x93, 0x00],
                [0x93, 0x04],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x93, 0x00],
                [0x96, 0x00],
                [0x97, 0x08],
                [0x97, 0x19],
                [0x97, 0x02],
                [0x97, 0x0c],
                [0x97, 0x24],
                [0x97, 0x30],
                [0x97, 0x28],
                [0x97, 0x26],
                [0x97, 0x02],
                [0x97, 0x98],
                [0x97, 0x80],
                [0x97, 0x00],
                [0x97, 0x00],
                [0xc3, 0xed],
                [0xa4, 0x00],
                [0xa8, 0x00],
                [0xc5, 0x11],
                [0xc6, 0x51],
                [0xbf, 0x80],
                [0xc7, 0x10],
                [0xb6, 0x66],
                [0xb8, 0xa5],
                [0xb7, 0x64],
                [0xb9, 0x7c],
                [0xb3, 0xaf],
                [0xb4, 0x97],
                [0xb5, 0xff],
                [0xb0, 0xc5],
                [0xb1, 0x94],
                [0xb2, 0x0f],
                [0xc4, 0x5c],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x5a, 0xc8],
                [0x5b, 0x96],
                [0x5c, 0x00],
                [0xd3, 0x00],
                [0xc3, 0xed],
                [0x7f, 0x00],
                [0xda, 0x00],
                [0xe5, 0x1f],
                [0xe1, 0x67],
                [0xe0, 0x00],
                [0xdd, 0x7f],
                [0x05, 0x00],
                //
                [0x12, 0x40],
                [0xd3, 0x04],
                [0xc0, 0x16],
                [0xc1, 0x12],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x2c],
                [0x52, 0x24],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x5a, 0x2c],
                [0x5b, 0x24],
                [0x5c, 0x00],
                [0xff, 0xff],
            ],
            OV2640_YUV422: [
                [0xff, 0x00],
                [0x05, 0x00],
                [0xda, 0x10],
                [0xd7, 0x03],
                [0xdf, 0x00],
                [0x33, 0x80],
                [0x3c, 0x40],
                [0xe1, 0x77],
                [0x00, 0x00],
                [0xff, 0xff],
            ],
            OV2640_JPEG: [
                [0xe0, 0x14],
                [0xe1, 0x77],
                [0xe5, 0x1f],
                [0xd7, 0x03],
                [0xda, 0x10],
                [0xe0, 0x00],
                [0xff, 0x01],
                [0x04, 0x08],
                [0xff, 0xff],
            ],
            OV2640_160x120_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x92],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x28],
                [0x5b, 0x1e],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_176x144_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x92],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x2c],
                [0x5b, 0x24],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_320x240_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x50],
                [0x5b, 0x3c],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_352x288_JPEG: [
                [0xff, 0x01],
                [0x12, 0x40],
                [0x17, 0x11],
                [0x18, 0x43],
                [0x19, 0x00],
                [0x1a, 0x4b],
                [0x32, 0x09],
                [0x4f, 0xca],
                [0x50, 0xa8],
                [0x5a, 0x23],
                [0x6d, 0x00],
                [0x39, 0x12],
                [0x35, 0xda],
                [0x22, 0x1a],
                [0x37, 0xc3],
                [0x23, 0x00],
                [0x34, 0xc0],
                [0x36, 0x1a],
                [0x06, 0x88],
                [0x07, 0xc0],
                [0x0d, 0x87],
                [0x0e, 0x41],
                [0x4c, 0x00],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0x64],
                [0xc1, 0x4b],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0xc8],
                [0x52, 0x96],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x00],
                [0x57, 0x00],
                [0x5a, 0x58],
                [0x5b, 0x48],
                [0x5c, 0x00],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_640x480_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x89],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0xa0],
                [0x5b, 0x78],
                [0x5c, 0x00],
                [0xd3, 0x04],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_800x600_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x35],
                [0x50, 0x89],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0xc8],
                [0x5b, 0x96],
                [0x5c, 0x00],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_1024x768_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x8c, 0x00],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x5a, 0x00],
                [0x5b, 0xc0],
                [0x5c, 0x01],
                [0xd3, 0x02],
                [0xff, 0xff],
            ],
            OV2640_1280x960_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0x40],
                [0x5b, 0xf0],
                [0x5c, 0x01],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
            OV2640_1600x1200_JPEG: [
                [0xff, 0x01],
                [0x11, 0x01],
                [0x12, 0x00],
                [0x17, 0x11],
                [0x18, 0x75],
                [0x32, 0x36],
                [0x19, 0x01],
                [0x1a, 0x97],
                [0x03, 0x0f],
                [0x37, 0x40],
                [0x4f, 0xbb],
                [0x50, 0x9c],
                [0x5a, 0x57],
                [0x6d, 0x80],
                [0x3d, 0x34],
                [0x39, 0x02],
                [0x35, 0x88],
                [0x22, 0x0a],
                [0x37, 0x40],
                [0x34, 0xa0],
                [0x06, 0x02],
                [0x0d, 0xb7],
                [0x0e, 0x01],
                [0xff, 0x00],
                [0xe0, 0x04],
                [0xc0, 0xc8],
                [0xc1, 0x96],
                [0x86, 0x3d],
                [0x50, 0x00],
                [0x51, 0x90],
                [0x52, 0x2c],
                [0x53, 0x00],
                [0x54, 0x00],
                [0x55, 0x88],
                [0x57, 0x00],
                [0x5a, 0x90],
                [0x5b, 0x2c],
                [0x5c, 0x05],
                [0xd3, 0x02],
                [0xe0, 0x00],
                [0xff, 0xff],
            ],
        };
    }
    static info() {
        return {
            name: "ArduCAMMini",
        };
    }
    wired(obniz) {
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_cs = obniz.getIO(this.params.cs);
        this.io_cs.output(true);
        obniz.wait(100);
        this.sensor_addr = 0x30; // i2c
        this.params.module_version = this.params.module_version || 0;
        this.params.mode = this.params.mode || "master";
        this.params.drive = this.params.spi_drive || "3v";
        this.params.frequency = this.params.spi_frequency || 4 * 1000 * 1000;
        this.params.clk = this.params.sclk;
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.params.sda = this.params.sda;
        this.params.scl = this.params.scl;
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = "master";
        this.params.pull = "5v";
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    spi_write(addr, byteData) {
        const data = [];
        data.push(addr);
        data.push(byteData);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    spi_readWait(addr) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = [];
            data.push(addr);
            data.push(0x00);
            this.io_cs.output(false);
            const recv = yield this.spi.writeWait(data);
            this.io_cs.output(true);
            return recv[1];
        });
    }
    i2c_byte_write(addr, byteData) {
        this.i2c.write(this.sensor_addr, [addr, byteData]);
    }
    i2c_regs_write(regs) {
        for (let i = 0; i < regs.length; i++) {
            this.i2c.write(this.sensor_addr, regs[i]);
        }
    }
    spi_write_reg(addr, byteData) {
        this.spi_write(addr | 0x80, byteData);
    }
    spi_read_regWait(addr) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.spi_readWait(addr & 0x7f);
        });
    }
    spi_pingpongWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const testVal = 0x55;
            this.spi_write_reg(this.regs.ARDUCHIP_TEST1, testVal);
            const val = yield this.spi_read_regWait(this.regs.ARDUCHIP_TEST1);
            if (val !== testVal) {
                throw new Error("spi bus fail");
            }
        });
    }
    setMode(mode) {
        const modes = {
            MCU2LCD: 0x00,
            CAM2LCD: 0x01,
            LCD2MCU: 0x02,
        };
        if (typeof modes[mode] !== "number") {
            throw new Error("unknown mode. options are " + modes);
        }
        this.spi_write_reg(this.regs.ARDUCHIP_MODE, modes[mode]);
    }
    getChipIdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.sensor_addr, [0x0a]);
            const val0 = yield this.i2c.readWait(this.sensor_addr, 1);
            this.i2c.write(this.sensor_addr, [0x0b]);
            const val1 = yield this.i2c.readWait(this.sensor_addr, 1);
            return (val0[0] << 8) + val1[0];
        });
    }
    init() {
        this.i2c_byte_write(0xff, 0x01);
        this.i2c_byte_write(0x12, 0x80);
        this.obniz.wait(100);
        this.i2c_regs_write(this.configs.OV2640_JPEG_INIT);
        this.i2c_regs_write(this.configs.OV2640_YUV422);
        this.i2c_regs_write(this.configs.OV2640_JPEG);
        this.i2c_byte_write(0xff, 0x01);
        this.i2c_byte_write(0x15, 0x00);
        this.setSize("320x240");
    }
    startupWait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.spi_pingpongWait();
            this.setMode("MCU2LCD");
            const chipid = yield this.getChipIdWait();
            if (chipid !== 0x2642 && chipid !== 0x2641) {
                throw new Error("unknown chip " + chipid);
            }
            this.init();
        });
    }
    takeWait(size) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof size === "string" && this._size !== size) {
                this.setSize(size);
                this.obniz.wait(1000);
            }
            this.flushFIFO();
            this.flushFIFO();
            this.startCapture();
            while (true) {
                if (yield this.isCaptureDoneWait()) {
                    break;
                }
            }
            return yield this.readFIFOWait();
        });
    }
    setSize(string) {
        if (this._size === string) {
            return;
        }
        const map = {
            "160x120": this.configs.OV2640_160x120_JPEG,
            "176x144": this.configs.OV2640_176x144_JPEG,
            "320x240": this.configs.OV2640_320x240_JPEG,
            "352x288": this.configs.OV2640_352x288_JPEG,
            "640x480": this.configs.OV2640_640x480_JPEG,
            "800x600": this.configs.OV2640_800x600_JPEG,
            "1024x768": this.configs.OV2640_1024x768_JPEG,
            "1280x960": this.configs.OV2640_1280x960_JPEG,
            "1600x1200": this.configs.OV2640_1600x1200_JPEG,
        };
        if (map[string]) {
            this._size = string;
            this.i2c_regs_write(map[string]);
        }
        else {
            throw new Error("unsupported size options are " + Object.keys(map));
        }
    }
    updateFIFO(data) {
        //  FIFO_CLEAR_MASK    		0x01
        //  FIFO_START_MASK    		0x02
        //  FIFO_RDPTR_RST_MASK     0x10
        //  FIFO_WRPTR_RST_MASK     0x20
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, data);
    }
    flushFIFO() {
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x01);
    }
    readFIFOLengthWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const len1 = yield this.spi_read_regWait(this.regs.FIFO_SIZE1);
            const len2 = yield this.spi_read_regWait(this.regs.FIFO_SIZE2);
            const len3 = (yield this.spi_read_regWait(this.regs.FIFO_SIZE3)) & 0x07;
            return ((len3 << 16) | (len2 << 8) | len1) & 0x07ffff;
        });
    }
    startCapture() {
        this.spi_write_reg(this.regs.ARDUCHIP_FIFO, 0x02);
    }
    isCaptureDoneWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const CAP_DONE_MASK = 0x08;
            const val = yield this.spi_read_regWait(this.regs.ARDUCHIP_TRIG);
            return val & CAP_DONE_MASK ? true : false;
        });
    }
    readFIFOWait() {
        return __awaiter(this, void 0, void 0, function* () {
            // get length of image data
            const length = yield this.readFIFOLengthWait();
            // start bust
            this.io_cs.output(false);
            this.spi.write([this.regs.BURST_FIFO_READ]);
            if (this.params.module_version === 0) {
                this.spi.write([0xff]); // dummy read
            }
            const buf = [];
            while (buf.length < length) {
                let mustRead = length - buf.length;
                if (mustRead > 1024) {
                    mustRead = 1024;
                }
                const arr = new Array(mustRead);
                arr.fill(0);
                const sliced = yield this.spi.writeWait(arr);
                buf.push(...sliced);
            }
            // end burst
            this.io_cs.output(true);
            return buf;
        });
    }
    arrayToBase64(array) {
        return Buffer.from(array).toString("base64");
    }
}
exports.default = ArduCAMMini;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/Camera/JpegSerialCam/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class JpegSerialCam {
    constructor() {
        this.keys = ["vcc", "cam_tx", "cam_rx", "gnd"];
        this.requiredKeys = ["cam_tx", "cam_rx"];
        this.ioKeys = this.keys;
        this.displayName = "Jcam";
        this.displayIoNames = { cam_tx: "camTx", cam_rx: "camRx" };
    }
    static info() {
        return {
            name: "JpegSerialCam",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.my_tx = this.params.cam_rx;
        this.my_rx = this.params.cam_tx;
        this.obniz.getIO(this.my_tx).drive("3v");
        this.uart = this.obniz.getFreeUart();
    }
    _drainUntil(uart, search, recv) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!recv) {
                recv = [];
            }
            while (true) {
                const readed = uart.readBytes();
                recv = recv.concat(readed);
                const tail = this._seekTail(search, recv);
                if (tail >= 0) {
                    recv.splice(0, tail);
                    return recv;
                }
                yield this.obniz.wait(10);
            }
        });
    }
    _seekTail(search, src) {
        let f = 0;
        for (let i = 0; i < src.length; i++) {
            if (src[i] === search[f]) {
                f++;
                if (f === search.length) {
                    return i + 1;
                }
            }
            else {
                f = 0;
            }
        }
        return -1;
    }
    arrayToBase64(array) {
        return Buffer.from(array).toString("base64");
    }
    startWait(obj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!obj) {
                obj = {};
            }
            this.uart.start({
                tx: this.my_tx,
                rx: this.my_rx,
                baud: obj.baud || 38400,
            });
            this.obniz.display.setPinName(this.my_tx, "JpegSerialCam", "camRx");
            this.obniz.display.setPinName(this.my_rx, "JpegSerialCam", "camTx");
            yield this.obniz.wait(2500);
        });
    }
    resetwait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.uart.send([0x56, 0x00, 0x26, 0x00]);
            yield this._drainUntil(this.uart, [0x76, 0x00, 0x26, 0x00]);
            yield this.obniz.wait(2500);
        });
    }
    setSizeWait(resolution) {
        return __awaiter(this, void 0, void 0, function* () {
            let val;
            if (resolution === "640x480") {
                val = 0x00;
            }
            else if (resolution === "320x240") {
                val = 0x11;
            }
            else if (resolution === "160x120") {
                val = 0x22;
            }
            else {
                throw new Error("unsupported size");
            }
            this.uart.send([0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, val]);
            yield this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);
            yield this.resetwait();
        });
    }
    setCompressibilityWait(compress) {
        return __awaiter(this, void 0, void 0, function* () {
            const val = Math.floor((compress / 100) * 0xff);
            this.uart.send([0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, val]);
            yield this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);
            yield this.resetwait();
        });
    }
    setBaudWait(baud) {
        return __awaiter(this, void 0, void 0, function* () {
            let val;
            switch (baud) {
                case 9600:
                    val = [0xae, 0xc8];
                    break;
                case 19200:
                    val = [0x56, 0xe4];
                    break;
                case 38400:
                    val = [0x2a, 0xf2];
                    break;
                case 57600:
                    val = [0x1c, 0x4c];
                    break;
                case 115200:
                    val = [0x0d, 0xa6];
                    break;
                default:
                    throw new Error("invalid baud rate");
            }
            this.uart.send([
                0x56,
                0x00,
                0x31,
                0x06,
                0x04,
                0x02,
                0x00,
                0x08,
                val[0],
                val[1],
            ]);
            yield this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);
            // await this.obniz.wait(1000);
            yield this.startWait({
                baud,
            });
        });
    }
    takeWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const uart = this.uart;
            // console.log("stop a photo")
            uart.send([0x56, 0x00, 0x36, 0x01, 0x02]);
            yield this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);
            // console.log("take a photo")
            uart.send([0x56, 0x00, 0x36, 0x01, 0x00]);
            yield this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);
            // console.log("read length")
            uart.send([0x56, 0x00, 0x34, 0x01, 0x00]); // read length of image data
            let recv = yield this._drainUntil(uart, [
                0x76,
                0x00,
                0x34,
                0x00,
                0x04,
                0x00,
                0x00,
            ]); // ack
            let XX;
            let YY;
            while (true) {
                const readed = uart.readBytes();
                // console.log(recv);
                recv = recv.concat(readed);
                if (recv.length >= 2) {
                    XX = recv[0];
                    YY = recv[1];
                    break;
                }
                yield this.obniz.wait(1000);
            }
            const databytes = XX * 256 + YY;
            // console.log("image: " + databytes + " Bytes");
            // const high = (databytes >> 8) & 0xff;
            // const low = databytes & 0xff;
            // console.log("start reading image")
            uart.send([
                0x56,
                0x00,
                0x32,
                0x0c,
                0x00,
                0x0a,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                XX,
                YY,
                0x00,
                0xff,
            ]);
            recv = yield this._drainUntil(uart, [0x76, 0x00, 0x32, 0x00, 0x00]);
            // console.log("reading...");
            while (true) {
                const readed = uart.readBytes();
                recv = recv.concat(readed);
                // console.log(readed.length);
                if (recv.length >= databytes) {
                    break;
                }
                yield this.obniz.wait(10);
            }
            // console.log("done");
            recv = recv.splice(0, databytes); // remove tail
            recv = recv.concat([0xff, 0xd9]);
            return recv;
        });
    }
}
exports.default = JpegSerialCam;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./dist/src/parts/ColorSensor/PT550/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class PT550 {
    constructor() {
        this.keys = ["signal", "vcc", "gnd"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "PT550",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.signal.getWait();
        });
    }
}
exports.default = PT550;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Db2xvclNlbnNvci9QVDU1MC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sS0FBSztJQWVUO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFoQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQztJQUNKLENBQUM7SUFjTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxPQUFPOztZQUNsQixPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQyxDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLEtBQUssQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvQ29sb3JTZW5zb3IvUFQ1NTAvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQVDU1MCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIlBUNTUwXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIHNpZ25hbDogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJzaWduYWxcIiwgXCJ2Y2NcIiwgXCJnbmRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLnNpZ25hbCA9IHRoaXMub2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuc2lnbmFsKTtcbiAgICB0aGlzLnNpZ25hbC5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgaWYgKHRoaXMub25jaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5vbmNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0V2FpdCgpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zaWduYWwuZ2V0V2FpdCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBUNTUwO1xuIl19


/***/ }),

/***/ "./dist/src/parts/ColorSensor/S11059/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class S11059 {
    constructor() {
        this.keys = ["vcc", "sda", "scl", "i2c", "gnd"];
        this.requiredKeys = [];
        this.address = 0x2a;
        this.regAdrs = {};
        this.regAdrs.ctrl = 0x00;
        this.regAdrs.manualTiming = 0x01;
        this.regAdrs.sensorRed = 0x03;
    }
    static info() {
        return {
            name: "S11059",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "3v");
        this.obniz.wait(100);
        this.params.clock = 100000;
        this.params.pull = "3v";
        this.params.mode = "master";
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(100);
    }
    init(gain, intTime) {
        this.i2c.write(this.address, [this.regAdrs.ctrl, 0x80]); // Reset
        const val = (gain << 3) | intTime;
        this.i2c.write(this.address, [this.regAdrs.ctrl, val]); // Set gain,interger time
    }
    getVal() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [this.regAdrs.sensorRed]);
            const ret = yield this.i2c.readWait(this.address, 8);
            const level = [0, 0, 0, 0];
            level[0] = (ret[0] << 8) | ret[1];
            level[1] = (ret[2] << 8) | ret[3];
            level[2] = (ret[4] << 8) | ret[5];
            level[3] = (ret[6] << 8) | ret[7];
            return level;
        });
    }
}
exports.default = S11059;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Db2xvclNlbnNvci9TMTEwNTkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE1BQU07SUFnQlY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUF2Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFxQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLElBQUksQ0FBQyxJQUFTLEVBQUUsT0FBWTtRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7UUFDakUsTUFBTSxHQUFHLEdBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCO0lBQ25GLENBQUM7SUFFWSxNQUFNOztZQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sR0FBRyxHQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxNQUFNLEtBQUssR0FBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvQ29sb3JTZW5zb3IvUzExMDU5L2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUzExMDU5IHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiUzExMDU5XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIGFkZHJlc3M6IGFueTtcbiAgcHVibGljIHJlZ0FkcnM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGkyYzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInZjY1wiLCBcInNkYVwiLCBcInNjbFwiLCBcImkyY1wiLCBcImduZFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuXG4gICAgdGhpcy5hZGRyZXNzID0gMHgyYTtcbiAgICB0aGlzLnJlZ0FkcnMgPSB7fTtcbiAgICB0aGlzLnJlZ0FkcnMuY3RybCA9IDB4MDA7XG4gICAgdGhpcy5yZWdBZHJzLm1hbnVhbFRpbWluZyA9IDB4MDE7XG4gICAgdGhpcy5yZWdBZHJzLnNlbnNvclJlZCA9IDB4MDM7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiM3ZcIik7XG4gICAgdGhpcy5vYm5pei53YWl0KDEwMCk7XG5cbiAgICB0aGlzLnBhcmFtcy5jbG9jayA9IDEwMDAwMDtcbiAgICB0aGlzLnBhcmFtcy5wdWxsID0gXCIzdlwiO1xuICAgIHRoaXMucGFyYW1zLm1vZGUgPSBcIm1hc3RlclwiO1xuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5vYm5pei53YWl0KDEwMCk7XG4gIH1cblxuICBwdWJsaWMgaW5pdChnYWluOiBhbnksIGludFRpbWU6IGFueSkge1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5jdHJsLCAweDgwXSk7IC8vIFJlc2V0XG4gICAgY29uc3QgdmFsOiBhbnkgPSAoZ2FpbiA8PCAzKSB8IGludFRpbWU7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLmN0cmwsIHZhbF0pOyAvLyBTZXQgZ2FpbixpbnRlcmdlciB0aW1lXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VmFsKCkge1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5zZW5zb3JSZWRdKTtcbiAgICBjb25zdCByZXQ6IGFueSA9IGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgOCk7XG4gICAgY29uc3QgbGV2ZWw6IGFueSA9IFswLCAwLCAwLCAwXTtcbiAgICBsZXZlbFswXSA9IChyZXRbMF0gPDwgOCkgfCByZXRbMV07XG4gICAgbGV2ZWxbMV0gPSAocmV0WzJdIDw8IDgpIHwgcmV0WzNdO1xuICAgIGxldmVsWzJdID0gKHJldFs0XSA8PCA4KSB8IHJldFs1XTtcbiAgICBsZXZlbFszXSA9IChyZXRbNl0gPDwgOCkgfCByZXRbN107XG4gICAgcmV0dXJuIGxldmVsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFMxMTA1OTtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLED {
    constructor() {
        this.keys = [
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "dp",
            "common",
            "commonType",
        ];
        this.requiredKeys = ["a", "b", "c", "d", "e", "f", "g"];
        this.digits = [
            0x3f,
            0x06,
            0x5b,
            0x4f,
            0x66,
            0x6d,
            0x7d,
            0x07,
            0x7f,
            0x6f,
            0x6f,
        ];
        this.displayIoNames = {
            a: "a",
            b: "b",
            c: "c",
            d: "d",
            e: "e",
            f: "f",
            g: "g",
            dp: "dp",
            common: "com",
        };
    }
    static info() {
        return {
            name: "7SegmentLED",
        };
    }
    wired(obniz) {
        function getIO(io) {
            if (io && typeof io === "object") {
                if (typeof io.output === "function") {
                    return io;
                }
            }
            return obniz.getIO(io);
        }
        function isValidIO(io) {
            if (io && typeof io === "object") {
                if (typeof io.output === "function") {
                    return true;
                }
            }
            return obniz.isValidIO(io);
        }
        this.obniz = obniz;
        this.ios = [];
        this.ios.push(getIO(this.params.a));
        this.ios.push(getIO(this.params.b));
        this.ios.push(getIO(this.params.c));
        this.ios.push(getIO(this.params.d));
        this.ios.push(getIO(this.params.e));
        this.ios.push(getIO(this.params.f));
        this.ios.push(getIO(this.params.g));
        this.isCathodeCommon = this.params.commonType === "anode" ? false : true;
        for (let i = 0; i < this.ios.length; i++) {
            this.ios[i].output(this.isCathodeCommon ? false : true);
        }
        if (isValidIO(this.params.dp)) {
            this.dp = getIO(this.params.dp);
            this.dp.output(false);
        }
        if (isValidIO(this.params.common)) {
            this.common = getIO(this.params.common);
            this.on();
        }
    }
    print(data) {
        if (typeof data === "number") {
            data = Math.floor(data);
            data = data % 10;
            for (let i = 0; i < 7; i++) {
                if (this.ios[i]) {
                    let val = this.digits[data] & (1 << i) ? true : false;
                    if (!this.isCathodeCommon) {
                        val = !val;
                    }
                    this.ios[i].output(val);
                }
            }
            this.on();
        }
    }
    printRaw(data) {
        if (typeof data === "number") {
            for (let i = 0; i < 7; i++) {
                if (this.ios[i]) {
                    let val = data & (1 << i) ? true : false;
                    if (!this.isCathodeCommon) {
                        val = !val;
                    }
                    this.ios[i].output(val);
                }
            }
            this.on();
        }
    }
    dpState(show) {
        if (this.dp) {
            this.dp.output(this.isCathodeCommon ? show : !show);
        }
    }
    on() {
        this.common.output(this.isCathodeCommon ? false : true);
    }
    off() {
        this.common.output(this.isCathodeCommon ? true : false);
    }
}
exports.default = _7SegmentLED;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLEDArray/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLEDArray {
    constructor() {
        this.identifier = "" + new Date().getTime();
        this.keys = ["segments"];
        this.requiredKeys = this.keys;
    }
    static info() {
        return {
            name: "7SegmentLEDArray",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.segments = this.params.segments;
    }
    print(data) {
        if (typeof data === "number") {
            data = Math.floor(data);
            const print = (index) => {
                let val = data;
                for (let i = 0; i < this.segments.length; i++) {
                    if (index === i) {
                        this.segments[i].print(val % 10);
                    }
                    else {
                        this.segments[i].off();
                    }
                    val = val / 10;
                }
            };
            const animations = [];
            for (let i = 0; i < this.segments.length; i++) {
                animations.push({
                    duration: 3,
                    state: print,
                });
            }
            this.obniz.io.animation(this.identifier, "loop", animations);
        }
    }
    on() {
        this.obniz.io.animation(this.identifier, "resume");
    }
    off() {
        this.obniz.io.animation(this.identifier, "pause");
        for (let i = 0; i < this.segments.length; i++) {
            this.segments[i].off();
        }
    }
}
exports.default = _7SegmentLEDArray;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9EaXNwbGF5LzdTZWdtZW50TEVEQXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLGlCQUFpQjtJQWVyQjtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFNUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsa0JBQWtCO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBZ0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFTO1FBQ3BCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzVCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXhCLE1BQU0sS0FBSyxHQUFRLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksR0FBRyxHQUFRLElBQUksQ0FBQztnQkFFcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM3QyxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7d0JBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO3FCQUNsQzt5QkFBTTt3QkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO3FCQUN4QjtvQkFDRCxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztpQkFDaEI7WUFDSCxDQUFDLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBUSxFQUFFLENBQUM7WUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxVQUFVLENBQUMsSUFBSSxDQUFDO29CQUNkLFFBQVEsRUFBRSxDQUFDO29CQUNYLEtBQUssRUFBRSxLQUFLO2lCQUNiLENBQUMsQ0FBQzthQUNKO1lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQztJQUVNLEVBQUU7UUFDUCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sR0FBRztRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsaUJBQWlCLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0Rpc3BsYXkvN1NlZ21lbnRMRURBcnJheS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIF83U2VnbWVudExFREFycmF5IHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiN1NlZ21lbnRMRURBcnJheVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgaWRlbnRpZmllcjogYW55O1xuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgc2VnbWVudHM6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaWRlbnRpZmllciA9IFwiXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHRoaXMua2V5cyA9IFtcInNlZ21lbnRzXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gdGhpcy5rZXlzO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLnNlZ21lbnRzID0gdGhpcy5wYXJhbXMuc2VnbWVudHM7XG4gIH1cblxuICBwdWJsaWMgcHJpbnQoZGF0YTogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcIm51bWJlclwiKSB7XG4gICAgICBkYXRhID0gTWF0aC5mbG9vcihkYXRhKTtcblxuICAgICAgY29uc3QgcHJpbnQ6IGFueSA9IChpbmRleDogYW55KSA9PiB7XG4gICAgICAgIGxldCB2YWw6IGFueSA9IGRhdGE7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSBpKSB7XG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRzW2ldLnByaW50KHZhbCAlIDEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWdtZW50c1tpXS5vZmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsID0gdmFsIC8gMTA7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFuaW1hdGlvbnM6IGFueSA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgICAgZHVyYXRpb246IDMsXG4gICAgICAgICAgc3RhdGU6IHByaW50LFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vYm5pei5pby5hbmltYXRpb24odGhpcy5pZGVudGlmaWVyLCBcImxvb3BcIiwgYW5pbWF0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9uKCkge1xuICAgIHRoaXMub2JuaXouaW8uYW5pbWF0aW9uKHRoaXMuaWRlbnRpZmllciwgXCJyZXN1bWVcIik7XG4gIH1cblxuICBwdWJsaWMgb2ZmKCkge1xuICAgIHRoaXMub2JuaXouaW8uYW5pbWF0aW9uKHRoaXMuaWRlbnRpZmllciwgXCJwYXVzZVwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc2VnbWVudHNbaV0ub2ZmKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IF83U2VnbWVudExFREFycmF5O1xuIl19


/***/ }),

/***/ "./dist/src/parts/Display/7SegmentLED_MAX7219/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class _7SegmentLED_MAX7219 {
    constructor() {
        this.keys = ["vcc", "gnd", "din", "cs", "clk"];
        this.requiredKeys = ["din", "cs", "clk"];
    }
    static info() {
        return {
            name: "7SegmentLED_MAX7219",
        };
    }
    wired(obniz) {
        this.cs = obniz.getIO(this.params.cs);
        // logich high must 3.5v <=
        if (obniz.isValidIO(this.params.vcc)) {
            obniz.getIO(this.params.vcc).output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        // max 10Mhz but motor driver can't
        this.params.frequency = this.params.frequency || 10 * 1000 * 1000;
        this.params.mode = "master";
        this.params.mosi = this.params.din;
        this.params.drive = "3v";
        this.spi = this.obniz.getSpiWithConfig(this.params);
        // reset a onece
        this.cs.output(true);
        this.cs.output(false);
        this.cs.output(true);
    }
    init(numOfDisplay, digits) {
        this.numOfDisp = numOfDisplay;
        this.digits = digits;
        this.writeAllDisp([0x09, 0xff]); // Code B decode for digits 7-0
        this.writeAllDisp([0x0a, 0x05]); // brightness 11/32 0 to f
        this.writeAllDisp([0x0b, digits - 1]);
        this.writeAllDisp([0x0c, 0x01]); // Shutdown to normal operation
        this.writeAllDisp([0x0f, 0x00]);
        this.obniz.wait(10);
    }
    clear(disp) {
        for (let i = 0; i < this.digits; i++) {
            this.writeOneDisp(disp, [i + 1, 0x0f]);
        }
    }
    clearAll() {
        for (let i = 0; i < this.numOfDisp; i++) {
            for (let j = 0; j < this.digits; j++) {
                this.writeAllDisp([j + 1, 0x0f]);
            }
        }
    }
    test() {
        this.writeAllDisp([0x0f, 0x00]); // test command
    }
    brightness(disp, val) {
        this.writeOneDisp(disp, [0x0a, val]); // 0 to 15;
    }
    brightnessAll(val) {
        this.writeAllDisp([0x0a, val]); // 0 to 15;
    }
    writeAllDisp(data) {
        for (let i = 0; i < this.numOfDisp; i++) {
            this.writeOneDisp(i, data);
        }
    }
    writeOneDisp(disp, data) {
        this.cs.output(false);
        for (let i = 0; i < disp; i++) {
            this.spi.write([0x00, 0x00]);
        }
        this.spi.write(data);
        for (let i = 0; i < this.numOfDisp - (disp + 1); i++) {
            this.spi.write([0x00, 0x00]);
        }
        this.cs.output(true);
    }
    setNumber(disp, digit, number, dp) {
        if (digit >= 0 && digit <= this.digits - 1) {
            this.writeOneDisp(disp, [digit + 1, this.encodeBCD(number, dp)]);
        }
    }
    encodeBCD(decimal, dp) {
        let dpreg;
        if (dp === true) {
            dpreg = 0x80;
        }
        else {
            dpreg = 0x00;
        }
        if (decimal >= 0 && decimal <= 9) {
            return decimal | dpreg;
        }
        else if (decimal === "-" || decimal === 10) {
            return 0x0a | dpreg;
        }
        else if (decimal === "e" || decimal === 11) {
            return 0x0b | dpreg;
        }
        else if (decimal === "h" || decimal === 12) {
            return 0x0c | dpreg;
        }
        else if (decimal === "l" || decimal === 13) {
            return 0x0d | dpreg;
        }
        else if (decimal === "p" || decimal === 14) {
            return 0x0e | dpreg;
        }
        else if (decimal === "on") {
            // light all segments
            return 0x88;
        }
        else if (decimal === "off") {
            return 0x0f | dpreg;
        }
        else {
            return 0x0f | dpreg;
        }
    }
}
exports.default = _7SegmentLED_MAX7219;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Display/MatrixLED_MAX7219/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MatrixLED_MAX7219 {
    constructor() {
        this.keys = ["vcc", "gnd", "din", "cs", "clk"];
        this.requiredKeys = ["din", "cs", "clk"];
    }
    static info() {
        return {
            name: "MatrixLED_MAX7219",
        };
    }
    wired(obniz) {
        this.cs = obniz.getIO(this.params.cs);
        // logich high must 3.5v <=
        if (obniz.isValidIO(this.params.vcc)) {
            obniz.getIO(this.params.vcc).output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        // max 10Mhz but motor driver can't
        this.params.frequency = this.params.frequency || 10 * 1000 * 1000;
        this.params.mode = "master";
        this.params.mosi = this.params.din;
        this.params.drive = "3v";
        this.spi = this.obniz.getSpiWithConfig(this.params);
        // reset a onece
        this.cs.output(true);
        this.cs.output(false);
        this.cs.output(true);
    }
    init(width, height) {
        this.width = width;
        this.height = height;
        this.preparevram(width, height);
        this.initModule();
    }
    initModule() {
        this.write([0x09, 0x00]); // Code B decode for digits 3-0 No decode for digits 7-4
        this.write([0x0a, 0x05]); // brightness 9/32 0 to f
        this.write([0x0b, 0x07]); // Display digits 0 1 2 3 4 567
        this.write([0x0c, 0x01]); // Shutdown to normal operation
        this.write([0x0f, 0x00]);
        this.passingCommands();
        this.obniz.wait(10);
    }
    test() {
        this.write([0x0f, 0x00]); // test command
        this.passingCommands();
    }
    passingCommands() {
        for (let i = 8; i < this.width; i += 8) {
            // this needed for number of unit
            this.write([0x00, 0x00]);
        }
    }
    brightness(val) {
        this.write([0x0a, val]); // 0 to 15;
        this.passingCommands();
    }
    preparevram(width, height) {
        this.vram = [];
        for (let i = 0; i < height; i++) {
            const dots = new Array(width / 8);
            for (let ii = 0; ii < dots.length; ii++) {
                dots[ii] = 0x00;
            }
            this.vram.push(dots);
        }
    }
    write(data) {
        this.cs.output(false);
        this.spi.write(data);
        this.cs.output(true);
    }
    writeVram() {
        for (let line_num = 0; line_num < this.height; line_num++) {
            const addr = line_num + 1;
            const line = this.vram[line_num];
            const data = [];
            for (let col = 0; col < line.length; col++) {
                data.push(addr);
                data.push(line[col]);
            }
            this.write(data);
        }
    }
    clear() {
        for (let line_num = 0; line_num < this.height; line_num++) {
            const line = this.vram[line_num];
            for (let col = 0; col < line.length; col++) {
                this.vram[line_num][col] = 0x00;
            }
            this.writeVram();
        }
    }
    draw(ctx) {
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            const index = Math.floor(i / 4);
            const line = Math.floor(index / this.width);
            const col = Math.floor((index - line * this.width) / 8);
            const bits = Math.floor(index - line * this.width) % 8;
            if (bits === 0) {
                this.vram[line][col] = 0x00;
            }
            if (brightness > 0x7f) {
                this.vram[line][col] |= 0x80 >> bits;
            }
        }
        this.writeVram();
    }
}
exports.default = MatrixLED_MAX7219;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Display/ST7735S/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// SainSmart ST7735 1.8" TFT LCD 128x160 pixel
class ST7735S {
    constructor() {
        this.keys = ["sclk", "mosi", "cs", "res", "dc"];
        this.required = [];
    }
    static info() {
        return {
            name: "ST7735S",
        };
    }
    wired(obniz) {
        this.debugprint = false;
        this.obniz = obniz;
        this.io_dc = obniz.getIO(this.params.dc);
        this.io_res = obniz.getIO(this.params.res);
        this.io_cs = obniz.getIO(this.params.cs);
        this.params.frequency = 16 * 1000 * 1000; // 16MHz
        this.params.mode = "master";
        this.params.clk = this.params.sclk;
        this.params.mosi = this.params.mosi;
        this.params.drive = "3v";
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.width = ST7735S_TFTWIDTH;
        this.height = ST7735S_TFTHEIGHT;
        this.rotation = 0;
        this.x_offset = 26;
        this.y_offset = 2;
        this.writeBuffer = []; // 1024bytes bufferring
        this._setPresetColor();
        this.init();
    }
    print_debug(v) {
        if (this.debugprint) {
            console.log("SainSmartTFT18LCD: " + Array.prototype.slice.call(arguments).join(""));
        }
    }
    _deadSleep(waitMsec) {
        const startMsec = new Date();
        while (new Date() - startMsec < waitMsec) {
        }
    }
    _reset() {
        this.io_res.output(false);
        this._deadSleep(10);
        this.io_res.output(true);
        this._deadSleep(10);
    }
    writeCommand(cmd) {
        this.io_dc.output(false);
        this.io_cs.output(false);
        this.spi.write([cmd]);
        this.io_cs.output(true);
    }
    writeData(data) {
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    write(cmd, data) {
        if (data.length === 0) {
            return;
        }
        this.writeCommand(cmd);
        this.writeData(data);
    }
    asyncwait() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.spi.writeWait([0x00]);
        });
    }
    _writeFlush() {
        while (this.writeBuffer.length > 0) {
            if (this.writeBuffer.length > 1024) {
                const data = this.writeBuffer.slice(0, 1024);
                this.writeData(data);
                this.writeBuffer.splice(0, 1024);
            }
            else {
                if (this.writeBuffer.length > 0) {
                    this.writeData(this.writeBuffer);
                }
                this.writeBuffer = [];
            }
        }
    }
    _writeBuffer(data) {
        if (data && data.length > 0) {
            this.writeBuffer = this.writeBuffer.concat(data);
        }
        else {
            this._writeFlush();
        }
    }
    color16(r, g, b) {
        //  1st byte  (r & 0xF8 | g >> 5)
        //  2nd byte  (g & 0xFC << 3 | b >> 3)
        return ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
    }
    complementaryColor16(color) {
        const r = (color & 0xf800) >> 8;
        const g = (color & 0x7e0) >> 3;
        const b = (color & 0x1f) << 3;
        const x = Math.max(r, g, b) + Math.min(r, g, b);
        return this.color16(x - r, x - g, x - b);
    }
    reverseColor16(color) {
        const r = (color & 0xf800) >> 8;
        const g = (color & 0x7e0) >> 3;
        const b = (color & 0x1f) << 3;
        const x = 0xff;
        return this.color16(x - r, x - g, x - b);
    }
    _initG() {
        // initialize display
        this.writeCommand(ST7735_SWRESET);
        this.obniz.wait(150);
        this.writeCommand(ST7735_SLPOUT); // Sleep out & booster on
        this.obniz.wait(500);
        this.write(ST7735_FRMCTR1, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR2, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR3, [0x01, 0x2c, 0x2d, 0x01, 0x2c, 0x2d]);
        this.write(ST7735_INVCTR, [0x07]);
        this.write(ST7735_PWCTR1, [0xa2, 0x02, 0x84]);
        this.write(ST7735_PWCTR2, [0xc5]);
        this.write(ST7735_PWCTR3, [0x0a, 0x00]);
        this.write(ST7735_PWCTR4, [0x8a, 0x2a]);
        this.write(ST7735_PWCTR5, [0x8a, 0xee]);
        this.write(ST7735_VMCTR1, [0x0e]);
        this.writeCommand(ST7735_INVOFF);
        this.write(ST7735_MADCTL, [0xc8]);
        this.write(ST7735_COLMOD, [0x05]);
        this.write(ST7735_CASET, [0x00, 0x00, 0x00, 0x7f]);
        this.write(ST7735_RASET, [0x00, 0x00, 0x00, 0x9f]);
        this.writeCommand(ST7735_INVON);
        this.write(ST7735_GMCTRP1, [
            0x02,
            0x1c,
            0x07,
            0x12,
            0x37,
            0x32,
            0x29,
            0x2d,
            0x29,
            0x25,
            0x2b,
            0x39,
            0x00,
            0x01,
            0x03,
            0x10,
        ]);
        this.write(ST7735_GMCTRN1, [
            0x03,
            0x1d,
            0x07,
            0x06,
            0x2e,
            0x2c,
            0x29,
            0x2d,
            0x2e,
            0x2e,
            0x37,
            0x3f,
            0x00,
            0x00,
            0x02,
            0x10,
        ]);
    }
    init() {
        this._reset();
        this._initG();
        this.setDisplayOn();
        this.setRotation(0);
    }
    setDisplayOn() {
        this.writeCommand(ST7735_DISPON);
    }
    setDisplayOff() {
        this.writeCommand(ST7735_DISPOFF);
    }
    setDisplay(on) {
        if (on === true) {
            this.setDisplayOn();
        }
        else {
            this.setDisplayOff();
        }
    }
    setInversionOn() {
        this.writeCommand(ST7735_INVON);
    }
    setInversionOff() {
        this.writeCommand(ST7735_INVOFF);
    }
    setInversion(inversion) {
        if (inversion === true) {
            this.setInversionOn();
        }
        else {
            this.setInversionOff();
        }
    }
    setRotation(m) {
        const MADCTL_MY = 0x80;
        const MADCTL_MX = 0x40;
        const MADCTL_MV = 0x20;
        // const MADCTL_ML = 0x10;
        const MADCTL_RGB = 0x00; // always RGB, never BGR
        // const MADCTL_MH = 0x04;
        let data;
        this.rotation = m % 4; // can't be higher than 3
        switch (this.rotation) {
            case 0:
                data = [MADCTL_MX | MADCTL_MY | MADCTL_RGB];
                this.width = ST7735S_TFTWIDTH;
                this.height = ST7735S_TFTHEIGHT;
                break;
            case 1:
                data = [MADCTL_MY | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735S_TFTHEIGHT;
                this.height = ST7735S_TFTWIDTH;
                break;
            case 2:
                data = [MADCTL_RGB];
                this.width = ST7735S_TFTWIDTH;
                this.height = ST7735S_TFTHEIGHT;
                break;
            case 3:
                data = [MADCTL_MX | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735S_TFTHEIGHT;
                this.height = ST7735S_TFTWIDTH;
                break;
        }
        this.write(ST7735_MADCTL, data);
        this.setAddrWindow(0, 0, this.width - 1, this.height - 1);
    }
    setAddrWindow(x0, y0, x1, y1) {
        this.print_debug(`setAddrWindow: (x0: ${x0}, y0: ${y0}) - (x1: ${x1}, y1: ${y1})`);
        if (x0 < 0) {
            x0 = 0;
        }
        if (y0 < 0) {
            y0 = 0;
        }
        if (x1 < 0) {
            x1 = 0;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        if (this.rotation === 0 || this.rotation === 2) {
            x0 = x0 + this.x_offset;
            x1 = x1 + this.x_offset;
            y0 = y0 + this.y_offset;
            y1 = y1 + this.y_offset;
        }
        else {
            x0 = x0 + this.y_offset;
            x1 = x1 + this.y_offset;
            y0 = y0 + this.x_offset;
            y1 = y1 + this.x_offset;
        }
        // column addr set
        this.write(ST7735_CASET, [0x00, x0, 0x00, x1]); // XSTART-XEND
        // row addr set
        this.write(ST7735_RASET, [0x00, y0, 0x00, y1]); // YSTART-YEND
        // write to RAM
        this.writeCommand(ST7735_RAMWR);
        this.writeBuffer = [];
    }
    // __swap(a, b) { let t = a; a = b; b = t; }
    fillScreen(color) {
        this.fillRect(0, 0, this.width, this.height, color);
    }
    _color2pixels(w, h, color) {
        return Array.from(new Array(Math.abs(w * h))).map((v, i) => color);
    }
    fillRect(x, y, w, h, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + w - 1 >= this.width) {
            w = this.width - x;
        }
        if (y + h - 1 >= this.height) {
            h = this.height - y;
        }
        const pixels = this._color2pixels(w, h, color);
        this.rawBound16(x, y, w, h, pixels, true);
    }
    drawRect(x, y, w, h, color) {
        this.drawHLine(x, y, w, color);
        this.drawHLine(x, y + h - 1, w, color);
        this.drawVLine(x, y, h, color);
        this.drawVLine(x + w - 1, y, h, color);
    }
    drawCircle(x0, y0, r, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        this.drawPixel(x0, y0 + r, color);
        this.drawPixel(x0, y0 - r, color);
        this.drawPixel(x0 + r, y0, color);
        this.drawPixel(x0 - r, y0, color);
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            this.drawPixel(x0 + x, y0 + y, color);
            this.drawPixel(x0 - x, y0 + y, color);
            this.drawPixel(x0 + x, y0 - y, color);
            this.drawPixel(x0 - x, y0 - y, color);
            this.drawPixel(x0 + y, y0 + x, color);
            this.drawPixel(x0 - y, y0 + x, color);
            this.drawPixel(x0 + y, y0 - x, color);
            this.drawPixel(x0 - y, y0 - x, color);
        }
    }
    _drawCircleHelper(x0, y0, r, cornername, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x4) {
                this.drawPixel(x0 + x, y0 + y, color);
                this.drawPixel(x0 + y, y0 + x, color);
            }
            if (cornername & 0x2) {
                this.drawPixel(x0 + x, y0 - y, color);
                this.drawPixel(x0 + y, y0 - x, color);
            }
            if (cornername & 0x8) {
                this.drawPixel(x0 - y, y0 + x, color);
                this.drawPixel(x0 - x, y0 + y, color);
            }
            if (cornername & 0x1) {
                this.drawPixel(x0 - y, y0 - x, color);
                this.drawPixel(x0 - x, y0 - y, color);
            }
        }
    }
    fillCircle(x0, y0, r, color) {
        this.drawVLine(x0, y0 - r, 2 * r + 1, color);
        this._fillCircleHelper(x0, y0, r, 3, 0, color);
    }
    _fillCircleHelper(x0, y0, r, cornername, delta, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x1) {
                this.drawVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
            }
            if (cornername & 0x2) {
                this.drawVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
            }
        }
    }
    drawRoundRect(x, y, w, h, r, color) {
        this.drawHLine(x + r, y, w - 2 * r, color); // Top
        this.drawHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
        this.drawVLine(x, y + r, h - 2 * r, color); // Left
        this.drawVLine(x + w - 1, y + r, h - 2 * r, color); // Right
        this._drawCircleHelper(x + r, y + r, r, 1, color);
        this._drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
        this._drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
        this._drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
    }
    fillRoundRect(x, y, w, h, r, color) {
        this.fillRect(x + r, y, w - 2 * r, h, color);
        this._fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
        this._fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
    }
    drawTriangle(x0, y0, x1, y1, x2, y2, color) {
        this.drawLine(x0, y0, x1, y1, color);
        this.drawLine(x1, y1, x2, y2, color);
        this.drawLine(x2, y2, x0, y0, color);
    }
    fillTriangle(x0, y0, x1, y1, x2, y2, color) {
        let a;
        let b;
        let y;
        let last;
        // Sort coordinates by Y order (y2 >= y1 >= y0)
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y1 > y2) {
            y2 = [y1, (y1 = y2)][0]; // this._swap(y2, y1);
            x2 = [x1, (x1 = x2)][0]; // this._swap(x2, x1);
        }
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y0 === y2) {
            // Handle awkward all-on-same-line case as its own thing
            a = b = x0;
            if (x1 < a) {
                a = x1;
            }
            else if (x1 > b) {
                b = x1;
            }
            if (x2 < a) {
                a = x2;
            }
            else if (x2 > b) {
                b = x2;
            }
            this.drawHLine(a, y0, b - a + 1, color);
            return;
        }
        const dx01 = x1 - x0;
        const dy01 = y1 - y0;
        const dx02 = x2 - x0;
        const dy02 = y2 - y0;
        const dx12 = x2 - x1;
        const dy12 = y2 - y1;
        let sa = 0;
        let sb = 0;
        if (y1 === y2) {
            last = y1;
        }
        else {
            last = y1 - 1;
        } // skip it
        for (y = y0; y <= last; y++) {
            a = x0 + Math.floor(sa / dy01);
            b = x0 + Math.floor(sb / dy02);
            sa += dx01;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
        sa = dx12 * (y - y1);
        sb = dx02 * (y - y0);
        for (; y <= y2; y++) {
            a = x1 + Math.floor(sa / dy12);
            b = x0 + Math.floor(sb / dy02);
            sa += dx12;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
    }
    drawVLine(x, y, h, color) {
        if (h < 0) {
            h = -h;
            y = y - h;
        }
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (y + h - 1 >= this.height) {
            h = this.height - y;
        }
        const pixels = this._color2pixels(1, h, color);
        this.rawBound16(x, y, 1, h, pixels, false);
    }
    drawHLine(x, y, w, color) {
        if (w < 0) {
            w = -w;
            x = x - w;
        }
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + w - 1 >= this.width) {
            w = this.width - x;
        }
        const pixels = this._color2pixels(w, 1, color);
        this.rawBound16(x, y, w, 1, pixels, false);
    }
    drawLine(x0, y0, x1, y1, color) {
        if (x0 === x1) {
            this.drawVLine(x0, y0, y1 - y0, color);
            return;
        }
        if (y0 === y1) {
            this.drawHLine(x0, y0, x1 - x0, color);
            return;
        }
        const step = Math.abs(y1 - y0) > Math.abs(x1 - x0);
        if (step) {
            y0 = [x0, (x0 = y0)][0]; // this._swap(x0, y0);
            y1 = [x1, (x1 = y1)][0]; // this._swap(x1, y1);
        }
        if (x0 > x1) {
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
        }
        const dx = x1 - x0;
        const dy = Math.abs(y1 - y0);
        let err = dx / 2;
        const ystep = y0 < y1 ? 1 : -1;
        for (; x0 <= x1; x0++) {
            if (step) {
                this.drawPixel(y0, x0, color);
            }
            else {
                this.drawPixel(x0, y0, color);
            }
            err -= dy;
            if (err < 0) {
                y0 += ystep;
                err += dx;
            }
        }
    }
    drawPixel(x, y, color) {
        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
            return;
        }
        this.rawBound16(x, y, 1, 1, [color], false);
    }
    drawChar(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0) {
            // Clip top
            return;
        }
        if (color !== bg) {
            this.drawChar2(x, y, ch, color, bg, size);
            return;
        }
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                if (line & 0x1) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, color);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, color);
                    }
                }
                else if (bg !== color) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, bg);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, bg);
                    }
                }
                line >>= 1;
            }
        }
    }
    drawChar2(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0 // Clip top
        ) {
            return;
        }
        const pixels = new Array(6 * 8 * size * size);
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                const cl = line & 0x1 ? color : bg;
                for (let w = 0; w < size; w++) {
                    for (let h = 0; h < size; h++) {
                        pixels[i * (1 * size) + w + (j * (6 * size * size) + h * (6 * size))] = cl;
                    }
                }
                line >>= 1;
            }
        }
        this.rawBound16(x, y, 6 * size, 8 * size, pixels);
    }
    rawBound16(x, y, width, height, pixels, flush) {
        const rgb = [];
        pixels.forEach((v) => {
            const v2 = ((v & 0xf800) >> 11) | (v & 0x7e0) | ((v & 0x1f) << 11);
            rgb.push((v2 & 0xff00) >> 8);
            rgb.push(v2 & 0xff);
        });
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        if (flush) {
            this._writeBuffer(rgb);
            this._writeBuffer(); // for flush
        }
        else {
            this.writeData(rgb);
        }
    }
    drawString(x, y, str, color, bg, size, wrap) {
        //  bg = bg || color;
        size = size || 1;
        //  wrap = wrap || true;
        for (let n = 0; n < str.length; n++) {
            const c = str.charAt(n);
            if (c === "\n") {
                y += size * 8;
                x = 0;
            }
            else if (c === "\r") {
                // skip em
            }
            else {
                this.drawChar(x, y, c, color, bg, size);
                x += size * 6;
                if (wrap && x > this.width - size * 6) {
                    y += size * 8;
                    x = 0;
                }
            }
        }
        return [x, y];
    }
    drawContextBound(context, x0, y0, width, height, x1, y1, gray) {
        x0 = x0 || 0;
        y0 = y0 || 0;
        width = width || context.canvas.clientWidth;
        height = height || context.canvas.clientHeight;
        x1 = x1 || 0;
        y1 = y1 || 0;
        gray = gray || false;
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        const imageData = context.getImageData(x0, y0, width, height).data;
        const rgb = [];
        for (let n = 0; n < imageData.length; n += 4) {
            const r = imageData[n + 0];
            const g = imageData[n + 1];
            const b = imageData[n + 2];
            if (!gray) {
                rgb.push(b);
                rgb.push(g);
                rgb.push(r);
            }
            else {
                const gs = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
                rgb.push(gs);
                rgb.push(gs);
                rgb.push(gs);
            }
        }
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x1, y1, x1 + width - 1, y1 + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    drawContext(context, gray) {
        gray = gray || false;
        this.drawContextBound(context, 0, 0, this.width, this.height, 0, 0, gray);
    }
    draw(context, gray) {
        this.drawContext(context, gray);
    }
    rawBound(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push(v & 0xff);
            rgb.push((v & 0xff00) >> 8);
            rgb.push((v & 0xff0000) >> 16);
        });
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    raw(pixels) {
        this.rawBound16(0, 0, this.width, this.height, pixels, true);
    }
    _setPresetColor() {
        this.color = {
            AliceBlue: 0xf7df,
            AntiqueWhite: 0xff5a,
            Aqua: 0x07ff,
            Aquamarine: 0x7ffa,
            Azure: 0xf7ff,
            Beige: 0xf7bb,
            Bisque: 0xff38,
            Black: 0x0000,
            BlanchedAlmond: 0xff59,
            Blue: 0x001f,
            BlueViolet: 0x895c,
            Brown: 0xa145,
            BurlyWood: 0xddd0,
            CadetBlue: 0x5cf4,
            Chartreuse: 0x7fe0,
            Chocolate: 0xd343,
            Coral: 0xfbea,
            CornflowerBlue: 0x64bd,
            Cornsilk: 0xffdb,
            Crimson: 0xd8a7,
            Cyan: 0x07ff,
            DarkBlue: 0x0011,
            DarkCyan: 0x0451,
            DarkGoldenRod: 0xbc21,
            DarkGray: 0xad55,
            DarkGreen: 0x0320,
            DarkKhaki: 0xbdad,
            DarkMagenta: 0x8811,
            DarkOliveGreen: 0x5345,
            DarkOrange: 0xfc60,
            DarkOrchid: 0x9999,
            DarkRed: 0x8800,
            DarkSalmon: 0xecaf,
            DarkSeaGreen: 0x8df1,
            DarkSlateBlue: 0x49f1,
            DarkSlateGray: 0x2a69,
            DarkTurquoise: 0x067a,
            DarkViolet: 0x901a,
            DeepPink: 0xf8b2,
            DeepSkyBlue: 0x05ff,
            DimGray: 0x6b4d,
            DodgerBlue: 0x1c9f,
            FireBrick: 0xb104,
            FloralWhite: 0xffde,
            ForestGreen: 0x2444,
            Fuchsia: 0xf81f,
            Gainsboro: 0xdefb,
            GhostWhite: 0xffdf,
            Gold: 0xfea0,
            GoldenRod: 0xdd24,
            Gray: 0x8410,
            Green: 0x0400,
            GreenYellow: 0xafe5,
            HoneyDew: 0xf7fe,
            HotPink: 0xfb56,
            IndianRed: 0xcaeb,
            Indigo: 0x4810,
            Ivory: 0xfffe,
            Khaki: 0xf731,
            Lavender: 0xe73f,
            LavenderBlush: 0xff9e,
            LawnGreen: 0x7fe0,
            LemonChiffon: 0xffd9,
            LightBlue: 0xaedc,
            LightCoral: 0xf410,
            LightCyan: 0xe7ff,
            LightGoldenRodYellow: 0xffda,
            LightGray: 0xd69a,
            LightGreen: 0x9772,
            LightPink: 0xfdb8,
            LightSalmon: 0xfd0f,
            LightSeaGreen: 0x2595,
            LightSkyBlue: 0x867f,
            LightSlateGray: 0x7453,
            LightSteelBlue: 0xb63b,
            LightYellow: 0xfffc,
            Lime: 0x07e0,
            LimeGreen: 0x3666,
            Linen: 0xff9c,
            Magenta: 0xf81f,
            Maroon: 0x8000,
            MediumAquaMarine: 0x6675,
            MediumBlue: 0x0019,
            MediumOrchid: 0xbaba,
            MediumPurple: 0x939b,
            MediumSeaGreen: 0x3d8e,
            MediumSlateBlue: 0x7b5d,
            MediumSpringGreen: 0x07d3,
            MediumTurquoise: 0x4e99,
            MediumVioletRed: 0xc0b0,
            MidnightBlue: 0x18ce,
            MintCream: 0xf7ff,
            MistyRose: 0xff3c,
            Moccasin: 0xff36,
            NavajoWhite: 0xfef5,
            Navy: 0x0010,
            OldLace: 0xffbc,
            Olive: 0x8400,
            OliveDrab: 0x6c64,
            Orange: 0xfd20,
            OrangeRed: 0xfa20,
            Orchid: 0xdb9a,
            PaleGoldenRod: 0xef55,
            PaleGreen: 0x9fd3,
            PaleTurquoise: 0xaf7d,
            PaleVioletRed: 0xdb92,
            PapayaWhip: 0xff7a,
            PeachPuff: 0xfed7,
            Peru: 0xcc27,
            Pink: 0xfe19,
            Plum: 0xdd1b,
            PowderBlue: 0xb71c,
            Purple: 0x8010,
            RebeccaPurple: 0x6193,
            Red: 0xf800,
            RosyBrown: 0xbc71,
            RoyalBlue: 0x435c,
            SaddleBrown: 0x8a22,
            Salmon: 0xfc0e,
            SandyBrown: 0xf52c,
            SeaGreen: 0x2c4a,
            SeaShell: 0xffbd,
            Sienna: 0xa285,
            Silver: 0xc618,
            SkyBlue: 0x867d,
            SlateBlue: 0x6ad9,
            SlateGray: 0x7412,
            Snow: 0xffdf,
            SpringGreen: 0x07ef,
            SteelBlue: 0x4416,
            Tan: 0xd5b1,
            Teal: 0x0410,
            Thistle: 0xddfb,
            Tomato: 0xfb08,
            Turquoise: 0x471a,
            Violet: 0xec1d,
            Wheat: 0xf6f6,
            White: 0xffff,
            WhiteSmoke: 0xf7be,
            Yellow: 0xffe0,
            YellowGreen: 0x9e66,
        };
    }
}
exports.default = ST7735S;
// ----------------------------------------------------------
const ST7735S_TFTWIDTH = 80;
const ST7735S_TFTHEIGHT = 160;
// const ST7735_NOP = 0x00;
const ST7735_SWRESET = 0x01;
// const ST7735_RDDID = 0x04;
// const ST7735_RDDST = 0x09;
// const ST7735_RDDPM = 0x0a;
// const ST7735_SLPIN = 0x10;
const ST7735_SLPOUT = 0x11;
// const ST7735_PTLON = 0x12;
// const ST7735_NORON = 0x13;
const ST7735_INVOFF = 0x20;
const ST7735_INVON = 0x21;
const ST7735_DISPOFF = 0x28;
const ST7735_DISPON = 0x29;
const ST7735_CASET = 0x2a;
const ST7735_RASET = 0x2b;
const ST7735_RAMWR = 0x2c;
// const ST7735_RAMRD = 0x2e;
const ST7735_MADCTL = 0x36;
// const ST7735_PTLAR = 0x30;
const ST7735_COLMOD = 0x3a;
const ST7735_FRMCTR1 = 0xb1;
const ST7735_FRMCTR2 = 0xb2;
const ST7735_FRMCTR3 = 0xb3;
const ST7735_INVCTR = 0xb4;
// const ST7735_DISSET5 = 0xb6;
const ST7735_PWCTR1 = 0xc0;
const ST7735_PWCTR2 = 0xc1;
const ST7735_PWCTR3 = 0xc2;
const ST7735_PWCTR4 = 0xc3;
const ST7735_PWCTR5 = 0xc4;
const ST7735_VMCTR1 = 0xc5;
// const ST7735_RDID1 = 0xda;
// const ST7735_RDID2 = 0xdb;
// const ST7735_RDID3 = 0xdc;
// const ST7735_RDID4 = 0xdd;
// const ST7735_PWCTR6 = 0xfc;
const ST7735_GMCTRP1 = 0xe0;
const ST7735_GMCTRN1 = 0xe1;
const ST7735_18bit = 0x06; // 18bit/pixel
const ST7735_16bit = 0x05; // 16bit/pixel
// standard ascii 5x7 font
const font = [
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3e,
    0x5b,
    0x4f,
    0x5b,
    0x3e,
    0x3e,
    0x6b,
    0x4f,
    0x6b,
    0x3e,
    0x1c,
    0x3e,
    0x7c,
    0x3e,
    0x1c,
    0x18,
    0x3c,
    0x7e,
    0x3c,
    0x18,
    0x1c,
    0x57,
    0x7d,
    0x57,
    0x1c,
    0x1c,
    0x5e,
    0x7f,
    0x5e,
    0x1c,
    0x00,
    0x18,
    0x3c,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xc3,
    0xe7,
    0xff,
    0x00,
    0x18,
    0x24,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xdb,
    0xe7,
    0xff,
    0x30,
    0x48,
    0x3a,
    0x06,
    0x0e,
    0x26,
    0x29,
    0x79,
    0x29,
    0x26,
    0x40,
    0x7f,
    0x05,
    0x05,
    0x07,
    0x40,
    0x7f,
    0x05,
    0x25,
    0x3f,
    0x5a,
    0x3c,
    0xe7,
    0x3c,
    0x5a,
    0x7f,
    0x3e,
    0x1c,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x1c,
    0x3e,
    0x7f,
    0x14,
    0x22,
    0x7f,
    0x22,
    0x14,
    0x5f,
    0x5f,
    0x00,
    0x5f,
    0x5f,
    0x06,
    0x09,
    0x7f,
    0x01,
    0x7f,
    0x00,
    0x66,
    0x89,
    0x95,
    0x6a,
    0x60,
    0x60,
    0x60,
    0x60,
    0x60,
    0x94,
    0xa2,
    0xff,
    0xa2,
    0x94,
    0x08,
    0x04,
    0x7e,
    0x04,
    0x08,
    0x10,
    0x20,
    0x7e,
    0x20,
    0x10,
    0x08,
    0x08,
    0x2a,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x1e,
    0x10,
    0x10,
    0x10,
    0x10,
    0x0c,
    0x1e,
    0x0c,
    0x1e,
    0x0c,
    0x30,
    0x38,
    0x3e,
    0x38,
    0x30,
    0x06,
    0x0e,
    0x3e,
    0x0e,
    0x06,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x5f,
    0x00,
    0x00,
    0x00,
    0x07,
    0x00,
    0x07,
    0x00,
    0x14,
    0x7f,
    0x14,
    0x7f,
    0x14,
    0x24,
    0x2a,
    0x7f,
    0x2a,
    0x12,
    0x23,
    0x13,
    0x08,
    0x64,
    0x62,
    0x36,
    0x49,
    0x56,
    0x20,
    0x50,
    0x00,
    0x08,
    0x07,
    0x03,
    0x00,
    0x00,
    0x1c,
    0x22,
    0x41,
    0x00,
    0x00,
    0x41,
    0x22,
    0x1c,
    0x00,
    0x2a,
    0x1c,
    0x7f,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x3e,
    0x08,
    0x08,
    0x00,
    0x80,
    0x70,
    0x30,
    0x00,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x00,
    0x00,
    0x60,
    0x60,
    0x00,
    0x20,
    0x10,
    0x08,
    0x04,
    0x02,
    0x3e,
    0x51,
    0x49,
    0x45,
    0x3e,
    0x00,
    0x42,
    0x7f,
    0x40,
    0x00,
    0x72,
    0x49,
    0x49,
    0x49,
    0x46,
    0x21,
    0x41,
    0x49,
    0x4d,
    0x33,
    0x18,
    0x14,
    0x12,
    0x7f,
    0x10,
    0x27,
    0x45,
    0x45,
    0x45,
    0x39,
    0x3c,
    0x4a,
    0x49,
    0x49,
    0x31,
    0x41,
    0x21,
    0x11,
    0x09,
    0x07,
    0x36,
    0x49,
    0x49,
    0x49,
    0x36,
    0x46,
    0x49,
    0x49,
    0x29,
    0x1e,
    0x00,
    0x00,
    0x14,
    0x00,
    0x00,
    0x00,
    0x40,
    0x34,
    0x00,
    0x00,
    0x00,
    0x08,
    0x14,
    0x22,
    0x41,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x00,
    0x41,
    0x22,
    0x14,
    0x08,
    0x02,
    0x01,
    0x59,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x5d,
    0x59,
    0x4e,
    0x7c,
    0x12,
    0x11,
    0x12,
    0x7c,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x36,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x22,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x41,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x01,
    0x3e,
    0x41,
    0x41,
    0x51,
    0x73,
    0x7f,
    0x08,
    0x08,
    0x08,
    0x7f,
    0x00,
    0x41,
    0x7f,
    0x41,
    0x00,
    0x20,
    0x40,
    0x41,
    0x3f,
    0x01,
    0x7f,
    0x08,
    0x14,
    0x22,
    0x41,
    0x7f,
    0x40,
    0x40,
    0x40,
    0x40,
    0x7f,
    0x02,
    0x1c,
    0x02,
    0x7f,
    0x7f,
    0x04,
    0x08,
    0x10,
    0x7f,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x51,
    0x21,
    0x5e,
    0x7f,
    0x09,
    0x19,
    0x29,
    0x46,
    0x26,
    0x49,
    0x49,
    0x49,
    0x32,
    0x03,
    0x01,
    0x7f,
    0x01,
    0x03,
    0x3f,
    0x40,
    0x40,
    0x40,
    0x3f,
    0x1f,
    0x20,
    0x40,
    0x20,
    0x1f,
    0x3f,
    0x40,
    0x38,
    0x40,
    0x3f,
    0x63,
    0x14,
    0x08,
    0x14,
    0x63,
    0x03,
    0x04,
    0x78,
    0x04,
    0x03,
    0x61,
    0x59,
    0x49,
    0x4d,
    0x43,
    0x00,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x00,
    0x41,
    0x41,
    0x41,
    0x7f,
    0x04,
    0x02,
    0x01,
    0x02,
    0x04,
    0x40,
    0x40,
    0x40,
    0x40,
    0x40,
    0x00,
    0x03,
    0x07,
    0x08,
    0x00,
    0x20,
    0x54,
    0x54,
    0x78,
    0x40,
    0x7f,
    0x28,
    0x44,
    0x44,
    0x38,
    0x38,
    0x44,
    0x44,
    0x44,
    0x28,
    0x38,
    0x44,
    0x44,
    0x28,
    0x7f,
    0x38,
    0x54,
    0x54,
    0x54,
    0x18,
    0x00,
    0x08,
    0x7e,
    0x09,
    0x02,
    0x18,
    0xa4,
    0xa4,
    0x9c,
    0x78,
    0x7f,
    0x08,
    0x04,
    0x04,
    0x78,
    0x00,
    0x44,
    0x7d,
    0x40,
    0x00,
    0x20,
    0x40,
    0x40,
    0x3d,
    0x00,
    0x7f,
    0x10,
    0x28,
    0x44,
    0x00,
    0x00,
    0x41,
    0x7f,
    0x40,
    0x00,
    0x7c,
    0x04,
    0x78,
    0x04,
    0x78,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x78,
    0x38,
    0x44,
    0x44,
    0x44,
    0x38,
    0xfc,
    0x18,
    0x24,
    0x24,
    0x18,
    0x18,
    0x24,
    0x24,
    0x18,
    0xfc,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x08,
    0x48,
    0x54,
    0x54,
    0x54,
    0x24,
    0x04,
    0x04,
    0x3f,
    0x44,
    0x24,
    0x3c,
    0x40,
    0x40,
    0x20,
    0x7c,
    0x1c,
    0x20,
    0x40,
    0x20,
    0x1c,
    0x3c,
    0x40,
    0x30,
    0x40,
    0x3c,
    0x44,
    0x28,
    0x10,
    0x28,
    0x44,
    0x4c,
    0x90,
    0x90,
    0x90,
    0x7c,
    0x44,
    0x64,
    0x54,
    0x4c,
    0x44,
    0x00,
    0x08,
    0x36,
    0x41,
    0x00,
    0x00,
    0x00,
    0x77,
    0x00,
    0x00,
    0x00,
    0x41,
    0x36,
    0x08,
    0x00,
    0x02,
    0x01,
    0x02,
    0x04,
    0x02,
    0x3c,
    0x26,
    0x23,
    0x26,
    0x3c,
    0x1e,
    0xa1,
    0xa1,
    0x61,
    0x12,
    0x3a,
    0x40,
    0x40,
    0x20,
    0x7a,
    0x38,
    0x54,
    0x54,
    0x55,
    0x59,
    0x21,
    0x55,
    0x55,
    0x79,
    0x41,
    0x21,
    0x54,
    0x54,
    0x78,
    0x41,
    0x21,
    0x55,
    0x54,
    0x78,
    0x40,
    0x20,
    0x54,
    0x55,
    0x79,
    0x40,
    0x0c,
    0x1e,
    0x52,
    0x72,
    0x12,
    0x39,
    0x55,
    0x55,
    0x55,
    0x59,
    0x39,
    0x54,
    0x54,
    0x54,
    0x59,
    0x39,
    0x55,
    0x54,
    0x54,
    0x58,
    0x00,
    0x00,
    0x45,
    0x7c,
    0x41,
    0x00,
    0x02,
    0x45,
    0x7d,
    0x42,
    0x00,
    0x01,
    0x45,
    0x7c,
    0x40,
    0xf0,
    0x29,
    0x24,
    0x29,
    0xf0,
    0xf0,
    0x28,
    0x25,
    0x28,
    0xf0,
    0x7c,
    0x54,
    0x55,
    0x45,
    0x00,
    0x20,
    0x54,
    0x54,
    0x7c,
    0x54,
    0x7c,
    0x0a,
    0x09,
    0x7f,
    0x49,
    0x32,
    0x49,
    0x49,
    0x49,
    0x32,
    0x32,
    0x48,
    0x48,
    0x48,
    0x32,
    0x32,
    0x4a,
    0x48,
    0x48,
    0x30,
    0x3a,
    0x41,
    0x41,
    0x21,
    0x7a,
    0x3a,
    0x42,
    0x40,
    0x20,
    0x78,
    0x00,
    0x9d,
    0xa0,
    0xa0,
    0x7d,
    0x39,
    0x44,
    0x44,
    0x44,
    0x39,
    0x3d,
    0x40,
    0x40,
    0x40,
    0x3d,
    0x3c,
    0x24,
    0xff,
    0x24,
    0x24,
    0x48,
    0x7e,
    0x49,
    0x43,
    0x66,
    0x2b,
    0x2f,
    0xfc,
    0x2f,
    0x2b,
    0xff,
    0x09,
    0x29,
    0xf6,
    0x20,
    0xc0,
    0x88,
    0x7e,
    0x09,
    0x03,
    0x20,
    0x54,
    0x54,
    0x79,
    0x41,
    0x00,
    0x00,
    0x44,
    0x7d,
    0x41,
    0x30,
    0x48,
    0x48,
    0x4a,
    0x32,
    0x38,
    0x40,
    0x40,
    0x22,
    0x7a,
    0x00,
    0x7a,
    0x0a,
    0x0a,
    0x72,
    0x7d,
    0x0d,
    0x19,
    0x31,
    0x7d,
    0x26,
    0x29,
    0x29,
    0x2f,
    0x28,
    0x26,
    0x29,
    0x29,
    0x29,
    0x26,
    0x30,
    0x48,
    0x4d,
    0x40,
    0x20,
    0x38,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x38,
    0x2f,
    0x10,
    0xc8,
    0xac,
    0xba,
    0x2f,
    0x10,
    0x28,
    0x34,
    0xfa,
    0x00,
    0x00,
    0x7b,
    0x00,
    0x00,
    0x08,
    0x14,
    0x2a,
    0x14,
    0x22,
    0x22,
    0x14,
    0x2a,
    0x14,
    0x08,
    0xaa,
    0x00,
    0x55,
    0x00,
    0xaa,
    0xaa,
    0x55,
    0xaa,
    0x55,
    0xaa,
    0x00,
    0x00,
    0x00,
    0xff,
    0x00,
    0x10,
    0x10,
    0x10,
    0xff,
    0x00,
    0x14,
    0x14,
    0x14,
    0xff,
    0x00,
    0x10,
    0x10,
    0xff,
    0x00,
    0xff,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x14,
    0x14,
    0x14,
    0xfc,
    0x00,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xff,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xfc,
    0x14,
    0x14,
    0x17,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0x1f,
    0x00,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0xff,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x14,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x17,
    0x00,
    0x00,
    0xfc,
    0x04,
    0xf4,
    0x14,
    0x14,
    0x17,
    0x10,
    0x17,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xf4,
    0x00,
    0x00,
    0xff,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x17,
    0x14,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0xf4,
    0x14,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x14,
    0x00,
    0x00,
    0x00,
    0xfc,
    0x14,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xf0,
    0x10,
    0x10,
    0xff,
    0x10,
    0xff,
    0x14,
    0x14,
    0x14,
    0xff,
    0x14,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xff,
    0xff,
    0xff,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x38,
    0x44,
    0x44,
    0x38,
    0x44,
    0x7c,
    0x2a,
    0x2a,
    0x3e,
    0x14,
    0x7e,
    0x02,
    0x02,
    0x06,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x7e,
    0x02,
    0x63,
    0x55,
    0x49,
    0x41,
    0x63,
    0x38,
    0x44,
    0x44,
    0x3c,
    0x04,
    0x40,
    0x7e,
    0x20,
    0x1e,
    0x20,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x02,
    0x99,
    0xa5,
    0xe7,
    0xa5,
    0x99,
    0x1c,
    0x2a,
    0x49,
    0x2a,
    0x1c,
    0x4c,
    0x72,
    0x01,
    0x72,
    0x4c,
    0x30,
    0x4a,
    0x4d,
    0x4d,
    0x30,
    0x30,
    0x48,
    0x78,
    0x48,
    0x30,
    0xbc,
    0x62,
    0x5a,
    0x46,
    0x3d,
    0x3e,
    0x49,
    0x49,
    0x49,
    0x00,
    0x7e,
    0x01,
    0x01,
    0x01,
    0x7e,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x44,
    0x44,
    0x5f,
    0x44,
    0x44,
    0x40,
    0x51,
    0x4a,
    0x44,
    0x40,
    0x40,
    0x44,
    0x4a,
    0x51,
    0x40,
    0x00,
    0x00,
    0xff,
    0x01,
    0x03,
    0xe0,
    0x80,
    0xff,
    0x00,
    0x00,
    0x08,
    0x08,
    0x6b,
    0x6b,
    0x08,
    0x36,
    0x12,
    0x36,
    0x24,
    0x36,
    0x06,
    0x0f,
    0x09,
    0x0f,
    0x06,
    0x00,
    0x00,
    0x18,
    0x18,
    0x00,
    0x00,
    0x00,
    0x10,
    0x10,
    0x00,
    0x30,
    0x40,
    0xff,
    0x01,
    0x01,
    0x00,
    0x1f,
    0x01,
    0x01,
    0x1e,
    0x00,
    0x19,
    0x1d,
    0x17,
    0x12,
    0x00,
    0x3c,
    0x3c,
    0x3c,
    0x3c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Display/SainSmartTFT18LCD/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// SainSmart ST7735 1.8" TFT LCD 128x160 pixel
class SainSmartTFT18LCD {
    constructor() {
        this.keys = ["vcc", "gnd", "scl", "sda", "dc", "res", "cs"];
        this.required = ["scl", "sda", "dc", "res", "cs"];
        this.displayIoNames = {
            vcc: "vcc",
            gnd: "gnd",
            scl: "scl",
            sda: "sda",
            dc: "dc",
            res: "res",
            cs: "cs",
        };
    }
    static info() {
        return {
            name: "SainSmartTFT18LCD",
        };
    }
    wired(obniz) {
        this.debugprint = false;
        this.obniz = obniz;
        this.io_dc = obniz.getIO(this.params.dc);
        this.io_res = obniz.getIO(this.params.res);
        this.io_cs = obniz.getIO(this.params.cs);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.frequency = 16 * 1000 * 1000; // 16MHz
        this.params.mode = "master";
        this.params.clk = this.params.scl;
        this.params.mosi = this.params.sda;
        this.params.drive = "3v";
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.width = ST7735_TFTWIDTH;
        this.height = ST7735_TFTHEIGHT;
        this.writeBuffer = []; // 1024bytes bufferring
        this._setPresetColor();
        this.init();
    }
    print_debug(v) {
        if (this.debugprint) {
            console.log("SainSmartTFT18LCD: " + Array.prototype.slice.call(arguments).join(""));
        }
    }
    _deadSleep(waitMsec) {
        const startMsec = new Date();
        while (new Date() - startMsec < waitMsec) {
        }
    }
    _reset() {
        this.io_res.output(false);
        this._deadSleep(10);
        this.io_res.output(true);
        this._deadSleep(10);
    }
    writeCommand(cmd) {
        this.io_dc.output(false);
        this.io_cs.output(false);
        this.spi.write([cmd]);
        this.io_cs.output(true);
    }
    writeData(data) {
        this.io_dc.output(true);
        this.io_cs.output(false);
        this.spi.write(data);
        this.io_cs.output(true);
    }
    write(cmd, data) {
        if (data.length === 0) {
            return;
        }
        this.writeCommand(cmd);
        this.writeData(data);
    }
    asyncwait() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.spi.writeWait([0x00]);
        });
    }
    _writeFlush() {
        while (this.writeBuffer.length > 0) {
            if (this.writeBuffer.length > 1024) {
                const data = this.writeBuffer.slice(0, 1024);
                this.writeData(data);
                this.writeBuffer.splice(0, 1024);
            }
            else {
                if (this.writeBuffer.length > 0) {
                    this.writeData(this.writeBuffer);
                }
                this.writeBuffer = [];
            }
        }
    }
    _writeBuffer(data) {
        if (data && data.length > 0) {
            this.writeBuffer = this.writeBuffer.concat(data);
        }
        else {
            this._writeFlush();
        }
    }
    color16(r, g, b) {
        //  1st byte  (r & 0xF8 | g >> 5)
        //  2nd byte  (g & 0xFC << 3 | b >> 3)
        return ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
    }
    _initG() {
        // initialize for Green Tab
        this.writeCommand(ST7735_SLPOUT); // Sleep out & booster on
        this.obniz.wait(120);
        this.write(ST7735_FRMCTR1, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR2, [0x01, 0x2c, 0x2d]);
        this.write(ST7735_FRMCTR3, [0x01, 0x2c, 0x2d, 0x01, 0x2c, 0x2d]);
        this.write(ST7735_INVCTR, [0x07]);
        this.write(ST7735_PWCTR1, [0xa2, 0x02, 0x84]);
        this.write(ST7735_PWCTR2, [0xc5]);
        this.write(ST7735_PWCTR3, [0x0a, 0x00]);
        this.write(ST7735_PWCTR4, [0x8a, 0x2a]);
        this.write(ST7735_PWCTR5, [0x8a, 0xee]);
        this.write(ST7735_VMCTR1, [0x0e]);
        this.write(ST7735_GMCTRP1, [
            0x02,
            0x1c,
            0x07,
            0x12,
            0x37,
            0x32,
            0x29,
            0x2d,
            0x29,
            0x25,
            0x2b,
            0x39,
            0x00,
            0x01,
            0x03,
            0x10,
        ]);
        this.write(ST7735_GMCTRN1, [
            0x03,
            0x1d,
            0x07,
            0x06,
            0x2e,
            0x2c,
            0x29,
            0x2d,
            0x2e,
            0x2e,
            0x37,
            0x3f,
            0x00,
            0x00,
            0x02,
            0x10,
        ]);
        this.write(ST7735_COLMOD, [ST7735_16bit]); // color format: 16bit/pixel
    }
    init() {
        this._reset();
        this._initG();
        this.setDisplayOn();
        this.setRotation(0);
    }
    setDisplayOn() {
        this.writeCommand(ST7735_DISPON);
    }
    setDisplayOff() {
        this.writeCommand(ST7735_DISPOFF);
    }
    setDisplay(on) {
        if (on === true) {
            this.setDisplayOn();
        }
        else {
            this.setDisplayOff();
        }
    }
    setInversionOn() {
        this.writeCommand(ST7735_INVON);
    }
    setInversionOff() {
        this.writeCommand(ST7735_INVOFF);
    }
    setInversion(inversion) {
        if (inversion === true) {
            this.setInversionOn();
        }
        else {
            this.setInversionOff();
        }
    }
    setRotation(m) {
        const MADCTL_MY = 0x80;
        const MADCTL_MX = 0x40;
        const MADCTL_MV = 0x20;
        // const MADCTL_ML = 0x10;
        const MADCTL_RGB = 0x00; // always RGB, never BGR
        // const MADCTL_MH = 0x04;
        let data;
        const rotation = m % 4; // can't be higher than 3
        switch (rotation) {
            case 0:
                data = [MADCTL_MX | MADCTL_MY | MADCTL_RGB];
                this.width = ST7735_TFTWIDTH;
                this.height = ST7735_TFTHEIGHT;
                break;
            case 1:
                data = [MADCTL_MY | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735_TFTHEIGHT;
                this.height = ST7735_TFTWIDTH;
                break;
            case 2:
                data = [MADCTL_RGB];
                this.width = ST7735_TFTWIDTH;
                this.height = ST7735_TFTHEIGHT;
                break;
            case 3:
                data = [MADCTL_MX | MADCTL_MV | MADCTL_RGB];
                this.width = ST7735_TFTHEIGHT;
                this.height = ST7735_TFTWIDTH;
                break;
        }
        this.write(ST7735_MADCTL, data);
        this.setAddrWindow(0, 0, this.width - 1, this.height - 1);
    }
    setAddrWindow(x0, y0, x1, y1) {
        this.print_debug(`setAddrWindow: (x0: ${x0}, y0: ${y0}) - (x1: ${x1}, y1: ${y1})`);
        if (x0 < 0) {
            x0 = 0;
        }
        if (y0 < 0) {
            y0 = 0;
        }
        if (x1 < 0) {
            x1 = 0;
        }
        if (y1 < 0) {
            y1 = 0;
        }
        // column addr set
        this.write(ST7735_CASET, [0x00, x0, 0x00, x1]); // XSTART-XEND
        // row addr set
        this.write(ST7735_RASET, [0x00, y0, 0x00, y1]); // YSTART-YEND
        // write to RAM
        this.writeCommand(ST7735_RAMWR);
        this.writeBuffer = [];
    }
    // __swap(a, b) { let t = a; a = b; b = t; }
    fillScreen(color) {
        this.fillRect(0, 0, this.width, this.height, color);
    }
    fillRect(x, y, w, h, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + w - 1 >= this.width) {
            w = this.width - x;
        }
        if (y + h - 1 >= this.height) {
            h = this.height - y;
        }
        this.setAddrWindow(x, y, x + w - 1, y + h - 1);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        for (y = h; y > 0; y--) {
            for (x = w; x > 0; x--) {
                data.push(hi);
                data.push(lo);
            }
        }
        this._writeBuffer(data);
        this._writeBuffer(); // for flush
    }
    drawRect(x, y, w, h, color) {
        this.drawHLine(x, y, w, color);
        this.drawHLine(x, y + h - 1, w, color);
        this.drawVLine(x, y, h, color);
        this.drawVLine(x + w - 1, y, h, color);
    }
    drawCircle(x0, y0, r, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        this.drawPixel(x0, y0 + r, color);
        this.drawPixel(x0, y0 - r, color);
        this.drawPixel(x0 + r, y0, color);
        this.drawPixel(x0 - r, y0, color);
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            this.drawPixel(x0 + x, y0 + y, color);
            this.drawPixel(x0 - x, y0 + y, color);
            this.drawPixel(x0 + x, y0 - y, color);
            this.drawPixel(x0 - x, y0 - y, color);
            this.drawPixel(x0 + y, y0 + x, color);
            this.drawPixel(x0 - y, y0 + x, color);
            this.drawPixel(x0 + y, y0 - x, color);
            this.drawPixel(x0 - y, y0 - x, color);
        }
    }
    _drawCircleHelper(x0, y0, r, cornername, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x4) {
                this.drawPixel(x0 + x, y0 + y, color);
                this.drawPixel(x0 + y, y0 + x, color);
            }
            if (cornername & 0x2) {
                this.drawPixel(x0 + x, y0 - y, color);
                this.drawPixel(x0 + y, y0 - x, color);
            }
            if (cornername & 0x8) {
                this.drawPixel(x0 - y, y0 + x, color);
                this.drawPixel(x0 - x, y0 + y, color);
            }
            if (cornername & 0x1) {
                this.drawPixel(x0 - y, y0 - x, color);
                this.drawPixel(x0 - x, y0 - y, color);
            }
        }
    }
    fillCircle(x0, y0, r, color) {
        this.drawVLine(x0, y0 - r, 2 * r + 1, color);
        this._fillCircleHelper(x0, y0, r, 3, 0, color);
    }
    _fillCircleHelper(x0, y0, r, cornername, delta, color) {
        let f = 1 - r;
        let ddF_x = 1;
        let ddF_y = -2 * r;
        let x = 0;
        let y = r;
        while (x < y) {
            if (f >= 0) {
                y--;
                ddF_y += 2;
                f += ddF_y;
            }
            x++;
            ddF_x += 2;
            f += ddF_x;
            if (cornername & 0x1) {
                this.drawVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
            }
            if (cornername & 0x2) {
                this.drawVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
                this.drawVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
            }
        }
    }
    drawRoundRect(x, y, w, h, r, color) {
        this.drawHLine(x + r, y, w - 2 * r, color); // Top
        this.drawHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
        this.drawVLine(x, y + r, h - 2 * r, color); // Left
        this.drawVLine(x + w - 1, y + r, h - 2 * r, color); // Right
        this._drawCircleHelper(x + r, y + r, r, 1, color);
        this._drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
        this._drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
        this._drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
    }
    fillRoundRect(x, y, w, h, r, color) {
        this.fillRect(x + r, y, w - 2 * r, h, color);
        this._fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
        this._fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
    }
    drawTriangle(x0, y0, x1, y1, x2, y2, color) {
        this.drawLine(x0, y0, x1, y1, color);
        this.drawLine(x1, y1, x2, y2, color);
        this.drawLine(x2, y2, x0, y0, color);
    }
    fillTriangle(x0, y0, x1, y1, x2, y2, color) {
        let a;
        let b;
        let y;
        let last;
        // Sort coordinates by Y order (y2 >= y1 >= y0)
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y1 > y2) {
            y2 = [y1, (y1 = y2)][0]; // this._swap(y2, y1);
            x2 = [x1, (x1 = x2)][0]; // this._swap(x2, x1);
        }
        if (y0 > y1) {
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
        }
        if (y0 === y2) {
            // Handle awkward all-on-same-line case as its own thing
            a = b = x0;
            if (x1 < a) {
                a = x1;
            }
            else if (x1 > b) {
                b = x1;
            }
            if (x2 < a) {
                a = x2;
            }
            else if (x2 > b) {
                b = x2;
            }
            this.drawHLine(a, y0, b - a + 1, color);
            return;
        }
        const dx01 = x1 - x0;
        const dy01 = y1 - y0;
        const dx02 = x2 - x0;
        const dy02 = y2 - y0;
        const dx12 = x2 - x1;
        const dy12 = y2 - y1;
        let sa = 0;
        let sb = 0;
        if (y1 === y2) {
            last = y1;
        }
        else {
            last = y1 - 1;
        } // skip it
        for (y = y0; y <= last; y++) {
            a = x0 + Math.floor(sa / dy01);
            b = x0 + Math.floor(sb / dy02);
            sa += dx01;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
        sa = dx12 * (y - y1);
        sb = dx02 * (y - y0);
        for (; y <= y2; y++) {
            a = x1 + Math.floor(sa / dy12);
            b = x0 + Math.floor(sb / dy02);
            sa += dx12;
            sb += dx02;
            if (a > b) {
                b = [a, (a = b)][0];
            } // this._swap(a,b);
            this.drawHLine(a, y, b - a + 1, color);
        }
    }
    drawVLine(x, y, h, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (y + h - 1 >= this.height) {
            h = this.height - y;
        }
        this.setAddrWindow(x, y, x, y + h - 1);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        while (h--) {
            data.push(hi);
            data.push(lo);
        }
        this.writeData(data);
    }
    drawHLine(x, y, w, color) {
        if (x >= this.width || y >= this.height) {
            return;
        }
        if (x + w - 1 >= this.width) {
            w = this.width - x;
        }
        this.setAddrWindow(x, y, x + w - 1, y);
        const hi = color >> 8;
        const lo = color & 0xff;
        const data = [];
        while (w--) {
            data.push(hi);
            data.push(lo);
        }
        this.writeData(data);
    }
    drawLine(x0, y0, x1, y1, color) {
        const step = Math.abs(y1 - y0) > Math.abs(x1 - x0);
        if (step) {
            y0 = [x0, (x0 = y0)][0]; // this._swap(x0, y0);
            y1 = [x1, (x1 = y1)][0]; // this._swap(x1, y1);
        }
        if (x0 > x1) {
            x1 = [x0, (x0 = x1)][0]; // this._swap(x0, x1);
            y1 = [y0, (y0 = y1)][0]; // this._swap(y0, y1);
        }
        const dx = x1 - x0;
        const dy = Math.abs(y1 - y0);
        let err = dx / 2;
        const ystep = y0 < y1 ? 1 : -1;
        for (; x0 <= x1; x0++) {
            if (step) {
                this.drawPixel(y0, x0, color);
            }
            else {
                this.drawPixel(x0, y0, color);
            }
            err -= dy;
            if (err < 0) {
                y0 += ystep;
                err += dx;
            }
        }
    }
    drawPixel(x, y, color) {
        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
            return;
        }
        this.setAddrWindow(x, y, x + 1, y + 1);
        this.writeData([color >> 8, color & 0xff]);
    }
    drawChar(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0) {
            // Clip top
            return;
        }
        if (color !== bg) {
            this.drawChar2(x, y, ch, color, bg, size);
            return;
        }
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                if (line & 0x1) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, color);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, color);
                    }
                }
                else if (bg !== color) {
                    if (size === 1) {
                        // default size
                        this.drawPixel(x + i, y + j, bg);
                    }
                    else {
                        // big size
                        this.fillRect(x + i * size, y + j * size, size, size, bg);
                    }
                }
                line >>= 1;
            }
        }
    }
    drawChar2(x, y, ch, color, bg, size) {
        //  bg = bg || color;
        size = size || 1;
        if (x >= this.width || // Clip right
            y >= this.height || // Clip bottom
            x + 6 * size - 1 < 0 || // Clip left
            y + 8 * size - 1 < 0 // Clip top
        ) {
            return;
        }
        const pixels = new Array(6 * 8 * size * size);
        const c = ch.charCodeAt(0);
        for (let i = 0; i < 6; i++) {
            let line = i === 5 ? 0 : font[c * 5 + i];
            for (let j = 0; j < 8; j++) {
                const cl = line & 0x1 ? color : bg;
                for (let w = 0; w < size; w++) {
                    for (let h = 0; h < size; h++) {
                        pixels[i * (1 * size) + w + (j * (6 * size * size) + h * (6 * size))] = cl;
                    }
                }
                line >>= 1;
            }
        }
        this.rawBound16(x, y, 6 * size, 8 * size, pixels);
    }
    rawBound16(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push((v & 0xff00) >> 8);
            rgb.push(v & 0xff);
        });
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
    }
    drawString(x, y, str, color, bg, size, wrap) {
        //  bg = bg || color;
        size = size || 1;
        //  wrap = wrap || true;
        for (let n = 0; n < str.length; n++) {
            const c = str.charAt(n);
            if (c === "\n") {
                y += size * 8;
                x = 0;
            }
            else if (c === "\r") {
                // skip em
            }
            else {
                this.drawChar(x, y, c, color, bg, size);
                x += size * 6;
                if (wrap && x > this.width - size * 6) {
                    y += size * 8;
                    x = 0;
                }
            }
        }
        return [x, y];
    }
    drawContextBound(context, x0, y0, width, height, x1, y1, gray) {
        x0 = x0 || 0;
        y0 = y0 || 0;
        width = width || context.canvas.clientWidth;
        height = height || context.canvas.clientHeight;
        x1 = x1 || 0;
        y1 = y1 || 0;
        gray = gray || false;
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        const imageData = context.getImageData(x0, y0, width, height).data;
        const rgb = [];
        for (let n = 0; n < imageData.length; n += 4) {
            const r = imageData[n + 0];
            const g = imageData[n + 1];
            const b = imageData[n + 2];
            if (!gray) {
                rgb.push(r);
                rgb.push(g);
                rgb.push(b);
            }
            else {
                const gs = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
                rgb.push(gs);
                rgb.push(gs);
                rgb.push(gs);
            }
        }
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x1, y1, x1 + width - 1, y1 + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    drawContext(context, gray) {
        gray = gray || false;
        this.drawContextBound(context, 0, 0, this.width, this.height, 0, 0, gray);
    }
    rawBound(x, y, width, height, pixels) {
        const rgb = [];
        pixels.forEach((v) => {
            rgb.push((v & 0xff0000) >> 16);
            rgb.push((v & 0xff00) >> 8);
            rgb.push(v & 0xff);
        });
        this.write(ST7735_COLMOD, [ST7735_18bit]); // 18bit/pixel
        this.setAddrWindow(x, y, x + width - 1, y + height - 1);
        this._writeBuffer(rgb);
        this._writeBuffer(); // for flush
        this.write(ST7735_COLMOD, [ST7735_16bit]); // 16bit/pixel
    }
    raw(pixels) {
        this.rawBound(0, 0, this.width, this.height, pixels);
    }
    _setPresetColor() {
        this.color = {
            AliceBlue: 0xf7df,
            AntiqueWhite: 0xff5a,
            Aqua: 0x07ff,
            Aquamarine: 0x7ffa,
            Azure: 0xf7ff,
            Beige: 0xf7bb,
            Bisque: 0xff38,
            Black: 0x0000,
            BlanchedAlmond: 0xff59,
            Blue: 0x001f,
            BlueViolet: 0x895c,
            Brown: 0xa145,
            BurlyWood: 0xddd0,
            CadetBlue: 0x5cf4,
            Chartreuse: 0x7fe0,
            Chocolate: 0xd343,
            Coral: 0xfbea,
            CornflowerBlue: 0x64bd,
            Cornsilk: 0xffdb,
            Crimson: 0xd8a7,
            Cyan: 0x07ff,
            DarkBlue: 0x0011,
            DarkCyan: 0x0451,
            DarkGoldenRod: 0xbc21,
            DarkGray: 0xad55,
            DarkGreen: 0x0320,
            DarkKhaki: 0xbdad,
            DarkMagenta: 0x8811,
            DarkOliveGreen: 0x5345,
            DarkOrange: 0xfc60,
            DarkOrchid: 0x9999,
            DarkRed: 0x8800,
            DarkSalmon: 0xecaf,
            DarkSeaGreen: 0x8df1,
            DarkSlateBlue: 0x49f1,
            DarkSlateGray: 0x2a69,
            DarkTurquoise: 0x067a,
            DarkViolet: 0x901a,
            DeepPink: 0xf8b2,
            DeepSkyBlue: 0x05ff,
            DimGray: 0x6b4d,
            DodgerBlue: 0x1c9f,
            FireBrick: 0xb104,
            FloralWhite: 0xffde,
            ForestGreen: 0x2444,
            Fuchsia: 0xf81f,
            Gainsboro: 0xdefb,
            GhostWhite: 0xffdf,
            Gold: 0xfea0,
            GoldenRod: 0xdd24,
            Gray: 0x8410,
            Green: 0x0400,
            GreenYellow: 0xafe5,
            HoneyDew: 0xf7fe,
            HotPink: 0xfb56,
            IndianRed: 0xcaeb,
            Indigo: 0x4810,
            Ivory: 0xfffe,
            Khaki: 0xf731,
            Lavender: 0xe73f,
            LavenderBlush: 0xff9e,
            LawnGreen: 0x7fe0,
            LemonChiffon: 0xffd9,
            LightBlue: 0xaedc,
            LightCoral: 0xf410,
            LightCyan: 0xe7ff,
            LightGoldenRodYellow: 0xffda,
            LightGray: 0xd69a,
            LightGreen: 0x9772,
            LightPink: 0xfdb8,
            LightSalmon: 0xfd0f,
            LightSeaGreen: 0x2595,
            LightSkyBlue: 0x867f,
            LightSlateGray: 0x7453,
            LightSteelBlue: 0xb63b,
            LightYellow: 0xfffc,
            Lime: 0x07e0,
            LimeGreen: 0x3666,
            Linen: 0xff9c,
            Magenta: 0xf81f,
            Maroon: 0x8000,
            MediumAquaMarine: 0x6675,
            MediumBlue: 0x0019,
            MediumOrchid: 0xbaba,
            MediumPurple: 0x939b,
            MediumSeaGreen: 0x3d8e,
            MediumSlateBlue: 0x7b5d,
            MediumSpringGreen: 0x07d3,
            MediumTurquoise: 0x4e99,
            MediumVioletRed: 0xc0b0,
            MidnightBlue: 0x18ce,
            MintCream: 0xf7ff,
            MistyRose: 0xff3c,
            Moccasin: 0xff36,
            NavajoWhite: 0xfef5,
            Navy: 0x0010,
            OldLace: 0xffbc,
            Olive: 0x8400,
            OliveDrab: 0x6c64,
            Orange: 0xfd20,
            OrangeRed: 0xfa20,
            Orchid: 0xdb9a,
            PaleGoldenRod: 0xef55,
            PaleGreen: 0x9fd3,
            PaleTurquoise: 0xaf7d,
            PaleVioletRed: 0xdb92,
            PapayaWhip: 0xff7a,
            PeachPuff: 0xfed7,
            Peru: 0xcc27,
            Pink: 0xfe19,
            Plum: 0xdd1b,
            PowderBlue: 0xb71c,
            Purple: 0x8010,
            RebeccaPurple: 0x6193,
            Red: 0xf800,
            RosyBrown: 0xbc71,
            RoyalBlue: 0x435c,
            SaddleBrown: 0x8a22,
            Salmon: 0xfc0e,
            SandyBrown: 0xf52c,
            SeaGreen: 0x2c4a,
            SeaShell: 0xffbd,
            Sienna: 0xa285,
            Silver: 0xc618,
            SkyBlue: 0x867d,
            SlateBlue: 0x6ad9,
            SlateGray: 0x7412,
            Snow: 0xffdf,
            SpringGreen: 0x07ef,
            SteelBlue: 0x4416,
            Tan: 0xd5b1,
            Teal: 0x0410,
            Thistle: 0xddfb,
            Tomato: 0xfb08,
            Turquoise: 0x471a,
            Violet: 0xec1d,
            Wheat: 0xf6f6,
            White: 0xffff,
            WhiteSmoke: 0xf7be,
            Yellow: 0xffe0,
            YellowGreen: 0x9e66,
        };
    }
}
exports.default = SainSmartTFT18LCD;
// ----------------------------------------------------------
// commands
// const INITR_GREENTAB = 0x0;
// const INITR_REDTAB = 0x1;
// const INITR_BLACKTAB = 0x2;
const ST7735_TFTWIDTH = 128;
const ST7735_TFTHEIGHT = 160;
// const ST7735_NOP = 0x00;
// const ST7735_SWRESET = 0x01;
// const ST7735_RDDID = 0x04;
// const ST7735_RDDST = 0x09;
// const ST7735_RDDPM = 0x0a;
// const ST7735_SLPIN = 0x10;
const ST7735_SLPOUT = 0x11;
// const ST7735_PTLON = 0x12;
// const ST7735_NORON = 0x13;
const ST7735_INVOFF = 0x20;
const ST7735_INVON = 0x21;
const ST7735_DISPOFF = 0x28;
const ST7735_DISPON = 0x29;
const ST7735_CASET = 0x2a;
const ST7735_RASET = 0x2b;
const ST7735_RAMWR = 0x2c;
// const ST7735_RAMRD = 0x2e;
// const ST7735_PTLAR = 0x30;
const ST7735_COLMOD = 0x3a;
const ST7735_MADCTL = 0x36;
const ST7735_FRMCTR1 = 0xb1;
const ST7735_FRMCTR2 = 0xb2;
const ST7735_FRMCTR3 = 0xb3;
const ST7735_INVCTR = 0xb4;
// const ST7735_DISSET5 = 0xb6;
const ST7735_PWCTR1 = 0xc0;
const ST7735_PWCTR2 = 0xc1;
const ST7735_PWCTR3 = 0xc2;
const ST7735_PWCTR4 = 0xc3;
const ST7735_PWCTR5 = 0xc4;
const ST7735_VMCTR1 = 0xc5;
// const ST7735_RDID1 = 0xda;
// const ST7735_RDID2 = 0xdb;
// const ST7735_RDID3 = 0xdc;
// const ST7735_RDID4 = 0xdd;
// const ST7735_PWCTR6 = 0xfc;
const ST7735_GMCTRP1 = 0xe0;
const ST7735_GMCTRN1 = 0xe1;
// Color definitions
// const ST7735_BLACK = 0x0000;
// const ST7735_BLUE = 0x001f;
// const ST7735_RED = 0xf800;
// const ST7735_GREEN = 0x07e0;
// const ST7735_CYAN = 0x07ff;
// const ST7735_MAGENTA = 0xf81f;
// const ST7735_YELLOW = 0xffe0;
// const ST7735_WHITE = 0xffff;
const ST7735_18bit = 0x06; // 18bit/pixel
const ST7735_16bit = 0x05; // 16bit/pixel
// standard ascii 5x7 font
const font = [
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x3e,
    0x5b,
    0x4f,
    0x5b,
    0x3e,
    0x3e,
    0x6b,
    0x4f,
    0x6b,
    0x3e,
    0x1c,
    0x3e,
    0x7c,
    0x3e,
    0x1c,
    0x18,
    0x3c,
    0x7e,
    0x3c,
    0x18,
    0x1c,
    0x57,
    0x7d,
    0x57,
    0x1c,
    0x1c,
    0x5e,
    0x7f,
    0x5e,
    0x1c,
    0x00,
    0x18,
    0x3c,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xc3,
    0xe7,
    0xff,
    0x00,
    0x18,
    0x24,
    0x18,
    0x00,
    0xff,
    0xe7,
    0xdb,
    0xe7,
    0xff,
    0x30,
    0x48,
    0x3a,
    0x06,
    0x0e,
    0x26,
    0x29,
    0x79,
    0x29,
    0x26,
    0x40,
    0x7f,
    0x05,
    0x05,
    0x07,
    0x40,
    0x7f,
    0x05,
    0x25,
    0x3f,
    0x5a,
    0x3c,
    0xe7,
    0x3c,
    0x5a,
    0x7f,
    0x3e,
    0x1c,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x1c,
    0x3e,
    0x7f,
    0x14,
    0x22,
    0x7f,
    0x22,
    0x14,
    0x5f,
    0x5f,
    0x00,
    0x5f,
    0x5f,
    0x06,
    0x09,
    0x7f,
    0x01,
    0x7f,
    0x00,
    0x66,
    0x89,
    0x95,
    0x6a,
    0x60,
    0x60,
    0x60,
    0x60,
    0x60,
    0x94,
    0xa2,
    0xff,
    0xa2,
    0x94,
    0x08,
    0x04,
    0x7e,
    0x04,
    0x08,
    0x10,
    0x20,
    0x7e,
    0x20,
    0x10,
    0x08,
    0x08,
    0x2a,
    0x1c,
    0x08,
    0x08,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x1e,
    0x10,
    0x10,
    0x10,
    0x10,
    0x0c,
    0x1e,
    0x0c,
    0x1e,
    0x0c,
    0x30,
    0x38,
    0x3e,
    0x38,
    0x30,
    0x06,
    0x0e,
    0x3e,
    0x0e,
    0x06,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x5f,
    0x00,
    0x00,
    0x00,
    0x07,
    0x00,
    0x07,
    0x00,
    0x14,
    0x7f,
    0x14,
    0x7f,
    0x14,
    0x24,
    0x2a,
    0x7f,
    0x2a,
    0x12,
    0x23,
    0x13,
    0x08,
    0x64,
    0x62,
    0x36,
    0x49,
    0x56,
    0x20,
    0x50,
    0x00,
    0x08,
    0x07,
    0x03,
    0x00,
    0x00,
    0x1c,
    0x22,
    0x41,
    0x00,
    0x00,
    0x41,
    0x22,
    0x1c,
    0x00,
    0x2a,
    0x1c,
    0x7f,
    0x1c,
    0x2a,
    0x08,
    0x08,
    0x3e,
    0x08,
    0x08,
    0x00,
    0x80,
    0x70,
    0x30,
    0x00,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x00,
    0x00,
    0x60,
    0x60,
    0x00,
    0x20,
    0x10,
    0x08,
    0x04,
    0x02,
    0x3e,
    0x51,
    0x49,
    0x45,
    0x3e,
    0x00,
    0x42,
    0x7f,
    0x40,
    0x00,
    0x72,
    0x49,
    0x49,
    0x49,
    0x46,
    0x21,
    0x41,
    0x49,
    0x4d,
    0x33,
    0x18,
    0x14,
    0x12,
    0x7f,
    0x10,
    0x27,
    0x45,
    0x45,
    0x45,
    0x39,
    0x3c,
    0x4a,
    0x49,
    0x49,
    0x31,
    0x41,
    0x21,
    0x11,
    0x09,
    0x07,
    0x36,
    0x49,
    0x49,
    0x49,
    0x36,
    0x46,
    0x49,
    0x49,
    0x29,
    0x1e,
    0x00,
    0x00,
    0x14,
    0x00,
    0x00,
    0x00,
    0x40,
    0x34,
    0x00,
    0x00,
    0x00,
    0x08,
    0x14,
    0x22,
    0x41,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x00,
    0x41,
    0x22,
    0x14,
    0x08,
    0x02,
    0x01,
    0x59,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x5d,
    0x59,
    0x4e,
    0x7c,
    0x12,
    0x11,
    0x12,
    0x7c,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x36,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x22,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x49,
    0x49,
    0x49,
    0x41,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x01,
    0x3e,
    0x41,
    0x41,
    0x51,
    0x73,
    0x7f,
    0x08,
    0x08,
    0x08,
    0x7f,
    0x00,
    0x41,
    0x7f,
    0x41,
    0x00,
    0x20,
    0x40,
    0x41,
    0x3f,
    0x01,
    0x7f,
    0x08,
    0x14,
    0x22,
    0x41,
    0x7f,
    0x40,
    0x40,
    0x40,
    0x40,
    0x7f,
    0x02,
    0x1c,
    0x02,
    0x7f,
    0x7f,
    0x04,
    0x08,
    0x10,
    0x7f,
    0x3e,
    0x41,
    0x41,
    0x41,
    0x3e,
    0x7f,
    0x09,
    0x09,
    0x09,
    0x06,
    0x3e,
    0x41,
    0x51,
    0x21,
    0x5e,
    0x7f,
    0x09,
    0x19,
    0x29,
    0x46,
    0x26,
    0x49,
    0x49,
    0x49,
    0x32,
    0x03,
    0x01,
    0x7f,
    0x01,
    0x03,
    0x3f,
    0x40,
    0x40,
    0x40,
    0x3f,
    0x1f,
    0x20,
    0x40,
    0x20,
    0x1f,
    0x3f,
    0x40,
    0x38,
    0x40,
    0x3f,
    0x63,
    0x14,
    0x08,
    0x14,
    0x63,
    0x03,
    0x04,
    0x78,
    0x04,
    0x03,
    0x61,
    0x59,
    0x49,
    0x4d,
    0x43,
    0x00,
    0x7f,
    0x41,
    0x41,
    0x41,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x00,
    0x41,
    0x41,
    0x41,
    0x7f,
    0x04,
    0x02,
    0x01,
    0x02,
    0x04,
    0x40,
    0x40,
    0x40,
    0x40,
    0x40,
    0x00,
    0x03,
    0x07,
    0x08,
    0x00,
    0x20,
    0x54,
    0x54,
    0x78,
    0x40,
    0x7f,
    0x28,
    0x44,
    0x44,
    0x38,
    0x38,
    0x44,
    0x44,
    0x44,
    0x28,
    0x38,
    0x44,
    0x44,
    0x28,
    0x7f,
    0x38,
    0x54,
    0x54,
    0x54,
    0x18,
    0x00,
    0x08,
    0x7e,
    0x09,
    0x02,
    0x18,
    0xa4,
    0xa4,
    0x9c,
    0x78,
    0x7f,
    0x08,
    0x04,
    0x04,
    0x78,
    0x00,
    0x44,
    0x7d,
    0x40,
    0x00,
    0x20,
    0x40,
    0x40,
    0x3d,
    0x00,
    0x7f,
    0x10,
    0x28,
    0x44,
    0x00,
    0x00,
    0x41,
    0x7f,
    0x40,
    0x00,
    0x7c,
    0x04,
    0x78,
    0x04,
    0x78,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x78,
    0x38,
    0x44,
    0x44,
    0x44,
    0x38,
    0xfc,
    0x18,
    0x24,
    0x24,
    0x18,
    0x18,
    0x24,
    0x24,
    0x18,
    0xfc,
    0x7c,
    0x08,
    0x04,
    0x04,
    0x08,
    0x48,
    0x54,
    0x54,
    0x54,
    0x24,
    0x04,
    0x04,
    0x3f,
    0x44,
    0x24,
    0x3c,
    0x40,
    0x40,
    0x20,
    0x7c,
    0x1c,
    0x20,
    0x40,
    0x20,
    0x1c,
    0x3c,
    0x40,
    0x30,
    0x40,
    0x3c,
    0x44,
    0x28,
    0x10,
    0x28,
    0x44,
    0x4c,
    0x90,
    0x90,
    0x90,
    0x7c,
    0x44,
    0x64,
    0x54,
    0x4c,
    0x44,
    0x00,
    0x08,
    0x36,
    0x41,
    0x00,
    0x00,
    0x00,
    0x77,
    0x00,
    0x00,
    0x00,
    0x41,
    0x36,
    0x08,
    0x00,
    0x02,
    0x01,
    0x02,
    0x04,
    0x02,
    0x3c,
    0x26,
    0x23,
    0x26,
    0x3c,
    0x1e,
    0xa1,
    0xa1,
    0x61,
    0x12,
    0x3a,
    0x40,
    0x40,
    0x20,
    0x7a,
    0x38,
    0x54,
    0x54,
    0x55,
    0x59,
    0x21,
    0x55,
    0x55,
    0x79,
    0x41,
    0x21,
    0x54,
    0x54,
    0x78,
    0x41,
    0x21,
    0x55,
    0x54,
    0x78,
    0x40,
    0x20,
    0x54,
    0x55,
    0x79,
    0x40,
    0x0c,
    0x1e,
    0x52,
    0x72,
    0x12,
    0x39,
    0x55,
    0x55,
    0x55,
    0x59,
    0x39,
    0x54,
    0x54,
    0x54,
    0x59,
    0x39,
    0x55,
    0x54,
    0x54,
    0x58,
    0x00,
    0x00,
    0x45,
    0x7c,
    0x41,
    0x00,
    0x02,
    0x45,
    0x7d,
    0x42,
    0x00,
    0x01,
    0x45,
    0x7c,
    0x40,
    0xf0,
    0x29,
    0x24,
    0x29,
    0xf0,
    0xf0,
    0x28,
    0x25,
    0x28,
    0xf0,
    0x7c,
    0x54,
    0x55,
    0x45,
    0x00,
    0x20,
    0x54,
    0x54,
    0x7c,
    0x54,
    0x7c,
    0x0a,
    0x09,
    0x7f,
    0x49,
    0x32,
    0x49,
    0x49,
    0x49,
    0x32,
    0x32,
    0x48,
    0x48,
    0x48,
    0x32,
    0x32,
    0x4a,
    0x48,
    0x48,
    0x30,
    0x3a,
    0x41,
    0x41,
    0x21,
    0x7a,
    0x3a,
    0x42,
    0x40,
    0x20,
    0x78,
    0x00,
    0x9d,
    0xa0,
    0xa0,
    0x7d,
    0x39,
    0x44,
    0x44,
    0x44,
    0x39,
    0x3d,
    0x40,
    0x40,
    0x40,
    0x3d,
    0x3c,
    0x24,
    0xff,
    0x24,
    0x24,
    0x48,
    0x7e,
    0x49,
    0x43,
    0x66,
    0x2b,
    0x2f,
    0xfc,
    0x2f,
    0x2b,
    0xff,
    0x09,
    0x29,
    0xf6,
    0x20,
    0xc0,
    0x88,
    0x7e,
    0x09,
    0x03,
    0x20,
    0x54,
    0x54,
    0x79,
    0x41,
    0x00,
    0x00,
    0x44,
    0x7d,
    0x41,
    0x30,
    0x48,
    0x48,
    0x4a,
    0x32,
    0x38,
    0x40,
    0x40,
    0x22,
    0x7a,
    0x00,
    0x7a,
    0x0a,
    0x0a,
    0x72,
    0x7d,
    0x0d,
    0x19,
    0x31,
    0x7d,
    0x26,
    0x29,
    0x29,
    0x2f,
    0x28,
    0x26,
    0x29,
    0x29,
    0x29,
    0x26,
    0x30,
    0x48,
    0x4d,
    0x40,
    0x20,
    0x38,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x38,
    0x2f,
    0x10,
    0xc8,
    0xac,
    0xba,
    0x2f,
    0x10,
    0x28,
    0x34,
    0xfa,
    0x00,
    0x00,
    0x7b,
    0x00,
    0x00,
    0x08,
    0x14,
    0x2a,
    0x14,
    0x22,
    0x22,
    0x14,
    0x2a,
    0x14,
    0x08,
    0xaa,
    0x00,
    0x55,
    0x00,
    0xaa,
    0xaa,
    0x55,
    0xaa,
    0x55,
    0xaa,
    0x00,
    0x00,
    0x00,
    0xff,
    0x00,
    0x10,
    0x10,
    0x10,
    0xff,
    0x00,
    0x14,
    0x14,
    0x14,
    0xff,
    0x00,
    0x10,
    0x10,
    0xff,
    0x00,
    0xff,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x14,
    0x14,
    0x14,
    0xfc,
    0x00,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xff,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xfc,
    0x14,
    0x14,
    0x17,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0x1f,
    0x00,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x10,
    0x10,
    0x10,
    0xf0,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0x10,
    0xff,
    0x10,
    0x00,
    0x00,
    0x00,
    0xff,
    0x14,
    0x00,
    0x00,
    0xff,
    0x00,
    0xff,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x17,
    0x00,
    0x00,
    0xfc,
    0x04,
    0xf4,
    0x14,
    0x14,
    0x17,
    0x10,
    0x17,
    0x14,
    0x14,
    0xf4,
    0x04,
    0xf4,
    0x00,
    0x00,
    0xff,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0xf7,
    0x00,
    0xf7,
    0x14,
    0x14,
    0x14,
    0x17,
    0x14,
    0x10,
    0x10,
    0x1f,
    0x10,
    0x1f,
    0x14,
    0x14,
    0x14,
    0xf4,
    0x14,
    0x10,
    0x10,
    0xf0,
    0x10,
    0xf0,
    0x00,
    0x00,
    0x1f,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x1f,
    0x14,
    0x00,
    0x00,
    0x00,
    0xfc,
    0x14,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xf0,
    0x10,
    0x10,
    0xff,
    0x10,
    0xff,
    0x14,
    0x14,
    0x14,
    0xff,
    0x14,
    0x10,
    0x10,
    0x10,
    0x1f,
    0x00,
    0x00,
    0x00,
    0x00,
    0xf0,
    0x10,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xff,
    0xff,
    0xff,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x38,
    0x44,
    0x44,
    0x38,
    0x44,
    0x7c,
    0x2a,
    0x2a,
    0x3e,
    0x14,
    0x7e,
    0x02,
    0x02,
    0x06,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x7e,
    0x02,
    0x63,
    0x55,
    0x49,
    0x41,
    0x63,
    0x38,
    0x44,
    0x44,
    0x3c,
    0x04,
    0x40,
    0x7e,
    0x20,
    0x1e,
    0x20,
    0x06,
    0x02,
    0x7e,
    0x02,
    0x02,
    0x99,
    0xa5,
    0xe7,
    0xa5,
    0x99,
    0x1c,
    0x2a,
    0x49,
    0x2a,
    0x1c,
    0x4c,
    0x72,
    0x01,
    0x72,
    0x4c,
    0x30,
    0x4a,
    0x4d,
    0x4d,
    0x30,
    0x30,
    0x48,
    0x78,
    0x48,
    0x30,
    0xbc,
    0x62,
    0x5a,
    0x46,
    0x3d,
    0x3e,
    0x49,
    0x49,
    0x49,
    0x00,
    0x7e,
    0x01,
    0x01,
    0x01,
    0x7e,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x2a,
    0x44,
    0x44,
    0x5f,
    0x44,
    0x44,
    0x40,
    0x51,
    0x4a,
    0x44,
    0x40,
    0x40,
    0x44,
    0x4a,
    0x51,
    0x40,
    0x00,
    0x00,
    0xff,
    0x01,
    0x03,
    0xe0,
    0x80,
    0xff,
    0x00,
    0x00,
    0x08,
    0x08,
    0x6b,
    0x6b,
    0x08,
    0x36,
    0x12,
    0x36,
    0x24,
    0x36,
    0x06,
    0x0f,
    0x09,
    0x0f,
    0x06,
    0x00,
    0x00,
    0x18,
    0x18,
    0x00,
    0x00,
    0x00,
    0x10,
    0x10,
    0x00,
    0x30,
    0x40,
    0xff,
    0x01,
    0x01,
    0x00,
    0x1f,
    0x01,
    0x01,
    0x1e,
    0x00,
    0x19,
    0x1d,
    0x17,
    0x12,
    0x00,
    0x3c,
    0x3c,
    0x3c,
    0x3c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Display/SharpMemoryTFT/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class SharpMemoryTFT {
    constructor() {
        this.keys = [
            "vcc",
            "gnd",
            "vcc_a",
            "gnd_a",
            "sclk",
            "mosi",
            "cs",
            "disp",
            "extcomin",
            "extmode",
            "width",
            "height",
        ];
        this.requiredKeys = ["sclk", "mosi", "cs", "width", "height"];
        this.commands = {};
        this.commands.write = 0x80;
        this.commands.clear = 0x20;
        this.commands.vcom = 0x40;
        this._canvas = null;
        this._reset();
    }
    static info() {
        return {
            name: "SharpMemoryTFT",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_cs = obniz.getIO(this.params.cs);
        if (this.params.disp && this.params.extcomin && this.params.extmode) {
            this.io_disp = obniz.getIO(this.params.disp);
            this.io_extcomin = obniz.getIO(this.params.extcomin);
            this.io_extmode = obniz.getIO(this.params.extmode);
            this.io_disp.output(true);
            this.io_extcomin.output(false);
            this.io_extmode.output(false);
        }
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        obniz.setVccGnd(this.params.vcc_a, this.params.gnd_a, "5v");
        this.params.mode = "master";
        this.params.frequency = 1000 * 1000;
        this.params.clk = this.params.sclk;
        this.params.drive = "5v"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
        this.width = this.params.width;
        this.height = this.params.height;
        this.obniz.wait(100);
    }
    _reverseBits(data) {
        let revData = 0;
        for (let i = 0; i < 8; i++) {
            revData += data & 0x01;
            data >>= 1;
            if (i < 7) {
                revData <<= 1;
            }
        }
        return revData;
    }
    sendLSB(data) {
        this.spi.write([this._reverseBits(data)]);
    }
    sendClear() {
        this.io_cs.output(true);
        this.spi.write([this.commands.clear | 0x00, 0x00]);
        this.io_cs.output(false);
    }
    raw(rawData) {
        let oldline;
        let currentline;
        const totalbytes = (this.width * this.height) / 8;
        let array = new Array(1024);
        let index = 0;
        array[index++] = this.commands.write | this.commands.vcom;
        oldline = currentline = 1;
        array[index++] = this._reverseBits(currentline);
        this.io_cs.output(true);
        for (let i = 0; i < totalbytes; i++) {
            array[index++] = rawData[i]; // lsb
            currentline = Math.floor((i + 1) / (this.width / 8) + 1);
            if (currentline !== oldline) {
                array[index++] = 0x00;
                if (currentline <= this.height) {
                    array[index++] = this._reverseBits(currentline);
                }
                oldline = currentline;
            }
            if (index >= 1021) {
                // regarding SPI max.
                this.spi.write(array.slice(0, index));
                array = new Array(1024);
                index = 0;
            }
        }
        if (index > 0) {
            this.spi.write(array.slice(0, index));
        }
        this.spi.write([0x00]);
        this.io_cs.output(false);
    }
    // copy from display.js
    _reset() {
        this._pos = { x: 0, y: 0 };
        this.autoFlush = true;
    }
    warnCanvasAvailability() {
        if (this.obniz.isNode) {
            throw new Error("MemoryDisplay require node-canvas to draw rich contents. see more detail on docs");
        }
        else {
            throw new Error("MemoryDisplay cant create canvas element to body");
        }
    }
    _preparedCanvas() {
        if (this._canvas) {
            return this._canvas;
        }
        if (this.obniz.isNode) {
            try {
                const { createCanvas } = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
                this._canvas = createCanvas(this.width, this.height);
            }
            catch (e) {
                // this.warnCanvasAvailability();
                return null;
            }
        }
        else {
            const identifier = "MemoryDispCanvas-" + this.obniz.id;
            let canvas = document.getElementById(identifier);
            if (!canvas) {
                canvas = document.createElement("canvas");
                canvas.setAttribute("id", identifier);
                canvas.style.visibility = "hidden";
                canvas.width = this.width;
                canvas.height = this.height;
                canvas.style["-webkit-font-smoothing"] = "none";
                const body = document.getElementsByTagName("body")[0];
                body.appendChild(canvas);
            }
            this._canvas = canvas;
        }
        const ctx = this._canvas.getContext("2d");
        ctx.fillStyle = "#FFF";
        ctx.fillRect(0, 0, this.width, this.height);
        ctx.fillStyle = "#000";
        ctx.strokeStyle = "#000";
        this._pos.x = 0;
        this._pos.y = 0;
        this.fontSize = 16;
        ctx.font = `${this.fontSize}px Arial`;
        return this._canvas;
    }
    _ctx() {
        const canvas = this._preparedCanvas();
        if (canvas) {
            return canvas.getContext("2d");
        }
    }
    font(font, size) {
        const ctx = this._ctx();
        if (typeof size !== "number") {
            size = 16;
        }
        if (typeof font !== "string") {
            font = "Arial";
        }
        this.fontSize = size;
        ctx.font = "" + size + "px " + font;
    }
    clear() {
        const ctx = this._ctx();
        this._pos.x = 0;
        this._pos.y = 0;
        if (ctx) {
            ctx.fillStyle = "#fff";
            ctx.fillRect(0, 0, this.width, this.height);
            ctx.fillStyle = "#000";
            ctx.strokeStyle = "#000";
            this.draw(ctx);
        }
        else {
            this.sendClear();
        }
    }
    pos(x, y) {
        this._ctx(); // crete first
        if (typeof x === "number") {
            this._pos.x = x;
        }
        if (typeof y === "number") {
            this._pos.y = y;
        }
        return this._pos;
    }
    print(text) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.fillText(text, this._pos.x, this._pos.y + this.fontSize);
            this.draw(ctx);
            this._pos.y += this.fontSize;
        }
        else {
            /*
            let obj = {};
            obj['display'] = {
              text: '' + text,
            };
            this.obniz.send(obj);
            */
        }
    }
    line(x_0, y_0, x_1, y_1) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x_0, y_0);
            ctx.lineTo(x_1, y_1);
            ctx.stroke();
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    rect(x, y, width, height, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            if (mustFill) {
                ctx.fillRect(x, y, width, height);
            }
            else {
                ctx.strokeRect(x, y, width, height);
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    circle(x, y, r, mustFill) {
        const ctx = this._ctx();
        if (ctx) {
            ctx.beginPath();
            ctx.arc(x, y, r, 0, Math.PI * 2);
            if (mustFill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
            this.draw(ctx);
        }
        else {
            this.warnCanvasAvailability();
        }
    }
    _draw(ctx) {
        const stride = this.width / 8;
        const vram = new Array(stride * 64);
        const imageData = ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            const index = Math.floor(i / 4);
            const line = Math.floor(index / this.width);
            const col = Math.floor((index - line * this.width) / 8);
            const bits = Math.floor(index - line * this.width) % 8;
            if (bits === 0) {
                vram[line * stride + col] = 0x00;
            }
            if (brightness > 0x73) {
                vram[line * stride + col] |= 0x80 >> bits;
            }
        }
        this.raw(vram);
    }
    draw(ctx) {
        if (this.autoFlush) {
            this._draw(ctx);
        }
    }
    drawing(autoFlush) {
        this.autoFlush = autoFlush === true;
        const ctx = this._ctx();
        if (ctx) {
            this.draw(ctx);
        }
    }
}
exports.default = SharpMemoryTFT;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/DistanceSensor/GP2Y0A21YK0F/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class GP2Y0A21YK0F {
    constructor() {
        this.keys = ["vcc", "gnd", "signal"];
        this.requiredKeys = ["signal"];
        this.displayIoNames = {
            vcc: "vcc",
            gnd: "gnd",
            signal: "signal",
        };
        this._unit = "mm";
    }
    static info() {
        return {
            name: "GP2Y0A21YK0F",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.end();
        this.ad_signal = obniz.getAD(this.params.signal);
    }
    start(callback) {
        this.ad_signal.start((val) => {
            const distance = this._volt2distance(val);
            if (typeof callback === "function") {
                callback(distance);
            }
        });
    }
    _volt2distance(val) {
        if (val <= 0) {
            val = 0.001;
        }
        let distance = 19988.34 * Math.pow((val / 5.0) * 1024, -1.25214) * 10;
        if (this._unit === "mm") {
            distance = Math.floor(distance * 10) / 10;
        }
        else {
            distance *= 0.0393701;
            distance = Math.floor(distance * 1000) / 1000;
        }
        return distance;
    }
    getWait() {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const val = yield this.ad_signal.getWait();
            const distance = this._volt2distance(val);
            resolve(distance);
        }));
    }
    unit(unit) {
        if (unit === "mm") {
            this._unit = "mm";
        }
        else if (unit === "inch") {
            this._unit = "inch";
        }
        else {
            throw new Error("unknown unit " + unit);
        }
    }
}
exports.default = GP2Y0A21YK0F;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9EaXN0YW5jZVNlbnNvci9HUDJZMEEyMVlLMEYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFlBQVk7SUFpQmhCO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDcEIsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztZQUNWLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBekJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsY0FBYztTQUNyQixDQUFDO0lBQ0osQ0FBQztJQXVCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFhO1FBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDaEMsTUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQyxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtnQkFDbEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sY0FBYyxDQUFDLEdBQVE7UUFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1lBQ1osR0FBRyxHQUFHLEtBQUssQ0FBQztTQUNiO1FBQ0QsSUFBSSxRQUFRLEdBQVEsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNFLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDdkIsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMzQzthQUFNO1lBQ0wsUUFBUSxJQUFJLFNBQVMsQ0FBQztZQUN0QixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksT0FBTyxDQUFDLENBQU8sT0FBTyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2hELE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVM7UUFDbkIsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO2FBQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1NBQ3JCO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7Q0FDRjtBQUVELGtCQUFlLFlBQVksQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvRGlzdGFuY2VTZW5zb3IvR1AyWTBBMjFZSzBGL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgR1AyWTBBMjFZSzBGIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiR1AyWTBBMjFZSzBGXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIGRpc3BsYXlJb05hbWVzOiBhbnk7XG4gIHB1YmxpYyBfdW5pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fc2lnbmFsOiBhbnk7XG4gIHB1YmxpYyBhZF9zaWduYWw6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJnbmRcIiwgXCJzaWduYWxcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG5cbiAgICB0aGlzLmRpc3BsYXlJb05hbWVzID0ge1xuICAgICAgdmNjOiBcInZjY1wiLFxuICAgICAgZ25kOiBcImduZFwiLFxuICAgICAgc2lnbmFsOiBcInNpZ25hbFwiLFxuICAgIH07XG4gICAgdGhpcy5fdW5pdCA9IFwibW1cIjtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuICAgIHRoaXMuaW9fc2lnbmFsID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuc2lnbmFsKTtcbiAgICB0aGlzLmlvX3NpZ25hbC5lbmQoKTtcbiAgICB0aGlzLmFkX3NpZ25hbCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLnNpZ25hbCk7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuYWRfc2lnbmFsLnN0YXJ0KCh2YWw6IGFueSkgPT4ge1xuICAgICAgY29uc3QgZGlzdGFuY2U6IGFueSA9IHRoaXMuX3ZvbHQyZGlzdGFuY2UodmFsKTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayhkaXN0YW5jZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgX3ZvbHQyZGlzdGFuY2UodmFsOiBhbnkpIHtcbiAgICBpZiAodmFsIDw9IDApIHtcbiAgICAgIHZhbCA9IDAuMDAxO1xuICAgIH1cbiAgICBsZXQgZGlzdGFuY2U6IGFueSA9IDE5OTg4LjM0ICogTWF0aC5wb3coKHZhbCAvIDUuMCkgKiAxMDI0LCAtMS4yNTIxNCkgKiAxMDtcbiAgICBpZiAodGhpcy5fdW5pdCA9PT0gXCJtbVwiKSB7XG4gICAgICBkaXN0YW5jZSA9IE1hdGguZmxvb3IoZGlzdGFuY2UgKiAxMCkgLyAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzdGFuY2UgKj0gMC4wMzkzNzAxO1xuICAgICAgZGlzdGFuY2UgPSBNYXRoLmZsb29yKGRpc3RhbmNlICogMTAwMCkgLyAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0V2FpdCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IHZhbDogYW55ID0gYXdhaXQgdGhpcy5hZF9zaWduYWwuZ2V0V2FpdCgpO1xuICAgICAgY29uc3QgZGlzdGFuY2U6IGFueSA9IHRoaXMuX3ZvbHQyZGlzdGFuY2UodmFsKTtcbiAgICAgIHJlc29sdmUoZGlzdGFuY2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVuaXQodW5pdDogYW55KSB7XG4gICAgaWYgKHVuaXQgPT09IFwibW1cIikge1xuICAgICAgdGhpcy5fdW5pdCA9IFwibW1cIjtcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT09IFwiaW5jaFwiKSB7XG4gICAgICB0aGlzLl91bml0ID0gXCJpbmNoXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdW5pdCBcIiArIHVuaXQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHUDJZMEEyMVlLMEY7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/DistanceSensor/HC-SR04/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class HCSR04 {
    constructor() {
        this.keys = ["vcc", "trigger", "echo", "gnd"];
        this.requiredKeys = ["vcc", "trigger", "echo"];
        this._unit = "mm";
        this.reset_alltime = false;
        this.temp = 15;
    }
    static info() {
        return {
            name: "HC-SR04",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(null, this.params.gnd, "5v");
        this.vccIO = obniz.getIO(this.params.vcc);
        this.trigger = this.params.trigger;
        this.echo = this.params.echo;
        this.vccIO.drive("5v");
        this.vccIO.output(true);
        this.obniz.wait(100);
    }
    measure(callback) {
        const self = this;
        this.obniz.measure.echo({
            io_pulse: this.trigger,
            io_echo: this.echo,
            pulse: "positive",
            pulse_width: 0.011,
            measure_edges: 3,
            timeout: (10 / 340) * 1000,
            callback: (edges) => __awaiter(this, void 0, void 0, function* () {
                if (this.reset_alltime) {
                    this.vccIO.output(false);
                    this.obniz.wait(100);
                    this.vccIO.output(true);
                    this.obniz.wait(100);
                }
                let distance;
                for (let i = 0; i < edges.length - 1; i++) {
                    // HCSR04's output of io_echo is initially high when trigger is finshed
                    if (edges[i].edge === true) {
                        const time = (edges[i + 1].timing - edges[i].timing) / 1000; // (1/4000 * 8) + is needed??
                        distance =
                            (time / 2) * 20.055 * Math.sqrt(this.temp + 273.15) * 1000;
                        if (self._unit === "inch") {
                            distance = distance * 0.0393701;
                        }
                    }
                }
                if (typeof callback === "function") {
                    callback(distance);
                }
            }),
        });
    }
    measureWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.measure((distance) => {
                    resolve(distance);
                });
            });
        });
    }
    unit(unit) {
        if (unit === "mm") {
            this._unit = "mm";
        }
        else if (unit === "inch") {
            this._unit = "inch";
        }
        else {
            throw new Error("HCSR04: unknown unit " + unit);
        }
    }
}
exports.default = HCSR04;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9EaXN0YW5jZVNlbnNvci9IQy1TUjA0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxNQUFNO0lBbUJWO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBRTNCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUF6Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBdUJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sT0FBTyxDQUFDLFFBQWE7UUFDMUIsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDdEIsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2xCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLE9BQU8sRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJO1lBQzFCLFFBQVEsRUFBRSxDQUFPLEtBQVUsRUFBRSxFQUFFO2dCQUM3QixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7b0JBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QjtnQkFDRCxJQUFJLFFBQWEsQ0FBQztnQkFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN6Qyx1RUFBdUU7b0JBQ3ZFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7d0JBQzFCLE1BQU0sSUFBSSxHQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLDZCQUE2Qjt3QkFDL0YsUUFBUTs0QkFDTixDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQzt3QkFDN0QsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sRUFBRTs0QkFDekIsUUFBUSxHQUFHLFFBQVEsR0FBRyxTQUFTLENBQUM7eUJBQ2pDO3FCQUNGO2lCQUNGO2dCQUNELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO29CQUNsQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3BCO1lBQ0gsQ0FBQyxDQUFBO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVZLFdBQVc7O1lBQ3RCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO29CQUM3QixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFTSxJQUFJLENBQUMsSUFBUztRQUNuQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7YUFBTSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7U0FDckI7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDakQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0Rpc3RhbmNlU2Vuc29yL0hDLVNSMDQvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBIQ1NSMDQge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJIQy1TUjA0XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIF91bml0OiBhbnk7XG4gIHB1YmxpYyByZXNldF9hbGx0aW1lOiBhbnk7XG4gIHB1YmxpYyB0ZW1wOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyB2Y2NJTzogYW55O1xuICBwdWJsaWMgdHJpZ2dlcjogYW55O1xuICBwdWJsaWMgZWNobzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInZjY1wiLCBcInRyaWdnZXJcIiwgXCJlY2hvXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1widmNjXCIsIFwidHJpZ2dlclwiLCBcImVjaG9cIl07XG5cbiAgICB0aGlzLl91bml0ID0gXCJtbVwiO1xuICAgIHRoaXMucmVzZXRfYWxsdGltZSA9IGZhbHNlO1xuXG4gICAgdGhpcy50ZW1wID0gMTU7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIG9ibml6LnNldFZjY0duZChudWxsLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLnZjY0lPID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMudmNjKTtcbiAgICB0aGlzLnRyaWdnZXIgPSB0aGlzLnBhcmFtcy50cmlnZ2VyO1xuICAgIHRoaXMuZWNobyA9IHRoaXMucGFyYW1zLmVjaG87XG5cbiAgICB0aGlzLnZjY0lPLmRyaXZlKFwiNXZcIik7XG4gICAgdGhpcy52Y2NJTy5vdXRwdXQodHJ1ZSk7XG4gICAgdGhpcy5vYm5pei53YWl0KDEwMCk7XG4gIH1cblxuICBwdWJsaWMgbWVhc3VyZShjYWxsYmFjazogYW55KSB7XG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcbiAgICB0aGlzLm9ibml6Lm1lYXN1cmUuZWNobyh7XG4gICAgICBpb19wdWxzZTogdGhpcy50cmlnZ2VyLFxuICAgICAgaW9fZWNobzogdGhpcy5lY2hvLFxuICAgICAgcHVsc2U6IFwicG9zaXRpdmVcIixcbiAgICAgIHB1bHNlX3dpZHRoOiAwLjAxMSxcbiAgICAgIG1lYXN1cmVfZWRnZXM6IDMsXG4gICAgICB0aW1lb3V0OiAoMTAgLyAzNDApICogMTAwMCxcbiAgICAgIGNhbGxiYWNrOiBhc3luYyAoZWRnZXM6IGFueSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yZXNldF9hbGx0aW1lKSB7XG4gICAgICAgICAgdGhpcy52Y2NJTy5vdXRwdXQoZmFsc2UpO1xuICAgICAgICAgIHRoaXMub2JuaXoud2FpdCgxMDApO1xuICAgICAgICAgIHRoaXMudmNjSU8ub3V0cHV0KHRydWUpO1xuICAgICAgICAgIHRoaXMub2JuaXoud2FpdCgxMDApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkaXN0YW5jZTogYW55O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIC8vIEhDU1IwNCdzIG91dHB1dCBvZiBpb19lY2hvIGlzIGluaXRpYWxseSBoaWdoIHdoZW4gdHJpZ2dlciBpcyBmaW5zaGVkXG4gICAgICAgICAgaWYgKGVkZ2VzW2ldLmVkZ2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWU6IGFueSA9IChlZGdlc1tpICsgMV0udGltaW5nIC0gZWRnZXNbaV0udGltaW5nKSAvIDEwMDA7IC8vICgxLzQwMDAgKiA4KSArIGlzIG5lZWRlZD8/XG4gICAgICAgICAgICBkaXN0YW5jZSA9XG4gICAgICAgICAgICAgICh0aW1lIC8gMikgKiAyMC4wNTUgKiBNYXRoLnNxcnQodGhpcy50ZW1wICsgMjczLjE1KSAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc2VsZi5fdW5pdCA9PT0gXCJpbmNoXCIpIHtcbiAgICAgICAgICAgICAgZGlzdGFuY2UgPSBkaXN0YW5jZSAqIDAuMDM5MzcwMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY2FsbGJhY2soZGlzdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIG1lYXN1cmVXYWl0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICB0aGlzLm1lYXN1cmUoKGRpc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgICAgcmVzb2x2ZShkaXN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1bml0KHVuaXQ6IGFueSkge1xuICAgIGlmICh1bml0ID09PSBcIm1tXCIpIHtcbiAgICAgIHRoaXMuX3VuaXQgPSBcIm1tXCI7XG4gICAgfSBlbHNlIGlmICh1bml0ID09PSBcImluY2hcIikge1xuICAgICAgdGhpcy5fdW5pdCA9IFwiaW5jaFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIQ1NSMDQ6IHVua25vd24gdW5pdCBcIiArIHVuaXQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIQ1NSMDQ7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GPS/GYSFDMAXB/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class GYSFDMAXB {
    constructor() {
        this.keys = ["vcc", "txd", "rxd", "gnd", "Opps"];
        this.requiredKeys = ["txd", "rxd"];
        this.ioKeys = this.keys;
        this.displayName = "gps";
        this.displayIoNames = { txd: "txd", rxd: "rxd", Opps: "1pps" };
    }
    // -------------------
    get latitude() {
        return this.nmea2dd(this._latitude);
    }
    get longitude() {
        return this.nmea2dd(this._longitude);
    }
    static info() {
        return {
            name: "GYSFDMAXB",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.tx = this.params.txd;
        this.rx = this.params.rxd;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        this.Opps = this.params.Opps;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.txd,
            rx: this.params.rxd,
            baud: 9600,
            drive: "3v",
        });
        this.editedData = {};
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        this.on1pps = null;
        this.last1pps = 0;
        this.gpsInfo = {};
        this.gpsInfo._sentenceType = {
            GPGGA: 0x0001,
            GPGSA: 0x0002,
            GPGSV: 0x0004,
            GPRMC: 0x0008,
            GPVTG: 0x0010,
            GPZDA: 0x0020,
        };
        this.gpsInfo.status = "V";
        this.gpsInfo.sentences = new Set(); // Set specifying sentence of MNEA from which data have been obtained
        this.gpsInfo.satelliteInfo = {
            satellites: [],
            inView: 0,
        };
    }
    start1pps(callback) {
        this.on1pps = callback;
        if (callback) {
            this.last1pps = 2;
            this.obniz.getAD(this.Opps).self = this;
            this.obniz.getAD(this.Opps).start((voltage) => {
                const vol = Math.round(voltage);
                if (vol !== this.self.last1pps) {
                    this.self.last1pps = vol;
                    if (vol === 0 && this.self.on1pps) {
                        this.self.on1pps();
                    }
                }
            });
        }
        else {
            this.obniz.getAD(this.Opps).end();
        }
    }
    readSentence() {
        let results = [];
        if (this.uart.isDataExists()) {
            const pos = this.uart.received.indexOf(0x0a);
            if (pos >= 0) {
                results = this.uart.received.slice(0, pos - 1);
                this.uart.received.splice(0, pos + 1);
                return this.uart.tryConvertString(results);
            }
        }
        return "";
    }
    getEditedData() {
        let n;
        let utc;
        let format;
        let sentence = this.readSentence();
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        while (sentence.length > 0) {
            const part = sentence.split(",");
            if (sentence.slice(-4, -3) !== ",") {
                const st = part[part.length - 1].slice(0, -3);
                part.push(part[part.length - 1].slice(-3));
                part[part.length - 2] = st;
            }
            this.editedData.sentence = part.join(",");
            switch (part[0]) {
                case "$GPGGA":
                    this.editedData.GPGGA = part;
                    break;
                case "$GPGLL":
                    this.editedData.GPGLL = part;
                    break;
                case "$GPGSA":
                    this.editedData.GPGSA = part;
                    break;
                case "$GPGSV":
                    n = Number(part[2]);
                    if (n > this.editedData.GPGSV.length) {
                        while (n > this.editedData.GPGSV.length) {
                            this.editedData.GPGSV.push([]);
                        }
                    }
                    this.editedData.GPGSV[n - 1] = part;
                    break;
                case "$GPRMC":
                    this.editedData.GPRMC = part;
                    break;
                case "$GPVTG":
                    this.editedData.GPVTG = part;
                    break;
                case "$GPZDA":
                    this.editedData.GPZDA = part;
                    utc =
                        part[4] +
                            "/" +
                            part[3] +
                            "/" +
                            part[2] +
                            " " +
                            part[1].substring(0, 2) +
                            ":" +
                            part[1].substring(2, 4) +
                            ":" +
                            part[1].substring(4, 6) +
                            " +00:00";
                    this.editedData.timestamp = new Date(utc);
                    break;
                default:
                    format = part[0].substr(1);
                    this.editedData[format] = part;
            }
            this.editedData.enable = true;
            sentence = this.readSentence();
        }
        return this.editedData;
    }
    getGpsInfo(editedData) {
        const NMEA_SATINSENTENCE = 4;
        const NMEA_MAXSAT = 12;
        editedData = editedData || this.getEditedData();
        this.gpsInfo.status = "V";
        if (editedData.enable) {
            if (editedData.GPGGA) {
                const gga = editedData.GPGGA;
                this.gpsInfo.gpsQuality = parseFloat(gga[6]); // Fix Quality: 0 = Invalid, 1 = GPS fix, 2 = DGPS fix
                this.gpsInfo.hdop = parseFloat(gga[8]); // Horizontal Dilution of Precision (HDOP)
                this.gpsInfo.altitude = parseFloat(gga[9]); // Antenna Altitude meters above mean sea level
                const latitude = this.nmea2dd(parseFloat(gga[2]));
                this.gpsInfo.latitude = gga[3] === "N" ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(gga[4]));
                this.gpsInfo.longitude = gga[5] === "E" ? longitude : -longitude;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGGA);
            }
            if (editedData.GPGSV) {
                for (let n = 0; n < editedData.GPGSV.length; n++) {
                    if (editedData.GPGSV[n]) {
                        const gsv = editedData.GPGSV[n].map((v) => parseFloat(v));
                        const pack_count = gsv[1];
                        const pack_index = gsv[2];
                        const sat_count = gsv[3];
                        if (pack_index > pack_count) {
                            continue;
                        }
                        this.gpsInfo.satelliteInfo.inView = sat_count;
                        let nsat = (pack_index - 1) * NMEA_SATINSENTENCE;
                        nsat =
                            nsat + NMEA_SATINSENTENCE > sat_count
                                ? sat_count - nsat
                                : NMEA_SATINSENTENCE;
                        for (let isat = 0; isat < nsat; ++isat) {
                            const isi = (pack_index - 1) * NMEA_SATINSENTENCE + isat;
                            if (this.gpsInfo.satelliteInfo.satellites.length <= isi) {
                                this.gpsInfo.satelliteInfo.satellites.push({});
                            }
                            const isatn = isat * NMEA_SATINSENTENCE;
                            this.gpsInfo.satelliteInfo.satellites[isi] = {
                                id: gsv[isatn + 4],
                                elevation: gsv[isatn + 5],
                                azimuth: gsv[isatn + 6],
                                snr: gsv[isatn + 7],
                                inUse: false,
                            };
                        }
                        this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSV);
                    }
                }
            }
            if (editedData.GPGSA) {
                const gsa = editedData.GPGSA;
                let nuse = 0;
                this.gpsInfo.fixMode = parseFloat(gsa[2]); // Fix Mode: 1=Fix not available, 2=2D, 3=3D
                this.gpsInfo.pdop = parseFloat(gsa[15]); // PDOP: Position Dilution of Precision
                this.gpsInfo.hdop = parseFloat(gsa[16]); // HDOP: Horizontal Dilution of Precision
                this.gpsInfo.vdop = parseFloat(gsa[17]); // VDOP: Vertical Dilution of Position
                for (let i = 0; i < NMEA_MAXSAT; ++i) {
                    for (let j = 0; j < this.gpsInfo.satelliteInfo.inView; ++j) {
                        if (this.gpsInfo.satelliteInfo.satellites[j] &&
                            gsa[i + 3] === this.gpsInfo.satelliteInfo.satellites[j].id) {
                            this.gpsInfo.satelliteInfo.satellites[j].inUse = true;
                            nuse++;
                        }
                    }
                }
                this.gpsInfo.satelliteInfo.inUse = nuse;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSA);
            }
            if (editedData.GPRMC) {
                const rmc = editedData.GPRMC;
                this.gpsInfo.status = rmc[2]; // Status Active or Void
                const latitude = this.nmea2dd(parseFloat(rmc[3]));
                this.gpsInfo.latitude = rmc[4] === "N" ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(rmc[5]));
                this.gpsInfo.longitude = rmc[6] === "E" ? longitude : -longitude;
                const NMEA_TUD_KNOTS = 1.852; // 1knot=1.852km/h
                this.gpsInfo.speed = parseFloat(rmc[7]) * NMEA_TUD_KNOTS; // unit: km/h
                this.gpsInfo.direction = rmc[8];
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPRMC);
            }
            if (editedData.GPVTG) {
                const vtg = editedData.GPVTG;
                this.gpsInfo.direction = parseFloat(vtg[1]);
                this.gpsInfo.declination = parseFloat(vtg[3]);
                this.gpsInfo.speed = parseFloat(vtg[7]);
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPVTG);
            }
            if (editedData.GPZDA) {
                this.gpsInfo.utc = editedData.timestamp;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPZDA);
            }
        }
        return this.gpsInfo;
    }
    _mneaTo(format, value) {
        let result = this.nmea2dd(value);
        if (typeof format === "string") {
            switch (format.toUpperCase()) {
                case "DMS":
                    result = this.nmea2dms(value);
                    break;
                case "DM":
                    result = this.nmea2dm(value);
                    break;
                case "S":
                    result = this.nmea2s(value);
                    break;
                default:
            }
        }
        return result;
    }
    latitudeTo(format) {
        return this._mneaTo(format, this._latitude);
    }
    longitudeTo(format) {
        return this._mneaTo(format, this._longitude);
    }
    status2string(status) {
        status = status || this.status;
        if (status === "A") {
            return "Active";
        }
        if (status === "V") {
            return "Void";
        }
        return status;
    }
    fixMode2string(fixMode) {
        fixMode = fixMode || this.fixMode;
        if (fixMode === 1) {
            return "Fix not available";
        }
        if (fixMode === 2) {
            return "2D";
        }
        if (fixMode === 3) {
            return "3D";
        }
        return fixMode;
    }
    gpsQuality2string(gpsQuality) {
        gpsQuality = gpsQuality || this.gpsQuality;
        if (gpsQuality === 0) {
            return "Invalid";
        }
        if (gpsQuality === 1) {
            return "GPS fix";
        }
        if (gpsQuality === 2) {
            return "DGPS fix";
        }
        return gpsQuality;
    }
    // --- latitude/longitude MNEA format change to each unit
    nmea2dms(val) {
        // NMEA format to DMS format string (999° 99'99.9")
        val = parseFloat(val);
        const d = Math.floor(val / 100);
        const m = Math.floor((val / 100.0 - d) * 100.0);
        const s = ((val / 100.0 - d) * 100.0 - m) * 60;
        return d + "°" + m + "'" + s.toFixed(1) + '"';
    }
    nmea2dm(val) {
        // NMEA format to DM format string (999° 99.9999')
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = (val / 100.0 - d) * 100.0;
        return d + "°" + m.toFixed(4) + "'";
    }
    nmea2dd(val) {
        // NMEA format to DD format decimal (999.999999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return parseFloat((d + m + s).toFixed(6));
    }
    nmea2s(val) {
        // NMEA format to S format decimal (99999.9999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return (d + m + s) / (1.0 / 60.0 / 60.0);
    }
}
exports.default = GYSFDMAXB;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ135/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ135 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ135",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ135;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVExMzUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEtBQUs7SUFxQlQ7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7UUFFOUIsc0JBQXNCO1FBQ3RCLHVCQUF1QjtJQUN6QixDQUFDO0lBOUJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBNEJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDN0IsbUNBQW1DO2dCQUNuQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxVQUFVLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzlCO2dCQUNELElBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFFBQVE7b0JBQ3JDLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTztvQkFDNUIsT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFDMUM7b0JBQ0EsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDL0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQzNCLElBQUksT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtvQkFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDN0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLFlBQVk7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxRQUFRLENBQUMsT0FBWTtRQUMxQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQztTQUNqQjthQUFNO1lBQ0wsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO1lBQ2xDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBZ0JGO0FBRUQsa0JBQWUsS0FBSyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9HYXNTZW5zb3IvTVExMzUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNUTEzNSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RMTM1XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlYW5hbG9nOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWRpZ2l0YWw6IGFueTtcbiAgcHVibGljIG9uZXhjZWVkdm9sdGFnZTogYW55O1xuICBwdWJsaWMgdm9sdGFnZUxpbWl0OiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgdmNjOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGduZDogYW55O1xuICBwdWJsaWMgYWQ6IGFueTtcbiAgcHVibGljIGRvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wiZ25kXCIsIFwidmNjXCIsIFwiZG9cIiwgXCJhb1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuXG4gICAgdGhpcy5vbmNoYW5nZWFuYWxvZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnZvbHRhZ2VMaW1pdCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIHRoaXMuUkwgPSAyICogMTAwMDtcbiAgICAvLyB0aGlzLlJPID0gMjAgKiAxMDAwO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLnZjYyA9IHRoaXMucGFyYW1zLnZjYztcbiAgICB0aGlzLmduZCA9IHRoaXMucGFyYW1zLmduZDtcblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5hbykpIHtcbiAgICAgIHRoaXMuYWQgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5hbyk7XG4gICAgICB0aGlzLmFkLnN0YXJ0KCh2b2x0YWdlOiBhbnkpID0+IHtcbiAgICAgICAgLy8gdGhpcy5sZXZlbCA9IHRoaXMuY2FsYyh2b2x0YWdlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlYW5hbG9nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlYW5hbG9nKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgdGhpcy52b2x0YWdlTGltaXQgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgICB0aGlzLnZvbHRhZ2VMaW1pdCA8PSB2b2x0YWdlICYmXG4gICAgICAgICAgdHlwZW9mIHRoaXMub25leGNlZWR2b2x0YWdlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2Uodm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5kbykpIHtcbiAgICAgIHRoaXMuZG8gPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5kbyk7XG4gICAgICB0aGlzLmRvLmlucHV0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXJ0SGVhdGluZygpIHtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnZjYywgdGhpcy5nbmQsIFwiNXZcIik7XG4gIH1cblxuICBwdWJsaWMgaGVhdFdhaXQoc2Vjb25kczogYW55KSB7XG4gICAgdGhpcy5zdGFydEhlYXRpbmcoKTtcbiAgICBpZiAoc2Vjb25kcyA+IDApIHtcbiAgICAgIHNlY29uZHMgKj0gMTAwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Vjb25kcyA9IDIgKiA2MCAqIDEwMDA7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHNlY29uZHMpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gUnMvUm8gd2lsbCBkZXNjcmVhc2UgYnkgaW5zZWFzZSBvZiBnYXMuXG4gIC8vIFJzID0gcmVzaXRhbmNlIDIway0xMDBrLiBSbyA9IHJlc2lzdGFuY2Ugb2YgMTAwMHBwbSBMUEdcbiAgLy8gSWYgUkwgPVxuXG4gIC8vIGNhbGModm9sdGFnZSkge1xuXG4gIC8vICAgaWYgKHZvbHRhZ2UgPT09MCkge1xuICAvLyAgICAgdm9sdGFnZSA9IDAuMDAwMDAxXG4gIC8vICAgfVxuICAvLyAgIGNvbnN0IFJTID0gdGhpcy5STCAvIHZvbHRhZ2UgKiA1LjBcbiAgLy8gICBjb25zdCByYXRpbyA9IFJTIC8gdGhpcy5STztcblxuICAvLyAgIHJldHVybiB2b2x0YWdlO1xuICAvLyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1RMTM1O1xuIl19


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ2/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ2 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ2",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ2;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVEyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RMi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RMiB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RMlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTI7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ3 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ3",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ3;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVEzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RMy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RMyB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RM1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTM7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ4/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ4 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ4",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ4;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RNC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RNCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RNFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTQ7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ5/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ5 {
    // https://www.parallax.com/sites/default/files/downloads/605-00009-MQ-5-Datasheet.pdf
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ5",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ5;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE1L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQLHNGQUFzRjtJQUN0RjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUU5QixzQkFBc0I7UUFDdEIsdUJBQXVCO0lBQ3pCLENBQUM7SUEvQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQztJQUNKLENBQUM7SUE2Qk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBRTNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO2dCQUM3QixtQ0FBbUM7Z0JBQ25DLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFVBQVUsRUFBRTtvQkFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDOUI7Z0JBQ0QsSUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssUUFBUTtvQkFDckMsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPO29CQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUMxQztvQkFDQSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMvQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDM0IsSUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUFFO29CQUM5QyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sWUFBWTtRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLFFBQVEsQ0FBQyxPQUFZO1FBQzFCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDZixPQUFPLElBQUksSUFBSSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7WUFDbEMsVUFBVSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FnQkY7QUFFRCxrQkFBZSxHQUFHLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0dhc1NlbnNvci9NUTUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNUTUge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJNUTVcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VhbmFsb2c6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlZGlnaXRhbDogYW55O1xuICBwdWJsaWMgb25leGNlZWR2b2x0YWdlOiBhbnk7XG4gIHB1YmxpYyB2b2x0YWdlTGltaXQ6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyB2Y2M6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgZ25kOiBhbnk7XG4gIHB1YmxpYyBhZDogYW55O1xuICBwdWJsaWMgZG86IGFueTtcblxuICAvLyBodHRwczovL3d3dy5wYXJhbGxheC5jb20vc2l0ZXMvZGVmYXVsdC9maWxlcy9kb3dubG9hZHMvNjA1LTAwMDA5LU1RLTUtRGF0YXNoZWV0LnBkZlxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJ2Y2NcIiwgXCJkb1wiLCBcImFvXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG5cbiAgICB0aGlzLm9uY2hhbmdlYW5hbG9nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25leGNlZWR2b2x0YWdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudm9sdGFnZUxpbWl0ID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gdGhpcy5STCA9IDIgKiAxMDAwO1xuICAgIC8vIHRoaXMuUk8gPSAyMCAqIDEwMDA7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIHRoaXMudmNjID0gdGhpcy5wYXJhbXMudmNjO1xuICAgIHRoaXMuZ25kID0gdGhpcy5wYXJhbXMuZ25kO1xuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmFvKSkge1xuICAgICAgdGhpcy5hZCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLmFvKTtcbiAgICAgIHRoaXMuYWQuc3RhcnQoKHZvbHRhZ2U6IGFueSkgPT4ge1xuICAgICAgICAvLyB0aGlzLmxldmVsID0gdGhpcy5jYWxjKHZvbHRhZ2UpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VhbmFsb2cgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VhbmFsb2codm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0aGlzLnZvbHRhZ2VMaW1pdCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgIHRoaXMudm9sdGFnZUxpbWl0IDw9IHZvbHRhZ2UgJiZcbiAgICAgICAgICB0eXBlb2YgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9uZXhjZWVkdm9sdGFnZSh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmRvKSkge1xuICAgICAgdGhpcy5kbyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmRvKTtcbiAgICAgIHRoaXMuZG8uaW5wdXQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlZGlnaXRhbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnRIZWF0aW5nKCkge1xuICAgIHRoaXMub2JuaXouc2V0VmNjR25kKHRoaXMudmNjLCB0aGlzLmduZCwgXCI1dlwiKTtcbiAgfVxuXG4gIHB1YmxpYyBoZWF0V2FpdChzZWNvbmRzOiBhbnkpIHtcbiAgICB0aGlzLnN0YXJ0SGVhdGluZygpO1xuICAgIGlmIChzZWNvbmRzID4gMCkge1xuICAgICAgc2Vjb25kcyAqPSAxMDAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWNvbmRzID0gMiAqIDYwICogMTAwMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBScy9SbyB3aWxsIGRlc2NyZWFzZSBieSBpbnNlYXNlIG9mIGdhcy5cbiAgLy8gUnMgPSByZXNpdGFuY2UgMjBrLTEwMGsuIFJvID0gcmVzaXN0YW5jZSBvZiAxMDAwcHBtIExQR1xuICAvLyBJZiBSTCA9XG5cbiAgLy8gY2FsYyh2b2x0YWdlKSB7XG5cbiAgLy8gICBpZiAodm9sdGFnZSA9PT0wKSB7XG4gIC8vICAgICB2b2x0YWdlID0gMC4wMDAwMDFcbiAgLy8gICB9XG4gIC8vICAgY29uc3QgUlMgPSB0aGlzLlJMIC8gdm9sdGFnZSAqIDUuMFxuICAvLyAgIGNvbnN0IHJhdGlvID0gUlMgLyB0aGlzLlJPO1xuXG4gIC8vICAgcmV0dXJuIHZvbHRhZ2U7XG4gIC8vIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTVE1O1xuIl19


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ6/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ6 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ6",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ6;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE2L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RNi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RNiB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RNlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTY7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ7/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ7 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ7",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ7;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RNy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RNyB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RN1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTc7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ8/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ8 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ8",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ8;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01ROC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1ROCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1ROFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTg7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/GasSensor/MQ9/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MQ9 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ9",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ9;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01ROS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1ROSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1ROVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTk7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_3AxisAccelerometer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_3AxisAccelerometer {
    constructor() {
        this.keys = ["gnd", "vcc", "sda", "scl"];
        this.requiredKeys = ["sda", "scl"];
        this.ioKeys = this.keys;
        this.displayName = "3axis";
        this.displayIoNames = { sda: "sda", scl: "scl" };
        this.address = 0x53;
        this.regAdrs = {};
        this.regAdrs.POWER_CTL = 0x2d;
        this.regAdrs.THRESH_ACT = 0x24;
        this.regAdrs.THRESH_INACT = 0x25;
        this.regAdrs.TIME_INACT = 0x26;
        this.regAdrs.ACT_INACT_CTL = 0x27;
        this.regAdrs.TAP_AXES = 0x2a;
        this.regAdrs.THRESH_TAP = 0x1d;
        this.regAdrs.DUR = 0x21;
        this.regAdrs.LATENT = 0x22;
        this.regAdrs.WINDOW = 0x23;
        this.regAdrs.THRESH_FF = 0x28;
        this.regAdrs.TIME_FF = 0x29;
        this.regAdrs.INT_MAP = 0x2f;
        this.regAdrs.INT_ENABLE = 0x2e;
        this.regAdrs.DATAX0 = 0x32;
        this.regAdrs.INT_DATA_READY_BIT = 0x07;
        this.regAdrs.INT_SINGLE_TAP_BIT = 0x06;
        this.regAdrs.INT_DOUBLE_TAP_BIT = 0x05;
        this.regAdrs.INT_ACTIVITY_BIT = 0x04;
        this.regAdrs.INT_INACTIVITY_BIT = 0x03;
        this.regAdrs.INT_FREE_FALL_BIT = 0x02;
        this.regAdrs.INT_WATERMARK_BIT = 0x01;
        this.regAdrs.INT_OVERRUNY_BIT = 0x00;
        this.constVal = {};
        this.constVal.gainX = 0.0037639;
        this.constVal.gainY = 0.00376009;
        this.constVal.gainZ = 0.00349265;
        this.constVal.INT1_PIN = 0x00;
        this.constVal.INT2_PIN = 0x01;
    }
    static info() {
        return {
            name: "Grove_3AxisAccelerometer",
        };
    }
    wired(obniz) {
        return __awaiter(this, void 0, void 0, function* () {
            this.obniz = obniz;
            this.vcc = this.params.vcc;
            this.gnd = this.params.gnd;
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
            this.params.clock = 400000;
            this.params.mode = "master";
            this.i2c = obniz.getI2CWithConfig(this.params);
            this.obniz.wait(100);
            // power on
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 0]);
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 16]);
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 8]);
            this.i2c.write(this.address, [this.regAdrs.THRESH_ACT, 75]); // set activity threshold 0~255
            this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 75]); // set inactivity threshold 0~255
            this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 10]); // set time inactivity 0~255
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 6, 1); // setActivityX
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 5, 1); // setActivityY
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 4, 1); // setActivityZ
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 2, 1); // setInactivityX
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 1, 1); // setInactivityY
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 0, 1); // setInactivityZ
            yield this.setRegisterBit(this.regAdrs.TAP_AXES, 2, 0); // setTapDetectionOnX
            yield this.setRegisterBit(this.regAdrs.TAP_AXES, 1, 0); // setTapDetectionOnY
            yield this.etRegisterBit(this.regAdrs.TAP_AXES, 0, 1); // setTapDetectionOnZ
            this.i2c.write(this.address, [this.regAdrs.THRESH_TAP, 50]); // setTapThreshold
            this.i2c.write(this.address, [this.regAdrs.DUR, 15]); // setTapDuration
            this.i2c.write(this.address, [this.regAdrs.LATENT, 80]); // setDoubleTapLatency
            this.i2c.write(this.address, [this.regAdrs.WINDOW, 200]); // setDoubleTapWindow
            this.i2c.write(this.address, [this.regAdrs.THRESH_FF, 7]); // setFreeFallThreshold
            this.i2c.write(this.address, [this.regAdrs.TIME_FF, 45]); // setFreeFallDuration
            // setInterruptMapping
            yield this.setInterruptMapping(this.regAdrs.INT_SINGLE_TAP_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_DOUBLE_TAP_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_FREE_FALL_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_ACTIVITY_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_INACTIVITY_BIT, this.constVal.INT1_PIN);
            // setInterrupt
            yield this.setInterrupt(this.regAdrs.INT_SINGLE_TAP_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_DOUBLE_TAP_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_FREE_FALL_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_ACTIVITY_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_INACTIVITY_BIT, 1);
        });
    }
    setRegisterBit(regAddr, bitPos, state) {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [regAddr]);
            let b = yield this.i2c.readWait(this.address, 1);
            if (state) {
                b = b | (1 << bitPos); // forces nth bit of b to be 1.  all other bits left alone.
            }
            else {
                b = b & ~(1 << bitPos); // forces nth bit of b to be 0.  all other bits left alone.
            }
            this.i2c.write(this.address, [b]);
        });
    }
    setInterruptMapping(interruptBit, interruptPin) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRegisterBit(this.regAdrs.INT_MAP, interruptBit, interruptPin);
        });
    }
    setInterrupt(interruptBit, state) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRegisterBit(this.regAdrs.INT_ENABLE, interruptBit, state);
        });
    }
    signHandling(val) {
        const sign = val >> 15;
        if (sign) {
            val = -(0xffff - val);
        }
        return val;
    }
    getRawVal() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [this.regAdrs.DATAX0]);
            const buff = yield this.i2c.readWait(this.address, 6);
            const rawVal = [0, 0, 0];
            rawVal[0] = this.signHandling((buff[1] << 8) | buff[0]);
            rawVal[1] = this.signHandling((buff[3] << 8) | buff[2]);
            rawVal[2] = this.signHandling((buff[5] << 8) | buff[4]);
            return rawVal;
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const accelVal = [0, 0, 0];
            const raw = yield this.getRawVal();
            accelVal[0] = raw[0] * this.constVal.gainX;
            accelVal[1] = raw[1] * this.constVal.gainY;
            accelVal[2] = raw[2] * this.constVal.gainZ;
            return accelVal;
        });
    }
}
exports.default = Grove_3AxisAccelerometer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Button/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Button {
    constructor() {
        this.keys = ["signal", "gnd", "vcc"];
        this.requiredKeys = ["signal"];
        this.onChangeForStateWait = () => {
        };
    }
    static info() {
        return {
            name: "Grove_Button",
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
            this.io_vcc.output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        this.io_signal.pull("5v");
        const self = this;
        this.io_signal.input((value) => {
            self.isPressed = value;
            if (self.onchange) {
                self.onchange(value);
            }
            self.onChangeForStateWait(value);
        });
    }
    isPressedWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.io_signal.inputWait();
            return ret;
        });
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Grove_Button;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9CdXR0b24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFlBQVk7SUFrQmhCO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLEVBQUU7UUFDakMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQXRCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLGNBQWM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFvQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFCLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtZQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxhQUFhOztZQUN4QixNQUFNLEdBQUcsR0FBUSxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEQsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO0tBQUE7SUFFTSxTQUFTLENBQUMsU0FBYztRQUM3QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLE9BQVksRUFBRSxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsS0FBSyxPQUFPLEVBQUU7b0JBQ3pCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLEVBQUU7b0JBQ2pDLENBQUMsQ0FBQztvQkFDRixPQUFPLEVBQUUsQ0FBQztpQkFDWDtZQUNILENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsWUFBWSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9CdXR0b24vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBHcm92ZV9CdXR0b24ge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJHcm92ZV9CdXR0b25cIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb25DaGFuZ2VGb3JTdGF0ZVdhaXQ6IGFueTtcbiAgcHVibGljIGlvX3NpZ25hbDogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBpb192Y2M6IGFueTtcbiAgcHVibGljIGlvX3N1cHBseTogYW55O1xuICBwdWJsaWMgaXNQcmVzc2VkOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInNpZ25hbFwiLCBcImduZFwiLCBcInZjY1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInNpZ25hbFwiXTtcblxuICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAoKSA9PiB7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5pb19zaWduYWwgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5zaWduYWwpO1xuXG4gICAgaWYgKG9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy52Y2MpKSB7XG4gICAgICB0aGlzLmlvX3ZjYyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnZjYyk7XG4gICAgICB0aGlzLmlvX3ZjYy5vdXRwdXQodHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5nbmQpKSB7XG4gICAgICB0aGlzLmlvX3N1cHBseSA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmduZCk7XG4gICAgICB0aGlzLmlvX3N1cHBseS5vdXRwdXQoZmFsc2UpO1xuICAgIH1cblxuICAgIHRoaXMuaW9fc2lnbmFsLnB1bGwoXCI1dlwiKTtcblxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgdGhpcy5pb19zaWduYWwuaW5wdXQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdmFsdWU7XG4gICAgICBpZiAoc2VsZi5vbmNoYW5nZSkge1xuICAgICAgICBzZWxmLm9uY2hhbmdlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHNlbGYub25DaGFuZ2VGb3JTdGF0ZVdhaXQodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGlzUHJlc3NlZFdhaXQoKSB7XG4gICAgY29uc3QgcmV0OiBhbnkgPSBhd2FpdCB0aGlzLmlvX3NpZ25hbC5pbnB1dFdhaXQoKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgcHVibGljIHN0YXRlV2FpdChpc1ByZXNzZWQ6IGFueSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLm9uQ2hhbmdlRm9yU3RhdGVXYWl0ID0gKHByZXNzZWQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAoaXNQcmVzc2VkID09PSBwcmVzc2VkKSB7XG4gICAgICAgICAgdGhpcy5vbkNoYW5nZUZvclN0YXRlV2FpdCA9ICgpID0+IHtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcm92ZV9CdXR0b247XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_Buzzer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Grove_Buzzer {
    constructor(obniz) {
        this.keys = ["signal", "gnd", "vcc"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "Grove_Buzzer",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.pwm = obniz.getFreePwm();
        this.pwm.start({ io: this.params.signal });
    }
    play(freq) {
        if (typeof freq !== "number") {
            throw new Error("freq must be a number");
        }
        freq = Math.floor(freq);
        if (freq > 0) {
            this.pwm.freq(freq);
            this.pwm.pulse((1 / freq / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Grove_Buzzer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9CdXp6ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFlBQVk7SUFjaEIsWUFBWSxLQUFVO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBZk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxjQUFjO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBYU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBUztRQUNuQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsa0JBQWUsWUFBWSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9CdXp6ZXIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBHcm92ZV9CdXp6ZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJHcm92ZV9CdXp6ZXJcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgcHdtOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JuaXo6IGFueSkge1xuICAgIHRoaXMua2V5cyA9IFtcInNpZ25hbFwiLCBcImduZFwiLCBcInZjY1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInNpZ25hbFwiXTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIHRoaXMub2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuICAgIHRoaXMucHdtID0gb2JuaXouZ2V0RnJlZVB3bSgpO1xuICAgIHRoaXMucHdtLnN0YXJ0KHtpbzogdGhpcy5wYXJhbXMuc2lnbmFsfSk7XG4gIH1cblxuICBwdWJsaWMgcGxheShmcmVxOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIGZyZXEgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImZyZXEgbXVzdCBiZSBhIG51bWJlclwiKTtcbiAgICB9XG4gICAgZnJlcSA9IE1hdGguZmxvb3IoZnJlcSk7XG4gICAgaWYgKGZyZXEgPiAwKSB7XG4gICAgICB0aGlzLnB3bS5mcmVxKGZyZXEpO1xuICAgICAgdGhpcy5wd20ucHVsc2UoKDEgLyBmcmVxIC8gMikgKiAxMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wd20ucHVsc2UoMCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5wbGF5KDApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3ZlX0J1enplcjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_EarHeartRate/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Grove_EarHeartRate {
    constructor() {
        this.keys = ["vcc", "gnd", "signal"];
        this.requiredKeys = ["vcc", "gnd"];
        this.displayIoNames = {
            vcc: "vcc",
            gnd: "gnd",
            signal: "signal",
        };
        this.interval = 5;
        this.duration = 2.5 * 1000;
    }
    static info() {
        return {
            name: "Grove_EarHeartRate",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
    }
    start(callback) {
        this.obniz.logicAnalyzer.start({
            io: this.params.signal,
            interval: this.interval,
            duration: this.duration,
        });
        this.obniz.logicAnalyzer.onmeasured = (array) => {
            const edges = [];
            for (let i = 0; i < array.length - 1; i++) {
                if (array[i] === 0 && array[i + 1] === 1) {
                    edges.push(i);
                }
            }
            if (edges.length >= 2) {
                let between = 0;
                let pulseMin = 0;
                between = ((edges[1] - edges[0]) * this.interval) / 1000.0;
                pulseMin = 60 / between;
                callback(pulseMin);
            }
        };
    }
    getWait() {
        return new Promise((resolve) => {
            this.start((rate) => {
                resolve(rate);
            });
        });
    }
}
exports.default = Grove_EarHeartRate;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9FYXJIZWFydFJhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLGtCQUFrQjtJQWdCdEI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDcEIsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztZQUNWLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQTFCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLG9CQUFvQjtTQUMzQixDQUFDO0lBQ0osQ0FBQztJQXdCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQUMsUUFBYTtRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDN0IsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ25ELE1BQU0sS0FBSyxHQUFRLEVBQUUsQ0FBQztZQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDeEMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDZjthQUNGO1lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDckIsSUFBSSxPQUFPLEdBQVEsQ0FBQyxDQUFDO2dCQUNyQixJQUFJLFFBQVEsR0FBUSxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUM7Z0JBQzNELFFBQVEsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDO2dCQUN4QixRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDcEI7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7Z0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsa0JBQWtCLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0dyb3ZlL0dyb3ZlX0VhckhlYXJ0UmF0ZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEdyb3ZlX0VhckhlYXJ0UmF0ZSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkdyb3ZlX0VhckhlYXJ0UmF0ZVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkaXNwbGF5SW9OYW1lczogYW55O1xuICBwdWJsaWMgaW50ZXJ2YWw6IGFueTtcbiAgcHVibGljIGR1cmF0aW9uOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwic2lnbmFsXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1widmNjXCIsIFwiZ25kXCJdO1xuXG4gICAgdGhpcy5kaXNwbGF5SW9OYW1lcyA9IHtcbiAgICAgIHZjYzogXCJ2Y2NcIixcbiAgICAgIGduZDogXCJnbmRcIixcbiAgICAgIHNpZ25hbDogXCJzaWduYWxcIixcbiAgICB9O1xuXG4gICAgdGhpcy5pbnRlcnZhbCA9IDU7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDIuNSAqIDEwMDA7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5zdGFydCh7XG4gICAgICBpbzogdGhpcy5wYXJhbXMuc2lnbmFsLFxuICAgICAgaW50ZXJ2YWw6IHRoaXMuaW50ZXJ2YWwsXG4gICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5vbm1lYXN1cmVkID0gKGFycmF5OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGVkZ2VzOiBhbnkgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gMCAmJiBhcnJheVtpICsgMV0gPT09IDEpIHtcbiAgICAgICAgICBlZGdlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRnZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgbGV0IGJldHdlZW46IGFueSA9IDA7XG4gICAgICAgIGxldCBwdWxzZU1pbjogYW55ID0gMDtcbiAgICAgICAgYmV0d2VlbiA9ICgoZWRnZXNbMV0gLSBlZGdlc1swXSkgKiB0aGlzLmludGVydmFsKSAvIDEwMDAuMDtcbiAgICAgICAgcHVsc2VNaW4gPSA2MCAvIGJldHdlZW47XG4gICAgICAgIGNhbGxiYWNrKHB1bHNlTWluKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGdldFdhaXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuc3RhcnQoKHJhdGU6IGFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKHJhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JvdmVfRWFySGVhcnRSYXRlO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_GPS/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Grove_GPS {
    constructor() {
        this.keys = ["tx", "rx", "vcc", "gnd"];
        this.requiredKeys = ["tx", "rx"];
        this.ioKeys = this.keys;
        this.displayName = "gps";
        this.displayIoNames = { tx: "tx", rx: "rx" };
    }
    // -------------------
    get latitude() {
        return this.nmea2dd(this._latitude);
    }
    get longitude() {
        return this.nmea2dd(this._longitude);
    }
    static info() {
        return {
            name: "Grove_GPS",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 9600,
        });
        this.editedData = {};
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        this.gpsInfo = {};
        this.gpsInfo._sentenceType = {
            GPGGA: 0x0001,
            GPGSA: 0x0002,
            GPGSV: 0x0004,
            GPRMC: 0x0008,
            GPVTG: 0x0010,
            GPZDA: 0x0020,
        };
        this.gpsInfo.status = "V";
        this.gpsInfo.sentences = new Set(); // Set specifying sentence of MNEA from which data have been obtained
        this.gpsInfo.satelliteInfo = {
            satellites: [],
            inView: 0,
        };
    }
    readSentence() {
        let results = [];
        if (this.uart.isDataExists()) {
            const pos = this.uart.received.indexOf(0x0a);
            if (pos >= 0) {
                results = this.uart.received.slice(0, pos - 1);
                this.uart.received.splice(0, pos + 1);
                return this.uart.tryConvertString(results);
            }
        }
        return "";
    }
    getEditedData() {
        let n;
        let utc;
        let format;
        let sentence = this.readSentence();
        this.editedData.enable = false;
        this.editedData.GPGSV = new Array(4);
        while (sentence.length > 0) {
            const part = sentence.split(",");
            if (sentence.slice(-4, -3) !== ",") {
                const st = part[part.length - 1].slice(0, -3);
                part.push(part[part.length - 1].slice(-3));
                part[part.length - 2] = st;
            }
            this.editedData.sentence = part.join(",");
            switch (part[0]) {
                case "$GPGGA":
                    this.editedData.GPGGA = part;
                    break;
                case "$GPGLL":
                    this.editedData.GPGLL = part;
                    break;
                case "$GPGSA":
                    this.editedData.GPGSA = part;
                    break;
                case "$GPGSV":
                    n = Number(part[2]);
                    if (n > this.editedData.GPGSV.length) {
                        while (n > this.editedData.GPGSV.length) {
                            this.editedData.GPGSV.push([]);
                        }
                    }
                    this.editedData.GPGSV[n - 1] = part;
                    break;
                case "$GPRMC":
                    this.editedData.GPRMC = part;
                    break;
                case "$GPVTG":
                    this.editedData.GPVTG = part;
                    break;
                case "$GPZDA":
                    this.editedData.GPZDA = part;
                    utc =
                        part[4] +
                            "/" +
                            part[3] +
                            "/" +
                            part[2] +
                            " " +
                            part[1].substring(0, 2) +
                            ":" +
                            part[1].substring(2, 4) +
                            ":" +
                            part[1].substring(4, 6) +
                            " +00:00";
                    this.editedData.timestamp = new Date(utc);
                    break;
                default:
                    format = part[0].substr(1);
                    this.editedData[format] = part;
            }
            this.editedData.enable = true;
            sentence = this.readSentence();
        }
        return this.editedData;
    }
    getGpsInfo(editedData) {
        const NMEA_SATINSENTENCE = 4;
        const NMEA_MAXSAT = 12;
        editedData = editedData || this.getEditedData();
        this.gpsInfo.status = "V";
        if (editedData.enable) {
            if (editedData.GPGGA) {
                const gga = editedData.GPGGA;
                this.gpsInfo.gpsQuality = parseFloat(gga[6]); // Fix Quality: 0 = Invalid, 1 = GPS fix, 2 = DGPS fix
                this.gpsInfo.hdop = parseFloat(gga[8]); // Horizontal Dilution of Precision (HDOP)
                this.gpsInfo.altitude = parseFloat(gga[9]); // Antenna Altitude meters above mean sea level
                const latitude = this.nmea2dd(parseFloat(gga[2]));
                this.gpsInfo.latitude = gga[3] === "N" ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(gga[4]));
                this.gpsInfo.longitude = gga[5] === "E" ? longitude : -longitude;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGGA);
            }
            if (editedData.GPGSV) {
                for (let n = 0; n < editedData.GPGSV.length; n++) {
                    if (editedData.GPGSV[n]) {
                        const gsv = editedData.GPGSV[n].map((v) => parseFloat(v));
                        const pack_count = gsv[1];
                        const pack_index = gsv[2];
                        const sat_count = gsv[3];
                        if (pack_index > pack_count) {
                            continue;
                        }
                        this.gpsInfo.satelliteInfo.inView = sat_count;
                        let nsat = (pack_index - 1) * NMEA_SATINSENTENCE;
                        nsat =
                            nsat + NMEA_SATINSENTENCE > sat_count
                                ? sat_count - nsat
                                : NMEA_SATINSENTENCE;
                        for (let isat = 0; isat < nsat; ++isat) {
                            const isi = (pack_index - 1) * NMEA_SATINSENTENCE + isat;
                            if (this.gpsInfo.satelliteInfo.satellites.length <= isi) {
                                this.gpsInfo.satelliteInfo.satellites.push({});
                            }
                            const isatn = isat * NMEA_SATINSENTENCE;
                            this.gpsInfo.satelliteInfo.satellites[isi] = {
                                id: gsv[isatn + 4],
                                elevation: gsv[isatn + 5],
                                azimuth: gsv[isatn + 6],
                                snr: gsv[isatn + 7],
                                inUse: false,
                            };
                        }
                        this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSV);
                    }
                }
            }
            if (editedData.GPGSA) {
                const gsa = editedData.GPGSA;
                let nuse = 0;
                this.gpsInfo.fixMode = parseFloat(gsa[2]); // Fix Mode: 1=Fix not available, 2=2D, 3=3D
                this.gpsInfo.pdop = parseFloat(gsa[15]); // PDOP: Position Dilution of Precision
                this.gpsInfo.hdop = parseFloat(gsa[16]); // HDOP: Horizontal Dilution of Precision
                this.gpsInfo.vdop = parseFloat(gsa[17]); // VDOP: Vertical Dilution of Position
                for (let i = 0; i < NMEA_MAXSAT; ++i) {
                    for (let j = 0; j < this.gpsInfo.satelliteInfo.inView; ++j) {
                        if (this.gpsInfo.satelliteInfo.satellites[j] &&
                            gsa[i + 3] === this.gpsInfo.satelliteInfo.satellites[j].id) {
                            this.gpsInfo.satelliteInfo.satellites[j].inUse = true;
                            nuse++;
                        }
                    }
                }
                this.gpsInfo.satelliteInfo.inUse = nuse;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPGSA);
            }
            if (editedData.GPRMC) {
                const rmc = editedData.GPRMC;
                this.gpsInfo.status = rmc[2]; // Status Active or Void
                const latitude = this.nmea2dd(parseFloat(rmc[3]));
                this.gpsInfo.latitude = rmc[4] === "N" ? latitude : -latitude;
                const longitude = this.nmea2dd(parseFloat(rmc[5]));
                this.gpsInfo.longitude = rmc[6] === "E" ? longitude : -longitude;
                const NMEA_TUD_KNOTS = 1.852; // 1knot=1.852km/h
                this.gpsInfo.speed = parseFloat(rmc[7]) * NMEA_TUD_KNOTS; // unit: km/h
                this.gpsInfo.direction = rmc[8];
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPRMC);
            }
            if (editedData.GPVTG) {
                const vtg = editedData.GPVTG;
                this.gpsInfo.direction = parseFloat(vtg[1]);
                this.gpsInfo.declination = parseFloat(vtg[3]);
                this.gpsInfo.speed = parseFloat(vtg[7]);
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPVTG);
            }
            if (editedData.GPZDA) {
                this.gpsInfo.utc = editedData.timestamp;
                this.gpsInfo.sentences.add(this.gpsInfo._sentenceType.GPZDA);
            }
        }
        return this.gpsInfo;
    }
    _mneaTo(format, value) {
        let result = this.nmea2dd(value);
        if (typeof format === "string") {
            switch (format.toUpperCase()) {
                case "DMS":
                    result = this.nmea2dms(value);
                    break;
                case "DM":
                    result = this.nmea2dm(value);
                    break;
                case "S":
                    result = this.nmea2s(value);
                    break;
                default:
            }
        }
        return result;
    }
    latitudeTo(format) {
        return this._mneaTo(format, this._latitude);
    }
    longitudeTo(format) {
        return this._mneaTo(format, this._longitude);
    }
    status2string(status) {
        status = status || this.status;
        if (status === "A") {
            return "Active";
        }
        if (status === "V") {
            return "Void";
        }
        return status;
    }
    fixMode2string(fixMode) {
        fixMode = fixMode || this.fixMode;
        if (fixMode === 1) {
            return "Fix not available";
        }
        if (fixMode === 2) {
            return "2D";
        }
        if (fixMode === 3) {
            return "3D";
        }
        return fixMode;
    }
    gpsQuality2string(gpsQuality) {
        gpsQuality = gpsQuality || this.gpsQuality;
        if (gpsQuality === 0) {
            return "Invalid";
        }
        if (gpsQuality === 1) {
            return "GPS fix";
        }
        if (gpsQuality === 2) {
            return "DGPS fix";
        }
        return gpsQuality;
    }
    // --- latitude/longitude MNEA format change to each unit
    nmea2dms(val) {
        // NMEA format to DMS format string (999° 99'99.9")
        val = parseFloat(val);
        const d = Math.floor(val / 100);
        const m = Math.floor((val / 100.0 - d) * 100.0);
        const s = ((val / 100.0 - d) * 100.0 - m) * 60;
        return d + "°" + m + "'" + s.toFixed(1) + '"';
    }
    nmea2dm(val) {
        // NMEA format to DM format string (999° 99.9999')
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = (val / 100.0 - d) * 100.0;
        return d + "°" + m.toFixed(4) + "'";
    }
    nmea2dd(val) {
        // NMEA format to DD format decimal (999.999999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return parseFloat((d + m + s).toFixed(6));
    }
    nmea2s(val) {
        // NMEA format to S format decimal (99999.9999)
        val = parseFloat(val);
        const d = Math.floor(val / 100.0);
        const m = Math.floor(((val / 100.0 - d) * 100.0) / 60);
        const s = (((val / 100.0 - d) * 100.0 - m) * 60) / (60 * 60);
        return (d + m + s) / (1.0 / 60.0 / 60.0);
    }
}
exports.default = Grove_GPS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Grove/Grove_MP3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_MP3 {
    constructor() {
        this.keys = ["vcc", "gnd", "mp3_rx", "mp3_tx"];
        this.requiredKeys = ["mp3_rx", "mp3_tx"];
        this.ioKeys = this.keys;
        this.displayName = "MP3";
        this.displayIoNames = { mp3_rx: "MP3Rx", mp3_tx: "MP3Tx" };
    }
    static info() {
        return {
            name: "Grove_MP3",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.my_tx = this.params.mp3_rx;
        this.my_rx = this.params.mp3_tx;
        this.uart = this.obniz.getFreeUart();
    }
    initWait(strage) {
        return __awaiter(this, void 0, void 0, function* () {
            this.uart.start({
                tx: this.my_tx,
                rx: this.my_rx,
                baud: 9600,
            });
            yield this.obniz.wait(100);
            this.uartSend(0x0c, 0);
            yield this.obniz.wait(500);
            this.uartSend(0x0b, 0);
            yield this.obniz.wait(100);
            if (strage) {
                if (strage === "usb") {
                    this.uartSend(0x09, 1);
                }
                else if (strage === "sd") {
                    this.uartSend(0x09, 2);
                }
            }
            else {
                this.uartSend(0x09, 2);
            }
            yield this.obniz.wait(200);
        });
    }
    setVolume(vol) {
        if (vol >= 0 && vol <= 31) {
            this.uartSend(0x06, vol);
        }
    }
    volUp() {
        this.uartSend(0x04, 0);
    }
    volDown() {
        this.uartSend(0x05, 0);
    }
    play(track, folder) {
        // if (!folder) folder = {};
        if (folder) {
            this.uart.send([0x7e, 0xff, 0x06, 0x0f, 0x00, folder, track, 0xef]);
        }
        else {
            // Play 'MP3' folder
            this.uartSend(0x12, track);
        }
    }
    stop() {
        this.uartSend(0x16, 0);
    }
    pause() {
        this.uartSend(0x0e, 0);
    }
    resume() {
        this.uartSend(0x0d, 0);
    }
    next() {
        this.uartSend(0x01, 0);
    }
    prev() {
        this.uartSend(0x02, 0);
    }
    uartSend(command, param) {
        const paramM = param >> 8;
        const paramL = param & 0xff;
        this.uart.send([0x7e, 0xff, 0x06, command, 0x01, paramM, paramL, 0xef]);
        const response = this.uart.readBytes();
        return response;
        // return response;
    }
}
exports.default = Grove_MP3;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9NUDMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFNBQVM7SUFtQmI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBQyxDQUFDO0lBQzNELENBQUM7SUF4Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUM7SUFDSixDQUFDO0lBc0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRWhDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRVksUUFBUSxDQUFDLE1BQVc7O1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNkLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDZCxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2QsSUFBSSxFQUFFLElBQUk7YUFDWCxDQUFDLENBQUM7WUFDSCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQixJQUFJLE1BQU0sRUFBRTtnQkFDVixJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUN4QjtxQkFBTSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7b0JBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUN4QjthQUNGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDO0tBQUE7SUFFTSxTQUFTLENBQUMsR0FBUTtRQUN2QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFTSxLQUFLO1FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQVUsRUFBRSxNQUFXO1FBQ2pDLDRCQUE0QjtRQUM1QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDckU7YUFBTTtZQUNMLG9CQUFvQjtZQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVksRUFBRSxLQUFVO1FBQ3RDLE1BQU0sTUFBTSxHQUFRLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQVEsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUMsT0FBTyxRQUFRLENBQUM7UUFDaEIsbUJBQW1CO0lBQ3JCLENBQUM7Q0FDRjtBQUVELGtCQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR3JvdmUvR3JvdmVfTVAzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgR3JvdmVfTVAzIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiR3JvdmVfTVAzXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIGlvS2V5czogYW55O1xuICBwdWJsaWMgZGlzcGxheU5hbWU6IGFueTtcbiAgcHVibGljIGRpc3BsYXlJb05hbWVzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBteV90eDogYW55O1xuICBwdWJsaWMgbXlfcng6IGFueTtcbiAgcHVibGljIHVhcnQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJnbmRcIiwgXCJtcDNfcnhcIiwgXCJtcDNfdHhcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJtcDNfcnhcIiwgXCJtcDNfdHhcIl07XG5cbiAgICB0aGlzLmlvS2V5cyA9IHRoaXMua2V5cztcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gXCJNUDNcIjtcbiAgICB0aGlzLmRpc3BsYXlJb05hbWVzID0ge21wM19yeDogXCJNUDNSeFwiLCBtcDNfdHg6IFwiTVAzVHhcIn07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLm15X3R4ID0gdGhpcy5wYXJhbXMubXAzX3J4O1xuICAgIHRoaXMubXlfcnggPSB0aGlzLnBhcmFtcy5tcDNfdHg7XG5cbiAgICB0aGlzLnVhcnQgPSB0aGlzLm9ibml6LmdldEZyZWVVYXJ0KCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5pdFdhaXQoc3RyYWdlOiBhbnkpIHtcbiAgICB0aGlzLnVhcnQuc3RhcnQoe1xuICAgICAgdHg6IHRoaXMubXlfdHgsXG4gICAgICByeDogdGhpcy5teV9yeCxcbiAgICAgIGJhdWQ6IDk2MDAsXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5vYm5pei53YWl0KDEwMCk7XG4gICAgdGhpcy51YXJ0U2VuZCgweDBjLCAwKTtcbiAgICBhd2FpdCB0aGlzLm9ibml6LndhaXQoNTAwKTtcbiAgICB0aGlzLnVhcnRTZW5kKDB4MGIsIDApO1xuICAgIGF3YWl0IHRoaXMub2JuaXoud2FpdCgxMDApO1xuXG4gICAgaWYgKHN0cmFnZSkge1xuICAgICAgaWYgKHN0cmFnZSA9PT0gXCJ1c2JcIikge1xuICAgICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDEpO1xuICAgICAgfSBlbHNlIGlmIChzdHJhZ2UgPT09IFwic2RcIikge1xuICAgICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDIpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLm9ibml6LndhaXQoMjAwKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWb2x1bWUodm9sOiBhbnkpIHtcbiAgICBpZiAodm9sID49IDAgJiYgdm9sIDw9IDMxKSB7XG4gICAgICB0aGlzLnVhcnRTZW5kKDB4MDYsIHZvbCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHZvbFVwKCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgwNCwgMCk7XG4gIH1cblxuICBwdWJsaWMgdm9sRG93bigpIHtcbiAgICB0aGlzLnVhcnRTZW5kKDB4MDUsIDApO1xuICB9XG5cbiAgcHVibGljIHBsYXkodHJhY2s6IGFueSwgZm9sZGVyOiBhbnkpIHtcbiAgICAvLyBpZiAoIWZvbGRlcikgZm9sZGVyID0ge307XG4gICAgaWYgKGZvbGRlcikge1xuICAgICAgdGhpcy51YXJ0LnNlbmQoWzB4N2UsIDB4ZmYsIDB4MDYsIDB4MGYsIDB4MDAsIGZvbGRlciwgdHJhY2ssIDB4ZWZdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGxheSAnTVAzJyBmb2xkZXJcbiAgICAgIHRoaXMudWFydFNlbmQoMHgxMiwgdHJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgxNiwgMCk7XG4gIH1cblxuICBwdWJsaWMgcGF1c2UoKSB7XG4gICAgdGhpcy51YXJ0U2VuZCgweDBlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgdGhpcy51YXJ0U2VuZCgweDBkLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBuZXh0KCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgwMSwgMCk7XG4gIH1cblxuICBwdWJsaWMgcHJldigpIHtcbiAgICB0aGlzLnVhcnRTZW5kKDB4MDIsIDApO1xuICB9XG5cbiAgcHVibGljIHVhcnRTZW5kKGNvbW1hbmQ6IGFueSwgcGFyYW06IGFueSkge1xuICAgIGNvbnN0IHBhcmFtTTogYW55ID0gcGFyYW0gPj4gODtcbiAgICBjb25zdCBwYXJhbUw6IGFueSA9IHBhcmFtICYgMHhmZjtcbiAgICB0aGlzLnVhcnQuc2VuZChbMHg3ZSwgMHhmZiwgMHgwNiwgY29tbWFuZCwgMHgwMSwgcGFyYW1NLCBwYXJhbUwsIDB4ZWZdKTtcbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gdGhpcy51YXJ0LnJlYWRCeXRlcygpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgICAvLyByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JvdmVfTVAzO1xuIl19


/***/ }),

/***/ "./dist/src/parts/GyroSensor/ENC03R_Module/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ENC03R_Module {
    constructor() {
        this.keys = ["vcc", "out1", "out2", "gnd"];
        this.required = ["out1", "out2"];
        this.Sens = 0.00067; // Sensitivity, 0.67mV / deg/sec
    }
    static info() {
        return {
            name: "ENC03R_Module",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.ad0 = obniz.getAD(this.params.out1);
        this.ad1 = obniz.getAD(this.params.out2);
        this.ad0.start((value) => {
            this.sens1 = (value - 1.45) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV
            if (this.onchange1) {
                this.onchange1(this.sens1);
            }
        });
        this.ad1.start((value) => {
            this.sens2 = (value - 1.35) / this.Sens; // [Angular velocity(deg/sec)] = ( [AD Voltage]-1.35V ) / 0.67mV
            if (this.onchange2) {
                this.onchange2(this.sens2);
            }
        });
    }
    get1Wait() {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const value = this.ad0.getWait();
            this.sens1 = (value - 1.45) / this.Sens;
            resolve(this.sens1);
        }));
    }
    get2Wait() {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const value = this.ad1.getWait();
            this.sens2 = (value - 1.35) / this.Sens;
            resolve(this.sens2);
        }));
    }
}
exports.default = ENC03R_Module;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HeXJvU2Vuc29yL0VOQzAzUl9Nb2R1bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLGFBQWE7SUFvQmpCO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxnQ0FBZ0M7SUFDdkQsQ0FBQztJQXRCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLGVBQWU7U0FDdEIsQ0FBQztJQUNKLENBQUM7SUFvQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGdFQUFnRTtZQUN6RyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGdFQUFnRTtZQUN6RyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBTyxPQUFPLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEtBQUssR0FBUSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBTyxPQUFPLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEtBQUssR0FBUSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxhQUFhLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0d5cm9TZW5zb3IvRU5DMDNSX01vZHVsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEVOQzAzUl9Nb2R1bGUge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJFTkMwM1JfTW9kdWxlXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZDogYW55O1xuICBwdWJsaWMgU2VuczogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgYWQwOiBhbnk7XG4gIHB1YmxpYyBhZDE6IGFueTtcbiAgcHVibGljIHNlbnMxOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZTE6IGFueTtcbiAgcHVibGljIHNlbnMyOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZTI6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJvdXQxXCIsIFwib3V0MlwiLCBcImduZFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkID0gW1wib3V0MVwiLCBcIm91dDJcIl07XG4gICAgdGhpcy5TZW5zID0gMC4wMDA2NzsgLy8gU2Vuc2l0aXZpdHksIDAuNjdtViAvIGRlZy9zZWNcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLmFkMCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLm91dDEpO1xuICAgIHRoaXMuYWQxID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMub3V0Mik7XG5cbiAgICB0aGlzLmFkMC5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5zZW5zMSA9ICh2YWx1ZSAtIDEuNDUpIC8gdGhpcy5TZW5zOyAvLyBbQW5ndWxhciB2ZWxvY2l0eShkZWcvc2VjKV0gPSAoIFtBRCBWb2x0YWdlXS0xLjM1ViApIC8gMC42N21WXG4gICAgICBpZiAodGhpcy5vbmNoYW5nZTEpIHtcbiAgICAgICAgdGhpcy5vbmNoYW5nZTEodGhpcy5zZW5zMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkMS5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5zZW5zMiA9ICh2YWx1ZSAtIDEuMzUpIC8gdGhpcy5TZW5zOyAvLyBbQW5ndWxhciB2ZWxvY2l0eShkZWcvc2VjKV0gPSAoIFtBRCBWb2x0YWdlXS0xLjM1ViApIC8gMC42N21WXG4gICAgICBpZiAodGhpcy5vbmNoYW5nZTIpIHtcbiAgICAgICAgdGhpcy5vbmNoYW5nZTIodGhpcy5zZW5zMik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0MVdhaXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZTogYW55ID0gdGhpcy5hZDAuZ2V0V2FpdCgpO1xuICAgICAgdGhpcy5zZW5zMSA9ICh2YWx1ZSAtIDEuNDUpIC8gdGhpcy5TZW5zO1xuICAgICAgcmVzb2x2ZSh0aGlzLnNlbnMxKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQyV2FpdCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlOiBhbnkgPSB0aGlzLmFkMS5nZXRXYWl0KCk7XG4gICAgICB0aGlzLnNlbnMyID0gKHZhbHVlIC0gMS4zNSkgLyB0aGlzLlNlbnM7XG4gICAgICByZXNvbHZlKHRoaXMuc2VuczIpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVOQzAzUl9Nb2R1bGU7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Infrared/IRModule/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class IRModule {
    constructor() {
        this.keys = ["recv", "vcc", "send", "gnd"];
        this.requiredKeys = ["recv", "send"];
    }
    get dataSymbolLength() {
        return this.sensor.dataSymbolLength;
    }
    set dataSymbolLength(x) {
        this.sensor.dataSymbolLength = x;
        this.led.dataSymbolLength = x;
    }
    static info() {
        return {
            name: "IRModule",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (!obniz.isValidIO(this.params.recv)) {
            throw new Error("recv is not valid io");
        }
        if (!obniz.isValidIO(this.params.send)) {
            throw new Error("send is not valid io");
        }
        this.sensor = obniz.wired("IRSensor", {
            output: this.params.recv,
        });
        this.setGetterSetter("sensor", "duration");
        this.setGetterSetter("sensor", "dataInverted");
        this.setGetterSetter("sensor", "cutTail");
        this.setGetterSetter("sensor", "output_pullup");
        this.setGetterSetter("sensor", "ondetect");
        this.led = obniz.wired("InfraredLED", {
            anode: this.params.send,
        });
    }
    // link
    send(arr) {
        this.led.send(arr);
    }
    start(callback) {
        this.sensor.start(callback);
    }
    setGetterSetter(partsName, varName) {
        Object.defineProperty(this, varName, {
            get() {
                return this[partsName][varName];
            },
            set(x) {
                this[partsName][varName] = x;
            },
        });
    }
}
exports.default = IRModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUTtJQXdCWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUF6QkQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFJLGdCQUFnQixDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDO0lBQ0osQ0FBQztJQWNNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87SUFDQSxJQUFJLENBQUMsR0FBUTtRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQWE7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLGVBQWUsQ0FBQyxTQUFjLEVBQUUsT0FBWTtRQUNqRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDbkMsR0FBRztnQkFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQyxDQUFDO1lBRUQsR0FBRyxDQUFDLENBQU07Z0JBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixDQUFDO1NBRUYsQ0FBQyxDQUNEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElSTW9kdWxlIHtcblxuICBnZXQgZGF0YVN5bWJvbExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5zb3IuZGF0YVN5bWJvbExlbmd0aDtcbiAgfVxuXG4gIHNldCBkYXRhU3ltYm9sTGVuZ3RoKHgpIHtcbiAgICB0aGlzLnNlbnNvci5kYXRhU3ltYm9sTGVuZ3RoID0geDtcbiAgICB0aGlzLmxlZC5kYXRhU3ltYm9sTGVuZ3RoID0geDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJUk1vZHVsZVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBzZW5zb3I6IGFueTtcbiAgcHVibGljIGxlZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInJlY3ZcIiwgXCJ2Y2NcIiwgXCJzZW5kXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wicmVjdlwiLCBcInNlbmRcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICBpZiAoIW9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5yZWN2KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVjdiBpcyBub3QgdmFsaWQgaW9cIik7XG4gICAgfVxuXG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuc2VuZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNlbmQgaXMgbm90IHZhbGlkIGlvXCIpO1xuICAgIH1cblxuICAgIHRoaXMuc2Vuc29yID0gb2JuaXoud2lyZWQoXCJJUlNlbnNvclwiLCB7XG4gICAgICBvdXRwdXQ6IHRoaXMucGFyYW1zLnJlY3YsXG4gICAgfSk7XG4gICAgdGhpcy5zZXRHZXR0ZXJTZXR0ZXIoXCJzZW5zb3JcIiwgXCJkdXJhdGlvblwiKTtcbiAgICB0aGlzLnNldEdldHRlclNldHRlcihcInNlbnNvclwiLCBcImRhdGFJbnZlcnRlZFwiKTtcbiAgICB0aGlzLnNldEdldHRlclNldHRlcihcInNlbnNvclwiLCBcImN1dFRhaWxcIik7XG4gICAgdGhpcy5zZXRHZXR0ZXJTZXR0ZXIoXCJzZW5zb3JcIiwgXCJvdXRwdXRfcHVsbHVwXCIpO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKFwic2Vuc29yXCIsIFwib25kZXRlY3RcIik7XG5cbiAgICB0aGlzLmxlZCA9IG9ibml6LndpcmVkKFwiSW5mcmFyZWRMRURcIiwge1xuICAgICAgYW5vZGU6IHRoaXMucGFyYW1zLnNlbmQsXG4gICAgfSk7XG4gIH1cblxuICAvLyBsaW5rXG4gIHB1YmxpYyBzZW5kKGFycjogYW55KSB7XG4gICAgdGhpcy5sZWQuc2VuZChhcnIpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLnNlbnNvci5zdGFydChjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgc2V0R2V0dGVyU2V0dGVyKHBhcnRzTmFtZTogYW55LCB2YXJOYW1lOiBhbnkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgdmFyTmFtZSwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpc1twYXJ0c05hbWVdW3Zhck5hbWVdO1xuICAgICAgfVxuICAgICAgLFxuICAgICAgc2V0KHg6IGFueSkge1xuICAgICAgICB0aGlzW3BhcnRzTmFtZV1bdmFyTmFtZV0gPSB4O1xuICAgICAgfVxuICAgICAgLFxuICAgIH0pXG4gICAgO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElSTW9kdWxlO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Infrared/IRSensor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class IRSensor {
    constructor() {
        this.keys = ["output", "vcc", "gnd"];
        this.requiredKeys = ["output"];
        this.dataSymbolLength = 0.07;
        this.duration = 500; // 500msec
        this.dataInverted = true;
        this.triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal
        this.cutTail = false;
        this.output_pullup = true;
    }
    static info() {
        return {
            name: "IRSensor",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (!obniz.isValidIO(this.params.output)) {
            throw new Error("output is not valid io");
        }
    }
    start(callback) {
        this.ondetect = callback;
        if (this.output_pullup) {
            this.obniz.getIO(this.params.output).pull("5v");
        }
        this.obniz.logicAnalyzer.start({
            io: this.params.output,
            interval: this.dataSymbolLength,
            duration: this.duration,
            triggerValue: this.dataInverted ? false : true,
            triggerValueSamples: this.triggerSampleCount,
        });
        this.obniz.logicAnalyzer.onmeasured = (levels) => {
            if (typeof this.ondetect === "function") {
                if (this.dataInverted) {
                    const arr = new Uint8Array(levels);
                    for (let i = 0; i < arr.length; i++) {
                        arr[i] = arr[i] ? 0 : 1;
                    }
                    levels = Array.from(arr);
                }
                if (this.cutTail) {
                    for (let i = levels.length - 1; i > 1; i--) {
                        if (levels[i] === 0 && levels[i - 1] === 0) {
                            levels.splice(i, 1);
                        }
                        else {
                            break;
                        }
                    }
                }
                this.ondetect(levels);
            }
        };
    }
}
exports.default = IRSensor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUlNlbnNvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUTtJQW9CWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVTtRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLENBQUMsK0RBQStEO1FBQzdGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUE1Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBMEJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQWE7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQzdCLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDOUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtTQUM3QyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUNwRCxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7Z0JBQ3ZDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtvQkFDckIsTUFBTSxHQUFHLEdBQVEsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDekI7b0JBQ0QsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzFCO2dCQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUMxQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7NEJBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3lCQUNyQjs2QkFBTTs0QkFDTCxNQUFNO3lCQUNQO3FCQUNGO2lCQUNGO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0luZnJhcmVkL0lSU2Vuc29yL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSVJTZW5zb3Ige1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJUlNlbnNvclwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkYXRhU3ltYm9sTGVuZ3RoOiBhbnk7XG4gIHB1YmxpYyBkdXJhdGlvbjogYW55O1xuICBwdWJsaWMgZGF0YUludmVydGVkOiBhbnk7XG4gIHB1YmxpYyB0cmlnZ2VyU2FtcGxlQ291bnQ6IGFueTtcbiAgcHVibGljIGN1dFRhaWw6IGFueTtcbiAgcHVibGljIG91dHB1dF9wdWxsdXA6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIG9uZGV0ZWN0OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wib3V0cHV0XCIsIFwidmNjXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wib3V0cHV0XCJdO1xuXG4gICAgdGhpcy5kYXRhU3ltYm9sTGVuZ3RoID0gMC4wNztcbiAgICB0aGlzLmR1cmF0aW9uID0gNTAwOyAvLyA1MDBtc2VjXG4gICAgdGhpcy5kYXRhSW52ZXJ0ZWQgPSB0cnVlO1xuICAgIHRoaXMudHJpZ2dlclNhbXBsZUNvdW50ID0gMTY7IC8vIElmIFNpZ25hbCBhcnJpdmVzIG1vcmUgdGhhbiB0aGlzIGNvdW50LiB0aGVuIHRyZWF0IGFzIHNpZ25hbFxuICAgIHRoaXMuY3V0VGFpbCA9IGZhbHNlO1xuICAgIHRoaXMub3V0cHV0X3B1bGx1cCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMub3V0cHV0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib3V0cHV0IGlzIG5vdCB2YWxpZCBpb1wiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMub25kZXRlY3QgPSBjYWxsYmFjaztcbiAgICBpZiAodGhpcy5vdXRwdXRfcHVsbHVwKSB7XG4gICAgICB0aGlzLm9ibml6LmdldElPKHRoaXMucGFyYW1zLm91dHB1dCkucHVsbChcIjV2XCIpO1xuICAgIH1cblxuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5zdGFydCh7XG4gICAgICBpbzogdGhpcy5wYXJhbXMub3V0cHV0LFxuICAgICAgaW50ZXJ2YWw6IHRoaXMuZGF0YVN5bWJvbExlbmd0aCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuICAgICAgdHJpZ2dlclZhbHVlOiB0aGlzLmRhdGFJbnZlcnRlZCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIHRyaWdnZXJWYWx1ZVNhbXBsZXM6IHRoaXMudHJpZ2dlclNhbXBsZUNvdW50LFxuICAgIH0pO1xuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5vbm1lYXN1cmVkID0gKGxldmVsczogYW55KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub25kZXRlY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAodGhpcy5kYXRhSW52ZXJ0ZWQpIHtcbiAgICAgICAgICBjb25zdCBhcnI6IGFueSA9IG5ldyBVaW50OEFycmF5KGxldmVscyk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycltpXSA9IGFycltpXSA/IDAgOiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXZlbHMgPSBBcnJheS5mcm9tKGFycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXRUYWlsKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGxldmVscy5sZW5ndGggLSAxOyBpID4gMTsgaS0tKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWxzW2ldID09PSAwICYmIGxldmVsc1tpIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAgICAgbGV2ZWxzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25kZXRlY3QobGV2ZWxzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElSU2Vuc29yO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Infrared/InfraredLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class InfraredLED {
    constructor() {
        this.keys = ["anode", "cathode"];
        this.requiredKeys = ["anode"];
        this.dataSymbolLength = 0.07;
    }
    static info() {
        return {
            name: "InfraredLED",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.anode)) {
            throw new Error("anode is not valid io");
        }
        if (this.params.cathode) {
            if (!this.obniz.isValidIO(this.params.cathode)) {
                throw new Error("cathode is not valid io");
            }
            this.io_cathode = obniz.getIO(this.params.cathode);
            this.io_cathode.output(false);
        }
        this.pwm = this.obniz.getFreePwm();
        this.pwm.start({ io: this.params.anode });
        this.pwm.freq(38000);
        this.obniz.wait(150); // TODO: this is instant fix for pwm start delay
    }
    send(arr) {
        if (arr && arr.length > 0 && arr[arr.length - 1] === 1) {
            arr.push(0);
        }
        this.pwm.modulate("am", this.dataSymbolLength, arr);
    }
}
exports.default = InfraredLED;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JbmZyYXJlZExFRC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVztJQWdCZjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQW5CTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLGFBQWE7U0FDcEIsQ0FBQztJQUNKLENBQUM7SUFpQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0RBQWdEO0lBQ3hFLENBQUM7SUFFTSxJQUFJLENBQUMsR0FBUTtRQUNsQixJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEQsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0luZnJhcmVkL0luZnJhcmVkTEVEL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSW5mcmFyZWRMRUQge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJbmZyYXJlZExFRFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkYXRhU3ltYm9sTGVuZ3RoOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBpb19jYXRob2RlOiBhbnk7XG4gIHB1YmxpYyBwd206IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJhbm9kZVwiLCBcImNhdGhvZGVcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJhbm9kZVwiXTtcblxuICAgIHRoaXMuZGF0YVN5bWJvbExlbmd0aCA9IDAuMDc7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBpZiAoIXRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmFub2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYW5vZGUgaXMgbm90IHZhbGlkIGlvXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wYXJhbXMuY2F0aG9kZSkge1xuICAgICAgaWYgKCF0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5jYXRob2RlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYXRob2RlIGlzIG5vdCB2YWxpZCBpb1wiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW9fY2F0aG9kZSA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmNhdGhvZGUpO1xuICAgICAgdGhpcy5pb19jYXRob2RlLm91dHB1dChmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMucHdtID0gdGhpcy5vYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20uc3RhcnQoe2lvOiB0aGlzLnBhcmFtcy5hbm9kZX0pO1xuICAgIHRoaXMucHdtLmZyZXEoMzgwMDApO1xuICAgIHRoaXMub2JuaXoud2FpdCgxNTApOyAvLyBUT0RPOiB0aGlzIGlzIGluc3RhbnQgZml4IGZvciBwd20gc3RhcnQgZGVsYXlcbiAgfVxuXG4gIHB1YmxpYyBzZW5kKGFycjogYW55KSB7XG4gICAgaWYgKGFyciAmJiBhcnIubGVuZ3RoID4gMCAmJiBhcnJbYXJyLmxlbmd0aCAtIDFdID09PSAxKSB7XG4gICAgICBhcnIucHVzaCgwKTtcbiAgICB9XG4gICAgdGhpcy5wd20ubW9kdWxhdGUoXCJhbVwiLCB0aGlzLmRhdGFTeW1ib2xMZW5ndGgsIGFycik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5mcmFyZWRMRUQ7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Infrared/YG1006/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class YG1006 {
    constructor() {
        this.keys = ["signal", "vcc", "gnd"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "YG1006",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.signal.getWait();
            return value;
        });
    }
}
exports.default = YG1006;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9ZRzEwMDYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE1BQU07SUFlVjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBaEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7SUFDSixDQUFDO0lBY00sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVksT0FBTzs7WUFDbEIsTUFBTSxLQUFLLEdBQVEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9DLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0luZnJhcmVkL1lHMTAwNi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFlHMTAwNiB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIllHMTAwNlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBzaWduYWw6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wic2lnbmFsXCIsIFwidmNjXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wic2lnbmFsXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gICAgdGhpcy5zaWduYWwgPSB0aGlzLm9ibml6LmdldEFEKHRoaXMucGFyYW1zLnNpZ25hbCk7XG4gICAgdGhpcy5zaWduYWwuc3RhcnQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uY2hhbmdlKSB7XG4gICAgICAgIHRoaXMub25jaGFuZ2UodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFdhaXQoKSB7XG4gICAgY29uc3QgdmFsdWU6IGFueSA9IGF3YWl0IHRoaXMuc2lnbmFsLmdldFdhaXQoKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWUcxMDA2O1xuIl19


/***/ }),

/***/ "./dist/src/parts/Light/FullColorLED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class FullColorLED {
    constructor() {
        this.COMMON_TYPE_ANODE = 1;
        this.COMMON_TYPE_CATHODE = 0;
        this.anode_keys = ["anode", "anode_common", "anodeCommon", "vcc"];
        this.cathode_keys = ["cathode", "cathode_common", "cathodeCommon", "gnd"];
        this.animationName = "FullColorLED-" + Math.round(Math.random() * 1000);
        this.keys = ["r", "g", "b", "common", "commonType"];
        this.requiredKeys = ["r", "g", "b", "common", "commonType"];
    }
    static info() {
        return {
            name: "FullColorLED",
        };
    }
    wired(obniz) {
        const r = this.params.r;
        const g = this.params.g;
        const b = this.params.b;
        const common = this.params.common;
        const commontype = this.params.commonType;
        this.obniz = obniz;
        if (this.anode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_ANODE;
        }
        else if (this.cathode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_CATHODE;
        }
        else {
            this.obniz.error("FullColorLED param need common type [  anode_common or cathode_common ] ");
        }
        this.common = this.obniz.getIO(common);
        this.common.output(this.commontype);
        this.obniz.getIO(r).output(this.commontype);
        this.obniz.getIO(g).output(this.commontype);
        this.obniz.getIO(b).output(this.commontype);
        this.pwmR = this.obniz.getFreePwm();
        this.pwmR.start({ io: r });
        this.pwmR.freq(1000);
        this.pwmG = this.obniz.getFreePwm();
        this.pwmG.start({ io: g });
        this.pwmG.freq(1000);
        this.pwmB = this.obniz.getFreePwm();
        this.pwmB.start({ io: b });
        this.pwmB.freq(1000);
        this.rgb(0, 0, 0);
    }
    rgb(r, g, b) {
        r = Math.min(Math.max(parseInt(r), 0), 255);
        g = Math.min(Math.max(parseInt(g), 0), 255);
        b = Math.min(Math.max(parseInt(b), 0), 255);
        if (this.commontype === this.COMMON_TYPE_ANODE) {
            r = 255 - r;
            g = 255 - g;
            b = 255 - b;
        }
        this.pwmR.duty((r / 255) * 100);
        this.pwmG.duty((g / 255) * 100);
        this.pwmB.duty((b / 255) * 100);
    }
    hsv(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        this.rgb(R, G, B);
    }
    gradation(cycletime_ms) {
        const frames = [];
        const max = 36 / 2;
        const duration = Math.round(cycletime_ms / max);
        for (let i = 0; i < max; i++) {
            const oneFrame = {
                duration,
                state: (index) => {
                    // index = 0
                    this.hsv(index * 10 * 2, 1, 1);
                },
            };
            frames.push(oneFrame);
        }
        this.obniz.io.animation(this.animationName, "loop", frames);
    }
    stopgradation() {
        this.obniz.io.animation(this.animationName, "pause");
    }
}
exports.default = FullColorLED;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Light/LED/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class LED {
    constructor() {
        this.keys = ["anode", "cathode"];
        this.requiredKeys = ["anode"];
    }
    static info() {
        return {
            name: "LED",
        };
    }
    wired(obniz) {
        function getIO(io) {
            if (io && typeof io === "object") {
                if (typeof io.output === "function") {
                    return io;
                }
            }
            return obniz.getIO(io);
        }
        this.obniz = obniz;
        this.io_anode = getIO(this.params.anode);
        this.io_anode.output(false);
        if (this.obniz.isValidIO(this.params.cathode)) {
            this.io_cathode = getIO(this.params.cathode);
            this.io_cathode.output(false);
        }
        this.animationName = "Led-" + this.params.anode;
    }
    on() {
        this.endBlink();
        this.io_anode.output(true);
    }
    off() {
        this.endBlink();
        this.io_anode.output(false);
    }
    output(value) {
        if (value) {
            this.on();
        }
        else {
            this.off();
        }
    }
    endBlink() {
        this.obniz.io.animation(this.animationName, "pause");
    }
    blink(interval) {
        if (!interval) {
            interval = 100;
        }
        const frames = [
            {
                duration: interval,
                state: (index) => {
                    // index = 0
                    this.io_anode.output(true); // on
                },
            },
            {
                duration: interval,
                state: (index) => {
                    // index = 0
                    this.io_anode.output(false); // off
                },
            },
        ];
        this.obniz.io.animation(this.animationName, "loop", frames);
    }
}
exports.default = LED;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9MaWdodC9MRUQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUc7SUFnQlA7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBakJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsS0FBSztTQUNaLENBQUM7SUFDSixDQUFDO0lBZU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsU0FBUyxLQUFLLENBQUMsRUFBTztZQUNwQixJQUFJLEVBQUUsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxFQUFFLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtvQkFDbkMsT0FBTyxFQUFFLENBQUM7aUJBQ1g7YUFDRjtZQUNELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtRQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2xELENBQUM7SUFFTSxFQUFFO1FBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxHQUFHO1FBQ1IsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBVTtRQUN0QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNYO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDWjtJQUNILENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFhO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxNQUFNLEdBQVE7WUFDbEI7Z0JBQ0UsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO29CQUNwQixZQUFZO29CQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztnQkFDbkMsQ0FBQzthQUNGO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO29CQUNwQixZQUFZO29CQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDckMsQ0FBQzthQUNGO1NBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxHQUFHLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0xpZ2h0L0xFRC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIExFRCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkxFRFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgaW9fYW5vZGU6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fY2F0aG9kZTogYW55O1xuICBwdWJsaWMgYW5pbWF0aW9uTmFtZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImFub2RlXCIsIFwiY2F0aG9kZVwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcImFub2RlXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICBmdW5jdGlvbiBnZXRJTyhpbzogYW55KSB7XG4gICAgICBpZiAoaW8gJiYgdHlwZW9mIGlvID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW8ub3V0cHV0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICByZXR1cm4gaW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYm5pei5nZXRJTyhpbyk7XG4gICAgfVxuXG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIHRoaXMuaW9fYW5vZGUgPSBnZXRJTyh0aGlzLnBhcmFtcy5hbm9kZSk7XG4gICAgdGhpcy5pb19hbm9kZS5vdXRwdXQoZmFsc2UpO1xuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5jYXRob2RlKSkge1xuICAgICAgdGhpcy5pb19jYXRob2RlID0gZ2V0SU8odGhpcy5wYXJhbXMuY2F0aG9kZSk7XG4gICAgICB0aGlzLmlvX2NhdGhvZGUub3V0cHV0KGZhbHNlKTtcbiAgICB9XG4gICAgdGhpcy5hbmltYXRpb25OYW1lID0gXCJMZWQtXCIgKyB0aGlzLnBhcmFtcy5hbm9kZTtcbiAgfVxuXG4gIHB1YmxpYyBvbigpIHtcbiAgICB0aGlzLmVuZEJsaW5rKCk7XG4gICAgdGhpcy5pb19hbm9kZS5vdXRwdXQodHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgb2ZmKCkge1xuICAgIHRoaXMuZW5kQmxpbmsoKTtcbiAgICB0aGlzLmlvX2Fub2RlLm91dHB1dChmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgb3V0cHV0KHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMub24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmYoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZW5kQmxpbmsoKSB7XG4gICAgdGhpcy5vYm5pei5pby5hbmltYXRpb24odGhpcy5hbmltYXRpb25OYW1lLCBcInBhdXNlXCIpO1xuICB9XG5cbiAgcHVibGljIGJsaW5rKGludGVydmFsOiBhbnkpIHtcbiAgICBpZiAoIWludGVydmFsKSB7XG4gICAgICBpbnRlcnZhbCA9IDEwMDtcbiAgICB9XG4gICAgY29uc3QgZnJhbWVzOiBhbnkgPSBbXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiBpbnRlcnZhbCxcbiAgICAgICAgc3RhdGU6IChpbmRleDogYW55KSA9PiB7XG4gICAgICAgICAgLy8gaW5kZXggPSAwXG4gICAgICAgICAgdGhpcy5pb19hbm9kZS5vdXRwdXQodHJ1ZSk7IC8vIG9uXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkdXJhdGlvbjogaW50ZXJ2YWwsXG4gICAgICAgIHN0YXRlOiAoaW5kZXg6IGFueSkgPT4ge1xuICAgICAgICAgIC8vIGluZGV4ID0gMFxuICAgICAgICAgIHRoaXMuaW9fYW5vZGUub3V0cHV0KGZhbHNlKTsgLy8gb2ZmXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF07XG5cbiAgICB0aGlzLm9ibml6LmlvLmFuaW1hdGlvbih0aGlzLmFuaW1hdGlvbk5hbWUsIFwibG9vcFwiLCBmcmFtZXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExFRDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Light/WS2811/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class WS2811 {
    constructor() {
        this.keys = ["din", "vcc", "gnd"];
        this.requiredKeys = ["din"];
    }
    static info() {
        return {
            name: "WS2811",
        };
    }
    static _generateFromByte(val) {
        // T0H 0.5us+-0.15us
        // T1H 1.2us+-0.15us
        // T0L 2.0us+-0.15us
        // T1L 1.3us+-0.15us
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xe;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2811._generateFromByte(r);
        array = array.concat(WS2811._generateFromByte(g));
        array = array.concat(WS2811._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        let array = WS2811._generateFromByte(R);
        array = array.concat(WS2811._generateFromByte(G));
        array = array.concat(WS2811._generateFromByte(B));
        return array;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.mode = "master";
        this.params.frequency = 2 * 1000 * 1000;
        this.params.mosi = this.params.din;
        this.params.drive = "5v"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(r, g, b) {
        this.spi.write(WS2811._generateColor(r, g, b));
    }
    hsv(h, s, v) {
        this.spi.write(WS2811._generateHsvColor(h, s, v));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2811;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9MaWdodC9XUzI4MTEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU07SUFzRlY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQXZGTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFRO1FBQ3RDLG9CQUFvQjtRQUNwQixvQkFBb0I7UUFDcEIsb0JBQW9CO1FBQ3BCLG9CQUFvQjtRQUVwQixHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sSUFBSSxHQUFRLEdBQUcsQ0FBQztRQUN0QixNQUFNLEdBQUcsR0FBUSxHQUFHLENBQUM7UUFDckIsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QixJQUFJLElBQUksR0FBUSxDQUFDLENBQUM7WUFDbEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ2pCO2lCQUFNO2dCQUNMLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxJQUFJLEdBQUcsQ0FBQzthQUNiO2lCQUFNO2dCQUNMLElBQUksSUFBSSxJQUFJLENBQUM7YUFDZDtZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUNqRCxJQUFJLEtBQUssR0FBUSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUNwRCxNQUFNLENBQUMsR0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sRUFBRSxHQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsTUFBTSxDQUFDLEdBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQU0sQ0FBQztRQUFDLElBQUksQ0FBTSxDQUFDO1FBQUMsSUFBSSxDQUFNLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO1FBRUQsTUFBTSxDQUFDLEdBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWxDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRXhCLElBQUksS0FBSyxHQUFRLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFhTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQywyREFBMkQ7UUFDckYsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sR0FBRyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sR0FBRyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxJQUFJLENBQUMsS0FBVTtRQUNwQixJQUFJLEtBQUssR0FBUSxFQUFFLENBQUM7UUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxRQUFRLEdBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUNsQixNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzdELENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBVTtRQUNwQixJQUFJLEtBQUssR0FBUSxFQUFFLENBQUM7UUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxRQUFRLEdBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUNsQixNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDaEUsQ0FBQztTQUNIO1FBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBRUQsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9MaWdodC9XUzI4MTEvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBXUzI4MTEge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJXUzI4MTFcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBfZ2VuZXJhdGVGcm9tQnl0ZSh2YWw6IGFueSkge1xuICAgIC8vIFQwSCAwLjV1cystMC4xNXVzXG4gICAgLy8gVDFIIDEuMnVzKy0wLjE1dXNcbiAgICAvLyBUMEwgMi4wdXMrLTAuMTV1c1xuICAgIC8vIFQxTCAxLjN1cystMC4xNXVzXG5cbiAgICB2YWwgPSBwYXJzZUludCh2YWwpO1xuICAgIGNvbnN0IHplcm86IGFueSA9IDB4ODtcbiAgICBjb25zdCBvbmU6IGFueSA9IDB4ZTtcbiAgICBjb25zdCByZXQ6IGFueSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSArPSAyKSB7XG4gICAgICBsZXQgYnl0ZTogYW55ID0gMDtcbiAgICAgIGlmICh2YWwgJiAoMHg4MCA+PiBpKSkge1xuICAgICAgICBieXRlID0gb25lIDw8IDQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBieXRlID0gemVybyA8PCA0O1xuICAgICAgfVxuICAgICAgaWYgKHZhbCAmICgweDgwID4+IChpICsgMSkpKSB7XG4gICAgICAgIGJ5dGUgfD0gb25lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnl0ZSB8PSB6ZXJvO1xuICAgICAgfVxuICAgICAgcmV0LnB1c2goYnl0ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIF9nZW5lcmF0ZUNvbG9yKHI6IGFueSwgZzogYW55LCBiOiBhbnkpIHtcbiAgICBsZXQgYXJyYXk6IGFueSA9IFdTMjgxMS5fZ2VuZXJhdGVGcm9tQnl0ZShyKTtcbiAgICBhcnJheSA9IGFycmF5LmNvbmNhdChXUzI4MTEuX2dlbmVyYXRlRnJvbUJ5dGUoZykpO1xuICAgIGFycmF5ID0gYXJyYXkuY29uY2F0KFdTMjgxMS5fZ2VuZXJhdGVGcm9tQnl0ZShiKSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBfZ2VuZXJhdGVIc3ZDb2xvcihoOiBhbnksIHM6IGFueSwgdjogYW55KSB7XG4gICAgY29uc3QgQzogYW55ID0gdiAqIHM7XG4gICAgY29uc3QgSHA6IGFueSA9IGggLyA2MDtcbiAgICBjb25zdCBYOiBhbnkgPSBDICogKDEgLSBNYXRoLmFicygoSHAgJSAyKSAtIDEpKTtcblxuICAgIGxldCBSOiBhbnk7IGxldCBHOiBhbnk7IGxldCBCOiBhbnk7XG4gICAgaWYgKDAgPD0gSHAgJiYgSHAgPCAxKSB7XG4gICAgICBbUiwgRywgQl0gPSBbQywgWCwgMF07XG4gICAgfVxuICAgIGlmICgxIDw9IEhwICYmIEhwIDwgMikge1xuICAgICAgW1IsIEcsIEJdID0gW1gsIEMsIDBdO1xuICAgIH1cbiAgICBpZiAoMiA8PSBIcCAmJiBIcCA8IDMpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFswLCBDLCBYXTtcbiAgICB9XG4gICAgaWYgKDMgPD0gSHAgJiYgSHAgPCA0KSB7XG4gICAgICBbUiwgRywgQl0gPSBbMCwgWCwgQ107XG4gICAgfVxuICAgIGlmICg0IDw9IEhwICYmIEhwIDwgNSkge1xuICAgICAgW1IsIEcsIEJdID0gW1gsIDAsIENdO1xuICAgIH1cbiAgICBpZiAoNSA8PSBIcCAmJiBIcCA8IDYpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFtDLCAwLCBYXTtcbiAgICB9XG5cbiAgICBjb25zdCBtOiBhbnkgPSB2IC0gQztcbiAgICBbUiwgRywgQl0gPSBbUiArIG0sIEcgKyBtLCBCICsgbV07XG5cbiAgICBSID0gTWF0aC5mbG9vcihSICogMjU1KTtcbiAgICBHID0gTWF0aC5mbG9vcihHICogMjU1KTtcbiAgICBCID0gTWF0aC5mbG9vcihCICogMjU1KTtcblxuICAgIGxldCBhcnJheTogYW55ID0gV1MyODExLl9nZW5lcmF0ZUZyb21CeXRlKFIpO1xuICAgIGFycmF5ID0gYXJyYXkuY29uY2F0KFdTMjgxMS5fZ2VuZXJhdGVGcm9tQnl0ZShHKSk7XG4gICAgYXJyYXkgPSBhcnJheS5jb25jYXQoV1MyODExLl9nZW5lcmF0ZUZyb21CeXRlKEIpKTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBzcGk6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJkaW5cIiwgXCJ2Y2NcIiwgXCJnbmRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJkaW5cIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcblxuICAgIHRoaXMucGFyYW1zLm1vZGUgPSBcIm1hc3RlclwiO1xuICAgIHRoaXMucGFyYW1zLmZyZXF1ZW5jeSA9IDIgKiAxMDAwICogMTAwMDtcbiAgICB0aGlzLnBhcmFtcy5tb3NpID0gdGhpcy5wYXJhbXMuZGluO1xuICAgIHRoaXMucGFyYW1zLmRyaXZlID0gXCI1dlwiOyAvLyBJdCBvdmVyIHNwZWMgZm9yIGZyZXF1ZW5jeS4gQnV0IFZJTi1ISSByZXF1aXJlIDAuN1ZDQzw9LlxuICAgIHRoaXMuc3BpID0gdGhpcy5vYm5pei5nZXRTcGlXaXRoQ29uZmlnKHRoaXMucGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyByZ2IocjogYW55LCBnOiBhbnksIGI6IGFueSkge1xuICAgIHRoaXMuc3BpLndyaXRlKFdTMjgxMS5fZ2VuZXJhdGVDb2xvcihyLCBnLCBiKSk7XG4gIH1cblxuICBwdWJsaWMgaHN2KGg6IGFueSwgczogYW55LCB2OiBhbnkpIHtcbiAgICB0aGlzLnNwaS53cml0ZShXUzI4MTEuX2dlbmVyYXRlSHN2Q29sb3IoaCwgcywgdikpO1xuICB9XG5cbiAgcHVibGljIHJnYnMoYXJyYXk6IGFueSkge1xuICAgIGxldCBieXRlczogYW55ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgb25lQXJyYXk6IGFueSA9IGFycmF5W2ldO1xuICAgICAgYnl0ZXMgPSBieXRlcy5jb25jYXQoXG4gICAgICAgIFdTMjgxMS5fZ2VuZXJhdGVDb2xvcihvbmVBcnJheVswXSwgb25lQXJyYXlbMV0sIG9uZUFycmF5WzJdKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuc3BpLndyaXRlKGJ5dGVzKTtcbiAgfVxuXG4gIHB1YmxpYyBoc3ZzKGFycmF5OiBhbnkpIHtcbiAgICBsZXQgYnl0ZXM6IGFueSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9uZUFycmF5OiBhbnkgPSBhcnJheVtpXTtcbiAgICAgIGJ5dGVzID0gYnl0ZXMuY29uY2F0KFxuICAgICAgICBXUzI4MTEuX2dlbmVyYXRlSHN2Q29sb3Iob25lQXJyYXlbMF0sIG9uZUFycmF5WzFdLCBvbmVBcnJheVsyXSksXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnNwaS53cml0ZShieXRlcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV1MyODExO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Light/WS2812/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class WS2812 {
    constructor() {
        this.keys = ["din", "vcc", "gnd"];
        this.requiredKeys = ["din"];
    }
    static info() {
        return {
            name: "WS2812",
        };
    }
    static _generateFromByte(val) {
        // T0H 0.35us+-0.15us
        // T1H 0.7us+-0.15us
        // T0L 0.8us+-0.15us
        // T1L 0.6us+-0.15us
        // 0.3-0.9 and 0.6-0.6 at 3.33Mhz
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xc;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2812._generateFromByte(g);
        array = array.concat(WS2812._generateFromByte(r));
        array = array.concat(WS2812._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        return WS2812._generateColor(R, G, B);
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.mode = "master";
        this.params.frequency = Math.floor(3.33 * 1000 * 1000);
        this.params.mosi = this.params.din;
        this.params.drive = "5v"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(r, g, b) {
        this.spi.write(WS2812._generateColor(r, g, b));
    }
    hsv(h, s, v) {
        this.spi.write(WS2812._generateHsvColor(h, s, v));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2812;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Light/WS2812B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class WS2812B {
    constructor() {
        this.keys = ["din", "vcc", "gnd"];
        this.requiredKeys = ["din"];
    }
    static info() {
        return {
            name: "WS2812B",
        };
    }
    static _generateFromByte(val) {
        // T0H 0.35us+-0.15us
        // T1H 0.9us+-0.15us
        // T0L 0.9us+-0.15us
        // T1L 0.35us+-0.15us
        // 0.3-0.9 and 0.9-0.3 at 3.33Mhz
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xe;
        const ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2812B._generateFromByte(g);
        array = array.concat(WS2812B._generateFromByte(r));
        array = array.concat(WS2812B._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        return WS2812B._generateColor(R, G, B);
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.mode = "master";
        this.params.frequency = Math.floor(3.33 * 1000 * 1000);
        this.params.mosi = this.params.din;
        this.params.drive = "5v"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    rgb(r, g, b) {
        this.spi.write(WS2812B._generateColor(r, g, b));
    }
    hsv(h, s, v) {
        this.spi.write(WS2812B._generateHsvColor(h, s, v));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812B._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2812B._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
exports.default = WS2812B;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Logic/SNx4HC595/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class SNx4HC595_IO {
    constructor(chip, id) {
        this.chip = chip;
        this.id = id;
        this.value = 0;
    }
    output(value) {
        this.chip.output(this.id, value);
    }
}
// tslint:disable-next-line:max-classes-per-file
class SNx4HC595 {
    constructor() {
        /* http://www.ti.com/lit/ds/symlink/sn74hc595.pdf */
        this.keys = [
            "gnd",
            "vcc",
            "ser",
            "srclk",
            "rclk",
            "oe",
            "srclr",
            "io_num",
            "enabled",
        ];
        this.requiredKeys = ["ser", "srclk", "rclk"];
        this.autoFlash = true;
    }
    static info() {
        return {
            name: "SNx4HC595",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_ser = this.obniz.getIO(this.params.ser);
        this.io_srclk = this.obniz.getIO(this.params.srclk);
        this.io_rclk = this.obniz.getIO(this.params.rclk);
        this.io_ser.output(false);
        this.io_srclk.output(false);
        this.io_rclk.output(false);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (this.obniz.isValidIO(this.params.srclr)) {
            this.io_srclr = this.obniz.getIO(this.params.srclr);
            this.io_srclr.output(true);
        }
        if (this.obniz.isValidIO(this.params.oe)) {
            this.io_oe = this.obniz.getIO(this.params.oe);
            this.io_oe.output(true);
        }
        if (this.obniz.isValidIO(this.params.vcc) ||
            this.obniz.isValidIO(this.params.gnd)) {
            this.obniz.wait(100);
        }
        if (typeof this.params.io_num !== "number") {
            this.params.io_num = 8;
        }
        this.ioNum(this.params.io_num);
        if (typeof this.params.enabled !== "boolean") {
            this.params.enabled = true;
        }
        if (this.io_oe && this.params.enabled) {
            this.io_oe.output(false);
        }
    }
    ioNum(num) {
        if (typeof num === "number" && this._io_num !== num) {
            this._io_num = num;
            this.io = [];
            for (let i = 0; i < num; i++) {
                this.io.push(new SNx4HC595_IO(this, i));
            }
            this.flush();
        }
        else {
            throw new Error("io num should be a number");
        }
    }
    isValidIO(io) {
        return typeof io === "number" && io >= 0 && io < this._io_num;
    }
    getIO(io) {
        if (!this.isValidIO(io)) {
            throw new Error("io " + io + " is not valid io");
        }
        return this.io[io];
    }
    output(id, value) {
        value = value === true;
        this.io[id].value = value;
        if (this.autoFlash) {
            this.flush();
        }
    }
    onece(operation) {
        if (typeof operation !== "function") {
            throw new Error("please provide function");
        }
        const lastValue = this.autoFlash;
        this.autoFlash = false;
        operation();
        this.flush();
        this.autoFlash = lastValue;
    }
    setEnable(enable) {
        if (!this.io_oe && enable === false) {
            throw new Error('pin "oe" is not specified');
        }
        this.io_oe.output(!enable);
    }
    flush() {
        /* this code will works with 5v. But you should pay more attention when 3v. Timing is more tight. see chip reference */
        this.io_rclk.output(false);
        for (let i = this.io.length - 1; i >= 0; i--) {
            this.io_ser.output(this.io[i].value);
            this.io_srclk.output(true);
            this.io_srclk.output(false);
        }
        this.io_rclk.output(true);
    }
}
exports.default = SNx4HC595;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Magnet/CT10/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class CT10 {
    constructor() {
        this.keys = ["signal", "gnd", "vcc"];
        this.requiredKeys = ["signal"];
        this.onChangeForStateWait = () => {
        };
    }
    static info() {
        return {
            name: "CT10",
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
            this.io_vcc.output(true);
        }
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        this.io_signal.pull("0v");
        const self = this;
        this.io_signal.input((value) => {
            self.isNear = value;
            if (self.onchange) {
                self.onchange(value);
            }
            self.onChangeForStateWait(value);
        });
    }
    isNearWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.io_signal.inputWait();
            return ret;
        });
    }
    stateWait(isNear) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (near) => {
                if (isNear === near) {
                    this.onChangeForStateWait = () => {
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = CT10;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9NYWduZXQvQ1QxMC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sSUFBSTtJQWtCUjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxFQUFFO1FBQ2pDLENBQUMsQ0FBQztJQUNKLENBQUM7SUF0Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztJQUNKLENBQUM7SUFvQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFFRCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFCLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtZQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxVQUFVOztZQUNyQixNQUFNLEdBQUcsR0FBUSxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEQsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO0tBQUE7SUFFTSxTQUFTLENBQUMsTUFBVztRQUMxQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO2dCQUN4QyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxHQUFHLEVBQUU7b0JBQ2pDLENBQUMsQ0FBQztvQkFDRixPQUFPLEVBQUUsQ0FBQztpQkFDWDtZQUNILENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsSUFBSSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9NYWduZXQvQ1QxMC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENUMTAge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJDVDEwXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlRm9yU3RhdGVXYWl0OiBhbnk7XG4gIHB1YmxpYyBpb19zaWduYWw6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fdmNjOiBhbnk7XG4gIHB1YmxpYyBpb19zdXBwbHk6IGFueTtcbiAgcHVibGljIGlzTmVhcjogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJzaWduYWxcIiwgXCJnbmRcIiwgXCJ2Y2NcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG5cbiAgICB0aGlzLm9uQ2hhbmdlRm9yU3RhdGVXYWl0ID0gKCkgPT4ge1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMuaW9fc2lnbmFsID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuc2lnbmFsKTtcblxuICAgIGlmIChvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMudmNjKSkge1xuICAgICAgdGhpcy5pb192Y2MgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy52Y2MpO1xuICAgICAgdGhpcy5pb192Y2Mub3V0cHV0KHRydWUpO1xuICAgIH1cblxuICAgIGlmIChvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZ25kKSkge1xuICAgICAgdGhpcy5pb19zdXBwbHkgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5nbmQpO1xuICAgICAgdGhpcy5pb19zdXBwbHkub3V0cHV0KGZhbHNlKTtcbiAgICB9XG5cbiAgICB0aGlzLmlvX3NpZ25hbC5wdWxsKFwiMHZcIik7XG5cbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xuICAgIHRoaXMuaW9fc2lnbmFsLmlucHV0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBzZWxmLmlzTmVhciA9IHZhbHVlO1xuICAgICAgaWYgKHNlbGYub25jaGFuZ2UpIHtcbiAgICAgICAgc2VsZi5vbmNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBzZWxmLm9uQ2hhbmdlRm9yU3RhdGVXYWl0KHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpc05lYXJXYWl0KCkge1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5pb19zaWduYWwuaW5wdXRXYWl0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0ZVdhaXQoaXNOZWFyOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vbkNoYW5nZUZvclN0YXRlV2FpdCA9IChuZWFyOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGlzTmVhciA9PT0gbmVhcikge1xuICAgICAgICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAoKSA9PiB7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ1QxMDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Magnet/HMC5883L/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class HMC5883L {
    constructor() {
        this.keys = ["gnd", "sda", "scl", "i2c"];
        this.address = {};
        this.address.device = 0x1e;
        this.address.reset = [0x02, 0x00]; // Continuous Measurment Mode
        this.address.xMSB = [0x03];
    }
    static info() {
        return {
            name: "HMC5883L",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(null, this.params.gnd, "3v");
        this.params.clock = 100000;
        this.params.pull = "3v";
        this.params.mode = "master";
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(500);
    }
    init() {
        this.i2c.write(this.address.device, this.address.reset);
        this.obniz.wait(500);
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address.device, this.address.xMSB);
            const readed = yield this.i2c.readWait(this.address.device, 2 * 3);
            const obj = {};
            const keys = ["x", "y", "z"];
            for (let i = 0; i < 3; i++) {
                let val = (readed[i * 2] << 8) | readed[i * 2 + 1];
                if (val & 0x8000) {
                    val = val - 65536;
                }
                obj[keys[i]] = val;
            }
            return obj;
        });
    }
}
exports.default = HMC5883L;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9NYWduZXQvSE1DNTg4M0wvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFFBQVE7SUFjWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBbkJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDO0lBQ0osQ0FBQztJQWlCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUU1QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFWSxHQUFHOztZQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsTUFBTSxNQUFNLEdBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFeEUsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxHQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLEdBQUcsR0FBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRTtvQkFDaEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7aUJBQ25CO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDcEI7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9NYWduZXQvSE1DNTg4M0wvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBITUM1ODgzTCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkhNQzU4ODNMXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJzZGFcIiwgXCJzY2xcIiwgXCJpMmNcIl07XG5cbiAgICB0aGlzLmFkZHJlc3MgPSB7fTtcbiAgICB0aGlzLmFkZHJlc3MuZGV2aWNlID0gMHgxZTtcbiAgICB0aGlzLmFkZHJlc3MucmVzZXQgPSBbMHgwMiwgMHgwMF07IC8vIENvbnRpbnVvdXMgTWVhc3VybWVudCBNb2RlXG4gICAgdGhpcy5hZGRyZXNzLnhNU0IgPSBbMHgwM107XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQobnVsbCwgdGhpcy5wYXJhbXMuZ25kLCBcIjN2XCIpO1xuXG4gICAgdGhpcy5wYXJhbXMuY2xvY2sgPSAxMDAwMDA7XG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IFwiM3ZcIjtcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gXCJtYXN0ZXJcIjtcblxuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG5cbiAgICB0aGlzLm9ibml6LndhaXQoNTAwKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcy5kZXZpY2UsIHRoaXMuYWRkcmVzcy5yZXNldCk7XG4gICAgdGhpcy5vYm5pei53YWl0KDUwMCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0KCkge1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcy5kZXZpY2UsIHRoaXMuYWRkcmVzcy54TVNCKTtcbiAgICBjb25zdCByZWFkZWQ6IGFueSA9IGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcy5kZXZpY2UsIDIgKiAzKTtcblxuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgY29uc3Qga2V5czogYW55ID0gW1wieFwiLCBcInlcIiwgXCJ6XCJdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBsZXQgdmFsOiBhbnkgPSAocmVhZGVkW2kgKiAyXSA8PCA4KSB8IHJlYWRlZFtpICogMiArIDFdO1xuICAgICAgaWYgKHZhbCAmIDB4ODAwMCkge1xuICAgICAgICB2YWwgPSB2YWwgLSA2NTUzNjtcbiAgICAgIH1cbiAgICAgIG9ialtrZXlzW2ldXSA9IHZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhNQzU4ODNMO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Memory/24LC256/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class _24LC256 {
    constructor() {
        this.requiredKeys = ["address"];
        this.keys = ["sda", "scl", "clock", "pull", "i2c", "address"];
    }
    static info() {
        return {
            name: "24LC256",
        };
    }
    wired(obniz) {
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    // Module functions
    set(address, data) {
        const array = [];
        array.push((address >> 8) & 0xff);
        array.push(address & 0xff);
        array.push.apply(array, data);
        this.i2c.write(0x50, array);
        this.obniz.wait(4 + 1); // write cycle time = 4ms for 24XX00, 1.5ms for 24C01C, 24C02C
    }
    getWait(address, length) {
        return __awaiter(this, void 0, void 0, function* () {
            const array = [];
            array.push((address >> 8) & 0xff);
            array.push(address & 0xff);
            this.i2c.write(0x50, array);
            return yield this.i2c.readWait(0x50, length);
        });
    }
}
exports.default = _24LC256;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9NZW1vcnkvMjRMQzI1Ni9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sUUFBUTtJQWNaO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFmTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFhTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQyxVQUFVO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVO1FBQy9ELElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsbUJBQW1CO0lBRVosR0FBRyxDQUFDLE9BQVksRUFBRSxJQUFTO1FBQ2hDLE1BQU0sS0FBSyxHQUFRLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsOERBQThEO0lBQ3hGLENBQUM7SUFFWSxPQUFPLENBQUMsT0FBWSxFQUFFLE1BQVc7O1lBQzVDLE1BQU0sS0FBSyxHQUFRLEVBQUUsQ0FBQztZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1QixPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9NZW1vcnkvMjRMQzI1Ni9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIF8yNExDMjU2IHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiMjRMQzI1NlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGkyYzogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcImFkZHJlc3NcIl07XG4gICAgdGhpcy5rZXlzID0gW1wic2RhXCIsIFwic2NsXCIsIFwiY2xvY2tcIiwgXCJwdWxsXCIsIFwiaTJjXCIsIFwiYWRkcmVzc1wiXTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5wYXJhbXMubW9kZSA9IHRoaXMucGFyYW1zLm1vZGUgfHwgXCJtYXN0ZXJcIjsgLy8gZm9yIGkyY1xuICAgIHRoaXMucGFyYW1zLmNsb2NrID0gdGhpcy5wYXJhbXMuY2xvY2sgfHwgNDAwICogMTAwMDsgLy8gZm9yIGkyY1xuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gIH1cblxuICAvLyBNb2R1bGUgZnVuY3Rpb25zXG5cbiAgcHVibGljIHNldChhZGRyZXNzOiBhbnksIGRhdGE6IGFueSkge1xuICAgIGNvbnN0IGFycmF5OiBhbnkgPSBbXTtcbiAgICBhcnJheS5wdXNoKChhZGRyZXNzID4+IDgpICYgMHhmZik7XG4gICAgYXJyYXkucHVzaChhZGRyZXNzICYgMHhmZik7XG4gICAgYXJyYXkucHVzaC5hcHBseShhcnJheSwgZGF0YSk7XG4gICAgdGhpcy5pMmMud3JpdGUoMHg1MCwgYXJyYXkpO1xuICAgIHRoaXMub2JuaXoud2FpdCg0ICsgMSk7IC8vIHdyaXRlIGN5Y2xlIHRpbWUgPSA0bXMgZm9yIDI0WFgwMCwgMS41bXMgZm9yIDI0QzAxQywgMjRDMDJDXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0V2FpdChhZGRyZXNzOiBhbnksIGxlbmd0aDogYW55KSB7XG4gICAgY29uc3QgYXJyYXk6IGFueSA9IFtdO1xuICAgIGFycmF5LnB1c2goKGFkZHJlc3MgPj4gOCkgJiAweGZmKTtcbiAgICBhcnJheS5wdXNoKGFkZHJlc3MgJiAweGZmKTtcbiAgICB0aGlzLmkyYy53cml0ZSgweDUwLCBhcnJheSk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KDB4NTAsIGxlbmd0aCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgXzI0TEMyNTY7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/AK8963/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AK8963 {
    constructor() {
        this.keys = ["gnd", "vcc", "sda", "scl", "i2c", "address", "adb_cycle"];
        this.required = [];
    }
    static info() {
        return {
            name: "AK8963",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.clock = 100000;
        this.params.pull = "3v";
        this.params.mode = "master";
        this._address = this.params.address || 0x0c;
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.setConfig(this.params.adc_cycle || 8);
    }
    setConfig(ADC_cycle) {
        switch (ADC_cycle) {
            case 8:
                this.i2c.write(this._address, [0x0a, 0x12]);
                break;
            case 100:
                this.i2c.write(this._address, [0x0a, 0x16]);
                break;
            default:
                throw new Error("ADC_cycle variable 8,100 setting");
        }
        this._adc_cycle = ADC_cycle;
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this._address, [0x03]); // request AK8963 data
            const raw_data_AK8963 = yield this.i2c.readWait(this._address, 7); // read 7byte(read mag_data[6] to refresh)
            return {
                x: this.char2short(raw_data_AK8963[0], raw_data_AK8963[1]),
                y: this.char2short(raw_data_AK8963[2], raw_data_AK8963[3]),
                z: this.char2short(raw_data_AK8963[4], raw_data_AK8963[5]),
            };
        });
    }
    char2short(valueH, valueL) {
        const buffer = new ArrayBuffer(2);
        const dv = new DataView(buffer);
        dv.setUint8(0, valueH);
        dv.setUint8(1, valueL);
        return dv.getInt16(0, false);
    }
}
exports.default = AK8963;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9BSzg5NjMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE1BQU07SUFnQlY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQWpCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO0lBQ0osQ0FBQztJQWVNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7UUFDNUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLFNBQVMsQ0FBQyxTQUFjO1FBQzdCLFFBQVEsU0FBUyxFQUFFO1lBQ2pCLEtBQUssQ0FBQztnQkFDSixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLE1BQU07WUFDUixLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxNQUFNO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVZLE9BQU87O1lBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCO1lBQzdELE1BQU0sZUFBZSxHQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBDQUEwQztZQUNsSCxPQUFPO2dCQUNMLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFELENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFELENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0QsQ0FBQztRQUNKLENBQUM7S0FBQTtJQUVNLFVBQVUsQ0FBQyxNQUFXLEVBQUUsTUFBVztRQUN4QyxNQUFNLE1BQU0sR0FBUSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QixPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQUNELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvTW92ZW1lbnRTZW5zb3IvQUs4OTYzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQUs4OTYzIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiQUs4OTYzXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgX2FkZHJlc3M6IGFueTtcbiAgcHVibGljIGkyYzogYW55O1xuICBwdWJsaWMgX2FkY19jeWNsZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcInNkYVwiLCBcInNjbFwiLCBcImkyY1wiLCBcImFkZHJlc3NcIiwgXCJhZGJfY3ljbGVcIl07XG4gICAgdGhpcy5yZXF1aXJlZCA9IFtdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuICAgIHRoaXMucGFyYW1zLmNsb2NrID0gMTAwMDAwO1xuICAgIHRoaXMucGFyYW1zLnB1bGwgPSBcIjN2XCI7XG4gICAgdGhpcy5wYXJhbXMubW9kZSA9IFwibWFzdGVyXCI7XG4gICAgdGhpcy5fYWRkcmVzcyA9IHRoaXMucGFyYW1zLmFkZHJlc3MgfHwgMHgwYztcbiAgICB0aGlzLmkyYyA9IG9ibml6LmdldEkyQ1dpdGhDb25maWcodGhpcy5wYXJhbXMpO1xuICAgIHRoaXMuc2V0Q29uZmlnKHRoaXMucGFyYW1zLmFkY19jeWNsZSB8fCA4KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDb25maWcoQURDX2N5Y2xlOiBhbnkpIHtcbiAgICBzd2l0Y2ggKEFEQ19jeWNsZSkge1xuICAgICAgY2FzZSA4OlxuICAgICAgICB0aGlzLmkyYy53cml0ZSh0aGlzLl9hZGRyZXNzLCBbMHgwYSwgMHgxMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTAwOlxuICAgICAgICB0aGlzLmkyYy53cml0ZSh0aGlzLl9hZGRyZXNzLCBbMHgwYSwgMHgxNl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFEQ19jeWNsZSB2YXJpYWJsZSA4LDEwMCBzZXR0aW5nXCIpO1xuICAgIH1cbiAgICB0aGlzLl9hZGNfY3ljbGUgPSBBRENfY3ljbGU7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0V2FpdCgpIHtcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLl9hZGRyZXNzLCBbMHgwM10pOyAvLyByZXF1ZXN0IEFLODk2MyBkYXRhXG4gICAgY29uc3QgcmF3X2RhdGFfQUs4OTYzOiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLl9hZGRyZXNzLCA3KTsgLy8gcmVhZCA3Ynl0ZShyZWFkIG1hZ19kYXRhWzZdIHRvIHJlZnJlc2gpXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRoaXMuY2hhcjJzaG9ydChyYXdfZGF0YV9BSzg5NjNbMF0sIHJhd19kYXRhX0FLODk2M1sxXSksXG4gICAgICB5OiB0aGlzLmNoYXIyc2hvcnQocmF3X2RhdGFfQUs4OTYzWzJdLCByYXdfZGF0YV9BSzg5NjNbM10pLFxuICAgICAgejogdGhpcy5jaGFyMnNob3J0KHJhd19kYXRhX0FLODk2M1s0XSwgcmF3X2RhdGFfQUs4OTYzWzVdKSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNoYXIyc2hvcnQodmFsdWVIOiBhbnksIHZhbHVlTDogYW55KSB7XG4gICAgY29uc3QgYnVmZmVyOiBhbnkgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gICAgY29uc3QgZHY6IGFueSA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGR2LnNldFVpbnQ4KDAsIHZhbHVlSCk7XG4gICAgZHYuc2V0VWludDgoMSwgdmFsdWVMKTtcbiAgICByZXR1cm4gZHYuZ2V0SW50MTYoMCwgZmFsc2UpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBBSzg5NjM7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/Button/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Button {
    constructor() {
        this.keys = ["signal", "gnd", "pull"];
        this.requiredKeys = ["signal"];
        this.onChangeForStateWait = () => {
        };
    }
    static info() {
        return {
            name: "Button",
        };
    }
    wired(obniz) {
        this.io_signal = obniz.getIO(this.params.signal);
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_supply = obniz.getIO(this.params.gnd);
            this.io_supply.output(false);
        }
        // start input
        if (this.params.pull === "3v") {
            this.io_signal.pull("3v");
        }
        else if (this.params.pull === "0v") {
            this.io_signal.pull("0v");
        }
        else {
            this.io_signal.pull("5v");
        }
        const self = this;
        this.io_signal.input((value) => {
            self.isPressed = value === false;
            if (self.onchange) {
                self.onchange(value === false);
            }
            self.onChangeForStateWait(value === false);
        });
    }
    isPressedWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.io_signal.inputWait();
            return ret === false;
        });
    }
    stateWait(isPressed) {
        return new Promise((resolve, reject) => {
            this.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    this.onChangeForStateWait = () => {
                    };
                    resolve();
                }
            };
        });
    }
}
exports.default = Button;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9CdXR0b24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE1BQU07SUFpQlY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsRUFBRTtRQUNqQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBckJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7SUFDSixDQUFDO0lBbUJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpELElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO1FBRUQsY0FBYztRQUNkLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO1FBRUQsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEtBQUssS0FBSyxDQUFDO1lBQ2pDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUM7YUFDaEM7WUFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVZLGFBQWE7O1lBQ3hCLE1BQU0sR0FBRyxHQUFRLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNsRCxPQUFPLEdBQUcsS0FBSyxLQUFLLENBQUM7UUFDdkIsQ0FBQztLQUFBO0lBRU0sU0FBUyxDQUFDLFNBQWM7UUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFO29CQUN6QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxFQUFFO29CQUNqQyxDQUFDLENBQUM7b0JBQ0YsT0FBTyxFQUFFLENBQUM7aUJBQ1g7WUFDSCxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvTW92ZW1lbnRTZW5zb3IvQnV0dG9uL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQnV0dG9uIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiQnV0dG9uXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlRm9yU3RhdGVXYWl0OiBhbnk7XG4gIHB1YmxpYyBpb19zaWduYWw6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fc3VwcGx5OiBhbnk7XG4gIHB1YmxpYyBpc1ByZXNzZWQ6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wic2lnbmFsXCIsIFwiZ25kXCIsIFwicHVsbFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInNpZ25hbFwiXTtcblxuICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAoKSA9PiB7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5pb19zaWduYWwgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5zaWduYWwpO1xuXG4gICAgaWYgKG9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5nbmQpKSB7XG4gICAgICB0aGlzLmlvX3N1cHBseSA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmduZCk7XG4gICAgICB0aGlzLmlvX3N1cHBseS5vdXRwdXQoZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0IGlucHV0XG4gICAgaWYgKHRoaXMucGFyYW1zLnB1bGwgPT09IFwiM3ZcIikge1xuICAgICAgdGhpcy5pb19zaWduYWwucHVsbChcIjN2XCIpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJhbXMucHVsbCA9PT0gXCIwdlwiKSB7XG4gICAgICB0aGlzLmlvX3NpZ25hbC5wdWxsKFwiMHZcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW9fc2lnbmFsLnB1bGwoXCI1dlwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xuICAgIHRoaXMuaW9fc2lnbmFsLmlucHV0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBzZWxmLmlzUHJlc3NlZCA9IHZhbHVlID09PSBmYWxzZTtcbiAgICAgIGlmIChzZWxmLm9uY2hhbmdlKSB7XG4gICAgICAgIHNlbGYub25jaGFuZ2UodmFsdWUgPT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHNlbGYub25DaGFuZ2VGb3JTdGF0ZVdhaXQodmFsdWUgPT09IGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpc1ByZXNzZWRXYWl0KCkge1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5pb19zaWduYWwuaW5wdXRXYWl0KCk7XG4gICAgcmV0dXJuIHJldCA9PT0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGVXYWl0KGlzUHJlc3NlZDogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAocHJlc3NlZDogYW55KSA9PiB7XG4gICAgICAgIGlmIChpc1ByZXNzZWQgPT09IHByZXNzZWQpIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlRm9yU3RhdGVXYWl0ID0gKCkgPT4ge1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/MovementSensor/FlickHat/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class FlickHat {
    constructor() {
        this.keys = ["vcc", "gnd", "sda", "scl", "reset", "ts", "led1", "led2"];
        this.requiredKeys = ["gnd", "sda", "scl", "reset", "ts"];
        this.displayIoNames = {
            // vcc: 'vcc', //5v
            sda: "sda",
            scl: "scl",
            gnd: "gnd",
            reset: "reset",
            ts: "ts",
        };
    }
    static info() {
        return {
            name: "FlickHat",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.address = 0x42;
        if (this.obniz.isValidIO(this.params.vcc)) {
            this.obniz.getIO(this.params.vcc).drive("5v");
            this.obniz.getIO(this.params.vcc).output(true);
        }
        this.obniz.getIO(this.params.gnd).output(false);
        this.io_reset = this.obniz.getIO(this.params.reset);
        this.io_reset.drive("3v");
        this.io_ts = this.obniz.getIO(this.params.ts);
        this.io_ts.drive("open-drain");
        this.io_ts.pull("3v");
        this.params.mode = "master";
        this.params.pull = "3v";
        this.params.clock = 100 * 1000; // 100KHz
        // PeripheralI2C
        this.i2c = this.obniz.getI2CWithConfig(this.params);
        if (this.obniz.isValidIO(this.params.led1)) {
            this.led1 = this.obniz.wired("LED", { anode: this.params.led1 });
        }
        if (this.obniz.isValidIO(this.params.led2)) {
            this.led2 = this.obniz.wired("LED", { anode: this.params.led2 });
        }
    }
    start(callbackFwInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            this.io_ts.pull("3v");
            this.io_reset.output(false);
            yield this.obniz.wait(50);
            this.io_reset.output(true);
            yield this.obniz.wait(50);
            this.onfwinfo = callbackFwInfo;
            this.fwInfo = {
                fwValid: 0,
                fwInfoReceived: false,
            };
            this.rotation = 0;
            this.lastRotation = 0;
            this.readSize = 132;
            yield this.polling();
            yield this.obniz.wait(200);
            this.i2c.write(this.address, [
                0x10,
                0x00,
                0x00,
                0xa2,
                0xa1,
                0x00,
                0x00,
                0x00,
                0x1f,
                0x00,
                0x00,
                0x00,
                0xff,
                0xff,
                0xff,
                0xff,
            ]);
            yield this.obniz.wait(100);
            this.i2c.write(this.address, [
                0x10,
                0x00,
                0x00,
                0xa2,
                0x80,
                0x00,
                0x00,
                0x00,
                0x3f,
                0x00,
                0x00,
                0x00,
                0x3f,
                0x00,
                0x00,
                0x00,
            ]);
        });
    }
    _dataArray2string(data) {
        let result = "";
        for (const n of data) {
            result += String.fromCharCode(n);
        }
        return result;
    }
    polling(timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            timeout = timeout || 3000; // default: 3s
            // DataOutputConfigMask	2byte
            // const maskDSPStatus = 1;
            const maskGestureInfo = 1 << 1;
            const maskTouchInfo = 1 << 2;
            const maskAirWheelInfo = 1 << 3;
            const maskXYZPosition = 1 << 4;
            // SystemInfo	1byte
            const sysPositionValid = 1;
            const sysAirWheelValid = 1 << 1;
            // const sysDSPRunning = 1 << 7;
            const startTime = new Date();
            let ts = true;
            while (ts && new Date() - startTime < timeout) {
                ts = yield this.io_ts.inputWait();
            }
            if (!ts) {
                this.io_ts.pull("0v");
                // await this.obniz.wait(1);
                const data = yield this.i2c.readWait(this.address, this.readSize);
                const size = data[0];
                // let flag = data[1];
                const seq = data[2];
                const msgID = data[3];
                if (size !== 0xff && size > 0) {
                    if (this.debugprint || this.obniz.debugprint) {
                        console.log("flickHat: " + data.slice(0, size).map((v) => "0x" + v.toString(16)));
                    }
                    let configmask;
                    let sysinfo;
                    let gesture;
                    let touch;
                    let airwheel;
                    let statusInfo;
                    let fwInfo;
                    switch (msgID) {
                        case 0x91: // sensor data output
                            configmask = data[4] | (data[5] << 8); // little endian
                            // let timestamp = data[6]; // 200hz, 8-bit counter, max ~1.25sec
                            sysinfo = data[7];
                            // let dspstatus = data.slice(8, 10);
                            gesture = data.slice(10, 14);
                            touch = data.slice(14, 18);
                            airwheel = data.slice(18, 20);
                            // let xyz = data.slice(20, 26);
                            // let noisepow = data.slice(27, 30);
                            if (gesture[0] === 255 &&
                                gesture[1] === 255 &&
                                gesture[2] === 255 &&
                                gesture[3] === 255) {
                                break;
                            }
                            if (configmask & maskXYZPosition && sysinfo & sysPositionValid) {
                                const xyz = {
                                    // little endian
                                    x: (data[20] | (data[21] << 8)) / 65536,
                                    y: (data[22] | (data[23] << 8)) / 65536,
                                    z: (data[24] | (data[25] << 8)) / 65536,
                                    seq,
                                };
                                this.xyz = xyz;
                                if (typeof this.onxyz === "function") {
                                    this.onxyz(xyz);
                                }
                            }
                            if (configmask & maskGestureInfo && gesture[0] > 0) {
                                this.lastGesture = gesture[0];
                                const gestures = [
                                    ["", "", ""],
                                    ["garbage", "", ""],
                                    ["flick", "west", "east"],
                                    ["flick", "east", "west"],
                                    ["flick", "south", "north"],
                                    ["flick", "north", "south"],
                                    ["circle", "clockwise", ""],
                                    ["circle", "counter-clockwise", ""],
                                    ["wave", "x", ""],
                                    ["wave", "y", ""],
                                    ["hold", "", ""],
                                ];
                                for (const index in gestures) {
                                    if (index === gesture[0] &&
                                        typeof this.ongestureall === "function") {
                                        this.ongestureall({
                                            action: gestures[index][0],
                                            from: gestures[index][1],
                                            to: gestures[index][2],
                                            raw: gesture,
                                            seq,
                                        });
                                    }
                                    if (index === gesture[0] &&
                                        gestures[index][0] === "flick" &&
                                        typeof this.ongesture === "function") {
                                        this.ongesture({
                                            action: "gesture",
                                            from: gestures[index][1],
                                            to: gestures[index][2],
                                            raw: gesture,
                                            seq,
                                        });
                                    }
                                }
                            }
                            if (configmask & maskTouchInfo &&
                                !(touch[0] === 0 && touch[1] === 0) &&
                                touch[3] === 0) {
                                // console.log('touch: ' + touch.map(v => '0x' + v.toString(16)));
                                const touchAction = touch[0] | (touch[1] << 8); // little endian
                                if (touchAction === 0xffff) {
                                    break;
                                }
                                // let touchCount = touch[2] * 5; // touch counter value * 5[ms]
                                const actions = [
                                    ["touch", "south"],
                                    ["touch", "west"],
                                    ["touch", "north"],
                                    ["touch", "east"],
                                    ["touch", "center"],
                                    ["tap", "south"],
                                    ["tap", "west"],
                                    ["tap", "north"],
                                    ["tap", "east"],
                                    ["tap", "center"],
                                    ["doubletap", "south"],
                                    ["doubletap", "west"],
                                    ["doubletap", "north"],
                                    ["doubletap", "east"],
                                    ["doubletap", "center"],
                                ];
                                const touches = [];
                                const taps = [];
                                const doubletaps = [];
                                this.lastTouch = touchAction;
                                let comp = 1;
                                for (const index in actions) {
                                    const value = actions[index];
                                    if (touchAction & comp) {
                                        // console.log(`touchAction:${touchAction.toString(16)}, comp:${comp.toString(16)}, index:${index}, group:${group}`);
                                        switch (value[0]) {
                                            case "touch":
                                                touches.push(value[1]);
                                                break;
                                            case "tap":
                                                taps.push(value[1]);
                                                break;
                                            case "doubletap":
                                                doubletaps.push(value[1]);
                                                break;
                                            default:
                                        }
                                    }
                                    comp <<= 1;
                                }
                                if (touches.length > 0 && typeof this.ontouch === "function") {
                                    this.ontouch({
                                        action: "touch",
                                        positions: touches,
                                        raw: touch,
                                        seq,
                                    });
                                }
                                if (taps.length > 0 && typeof this.ontap === "function") {
                                    this.ontap({
                                        action: "tap",
                                        positions: taps,
                                        raw: touch,
                                        seq,
                                    });
                                }
                                if (doubletaps.length > 0 &&
                                    typeof this.ondoubletap === "function") {
                                    this.ondoubletap({
                                        action: "doubletap",
                                        positions: doubletaps,
                                        raw: touch,
                                        seq,
                                    });
                                }
                            }
                            if (configmask & maskAirWheelInfo && sysinfo & sysAirWheelValid) {
                                const delta = (airwheel[0] - this.lastRotation) / 32.0;
                                this.rotation += delta * 360.0;
                                this.rotation %= 360;
                                if (delta !== 0 && delta > -0.5 && delta < 0.5) {
                                    if (typeof this.onairwheel === "function") {
                                        this.onairwheel({
                                            delta: delta * 360.0,
                                            rotation: this.rotation,
                                            raw: airwheel,
                                            seq,
                                        });
                                    }
                                }
                                this.lastRotation = airwheel[0];
                            }
                            break;
                        case 0x15: // system status
                            statusInfo = {
                                msgId: data[4],
                                maxCmdSize: data[5],
                                error: data[6] | (data[7] << 8),
                            };
                            this.statusInfo = statusInfo;
                            if (this.debugprint || this.obniz.debugprint) {
                                console.log(`flickHat: system status: {msgId: ${statusInfo.msgId}, maxCmdSize: ${statusInfo.maxCmdSize}, error: ${statusInfo.error}}`);
                            }
                            break;
                        case 0x83: // farmware information
                            fwInfo = {
                                fwValid: data[4] === 0xaa,
                                hwRev: [data[5], data[6]],
                                paramStartAddr: data[7] * 128,
                                libLoaderVer: [data[8], data[9]],
                                libLoaderPlatform: data[10],
                                fwStartAddr: data[11] * 128,
                                fwVersion: this._dataArray2string(data.slice(12, 132)).split("\0")[0],
                                fwInfoReceived: true,
                            };
                            this.fwInfo = fwInfo;
                            if (typeof this.onfwinfo === "function") {
                                this.onfwinfo(fwInfo);
                            }
                            this.readSize = 26;
                            break;
                        default:
                            console.error(`unknown message: 0x${msgID.toString(16)}, data:${data
                                .slice(0, size)
                                .map((v) => "0x" + v.toString(16))}`);
                    }
                }
                this.io_ts.pull("3v");
                // await this.obniz.wait(1);
            }
        });
    }
}
exports.default = FlickHat;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/MovementSensor/HC-SR505/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class HCSR505 {
    constructor() {
        this.keys = ["vcc", "gnd", "signal"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "HC-SR505",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_signal = obniz.getIO(this.params.signal);
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_signal.input((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    getWait() {
        return this.io_signal.inputWait();
    }
}
exports.default = HCSR505;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9IQy1TUjUwNS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sT0FBTztJQWVYO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFoQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBY00sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBRUQsa0JBQWUsT0FBTyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9IQy1TUjUwNS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEhDU1I1MDUge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJIQy1TUjUwNVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgaW9fc2lnbmFsOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwic2lnbmFsXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wic2lnbmFsXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgdGhpcy5pb19zaWduYWwgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5zaWduYWwpO1xuXG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuXG4gICAgdGhpcy5pb19zaWduYWwuaW5wdXQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uY2hhbmdlKSB7XG4gICAgICAgIHRoaXMub25jaGFuZ2UodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFdhaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW9fc2lnbmFsLmlucHV0V2FpdCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhDU1I1MDU7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/IPM-165/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class IPM_165 {
    constructor() {
        this.keys = ["signal", "vcc", "gnd"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "IPM-165",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.signal = this.obniz.getAD(this.params.signal);
        this.signal.start((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.signal.getWait();
            return value;
        });
    }
}
exports.default = IPM_165;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9JUE0tMTY1L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxPQUFPO0lBZVg7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQWhCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFjTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxPQUFPOztZQUNsQixNQUFNLEtBQUssR0FBUSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0MsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvTW92ZW1lbnRTZW5zb3IvSVBNLTE2NS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElQTV8xNjUge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJUE0tMTY1XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIHNpZ25hbDogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJzaWduYWxcIiwgXCJ2Y2NcIiwgXCJnbmRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLnNpZ25hbCA9IHRoaXMub2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuc2lnbmFsKTtcbiAgICB0aGlzLnNpZ25hbC5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgaWYgKHRoaXMub25jaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5vbmNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0V2FpdCgpIHtcbiAgICBjb25zdCB2YWx1ZTogYW55ID0gYXdhaXQgdGhpcy5zaWduYWwuZ2V0V2FpdCgpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJUE1fMTY1O1xuIl19


/***/ }),

/***/ "./dist/src/parts/MovementSensor/JoyStick/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class JoyStick {
    constructor() {
        this.keys = ["sw", "y", "x", "vcc", "gnd", "i2c"];
        this.requiredKeys = ["sw", "y", "x"];
        this.pins = this.keys || ["sw", "y", "x", "vcc", "gnd"];
        this.pinname = { sw: "sw12" };
        this.shortName = "joyS";
    }
    static info() {
        return {
            name: "JoyStick",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_sig_sw = obniz.getIO(this.params.sw);
        this.ad_x = obniz.getAD(this.params.x);
        this.ad_y = obniz.getAD(this.params.y);
        this.io_sig_sw.pull("5v");
        const self = this;
        this.ad_x.start((value) => {
            self.positionX = value / 5.0;
            if (self.onchangex) {
                self.onchangex(self.positionX * 2 - 1);
            }
        });
        this.ad_y.start((value) => {
            self.positionY = value / 5.0;
            if (self.onchangey) {
                self.onchangey(self.positionY * 2 - 1);
            }
        });
        this.io_sig_sw.input((value) => {
            self.isPressed = value === false;
            if (self.onchangesw) {
                self.onchangesw(value === false);
            }
        });
    }
    isPressedWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.io_sig_sw.inputWait();
            return ret === false;
        });
    }
    getXWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.ad_x.getWait();
            this.positionX = value / 5.0;
            return this.positionX * 2 - 1;
        });
    }
    getYWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.ad_y.getWait();
            this.positionY = value / 5.0;
            return this.positionY * 2 - 1;
        });
    }
}
exports.default = JoyStick;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9Kb3lTdGljay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sUUFBUTtJQXlCWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUMsRUFBRSxFQUFFLE1BQU0sRUFBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUE3Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBMkJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUIsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQzdCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDN0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxLQUFLLEtBQUssQ0FBQztZQUNqQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVksYUFBYTs7WUFDeEIsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sR0FBRyxLQUFLLEtBQUssQ0FBQztRQUN2QixDQUFDO0tBQUE7SUFFWSxRQUFROztZQUNuQixNQUFNLEtBQUssR0FBUSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQzdCLE9BQU8sSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7S0FBQTtJQUVZLFFBQVE7O1lBQ25CLE1BQU0sS0FBSyxHQUFRLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL01vdmVtZW50U2Vuc29yL0pveVN0aWNrL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSm95U3RpY2sge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJKb3lTdGlja1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBwaW5zOiBhbnk7XG4gIHB1YmxpYyBwaW5uYW1lOiBhbnk7XG4gIHB1YmxpYyBzaG9ydE5hbWU6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGlvX3NpZ19zdzogYW55O1xuICBwdWJsaWMgYWRfeDogYW55O1xuICBwdWJsaWMgYWRfeTogYW55O1xuICBwdWJsaWMgcG9zaXRpb25YOiBhbnk7XG4gIHB1YmxpYyBwb3NpdGlvblk6IGFueTtcbiAgcHVibGljIG9uY2hhbmdleDogYW55O1xuICBwdWJsaWMgb25jaGFuZ2V5OiBhbnk7XG4gIHB1YmxpYyBpc1ByZXNzZWQ6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlc3c6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJzd1wiLCBcInlcIiwgXCJ4XCIsIFwidmNjXCIsIFwiZ25kXCIsIFwiaTJjXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wic3dcIiwgXCJ5XCIsIFwieFwiXTtcbiAgICB0aGlzLnBpbnMgPSB0aGlzLmtleXMgfHwgW1wic3dcIiwgXCJ5XCIsIFwieFwiLCBcInZjY1wiLCBcImduZFwiXTtcbiAgICB0aGlzLnBpbm5hbWUgPSB7c3c6IFwic3cxMlwifTtcbiAgICB0aGlzLnNob3J0TmFtZSA9IFwiam95U1wiO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLmlvX3NpZ19zdyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnN3KTtcbiAgICB0aGlzLmFkX3ggPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy54KTtcbiAgICB0aGlzLmFkX3kgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy55KTtcblxuICAgIHRoaXMuaW9fc2lnX3N3LnB1bGwoXCI1dlwiKTtcblxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgdGhpcy5hZF94LnN0YXJ0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBzZWxmLnBvc2l0aW9uWCA9IHZhbHVlIC8gNS4wO1xuICAgICAgaWYgKHNlbGYub25jaGFuZ2V4KSB7XG4gICAgICAgIHNlbGYub25jaGFuZ2V4KHNlbGYucG9zaXRpb25YICogMiAtIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5hZF95LnN0YXJ0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBzZWxmLnBvc2l0aW9uWSA9IHZhbHVlIC8gNS4wO1xuICAgICAgaWYgKHNlbGYub25jaGFuZ2V5KSB7XG4gICAgICAgIHNlbGYub25jaGFuZ2V5KHNlbGYucG9zaXRpb25ZICogMiAtIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5pb19zaWdfc3cuaW5wdXQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdmFsdWUgPT09IGZhbHNlO1xuICAgICAgaWYgKHNlbGYub25jaGFuZ2Vzdykge1xuICAgICAgICBzZWxmLm9uY2hhbmdlc3codmFsdWUgPT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpc1ByZXNzZWRXYWl0KCkge1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5pb19zaWdfc3cuaW5wdXRXYWl0KCk7XG4gICAgcmV0dXJuIHJldCA9PT0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0WFdhaXQoKSB7XG4gICAgY29uc3QgdmFsdWU6IGFueSA9IGF3YWl0IHRoaXMuYWRfeC5nZXRXYWl0KCk7XG4gICAgdGhpcy5wb3NpdGlvblggPSB2YWx1ZSAvIDUuMDtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvblggKiAyIC0gMTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRZV2FpdCgpIHtcbiAgICBjb25zdCB2YWx1ZTogYW55ID0gYXdhaXQgdGhpcy5hZF95LmdldFdhaXQoKTtcbiAgICB0aGlzLnBvc2l0aW9uWSA9IHZhbHVlIC8gNS4wO1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uWSAqIDIgLSAxO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEpveVN0aWNrO1xuIl19


/***/ }),

/***/ "./dist/src/parts/MovementSensor/KXR94-2050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class KXR94_2050 {
    constructor() {
        this.keys = ["x", "y", "z", "vcc", "gnd", "enable", "self_test"];
        this.requiredKeys = ["x", "y", "z"];
    }
    static info() {
        return {
            name: "KXR94-2050",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.ad_x = obniz.getAD(this.params.x);
        this.ad_y = obniz.getAD(this.params.y);
        this.ad_z = obniz.getAD(this.params.z);
        if (obniz.isValidIO(this.params.enable)) {
            obniz.getIO(this.params.enable).drive("5v");
            obniz.getIO(this.params.enable).output(true);
            obniz.display.setPinName(this.params.enable, "KXR94_2050", "E");
        }
        if (obniz.isValidIO(this.params.self_test)) {
            obniz.getIO(this.params.self_test).drive("5v");
            obniz.getIO(this.params.self_test).output(false);
            obniz.display.setPinName(this.params.self_test, "KXR94_2050", "T");
        }
        this.changeVccVoltage(5);
        this.ad_x.start((value) => {
            this._x_val = value;
            if (this.onChangeX) {
                this.onChangeX(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        this.ad_y.start((value) => {
            this._y_val = value;
            if (this.onChangeY) {
                this.onChangeY(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        this.ad_z.start((value) => {
            this._z_val = value;
            if (this.onChangeZ) {
                this.onChangeZ(this.voltage2gravity(value));
            }
            if (this.onChange) {
                this.onChange(this._get());
            }
        });
        if (this.obniz.isValidIO(this.params.vcc)) {
            this.obniz.getAD(this.params.vcc).start((value) => {
                this.changeVccVoltage(value);
            });
        }
        obniz.display.setPinName(this.params.x, "KXR94_2050", "x");
        obniz.display.setPinName(this.params.y, "KXR94_2050", "y");
        obniz.display.setPinName(this.params.z, "KXR94_2050", "z");
        if (this.obniz.isValidIO(this.params.vcc)) {
            obniz.display.setPinName(this.params.vcc, "KXR94_2050", "vcc");
        }
    }
    changeVccVoltage(pwrVoltage) {
        this.sensitivity = pwrVoltage / 5; // Set sensitivity (unit:V)
        this.offsetVoltage = pwrVoltage / 2; // Set offset voltage (Output voltage at 0g, unit:V)
    }
    voltage2gravity(volt) {
        return (volt - this.offsetVoltage) / this.sensitivity;
    }
    get() {
        return this._get();
    }
    _get() {
        return {
            x: this.voltage2gravity(this._x_val),
            y: this.voltage2gravity(this._y_val),
            z: this.voltage2gravity(this._z_val),
        };
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this._x_val = yield this.ad_x.getWait();
            this._y_val = yield this.ad_y.getWait();
            this._z_val = yield this.ad_z.getWait();
            return this._get();
        });
    }
}
exports.default = KXR94_2050;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9LWFI5NC0yMDUwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxVQUFVO0lBeUJkO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUExQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxZQUFZO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBd0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNqRTtRQUNELElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0MsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRCxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDN0M7WUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUM3QztZQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQ3JELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzRCxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFM0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNoRTtJQUNILENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxVQUFlO1FBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtRQUM5RCxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxvREFBb0Q7SUFDM0YsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFTO1FBQzlCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEQsQ0FBQztJQUVNLEdBQUc7UUFDUixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU0sSUFBSTtRQUNULE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3BDLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDcEMsQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVZLE9BQU87O1lBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXhDLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9LWFI5NC0yMDUwL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgS1hSOTRfMjA1MCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIktYUjk0LTIwNTBcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgYWRfeDogYW55O1xuICBwdWJsaWMgYWRfeTogYW55O1xuICBwdWJsaWMgYWRfejogYW55O1xuICBwdWJsaWMgX3hfdmFsOiBhbnk7XG4gIHB1YmxpYyBvbkNoYW5nZVg6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlOiBhbnk7XG4gIHB1YmxpYyBfeV92YWw6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlWTogYW55O1xuICBwdWJsaWMgX3pfdmFsOiBhbnk7XG4gIHB1YmxpYyBvbkNoYW5nZVo6IGFueTtcbiAgcHVibGljIHNlbnNpdGl2aXR5OiBhbnk7XG4gIHB1YmxpYyBvZmZzZXRWb2x0YWdlOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wieFwiLCBcInlcIiwgXCJ6XCIsIFwidmNjXCIsIFwiZ25kXCIsIFwiZW5hYmxlXCIsIFwic2VsZl90ZXN0XCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wieFwiLCBcInlcIiwgXCJ6XCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLmFkX3ggPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy54KTtcbiAgICB0aGlzLmFkX3kgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy55KTtcbiAgICB0aGlzLmFkX3ogPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy56KTtcblxuICAgIGlmIChvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZW5hYmxlKSkge1xuICAgICAgb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZW5hYmxlKS5kcml2ZShcIjV2XCIpO1xuICAgICAgb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZW5hYmxlKS5vdXRwdXQodHJ1ZSk7XG4gICAgICBvYm5pei5kaXNwbGF5LnNldFBpbk5hbWUodGhpcy5wYXJhbXMuZW5hYmxlLCBcIktYUjk0XzIwNTBcIiwgXCJFXCIpO1xuICAgIH1cbiAgICBpZiAob2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLnNlbGZfdGVzdCkpIHtcbiAgICAgIG9ibml6LmdldElPKHRoaXMucGFyYW1zLnNlbGZfdGVzdCkuZHJpdmUoXCI1dlwiKTtcbiAgICAgIG9ibml6LmdldElPKHRoaXMucGFyYW1zLnNlbGZfdGVzdCkub3V0cHV0KGZhbHNlKTtcbiAgICAgIG9ibml6LmRpc3BsYXkuc2V0UGluTmFtZSh0aGlzLnBhcmFtcy5zZWxmX3Rlc3QsIFwiS1hSOTRfMjA1MFwiLCBcIlRcIik7XG4gICAgfVxuXG4gICAgdGhpcy5jaGFuZ2VWY2NWb2x0YWdlKDUpO1xuXG4gICAgdGhpcy5hZF94LnN0YXJ0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICB0aGlzLl94X3ZhbCA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMub25DaGFuZ2VYKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VYKHRoaXMudm9sdGFnZTJncmF2aXR5KHZhbHVlKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX2dldCgpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuYWRfeS5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5feV92YWwgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLm9uQ2hhbmdlWSkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlWSh0aGlzLnZvbHRhZ2UyZ3Jhdml0eSh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLl9nZXQoKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkX3ouc3RhcnQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuX3pfdmFsID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy5vbkNoYW5nZVopIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZVoodGhpcy52b2x0YWdlMmdyYXZpdHkodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5fZ2V0KCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLnZjYykpIHtcbiAgICAgIHRoaXMub2JuaXouZ2V0QUQodGhpcy5wYXJhbXMudmNjKS5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmNoYW5nZVZjY1ZvbHRhZ2UodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2JuaXouZGlzcGxheS5zZXRQaW5OYW1lKHRoaXMucGFyYW1zLngsIFwiS1hSOTRfMjA1MFwiLCBcInhcIik7XG4gICAgb2JuaXouZGlzcGxheS5zZXRQaW5OYW1lKHRoaXMucGFyYW1zLnksIFwiS1hSOTRfMjA1MFwiLCBcInlcIik7XG4gICAgb2JuaXouZGlzcGxheS5zZXRQaW5OYW1lKHRoaXMucGFyYW1zLnosIFwiS1hSOTRfMjA1MFwiLCBcInpcIik7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMudmNjKSkge1xuICAgICAgb2JuaXouZGlzcGxheS5zZXRQaW5OYW1lKHRoaXMucGFyYW1zLnZjYywgXCJLWFI5NF8yMDUwXCIsIFwidmNjXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjaGFuZ2VWY2NWb2x0YWdlKHB3clZvbHRhZ2U6IGFueSkge1xuICAgIHRoaXMuc2Vuc2l0aXZpdHkgPSBwd3JWb2x0YWdlIC8gNTsgLy8gU2V0IHNlbnNpdGl2aXR5ICh1bml0OlYpXG4gICAgdGhpcy5vZmZzZXRWb2x0YWdlID0gcHdyVm9sdGFnZSAvIDI7IC8vIFNldCBvZmZzZXQgdm9sdGFnZSAoT3V0cHV0IHZvbHRhZ2UgYXQgMGcsIHVuaXQ6VilcbiAgfVxuXG4gIHB1YmxpYyB2b2x0YWdlMmdyYXZpdHkodm9sdDogYW55KSB7XG4gICAgcmV0dXJuICh2b2x0IC0gdGhpcy5vZmZzZXRWb2x0YWdlKSAvIHRoaXMuc2Vuc2l0aXZpdHk7XG4gIH1cblxuICBwdWJsaWMgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBfZ2V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLnZvbHRhZ2UyZ3Jhdml0eSh0aGlzLl94X3ZhbCksXG4gICAgICB5OiB0aGlzLnZvbHRhZ2UyZ3Jhdml0eSh0aGlzLl95X3ZhbCksXG4gICAgICB6OiB0aGlzLnZvbHRhZ2UyZ3Jhdml0eSh0aGlzLl96X3ZhbCksXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRXYWl0KCkge1xuICAgIHRoaXMuX3hfdmFsID0gYXdhaXQgdGhpcy5hZF94LmdldFdhaXQoKTtcbiAgICB0aGlzLl95X3ZhbCA9IGF3YWl0IHRoaXMuYWRfeS5nZXRXYWl0KCk7XG4gICAgdGhpcy5fel92YWwgPSBhd2FpdCB0aGlzLmFkX3ouZ2V0V2FpdCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2dldCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtYUjk0XzIwNTA7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/KXSC7-2050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class KXSC7_2050 {
    constructor() {
        this.keys = ["x", "y", "z", "vcc", "gnd"];
        this.requiredKeys = ["x", "y", "z"];
    }
    static info() {
        return {
            name: "KXSC7-2050",
        };
    }
    wired(obniz) {
        return __awaiter(this, void 0, void 0, function* () {
            this.obniz = obniz;
            obniz.setVccGnd(this.params.vcc, this.params.gnd, "3v");
            this.ad_x = obniz.getAD(this.params.x);
            this.ad_y = obniz.getAD(this.params.y);
            this.ad_z = obniz.getAD(this.params.z);
            yield obniz.wait(500);
            const ad = obniz.getAD(this.params.vcc);
            const pwrVoltage = yield ad.getWait();
            const horizontalZ = yield this.ad_z.getWait();
            const sensitivity = pwrVoltage / 5; // Set sensitivity (unit:V)
            const offsetVoltage = horizontalZ - sensitivity; // Set offset voltage (Output voltage at 0g, unit:V)
            const self = this;
            this.ad_x.start((value) => {
                self.gravity = (value - offsetVoltage) / sensitivity;
                if (self.onchangex) {
                    self.onchangex(self.gravity);
                }
            });
            this.ad_y.start((value) => {
                self.gravity = (value - offsetVoltage) / sensitivity;
                if (self.onchangey) {
                    self.onchangey(self.gravity);
                }
            });
            this.ad_z.start((value) => {
                self.gravity = (value - offsetVoltage) / sensitivity;
                if (self.onchangez) {
                    self.onchangez(self.gravity);
                }
            });
        });
    }
}
exports.default = KXSC7_2050;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9LWFNDNy0yMDUwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxVQUFVO0lBb0JkO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBckJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDO0lBQ0osQ0FBQztJQW1CWSxLQUFLLENBQUMsS0FBVTs7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFFbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV2QyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsTUFBTSxFQUFFLEdBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sVUFBVSxHQUFRLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNDLE1BQU0sV0FBVyxHQUFRLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuRCxNQUFNLFdBQVcsR0FBUSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO1lBQ3BFLE1BQU0sYUFBYSxHQUFRLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxvREFBb0Q7WUFFMUcsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLEdBQUcsV0FBVyxDQUFDO2dCQUNyRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsR0FBRyxXQUFXLENBQUM7Z0JBQ3JELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtvQkFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzlCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztnQkFDckQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDOUI7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9LWFNDNy0yMDUwL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgS1hTQzdfMjA1MCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIktYU0M3LTIwNTBcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgYWRfeDogYW55O1xuICBwdWJsaWMgYWRfeTogYW55O1xuICBwdWJsaWMgYWRfejogYW55O1xuICBwdWJsaWMgZ3Jhdml0eTogYW55O1xuICBwdWJsaWMgb25jaGFuZ2V4OiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZXk6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlejogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInhcIiwgXCJ5XCIsIFwielwiLCBcInZjY1wiLCBcImduZFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInhcIiwgXCJ5XCIsIFwielwiXTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjN2XCIpO1xuICAgIHRoaXMuYWRfeCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLngpO1xuICAgIHRoaXMuYWRfeSA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLnkpO1xuICAgIHRoaXMuYWRfeiA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLnopO1xuXG4gICAgYXdhaXQgb2JuaXoud2FpdCg1MDApO1xuICAgIGNvbnN0IGFkOiBhbnkgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy52Y2MpO1xuICAgIGNvbnN0IHB3clZvbHRhZ2U6IGFueSA9IGF3YWl0IGFkLmdldFdhaXQoKTtcbiAgICBjb25zdCBob3Jpem9udGFsWjogYW55ID0gYXdhaXQgdGhpcy5hZF96LmdldFdhaXQoKTtcbiAgICBjb25zdCBzZW5zaXRpdml0eTogYW55ID0gcHdyVm9sdGFnZSAvIDU7IC8vIFNldCBzZW5zaXRpdml0eSAodW5pdDpWKVxuICAgIGNvbnN0IG9mZnNldFZvbHRhZ2U6IGFueSA9IGhvcml6b250YWxaIC0gc2Vuc2l0aXZpdHk7IC8vIFNldCBvZmZzZXQgdm9sdGFnZSAoT3V0cHV0IHZvbHRhZ2UgYXQgMGcsIHVuaXQ6VilcblxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgdGhpcy5hZF94LnN0YXJ0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBzZWxmLmdyYXZpdHkgPSAodmFsdWUgLSBvZmZzZXRWb2x0YWdlKSAvIHNlbnNpdGl2aXR5O1xuICAgICAgaWYgKHNlbGYub25jaGFuZ2V4KSB7XG4gICAgICAgIHNlbGYub25jaGFuZ2V4KHNlbGYuZ3Jhdml0eSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkX3kuc3RhcnQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHNlbGYuZ3Jhdml0eSA9ICh2YWx1ZSAtIG9mZnNldFZvbHRhZ2UpIC8gc2Vuc2l0aXZpdHk7XG4gICAgICBpZiAoc2VsZi5vbmNoYW5nZXkpIHtcbiAgICAgICAgc2VsZi5vbmNoYW5nZXkoc2VsZi5ncmF2aXR5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuYWRfei5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgc2VsZi5ncmF2aXR5ID0gKHZhbHVlIC0gb2Zmc2V0Vm9sdGFnZSkgLyBzZW5zaXRpdml0eTtcbiAgICAgIGlmIChzZWxmLm9uY2hhbmdleikge1xuICAgICAgICBzZWxmLm9uY2hhbmdleihzZWxmLmdyYXZpdHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtYU0M3XzIwNTA7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU6050/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class MPU6050 {
    constructor() {
        this.keys = [
            "gnd",
            "vcc",
            "sda",
            "scl",
            "i2c",
            "address",
            "accelerometer_range",
            "gyroscope_range",
        ];
        this.required = [];
    }
    static info() {
        return {
            name: "MPU6050",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.clock = 100000;
        this.params.pull = "3v";
        this.params.mode = "master";
        this._address = this.params.address || 0x68;
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.setConfig(this.params.accelerometer_range || 2, this.params.gyroscope_range || 250);
    }
    setConfig(accelerometer_range, gyroscope_range) {
        // accel range set (0x00:2g, 0x08:4g, 0x10:8g, 0x18:16g)
        switch (accelerometer_range) {
            case 2:
                this.i2c.write(this._address, [0x1c, 0x00]);
                break;
            case 4:
                this.i2c.write(this._address, [0x1c, 0x08]);
                break;
            case 8:
                this.i2c.write(this._address, [0x1c, 0x10]);
                break;
            case 16:
                this.i2c.write(this._address, [0x1c, 0x18]);
                break;
            default:
                throw new Error("accel_range variable 2,4,8,16 setting");
        }
        // gyro range & LPF set (0x00:250, 0x08:500, 0x10:1000, 0x18:2000[deg/s])
        switch (gyroscope_range) {
            case 250:
                this.i2c.write(this._address, [0x1b, 0x00]);
                break;
            case 500:
                this.i2c.write(this._address, [0x1b, 0x08]);
                break;
            case 1000:
                this.i2c.write(this._address, [0x1b, 0x10]);
                break;
            case 2000:
                this.i2c.write(this._address, [0x1b, 0x18]);
                break;
            default:
                throw new Error("accel_range variable 250,500,1000,2000 setting");
        }
        this._accel_range = accelerometer_range;
        this._gyro_range = gyroscope_range;
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this._address, [0x3b]); // request MPU6050 data
            const raw_data_MPU6050 = yield this.i2c.readWait(this._address, 14); // read 14byte
            const ac_scale = this._accel_range / 32768;
            const gy_scale = this._gyro_range / 32768;
            return {
                accelerometer: {
                    x: this.char2short(raw_data_MPU6050[0], raw_data_MPU6050[1]) * ac_scale,
                    y: this.char2short(raw_data_MPU6050[2], raw_data_MPU6050[3]) * ac_scale,
                    z: this.char2short(raw_data_MPU6050[4], raw_data_MPU6050[5]) * ac_scale,
                },
                temp: this.char2short(raw_data_MPU6050[6], raw_data_MPU6050[7]) / 333.87 + 21,
                gyroscope: {
                    x: this.char2short(raw_data_MPU6050[8], raw_data_MPU6050[9]) * gy_scale,
                    y: this.char2short(raw_data_MPU6050[10], raw_data_MPU6050[11]) *
                        gy_scale,
                    z: this.char2short(raw_data_MPU6050[12], raw_data_MPU6050[13]) *
                        gy_scale,
                },
            };
        });
    }
    char2short(valueH, valueL) {
        const buffer = new ArrayBuffer(2);
        const dv = new DataView(buffer);
        dv.setUint8(0, valueH);
        dv.setUint8(1, valueL);
        return dv.getInt16(0, false);
    }
}
exports.default = MPU6050;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU6886/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts = __webpack_require__("./dist/src/parts/i2cParts.js");
class MPU6886 extends i2cParts {
    constructor() {
        super();
        this.commands = {};
        this.commands.whoami = 0x75;
        this.commands.accelIntelCtrl = 0x69;
        this.commands.smplrtDiv = 0x19;
        this.commands.intPinCfg = 0x37;
        this.commands.intEnable = 0x38;
        this.commands.accelXoutH = 0x3b;
        this.commands.accelXoutL = 0x3c;
        this.commands.accelYoutH = 0x3d;
        this.commands.accelYoutL = 0x3e;
        this.commands.accelZoutH = 0x3f;
        this.commands.accelZoutL = 0x40;
        this.commands.tempOutH = 0x41;
        this.commands.tempOutL = 0x42;
        this.commands.gyroXoutH = 0x43;
        this.commands.gyroXoutL = 0x44;
        this.commands.gyroYoutH = 0x45;
        this.commands.gyroYoutL = 0x46;
        this.commands.gyroZoutH = 0x47;
        this.commands.gyroZoutL = 0x48;
        this.commands.userCtrl = 0x6a;
        this.commands.pwrMgmt1 = 0x6b;
        this.commands.pwrMgmt2 = 0x6c;
        this.commands.config = 0x1a;
        this.commands.gyroConfig = 0x1b;
        this.commands.accelConfig = 0x1c;
        this.commands.accelConfig2 = 0x1d;
        this.commands.fifoEn = 0x23;
    }
    static info() {
        return {
            name: "MPU6886",
        };
    }
    wired(obniz) {
        super.wired(obniz);
        this.init();
    }
    i2cInfo() {
        return {
            address: 0x68,
            clock: 100000,
            voltage: "3v",
        };
    }
    whoamiWait() {
        return this.readWait(this.commands.whoami, 1)[0];
    }
    init() {
        this.write(this.commands.pwrMgmt1, 0x00);
        this.obniz.wait(10);
        this.write(this.commands.pwrMgmt1, 0x01 << 7);
        this.obniz.wait(10);
        this.write(this.commands.pwrMgmt1, 0x01 << 0);
        this.obniz.wait(10);
        this.setConfig(this.params.accelerometer_range || 2, this.params.gyroscope_range || 250);
        this.obniz.wait(1);
        this.write(this.commands.config, 0x01);
        this.obniz.wait(1);
        this.write(this.commands.smplrtDiv, 0x05);
        this.obniz.wait(1);
        this.write(this.commands.intEnable, 0x00);
        this.obniz.wait(1);
        this.write(this.commands.accelConfig2, 0x00);
        this.obniz.wait(1);
        this.write(this.commands.userCtrl, 0x00);
        this.obniz.wait(1);
        this.write(this.commands.fifoEn, 0x00);
        this.obniz.wait(1);
        this.write(this.commands.intPinCfg, 0x22);
        this.obniz.wait(1);
        this.write(this.commands.intEnable, 0x01);
        this.obniz.wait(1);
    }
    setConfig(accelerometer_range, gyroscope_range) {
        // accel range set (0x00:2g, 0x08:4g, 0x10:8g, 0x18:16g)
        switch (accelerometer_range) {
            case 2:
                this.write(this.commands.accelConfig, 0x00);
                break;
            case 4:
                this.write(this.commands.accelConfig, 0x08);
                break;
            case 8:
                this.write(this.commands.accelConfig, 0x10);
                break;
            case 16:
                this.write(this.commands.accelConfig, 0x18);
                break;
            default:
                throw new Error("accel_range variable 2,4,8,16 setting");
        }
        // gyro range & LPF set (0x00:250, 0x08:500, 0x10:1000, 0x18:2000[deg/s])
        switch (gyroscope_range) {
            case 250:
                this.write(this.commands.gyroConfig, 0x00);
                break;
            case 500:
                this.write(this.commands.gyroConfig, 0x08);
                break;
            case 1000:
                this.write(this.commands.gyroConfig, 0x10);
                break;
            case 2000:
                this.write(this.commands.gyroConfig, 0x18);
                break;
            default:
                throw new Error("accel_range variable 250,500,1000,2000 setting");
        }
        this._accel_range = accelerometer_range;
        this._gyro_range = gyroscope_range;
    }
    getAllDataWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw_data = yield this.readWait(this.commands.accelXoutH, 14); // request all data
            const ac_scale = this._accel_range / 32768;
            const gy_scale = this._gyro_range / 32768;
            const accelerometer = {
                x: this.char2short(raw_data[0], raw_data[1]) * ac_scale,
                y: this.char2short(raw_data[2], raw_data[3]) * ac_scale,
                z: this.char2short(raw_data[4], raw_data[5]) * ac_scale,
            };
            const temperature = this.char2short(raw_data[6], raw_data[7]) / 326.8 + 25.0;
            const gyroscope = {
                x: this.char2short(raw_data[8], raw_data[9]) * gy_scale,
                y: this.char2short(raw_data[10], raw_data[11]) * gy_scale,
                z: this.char2short(raw_data[12], raw_data[13]) * gy_scale,
            };
            return {
                accelerometer,
                temperature,
                gyroscope,
            };
        });
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).temperature;
        });
    }
    getAccelWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).accelerometer;
        });
    }
    getGyroWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).gyroscope;
        });
    }
}
exports.default = MPU6886;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/MovementSensor/MPU9250/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class MPU9250 {
    constructor(obniz) {
        this.keys = ["gnd", "vcc", "sda", "scl", "i2c", "address"];
        this.required = [];
    }
    static info() {
        return {
            name: "MPU9250",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this._address = this.params.address || 0x68;
        this.params.clock = 100000;
        this.params.pull = "3v";
        this.params.mode = "master";
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.i2c.write(this._address, [0x6b, 0x00]); // activate MPU9250
        this.i2c.write(this._address, [0x37, 0x02]); // activate AK8963 (bypass)
        this.i2c.write(this._address, [0x1a, 0x06]); // activate LPF (search datasheet_p.13)
        this.i2c.write(this._address, [0x1d, 0x02]); // accel LPF set.
        this.mpu6050 = obniz.wired("MPU6050", { i2c: this.i2c });
        this.ak8963 = obniz.wired("AK8963", { i2c: this.i2c });
    }
    setConfig(accel_range, gyro_range, ADC_cycle) {
        this.mpu6050.setConfig(accel_range, gyro_range);
        this.ak8963.setConfig(ADC_cycle);
    }
    _getAK8963Wait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.i2c.write(this._address, [0x02]); // request AK8983 data
            const ST1 = yield this.i2c.readWait(this._address, 1); // confirm magnet value readable
            if (ST1 & 0x01) {
                return yield this.ak8963.getWait();
            }
            return {};
        });
    }
    getAllWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.mpu6050.getWait();
            data.compass = yield this.ak8963.getWait();
            return data;
        });
    }
    getCompassWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ak8963.getWait();
        });
    }
    getAccelerometerWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.mpu6050.getWait()).accelerometer;
        });
    }
    getGyroscopeWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.mpu6050.getWait()).gyroscope;
        });
    }
}
exports.default = MPU9250;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9NUFU5MjUwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxPQUFPO0lBaUJYLFlBQVksS0FBVTtRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQWdCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQzVCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7UUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO1FBQ3hFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztRQUNwRixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7UUFFOUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxTQUFTLENBQUMsV0FBZ0IsRUFBRSxVQUFlLEVBQUUsU0FBYztRQUNoRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVZLGNBQWM7O1lBQ3pCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7WUFDbkUsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO1lBQzVGLElBQUksR0FBRyxHQUFHLElBQUksRUFBRTtnQkFDZCxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNwQztZQUNELE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztLQUFBO0lBRVksVUFBVTs7WUFDckIsTUFBTSxJQUFJLEdBQVEsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUFBO0lBRVksY0FBYzs7WUFDekIsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckMsQ0FBQztLQUFBO0lBRVksb0JBQW9COztZQUMvQixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ3RELENBQUM7S0FBQTtJQUVZLGdCQUFnQjs7WUFDM0IsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNsRCxDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvTW92ZW1lbnRTZW5zb3IvTVBVOTI1MC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1QVTkyNTAge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJNUFU5MjUwXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgX2FkZHJlc3M6IGFueTtcbiAgcHVibGljIGkyYzogYW55O1xuICBwdWJsaWMgbXB1NjA1MDogYW55O1xuICBwdWJsaWMgYWs4OTYzOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob2JuaXo6IGFueSkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcInNkYVwiLCBcInNjbFwiLCBcImkyY1wiLCBcImFkZHJlc3NcIl07XG4gICAgdGhpcy5yZXF1aXJlZCA9IFtdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuICAgIHRoaXMuX2FkZHJlc3MgPSB0aGlzLnBhcmFtcy5hZGRyZXNzIHx8IDB4Njg7XG4gICAgdGhpcy5wYXJhbXMuY2xvY2sgPSAxMDAwMDA7XG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IFwiM3ZcIjtcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gXCJtYXN0ZXJcIjtcbiAgICB0aGlzLmkyYyA9IG9ibml6LmdldEkyQ1dpdGhDb25maWcodGhpcy5wYXJhbXMpO1xuXG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5fYWRkcmVzcywgWzB4NmIsIDB4MDBdKTsgLy8gYWN0aXZhdGUgTVBVOTI1MFxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuX2FkZHJlc3MsIFsweDM3LCAweDAyXSk7IC8vIGFjdGl2YXRlIEFLODk2MyAoYnlwYXNzKVxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuX2FkZHJlc3MsIFsweDFhLCAweDA2XSk7IC8vIGFjdGl2YXRlIExQRiAoc2VhcmNoIGRhdGFzaGVldF9wLjEzKVxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuX2FkZHJlc3MsIFsweDFkLCAweDAyXSk7IC8vIGFjY2VsIExQRiBzZXQuXG5cbiAgICB0aGlzLm1wdTYwNTAgPSBvYm5pei53aXJlZChcIk1QVTYwNTBcIiwge2kyYzogdGhpcy5pMmN9KTtcbiAgICB0aGlzLmFrODk2MyA9IG9ibml6LndpcmVkKFwiQUs4OTYzXCIsIHtpMmM6IHRoaXMuaTJjfSk7XG4gIH1cblxuICBwdWJsaWMgc2V0Q29uZmlnKGFjY2VsX3JhbmdlOiBhbnksIGd5cm9fcmFuZ2U6IGFueSwgQURDX2N5Y2xlOiBhbnkpIHtcbiAgICB0aGlzLm1wdTYwNTAuc2V0Q29uZmlnKGFjY2VsX3JhbmdlLCBneXJvX3JhbmdlKTtcbiAgICB0aGlzLmFrODk2My5zZXRDb25maWcoQURDX2N5Y2xlKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBfZ2V0QUs4OTYzV2FpdCgpIHtcbiAgICBhd2FpdCB0aGlzLmkyYy53cml0ZSh0aGlzLl9hZGRyZXNzLCBbMHgwMl0pOyAvLyByZXF1ZXN0IEFLODk4MyBkYXRhXG4gICAgY29uc3QgU1QxOiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLl9hZGRyZXNzLCAxKTsgLy8gY29uZmlybSBtYWduZXQgdmFsdWUgcmVhZGFibGVcbiAgICBpZiAoU1QxICYgMHgwMSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYWs4OTYzLmdldFdhaXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFsbFdhaXQoKSB7XG4gICAgY29uc3QgZGF0YTogYW55ID0gYXdhaXQgdGhpcy5tcHU2MDUwLmdldFdhaXQoKTtcbiAgICBkYXRhLmNvbXBhc3MgPSBhd2FpdCB0aGlzLmFrODk2My5nZXRXYWl0KCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0Q29tcGFzc1dhaXQoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYWs4OTYzLmdldFdhaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRBY2NlbGVyb21ldGVyV2FpdCgpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMubXB1NjA1MC5nZXRXYWl0KCkpLmFjY2VsZXJvbWV0ZXI7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0R3lyb3Njb3BlV2FpdCgpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMubXB1NjA1MC5nZXRXYWl0KCkpLmd5cm9zY29wZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUFU5MjUwO1xuIl19


/***/ }),

/***/ "./dist/src/parts/MovementSensor/PaPIRsVZ/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class PaPIRsVZ {
    constructor() {
        this.keys = ["vcc", "gnd", "signal"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "PaPIRsVZ",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.pull("0v");
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_signal.input((value) => {
            if (this.onchange) {
                this.onchange(value);
            }
        });
    }
}
exports.default = PaPIRsVZ;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9QYVBJUnNWWi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUTtJQWVaO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFoQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBY00sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9QYVBJUnNWWi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFBhUElSc1ZaIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiUGFQSVJzVlpcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIGlvX3NpZ25hbDogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcInNpZ25hbFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInNpZ25hbFwiXTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIHRoaXMuaW9fc2lnbmFsID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuc2lnbmFsKTtcbiAgICB0aGlzLmlvX3NpZ25hbC5wdWxsKFwiMHZcIik7XG5cbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLmlvX3NpZ25hbC5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgaWYgKHRoaXMub25jaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5vbmNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFQSVJzVlo7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/MovementSensor/Potentiometer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Potentiometer {
    constructor() {
        this.keys = ["pin0", "pin1", "pin2"];
        this.requiredKeys = ["pin0", "pin1", "pin2"];
        this.vcc_voltage = 5.0;
    }
    static info() {
        return {
            name: "Potentiometer",
        };
    }
    wired(obniz) {
        this.obniz.setVccGnd(this.params.pin0, this.params.pin2, "5v");
        this.ad = obniz.getAD(this.params.pin1);
        const self = this;
        obniz.getAD(this.params.pin0).start((value) => {
            self.vcc_voltage = value;
        });
        this.ad.start((value) => {
            self.position = value / self.vcc_voltage;
            if (self.onchange) {
                self.onchange(self.position);
            }
        });
    }
}
exports.default = Potentiometer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9Qb3RlbnRpb21ldGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxhQUFhO0lBaUJqQjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLENBQUM7SUFwQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxlQUFlO1NBQ3RCLENBQUM7SUFDSixDQUFDO0lBa0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhDLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQztRQUV2QixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDekMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsYUFBYSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZlbWVudFNlbnNvci9Qb3RlbnRpb21ldGVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUG90ZW50aW9tZXRlciB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIlBvdGVudGlvbWV0ZXJcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgdmNjX3ZvbHRhZ2U6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBwb3NpdGlvbjogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJwaW4wXCIsIFwicGluMVwiLCBcInBpbjJcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJwaW4wXCIsIFwicGluMVwiLCBcInBpbjJcIl07XG5cbiAgICB0aGlzLnZjY192b2x0YWdlID0gNS4wO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy5waW4wLCB0aGlzLnBhcmFtcy5waW4yLCBcIjV2XCIpO1xuICAgIHRoaXMuYWQgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5waW4xKTtcblxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG5cbiAgICBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5waW4wKS5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgc2VsZi52Y2Nfdm9sdGFnZSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5hZC5zdGFydCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgc2VsZi5wb3NpdGlvbiA9IHZhbHVlIC8gc2VsZi52Y2Nfdm9sdGFnZTtcbiAgICAgIGlmIChzZWxmLm9uY2hhbmdlKSB7XG4gICAgICAgIHNlbGYub25jaGFuZ2Uoc2VsZi5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG90ZW50aW9tZXRlcjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/MovementSensor/SH200Q/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts = __webpack_require__("./dist/src/parts/i2cParts.js");
class SH200Q extends i2cParts {
    constructor() {
        super();
        this.commands = {};
        this.commands.whoami = 0x30;
        this.commands.accConfig = 0x0e;
        this.commands.gyroConfig = 0x0f;
        this.commands.gyroDlpf = 0x11;
        this.commands.fifoConfig = 0x12;
        this.commands.accRange = 0x16;
        this.commands.gyroRange = 0x2b;
        this.commands.outputAcc = 0x00;
        this.commands.outputGyro = 0x06;
        this.commands.outputTemp = 0x0c;
        this.commands.regSet1 = 0xba;
        this.commands.regSet2 = 0xca;
        this.commands.adcReset = 0xc2;
        this.commands.softReset = 0x7f;
        this.commands.reset = 0x75;
    }
    static info() {
        return {
            name: "SH200Q",
        };
    }
    wired(obniz) {
        super.wired(obniz);
    }
    i2cInfo() {
        return {
            address: 0x6c,
            clock: 100000,
            voltage: "3v",
        };
    }
    whoamiWait() {
        return this.readWait(this.commands.whoami, 1)[0];
    }
    initWait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resetAdcWait();
            yield this.writeFlagWait(0xd8, 7);
            yield this.obniz.wait(1);
            yield this.clearFlagWait(0xd8, 7);
            yield this.write(0x78, 0x61);
            yield this.obniz.wait(1);
            yield this.write(0x78, 0x00);
            // set acc odr 256hz
            yield this.write(this.commands.accConfig, 0x91);
            // set gyro odr 500hz
            yield this.write(this.commands.gyroConfig, 0x13);
            // set gyro dlpf 50hz
            yield this.write(this.commands.gyroDlpf, 0x03);
            // set no buffer mode
            yield this.write(this.commands.fifoConfig, 0x00);
            this.setConfig(8, 2000);
            yield this.write(this.commands.regSet1, 0xc0);
            // ADC Reset
            yield this.writeFlagWait(this.commands.regSet2, 4);
            yield this.obniz.wait(1);
            yield this.clearFlagWait(this.commands.regSet2, 4);
            yield this.obniz.wait(10);
        });
    }
    setConfig(accelerometer_range, gyroscope_range) {
        // accel range set (0x00:2g, 0x08:4g, 0x10:8g, 0x18:16g)
        switch (accelerometer_range) {
            case 4:
                this.write(this.commands.accRange, 0x00);
                break;
            case 8:
                this.write(this.commands.accRange, 0x01);
                break;
            case 16:
                this.write(this.commands.accRange, 0x10);
                break;
            default:
                throw new Error("accel_range variable 4,8,16 setting");
        }
        // gyro range & LPF set (0x00:250, 0x08:500, 0x10:1000, 0x18:2000[deg/s])
        switch (gyroscope_range) {
            case 125:
                this.write(this.commands.gyroRange, 0x04);
                break;
            case 250:
                this.write(this.commands.gyroRange, 0x03);
                break;
            case 500:
                this.write(this.commands.gyroRange, 0x02);
                break;
            case 1000:
                this.write(this.commands.gyroRange, 0x01);
                break;
            case 2000:
                this.write(this.commands.gyroRange, 0x00);
                break;
            default:
                throw new Error("gyroscope_range variable 125,250,500,1000,2000 setting");
        }
        this._accel_range = accelerometer_range;
        this._gyro_range = gyroscope_range;
    }
    resetAdcWait() {
        return __awaiter(this, void 0, void 0, function* () {
            // set 0xC2 bit2 1-->0
            const tempdata = yield this.readWait(this.commands.adcReset, 1);
            tempdata[0] = tempdata[0] | 0x04; // tempdata[0] = 0x0E; //CC
            this.write(this.commands.adcReset, tempdata);
            yield this.obniz.wait(1);
            tempdata[0] = tempdata[0] & 0xfb; // tempdata[0] = 0x0A; //C8
            this.write(this.commands.adcReset, tempdata);
        });
    }
    getAllDataWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw_data = yield this.readWait(this.commands.outputAcc, 14); // request all data
            const ac_scale = this._accel_range / 32768;
            const gy_scale = this._gyro_range / 32768;
            const accelerometer = {
                x: this.char2short(raw_data[0], raw_data[1]) * ac_scale,
                y: this.char2short(raw_data[2], raw_data[3]) * ac_scale,
                z: this.char2short(raw_data[4], raw_data[5]) * ac_scale,
            };
            const gyroscope = {
                x: this.char2short(raw_data[6], raw_data[7]) * gy_scale,
                y: this.char2short(raw_data[8], raw_data[9]) * gy_scale,
                z: this.char2short(raw_data[10], raw_data[11]) * gy_scale,
            };
            const temperature = this.char2short(raw_data[12], raw_data[13]) / 333.87 + 21.0;
            return {
                accelerometer,
                temperature,
                gyroscope,
            };
        });
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw_data = yield this.readWait(this.commands.outputTemp, 2); // request all data
            return this.char2short(raw_data[1], raw_data[0]) / 333.87 + 21.0;
        });
    }
    getAccelWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).accelerometer;
        });
    }
    getGyroWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).gyroscope;
        });
    }
}
exports.default = SH200Q;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Moving/DCMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class DCMotor {
    constructor() {
        this.keys = ["forward", "back"];
        this.requiredKeys = ["forward", "back"];
    }
    static info() {
        return {
            name: "DCMotor",
        };
    }
    wired(obniz) {
        this.status = {
            direction: null,
            power: null,
        };
        this.pwm1_io_num = this.params.forward;
        this.pwm2_io_num = this.params.back;
        this.pwm1 = obniz.getFreePwm();
        this.pwm1.start({ io: this.pwm1_io_num });
        this.pwm1.freq(100000);
        this.pwm2 = obniz.getFreePwm();
        this.pwm2.start({ io: this.pwm2_io_num });
        this.pwm2.freq(100000);
        this.power(30);
    }
    // Module functions
    forward() {
        this.move(true);
    }
    reverse() {
        this.move(false);
    }
    stop() {
        if (this.status.direction === null) {
            return;
        }
        this.status.direction = null;
        this.pwm1.duty(0);
        this.pwm2.duty(0);
    }
    move(forward) {
        if (forward) {
            if (this.status.direction === true) {
                return;
            }
            this.status.direction = true;
        }
        else {
            if (this.status.direction === false) {
                return;
            }
            this.status.direction = false;
        }
        const power = this.power();
        this.power(0);
        this.power(power);
    }
    power(power) {
        if (power === undefined) {
            return this.status.power;
        }
        this.status.power = power;
        if (this.status.direction === null) {
            this.pwm1.duty(0);
            this.pwm2.duty(0);
            return;
        }
        if (this.status.direction) {
            this.pwm1.duty(power);
            this.pwm2.duty(0);
        }
        else {
            this.pwm1.duty(0);
            this.pwm2.duty(power);
        }
    }
}
exports.default = DCMotor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sT0FBTztJQWlCWDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQWdCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsbUJBQW1CO0lBRVosT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDbEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBWTtRQUN0QixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO2dCQUNsQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO2dCQUNuQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDL0I7UUFDRCxNQUFNLEtBQUssR0FBUSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFXO1FBQ3RCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsT0FBTyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERDTW90b3Ige1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJEQ01vdG9yXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIHN0YXR1czogYW55O1xuICBwdWJsaWMgcHdtMV9pb19udW06IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgcHdtMl9pb19udW06IGFueTtcbiAgcHVibGljIHB3bTE6IGFueTtcbiAgcHVibGljIHB3bTI6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJmb3J3YXJkXCIsIFwiYmFja1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcImZvcndhcmRcIiwgXCJiYWNrXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHtcbiAgICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICAgIHBvd2VyOiBudWxsLFxuICAgIH07XG5cbiAgICB0aGlzLnB3bTFfaW9fbnVtID0gdGhpcy5wYXJhbXMuZm9yd2FyZDtcbiAgICB0aGlzLnB3bTJfaW9fbnVtID0gdGhpcy5wYXJhbXMuYmFjaztcblxuICAgIHRoaXMucHdtMSA9IG9ibml6LmdldEZyZWVQd20oKTtcbiAgICB0aGlzLnB3bTEuc3RhcnQoe2lvOiB0aGlzLnB3bTFfaW9fbnVtfSk7XG4gICAgdGhpcy5wd20xLmZyZXEoMTAwMDAwKTtcbiAgICB0aGlzLnB3bTIgPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20yLnN0YXJ0KHtpbzogdGhpcy5wd20yX2lvX251bX0pO1xuICAgIHRoaXMucHdtMi5mcmVxKDEwMDAwMCk7XG4gICAgdGhpcy5wb3dlcigzMCk7XG4gIH1cblxuICAvLyBNb2R1bGUgZnVuY3Rpb25zXG5cbiAgcHVibGljIGZvcndhcmQoKSB7XG4gICAgdGhpcy5tb3ZlKHRydWUpO1xuICB9XG5cbiAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgdGhpcy5tb3ZlKGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkge1xuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMuZGlyZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLnB3bTEuZHV0eSgwKTtcbiAgICB0aGlzLnB3bTIuZHV0eSgwKTtcbiAgfVxuXG4gIHB1YmxpYyBtb3ZlKGZvcndhcmQ6IGFueSkge1xuICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICBpZiAodGhpcy5zdGF0dXMuZGlyZWN0aW9uID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwb3dlcjogYW55ID0gdGhpcy5wb3dlcigpO1xuICAgIHRoaXMucG93ZXIoMCk7XG4gICAgdGhpcy5wb3dlcihwb3dlcik7XG4gIH1cblxuICBwdWJsaWMgcG93ZXIocG93ZXI/OiBhbnkpIHtcbiAgICBpZiAocG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLnBvd2VyO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cy5wb3dlciA9IHBvd2VyO1xuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KDApO1xuICAgICAgdGhpcy5wd20yLmR1dHkoMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KHBvd2VyKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB3bTEuZHV0eSgwKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KHBvd2VyKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRENNb3RvcjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Moving/PCA9685/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class PCA9685_PWM {
    constructor(chip, id) {
        this.chip = chip;
        this.id = id;
        this.value = 0;
        this.state = {};
    }
    freq(frequency) {
        this.chip.freq(frequency);
    }
    pulse(value) {
        this.chip.pulse(this.id, value);
    }
    duty(value) {
        this.chip.duty(this.id, value);
    }
}
// tslint:disable-next-line:max-classes-per-file
class PCA9685 {
    constructor() {
        /* https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf */
        this.keys = [
            "gnd",
            "vcc",
            "scl",
            "sda",
            "oe",
            "i2c",
            "enabled",
            "address",
            "drive",
        ];
        this.requiredKeys = [];
        this.address = 0x40;
        this._commands = {
            MODE1: 0x00,
            MODE2: 0x01,
            SUBADR1: 0x02,
            SUBADR2: 0x03,
            SUBADR3: 0x04,
            PRESCALE: 0xfe,
            LED0_ON_L: 0x06,
            ALL_LED_ON_L: 0xfa,
            bits: {
                ALLCALL: 0x01,
                SLEEP_ENABLE: 0x10,
                AUTO_INCREMENT_ENABLED: 0x20,
                RESTART: 0x80,
                OUTDRV: 0x04,
                INVRT: 0x10,
            },
        };
        this._regs = new Array(1);
        this.pwmNum = 16;
        this.pwms = [];
        this._preparePWM(this.pwmNum);
    }
    static info() {
        return {
            name: "PCA9685",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.oe)) {
            this.io_oe = obniz.getIO(this.params.oe);
        }
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (typeof this.params.address === "number") {
            this.address = this.params.address;
        }
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.pull = this.params.pull || "5v"; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        if (this.obniz.isValidIO(this.params.srclr)) {
            this.io_srclr = this.obniz.getIO(this.params.srclr);
            this.io_srclr.output(true);
        }
        if (typeof this.params.enabled !== "boolean") {
            this.params.enabled = true;
        }
        if (this.io_oe && this.params.enabled) {
            this.io_oe.output(false);
        }
        if (this.params.drive === "open-drain") {
            this.i2c.write(this.address, [
                this._commands.MODE2,
                this._commands.bits.OUTDRV,
            ]);
        }
        let mode1 = this._commands.bits.AUTO_INCREMENT_ENABLED;
        mode1 = mode1 & ~this._commands.bits.SLEEP_ENABLE;
        this.i2c.write(this.address, [this._commands.MODE1, mode1]);
        this.i2c.write(this.address, [
            this._commands.MODE1,
            mode1 | this._commands.bits.RESTART,
        ]);
        this._regs[this._commands.MODE1] = mode1;
        obniz.wait(10);
    }
    _preparePWM(num) {
        for (let i = 0; i < num; i++) {
            this.pwms.push(new PCA9685_PWM(this, i));
        }
    }
    isValidPWM(id) {
        return typeof id === "number" && id >= 0 && id < this.pwmNum;
    }
    getPWM(id) {
        if (!this.isValidPWM(id)) {
            throw new Error("pwm " + id + " is not valid pwm");
        }
        return this.pwms[id];
    }
    freq(frequency) {
        if (typeof frequency !== "number") {
            return;
        }
        if (frequency < 24 || 1526 < frequency) {
            throw new Error("freq must be within 24-1526 hz");
        }
        if (this._freq === frequency) {
            return;
        }
        let prescaleval = 25000000.0; // 25MHz
        prescaleval /= 4096.0; // 12bit
        prescaleval /= frequency * 0.9;
        prescaleval -= 1.0;
        const prescale = Math.floor(Math.floor(prescaleval + 0.5));
        const mode1 = this._regs[this._commands.MODE1];
        this.i2c.write(this.address, [
            this._commands.MODE1,
            (mode1 & 0x7f) | this._commands.bits.SLEEP_ENABLE,
        ]); // enter sleep
        this.i2c.write(this.address, [this._commands.PRESCALE, prescale]);
        this.i2c.write(this.address, [this._commands.MODE1, mode1]); // recover from sleep
        this.obniz.wait(5);
        // save
        this._freq = frequency;
        for (let i = 0; i < this.pwms.length; i++) {
            this.pwms[i].state.freq = this._freq;
        }
    }
    pulse(id, pulse_width) {
        if (typeof this._freq !== "number" || this._freq <= 0) {
            throw new Error("please provide freq first.");
        }
        this.duty(id, (pulse_width / 1000.0 / (1.0 / this._freq)) * 100);
    }
    duty(id, duty) {
        duty *= 1.0;
        if (typeof this._freq !== "number" || this._freq <= 0) {
            throw new Error("please provide freq first.");
        }
        if (typeof duty !== "number") {
            throw new Error("please provide duty in number");
        }
        if (duty < 0) {
            duty = 0;
        }
        if (duty > 100) {
            duty = 100;
        }
        this.getPWM(id).state.duty = duty;
        this.writeSingleONOFF(id, 0, (duty / 100.0) * 4095);
    }
    writeSingleONOFF(id, on, off) {
        this.i2c.write(this.address, [
            this._commands.LED0_ON_L + 4 * id,
            on & 0xff,
            on >> 8,
            off & 0xff,
            off >> 8,
        ]);
    }
    setEnable(enable) {
        if (!this.io_oe && enable === false) {
            throw new Error('pin "oe" is not specified');
        }
        this.io_oe.output(!enable);
    }
}
exports.default = PCA9685;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Moving/ServoMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ServoMotor {
    constructor() {
        this.keys = ["gnd", "vcc", "signal", "pwm"];
        this.requiredKeys = [];
        this.range = {
            min: 0.5,
            max: 2.4,
        };
    }
    static info() {
        return {
            name: "ServoMotor",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
        }
        if (this.params.pwm) {
            this.pwm = this.params.pwm;
        }
        else {
            this.pwm = obniz.getFreePwm();
            this.pwm_io_num = this.params.signal;
            this.pwm.start({ io: this.pwm_io_num });
        }
        this.pwm.freq(50);
    }
    // Module functions
    angle(ratio) {
        const max = this.range.max;
        const min = this.range.min;
        const val = ((max - min) * ratio) / 180.0 + min;
        this.pwm.pulse(val);
    }
    on() {
        if (this.io_vcc) {
            this.io_vcc.output(true);
        }
    }
    off() {
        if (this.io_vcc) {
            this.io_vcc.output(false);
        }
    }
}
exports.default = ServoMotor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvU2Vydm9Nb3Rvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sVUFBVTtJQWlCZDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsR0FBRyxFQUFFLEdBQUc7WUFDUixHQUFHLEVBQUUsR0FBRztTQUNULENBQUM7SUFDSixDQUFDO0lBdkJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDO0lBQ0osQ0FBQztJQXFCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUM1QjthQUFNO1lBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQkFBbUI7SUFFWixLQUFLLENBQUMsS0FBVTtRQUNyQixNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxNQUFNLEdBQUcsR0FBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDckQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVNLEVBQUU7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFTSxHQUFHO1FBQ1IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL01vdmluZy9TZXJ2b01vdG9yL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2Vydm9Nb3RvciB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIlNlcnZvTW90b3JcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgcmFuZ2U6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGlvX3ZjYzogYW55O1xuICBwdWJsaWMgcHdtOiBhbnk7XG4gIHB1YmxpYyBwd21faW9fbnVtOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wiZ25kXCIsIFwidmNjXCIsIFwic2lnbmFsXCIsIFwicHdtXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG5cbiAgICB0aGlzLnJhbmdlID0ge1xuICAgICAgbWluOiAwLjUsXG4gICAgICBtYXg6IDIuNCxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICBpZiAob2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLnZjYykpIHtcbiAgICAgIHRoaXMuaW9fdmNjID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMudmNjKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXJhbXMucHdtKSB7XG4gICAgICB0aGlzLnB3bSA9IHRoaXMucGFyYW1zLnB3bTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wd20gPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgICB0aGlzLnB3bV9pb19udW0gPSB0aGlzLnBhcmFtcy5zaWduYWw7XG4gICAgICB0aGlzLnB3bS5zdGFydCh7aW86IHRoaXMucHdtX2lvX251bX0pO1xuICAgIH1cbiAgICB0aGlzLnB3bS5mcmVxKDUwKTtcbiAgfVxuXG4gIC8vIE1vZHVsZSBmdW5jdGlvbnNcblxuICBwdWJsaWMgYW5nbGUocmF0aW86IGFueSkge1xuICAgIGNvbnN0IG1heDogYW55ID0gdGhpcy5yYW5nZS5tYXg7XG4gICAgY29uc3QgbWluOiBhbnkgPSB0aGlzLnJhbmdlLm1pbjtcbiAgICBjb25zdCB2YWw6IGFueSA9ICgobWF4IC0gbWluKSAqIHJhdGlvKSAvIDE4MC4wICsgbWluO1xuICAgIHRoaXMucHdtLnB1bHNlKHZhbCk7XG4gIH1cblxuICBwdWJsaWMgb24oKSB7XG4gICAgaWYgKHRoaXMuaW9fdmNjKSB7XG4gICAgICB0aGlzLmlvX3ZjYy5vdXRwdXQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9mZigpIHtcbiAgICBpZiAodGhpcy5pb192Y2MpIHtcbiAgICAgIHRoaXMuaW9fdmNjLm91dHB1dChmYWxzZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlcnZvTW90b3I7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Moving/Solenoid/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Solenoid {
    constructor() {
        this.keys = ["gnd", "signal"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "Solenoid",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.gnd)) {
            this.io_gnd = obniz.getIO(this.params.gnd);
            this.io_gnd.output(false);
        }
        this.io_signal = obniz.getIO(this.params.signal);
        this.io_signal.output(false);
    }
    on() {
        this.io_signal.output(true);
    }
    off() {
        this.io_signal.output(false);
    }
    click(time_msec) {
        this.on();
        if (typeof time_msec !== "number") {
            time_msec = 100;
        }
        this.obniz.wait(time_msec);
        this.off();
    }
    doubleClick(time_msec) {
        if (typeof time_msec !== "number") {
            time_msec = 100;
        }
        this.click(time_msec);
        this.obniz.wait(time_msec);
        this.click(time_msec);
    }
}
exports.default = Solenoid;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvU29sZW5vaWQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFFBQVE7SUFlWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFoQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBY00sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU0sRUFBRTtRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxHQUFHO1FBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFjO1FBQ3pCLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNWLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLFNBQVMsR0FBRyxHQUFHLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDYixDQUFDO0lBRU0sV0FBVyxDQUFDLFNBQWM7UUFDL0IsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsU0FBUyxHQUFHLEdBQUcsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL01vdmluZy9Tb2xlbm9pZC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNvbGVub2lkIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiU29sZW5vaWRcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgaW9fZ25kOiBhbnk7XG4gIHB1YmxpYyBpb19zaWduYWw6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJzaWduYWxcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIGlmIChvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZ25kKSkge1xuICAgICAgdGhpcy5pb19nbmQgPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5nbmQpO1xuICAgICAgdGhpcy5pb19nbmQub3V0cHV0KGZhbHNlKTtcbiAgICB9XG5cbiAgICB0aGlzLmlvX3NpZ25hbCA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnNpZ25hbCk7XG4gICAgdGhpcy5pb19zaWduYWwub3V0cHV0KGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBvbigpIHtcbiAgICB0aGlzLmlvX3NpZ25hbC5vdXRwdXQodHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgb2ZmKCkge1xuICAgIHRoaXMuaW9fc2lnbmFsLm91dHB1dChmYWxzZSk7XG4gIH1cblxuICBwdWJsaWMgY2xpY2sodGltZV9tc2VjOiBhbnkpIHtcbiAgICB0aGlzLm9uKCk7XG4gICAgaWYgKHR5cGVvZiB0aW1lX21zZWMgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRpbWVfbXNlYyA9IDEwMDtcbiAgICB9XG4gICAgdGhpcy5vYm5pei53YWl0KHRpbWVfbXNlYyk7XG4gICAgdGhpcy5vZmYoKTtcbiAgfVxuXG4gIHB1YmxpYyBkb3VibGVDbGljayh0aW1lX21zZWM6IGFueSkge1xuICAgIGlmICh0eXBlb2YgdGltZV9tc2VjICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB0aW1lX21zZWMgPSAxMDA7XG4gICAgfVxuICAgIHRoaXMuY2xpY2sodGltZV9tc2VjKTtcbiAgICB0aGlzLm9ibml6LndhaXQodGltZV9tc2VjKTtcbiAgICB0aGlzLmNsaWNrKHRpbWVfbXNlYyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU29sZW5vaWQ7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/Moving/StepperMotor/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class StepperMotor {
    constructor() {
        this.keys = ["a", "b", "aa", "bb", "common"];
        this.requiredKeys = ["a", "b", "aa", "bb"];
        this._stepInstructions = {
            "1": [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]],
            "2": [[0, 0, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0]],
            "1-2": [
                [0, 1, 1, 1],
                [0, 0, 1, 1],
                [1, 0, 1, 1],
                [1, 0, 0, 1],
                [1, 1, 0, 1],
                [1, 1, 0, 0],
                [1, 1, 1, 0],
                [0, 1, 1, 0],
            ],
        };
        this.type = undefined; // common exist? => unipolar : bipolar
        this.currentStep = 0;
        this._stepType = "2";
        this.frequency = 100;
        this.rotationStepCount = 100;
        this.milliMeterStepCount = 1;
    }
    static info() {
        return {
            name: "StepperMotor",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.common)) {
            this.common = obniz.getIO(this.params.common);
            this.common.output(true);
            this.type = "unipolar";
        }
        else {
            this.type = "bipolar";
        }
        this.ios = [];
        this.ios.push(obniz.getIO(this.params.a));
        this.ios.push(obniz.getIO(this.params.b));
        this.ios.push(obniz.getIO(this.params.aa));
        this.ios.push(obniz.getIO(this.params.bb));
    }
    stepWait(step_count) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof step_count !== "number") {
                throw new Error("must provide number");
            }
            step_count = Math.round(step_count);
            if (step_count === 0) {
                return;
            }
            const step_count_abs = Math.abs(step_count);
            const instructions = this._getStepInstructions();
            const instruction_length = instructions.length;
            const array = [];
            // set instructions
            let currentPhase = this.currentStep % instruction_length;
            if (currentPhase < 0) {
                currentPhase = instruction_length - currentPhase * -1;
            }
            if (step_count > 0) {
                for (let i = 0; i < instructions.length; i++) {
                    if (++currentPhase >= instruction_length) {
                        currentPhase = 0;
                    }
                    array.push(instructions[currentPhase]);
                }
            }
            else {
                for (let i = 0; i < instructions.length; i++) {
                    if (--currentPhase < 0) {
                        currentPhase = instruction_length - 1;
                    }
                    array.push(instructions[currentPhase]);
                }
            }
            // prepare animation
            let msec = 1000 / this.frequency;
            msec = parseInt(msec);
            if (msec < 1) {
                msec = 1;
            }
            const state = (index) => {
                const instruction = array[index];
                for (let i = 0; i < this.ios.length; i++) {
                    this.ios[i].output(instruction[i]);
                }
            };
            const states = [];
            for (let i = 0; i < instruction_length; i++) {
                states.push({
                    duration: msec,
                    state,
                });
            }
            // execute and wait
            yield this.obniz.io.repeatWait(states, step_count_abs);
            this.currentStep += step_count;
        });
    }
    stepToWait(destination) {
        return __awaiter(this, void 0, void 0, function* () {
            const mustmove = destination - this.currentStep;
            yield this.stepWait(mustmove);
        });
    }
    holdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const instructions = this._getStepInstructions();
            const instruction_length = instructions.length;
            // set instructions
            let currentPhase = this.currentStep % instruction_length;
            if (currentPhase < 0) {
                currentPhase = instruction_length - currentPhase * -1;
            }
            for (let i = 0; i < this.ios.length; i++) {
                this.ios[i].output(instructions[currentPhase][i]);
            }
            yield this.obniz.pingWait();
        });
    }
    freeWait() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < this.ios.length; i++) {
                this.ios[i].output(true);
            }
            yield this.obniz.pingWait();
        });
    }
    stepType(stepType) {
        const newType = this._stepInstructions[stepType];
        if (!newType) {
            throw new Error("unknown step type " + stepType);
        }
        this._stepType = stepType;
    }
    speed(step_per_sec) {
        this.frequency = step_per_sec;
    }
    currentRotation() {
        // => degree
        return (this.currentStep / this.rotationStepCount) * 360;
    }
    currentAngle() {
        // => degree
        let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;
        if (angle < 0) {
            angle = 360 - angle;
        }
        return angle;
    }
    rotateWait(rotation) {
        return __awaiter(this, void 0, void 0, function* () {
            rotation /= 360;
            const needed = rotation * this.rotationStepCount;
            yield this.stepWait(needed);
        });
    }
    rotateToWait(angle) {
        return __awaiter(this, void 0, void 0, function* () {
            let needed = angle - this.currentAngle();
            if (Math.abs(needed) > 180) {
                needed = needed > 0 ? needed - 360 : 360 + needed;
            }
            needed = (needed / 360) * this.rotationStepCount;
            yield this.stepWait(needed);
        });
    }
    currentDistance() {
        // => mm
        return this.currentStep / this.milliMeterStepCount;
    }
    moveWait(distance) {
        return __awaiter(this, void 0, void 0, function* () {
            const needed = distance * this.milliMeterStepCount;
            yield this.stepWait(needed);
        });
    }
    moveToWait(destination) {
        return __awaiter(this, void 0, void 0, function* () {
            const needed = (destination - this.currentDistance()) * this.milliMeterStepCount;
            yield this.stepWait(needed);
        });
    }
    _getStepInstructions() {
        return this._stepInstructions[this._stepType];
    }
}
exports.default = StepperMotor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Power/AXP192/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AXP192 {
    constructor() {
        this.requiredKeys = [];
        this.keys = ["sda", "scl", "i2c"];
    }
    static info() {
        return {
            name: "AXP192",
        };
    }
    wired(obniz) {
        this.params.mode = "master"; // for i2c
        this.params.clock = 400 * 1000; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    // Module functions
    set(address, data) {
        this.i2c.write(AXP192_ADDRESS, [address, data]);
    }
    getWait(address) {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(AXP192_ADDRESS, [address]);
            return yield this.i2c.readWait(AXP192_ADDRESS, 1);
        });
    }
    setLDO2Voltage(voltage) {
        return __awaiter(this, void 0, void 0, function* () {
            if (voltage < 1.8) {
                voltage = 1.8;
            }
            if (voltage > 3.3) {
                voltage = 3.3;
            }
            let set = yield this.getWait(REG_VOLT_SET_LDO2_3);
            let offset = (voltage - 1.8) * 10;
            if (offset > 15) {
                offset = 15;
            }
            set = (set & 0x0f) | (offset << 4);
            console.log("set voltage to ", set);
            this.set(REG_VOLT_SET_LDO2_3, set);
        });
    }
    setLDO3Voltage(voltage) {
        return __awaiter(this, void 0, void 0, function* () {
            if (voltage < 1.8) {
                voltage = 1.8;
            }
            if (voltage > 3.3) {
                voltage = 3.3;
            }
            let set = yield this.getWait(REG_VOLT_SET_LDO2_3);
            let offset = (voltage - 1.8) * 10;
            if (offset > 15) {
                offset = 15;
            }
            set = (set & 0xf0) | offset;
            this.set(REG_VOLT_SET_LDO2_3, set);
        });
    }
    set3VLDO2_3() {
        this.set(REG_VOLT_SET_LDO2_3, 0xcc);
    }
    enableLDO2_3() {
        this.set(REG_EN_DC1_LDO2_3, 0x4d);
    }
    toggleLDO2(val) {
        return __awaiter(this, void 0, void 0, function* () {
            const bit = val ? 1 : 0;
            let state = yield this.getWait(REG_EN_DC1_LDO2_3);
            state = (state & LDO2_EN_MASK) | (bit << 2);
            this.set(REG_EN_DC1_LDO2_3, state);
        });
    }
    toggleLDO3(val) {
        return __awaiter(this, void 0, void 0, function* () {
            const bit = val ? 1 : 0;
            let state = yield this.getWait(REG_EN_DC1_LDO2_3);
            state = (state & LDO3_EN_MASK) | (bit << 3);
            this.set(REG_EN_DC1_LDO2_3, state);
        });
    }
    initM5StickC() {
        this.i2c.write(AXP192_ADDRESS, [REG_EN_EXT_DC2, 0xff]);
        this.i2c.write(AXP192_ADDRESS, [REG_VOLT_SET_LDO2_3, 0xcc]);
        this.i2c.write(AXP192_ADDRESS, [REG_ADC_EN1, 0xff]);
        this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_CTRL1, 0xc0]);
        this.i2c.write(AXP192_ADDRESS, [REG_CCOUNTER, 0x80]);
        this.i2c.write(AXP192_ADDRESS, [REG_EN_DC1_LDO2_3, 0x4d]);
        this.i2c.write(AXP192_ADDRESS, [REG_PEK, 0x0c]);
        this.i2c.write(AXP192_ADDRESS, [REG_GPIO0, 0x02]);
        this.i2c.write(AXP192_ADDRESS, [REG_VBUS_IPSOUT, 0xe0]);
        this.i2c.write(AXP192_ADDRESS, [REG_CHARGE_OVTEMP, 0xfc]);
        this.i2c.write(AXP192_ADDRESS, [REG_BCKUP_BAT, 0xa2]);
    }
    getVbat() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(AXP192_ADDRESS, [REG_VBAT_LSB]);
            const vbat_lsb = yield this.readWait(AXP192_ADDRESS, 1);
            this.i2c.write(AXP192_ADDRESS, [REG_VBAT_MSB]);
            const vbat_msb = yield this.readWait(AXP192_ADDRESS, 1);
            return (vbat_lsb << 4) + vbat_msb;
        });
    }
}
exports.default = AXP192;
const AXP192_ADDRESS = 0x34;
const REG_EN_EXT_DC2 = 0x10;
const REG_EN_DC1_LDO2_3 = 0x12;
const REG_VOLT_SET_LDO2_3 = 0x28;
const REG_VBUS_IPSOUT = 0x30;
const REG_CHARGE_CTRL1 = 0x33;
const REG_BCKUP_BAT = 0x35;
const REG_PEK = 0x36;
const REG_CHARGE_OVTEMP = 0x39;
const REG_VBAT_LSB = 0x78;
const REG_VBAT_MSB = 0x79;
const REG_ADC_EN1 = 0x82;
const REG_GPIO0 = 0x90;
const REG_CCOUNTER = 0xb8;
const LDO2_EN_MASK = 0xfb;
const LDO3_EN_MASK = 0xf7;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/PressureSensor/FSR-40X/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Todo: add weight and calc pressure(kg)
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class FSR40X {
    constructor() {
        this.keys = ["pin0", "pin1"];
        this.requiredKeys = ["pin0", "pin1"];
    }
    static info() {
        return {
            name: "FSR40X",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.io_pwr = obniz.getIO(this.params.pin0);
        this.ad = obniz.getAD(this.params.pin1);
        this.io_pwr.drive("5v");
        this.io_pwr.output(true);
        const self = this;
        this.ad.start((value) => {
            const pressure = value * 100;
            self.press = pressure;
            if (self.onchange) {
                self.onchange(self.press);
            }
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.ad.getWait();
            const pressure = value * 100;
            this.press = pressure;
            return this.press;
        });
    }
}
exports.default = FSR40X;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9QcmVzc3VyZVNlbnNvci9GU1ItNDBYL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx5Q0FBeUM7Ozs7Ozs7Ozs7O0FBRXpDLE1BQU0sTUFBTTtJQWlCVjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7SUFDSixDQUFDO0lBZ0JNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpCLE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNCLE1BQU0sUUFBUSxHQUFRLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7WUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVZLE9BQU87O1lBQ2xCLE1BQU0sS0FBSyxHQUFRLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQyxNQUFNLFFBQVEsR0FBUSxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvUHJlc3N1cmVTZW5zb3IvRlNSLTQwWC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRvZG86IGFkZCB3ZWlnaHQgYW5kIGNhbGMgcHJlc3N1cmUoa2cpXG5cbmNsYXNzIEZTUjQwWCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkZTUjQwWFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgaW9fcHdyOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBwcmVzczogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJwaW4wXCIsIFwicGluMVwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInBpbjBcIiwgXCJwaW4xXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLmlvX3B3ciA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnBpbjApO1xuICAgIHRoaXMuYWQgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5waW4xKTtcblxuICAgIHRoaXMuaW9fcHdyLmRyaXZlKFwiNXZcIik7XG4gICAgdGhpcy5pb19wd3Iub3V0cHV0KHRydWUpO1xuXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcbiAgICB0aGlzLmFkLnN0YXJ0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBjb25zdCBwcmVzc3VyZTogYW55ID0gdmFsdWUgKiAxMDA7XG4gICAgICBzZWxmLnByZXNzID0gcHJlc3N1cmU7XG4gICAgICBpZiAoc2VsZi5vbmNoYW5nZSkge1xuICAgICAgICBzZWxmLm9uY2hhbmdlKHNlbGYucHJlc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFdhaXQoKSB7XG4gICAgY29uc3QgdmFsdWU6IGFueSA9IGF3YWl0IHRoaXMuYWQuZ2V0V2FpdCgpO1xuICAgIGNvbnN0IHByZXNzdXJlOiBhbnkgPSB2YWx1ZSAqIDEwMDtcbiAgICB0aGlzLnByZXNzID0gcHJlc3N1cmU7XG4gICAgcmV0dXJuIHRoaXMucHJlc3M7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRlNSNDBYO1xuIl19


/***/ }),

/***/ "./dist/src/parts/SoilSensor/SEN0114/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class SEN0114 {
    constructor() {
        this.keys = ["vcc", "output", "gnd"];
        this.requiredKeys = ["output"];
    }
    static info() {
        return {
            name: "SEN0114",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.ad = obniz.getAD(this.params.output);
        this.ad.start((value) => {
            this.value = value;
            if (this.onchange) {
                this.onchange(this.value);
            }
        });
    }
    getHumidityWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.value = yield this.ad.getWait();
            return this.value;
        });
    }
}
exports.default = SEN0114;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Tb2lsU2Vuc29yL1NFTjAxMTQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE9BQU87SUFnQlg7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQWpCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFlTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxlQUFlOztZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxPQUFPLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1NvaWxTZW5zb3IvU0VOMDExNC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNFTjAxMTQge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJTRU4wMTE0XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyB2YWx1ZTogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJvdXRwdXRcIiwgXCJnbmRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJvdXRwdXRcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMub3V0cHV0KTtcblxuICAgIHRoaXMuYWQuc3RhcnQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLm9uY2hhbmdlKSB7XG4gICAgICAgIHRoaXMub25jaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0SHVtaWRpdHlXYWl0KCkge1xuICAgIHRoaXMudmFsdWUgPSBhd2FpdCB0aGlzLmFkLmdldFdhaXQoKTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTRU4wMTE0O1xuIl19


/***/ }),

/***/ "./dist/src/parts/Sound/Speaker/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Speaker {
    constructor(obniz) {
        this.keys = ["signal", "gnd"];
        this.requiredKeys = ["signal"];
    }
    static info() {
        return {
            name: "Speaker",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(null, this.params.gnd, "5v");
        this.pwm = obniz.getFreePwm();
        this.pwm.start({ io: this.params.signal });
    }
    play(freq) {
        if (typeof freq !== "number") {
            throw new Error("freq must be a number");
        }
        freq = Math.floor(freq); // temporary
        if (freq > 0) {
            this.pwm.freq(freq);
            this.pwm.pulse((1 / freq / 2) * 1000);
        }
        else {
            this.pwm.pulse(0);
        }
    }
    stop() {
        this.play(0);
    }
}
exports.default = Speaker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Tb3VuZC9TcGVha2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxPQUFPO0lBY1gsWUFBWSxLQUFVO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFmTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFhTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBUztRQUNuQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVk7UUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNmLENBQUM7Q0FDRjtBQUVELGtCQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvU291bmQvU3BlYWtlci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNwZWFrZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJTcGVha2VyXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIHB3bTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJzaWduYWxcIiwgXCJnbmRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzaWduYWxcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZChudWxsLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gICAgdGhpcy5wd20gPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20uc3RhcnQoe2lvOiB0aGlzLnBhcmFtcy5zaWduYWx9KTtcbiAgfVxuXG4gIHB1YmxpYyBwbGF5KGZyZXE6IGFueSkge1xuICAgIGlmICh0eXBlb2YgZnJlcSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZnJlcSBtdXN0IGJlIGEgbnVtYmVyXCIpO1xuICAgIH1cbiAgICBmcmVxID0gTWF0aC5mbG9vcihmcmVxKTsgLy8gdGVtcG9yYXJ5XG4gICAgaWYgKGZyZXEgPiAwKSB7XG4gICAgICB0aGlzLnB3bS5mcmVxKGZyZXEpO1xuICAgICAgdGhpcy5wd20ucHVsc2UoKDEgLyBmcmVxIC8gMikgKiAxMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wd20ucHVsc2UoMCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5wbGF5KDApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwZWFrZXI7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AnalogTemperatureSensor {
    constructor() {
        this.keys = ["vcc", "gnd", "output"];
        this.requiredKeys = ["output"];
        this.drive = "5v";
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);
        this.ad = obniz.getAD(this.params.output);
        this.ad.start((voltage) => {
            this.temp = this.calc(voltage);
            this.onchange(this.temp);
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const voltage = yield this.ad.getWait();
            this.temp = this.calc(voltage);
            return this.temp;
        });
    }
    onchange(temp) {
    }
    calc(voltage) {
        return 0;
    }
}
exports.default = AnalogTemperatureSensor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLHVCQUF1QjtJQVMzQjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQ1gsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFWSxPQUFPOztZQUNsQixNQUFNLE9BQU8sR0FBUSxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDO0tBQUE7SUFFTSxRQUFRLENBQUMsSUFBUztJQUN6QixDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVk7UUFDdEIsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSx1QkFBdUIsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvVGVtcGVyYXR1cmVTZW5zb3IvYW5hbG9nL0FuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3Ige1xuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkcml2ZTogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgYWQ6IGFueTtcbiAgcHVibGljIHRlbXA6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJnbmRcIiwgXCJvdXRwdXRcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJvdXRwdXRcIl07XG4gICAgdGhpcy5kcml2ZSA9IFwiNXZcIjtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgdGhpcy5kcml2ZSk7XG4gICAgdGhpcy5hZCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLm91dHB1dCk7XG5cbiAgICB0aGlzLmFkLnN0YXJ0KFxuICAgICAgKHZvbHRhZ2U6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLnRlbXAgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIHRoaXMub25jaGFuZ2UodGhpcy50ZW1wKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRXYWl0KCkge1xuICAgIGNvbnN0IHZvbHRhZ2U6IGFueSA9IGF3YWl0IHRoaXMuYWQuZ2V0V2FpdCgpO1xuICAgIHRoaXMudGVtcCA9IHRoaXMuY2FsYyh2b2x0YWdlKTtcbiAgICByZXR1cm4gdGhpcy50ZW1wO1xuICB9XG5cbiAgcHVibGljIG9uY2hhbmdlKHRlbXA6IGFueSkge1xuICB9XG5cbiAgcHVibGljIGNhbGModm9sdGFnZTogYW55KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3I7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM35DZ/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM35DZ extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "LM35DZ",
        };
    }
    calc(voltage) {
        return voltage * 100; // Temp(Celsius) = [AD Voltage] * 100l;
    }
}
exports.default = LM35DZ;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE0zNURaL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUZBQWlFO0FBRWpFLE1BQU0sTUFBTyxTQUFRLGlDQUF1QjtJQUNuQyxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFZO1FBQ3RCLE9BQU8sT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLHVDQUF1QztJQUMvRCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1RlbXBlcmF0dXJlU2Vuc29yL2FuYWxvZy9MTTM1RFovaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3IgZnJvbSBcIi4uL0FuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yXCI7XG5cbmNsYXNzIExNMzVEWiBleHRlbmRzIEFuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yIHtcbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkxNMzVEWlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgY2FsYyh2b2x0YWdlOiBhbnkpIHtcbiAgICByZXR1cm4gdm9sdGFnZSAqIDEwMDsgLy8gVGVtcChDZWxzaXVzKSA9IFtBRCBWb2x0YWdlXSAqIDEwMGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTE0zNURaO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM60/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM60 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "LM60",
        };
    }
    calc(voltage) {
        return Math.round(((voltage - 0.424) / 0.00625) * 10) / 10; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg(Offset voltage)])/[Temp coefficient]
    }
}
exports.default = LM60;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE02MC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlGQUFpRTtBQUVqRSxNQUFxQixJQUFLLFNBQVEsaUNBQXVCO0lBRWhELE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVk7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsdUZBQXVGO0lBQ3JKLENBQUM7Q0FDRjtBQVhELHVCQVdDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE02MC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTE02MCBleHRlbmRzIEFuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiTE02MFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgY2FsYyh2b2x0YWdlOiBhbnkpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoKHZvbHRhZ2UgLSAwLjQyNCkgLyAwLjAwNjI1KSAqIDEwKSAvIDEwOyAvLyBUZW1wKENlbHNpdXMpID0gKFtBRCBWb2x0YWdlXS1bVm9sdGFnZSBhdCAwIGRlZyhPZmZzZXQgdm9sdGFnZSldKS9bVGVtcCBjb2VmZmljaWVudF1cbiAgfVxufVxuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LM61/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LM61 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "LM61",
        };
    }
    calc(voltage) {
        return Math.round((voltage - 0.6) / 0.01); // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg(Offset voltage)])/[Temp coefficient]
    }
}
exports.default = LM61;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE02MS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlGQUFpRTtBQUVqRSxNQUFNLElBQUssU0FBUSxpQ0FBdUI7SUFDakMsTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztJQUNKLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBWTtRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyx1RkFBdUY7SUFDcEksQ0FBQztDQUNGO0FBRUQsa0JBQWUsSUFBSSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE02MS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuY2xhc3MgTE02MSBleHRlbmRzIEFuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yIHtcbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkxNNjFcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNhbGModm9sdGFnZTogYW55KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKHZvbHRhZ2UgLSAwLjYpIC8gMC4wMSk7IC8vIFRlbXAoQ2Vsc2l1cykgPSAoW0FEIFZvbHRhZ2VdLVtWb2x0YWdlIGF0IDAgZGVnKE9mZnNldCB2b2x0YWdlKV0pL1tUZW1wIGNvZWZmaWNpZW50XVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExNNjE7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/LMT87/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class LMT87 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "LMT87",
        };
    }
    calc(voltage) {
        return (voltage * 1000 - 2365) / -13.6 + 20; // 20-50dc;
    }
}
exports.default = LMT87;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTE1UODcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5RkFBaUU7QUFFakUsTUFBTSxLQUFNLFNBQVEsaUNBQXVCO0lBQ2xDLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVk7UUFDdEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsV0FBVztJQUMxRCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxLQUFLLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1RlbXBlcmF0dXJlU2Vuc29yL2FuYWxvZy9MTVQ4Ny9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuY2xhc3MgTE1UODcgZXh0ZW5kcyBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciB7XG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJMTVQ4N1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgY2FsYyh2b2x0YWdlOiBhbnkpIHtcbiAgICByZXR1cm4gKHZvbHRhZ2UgKiAxMDAwIC0gMjM2NSkgLyAtMTMuNiArIDIwOyAvLyAyMC01MGRjO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExNVDg3O1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/MCP9700/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class MCP9700 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "MCP9700",
        };
    }
    calc(voltage) {
        return (voltage - 0.5) / 0.01; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg])/[Temp coefficient]
    }
}
exports.default = MCP9700;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTUNQOTcwMC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlGQUFpRTtBQUVqRSxNQUFNLE9BQVEsU0FBUSxpQ0FBdUI7SUFFcEMsTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVk7UUFDdEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyx1RUFBdUU7SUFDeEcsQ0FBQztDQUNGO0FBRUQsa0JBQWUsT0FBTyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTUNQOTcwMC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuY2xhc3MgTUNQOTcwMCBleHRlbmRzIEFuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiTUNQOTcwMFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgY2FsYyh2b2x0YWdlOiBhbnkpIHtcbiAgICByZXR1cm4gKHZvbHRhZ2UgLSAwLjUpIC8gMC4wMTsgLy8gVGVtcChDZWxzaXVzKSA9IChbQUQgVm9sdGFnZV0tW1ZvbHRhZ2UgYXQgMCBkZWddKS9bVGVtcCBjb2VmZmljaWVudF1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNQ1A5NzAwO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/MCP9701/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
class MCP9701 extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "MCP9701",
        };
    }
    calc(voltage) {
        return (voltage - 0.4) / 0.0195; // Temp(Celsius) = ([AD Voltage]-[Voltage at 0 deg])/[Temp coefficient]
    }
}
exports.default = MCP9701;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTUNQOTcwMS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlGQUFpRTtBQUVqRSxNQUFNLE9BQVEsU0FBUSxpQ0FBdUI7SUFDcEMsTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVk7UUFDdEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyx1RUFBdUU7SUFDMUcsQ0FBQztDQUNGO0FBRUQsa0JBQWUsT0FBTyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvTUNQOTcwMS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuY2xhc3MgTUNQOTcwMSBleHRlbmRzIEFuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yIHtcbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1DUDk3MDFcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNhbGModm9sdGFnZTogYW55KSB7XG4gICAgcmV0dXJuICh2b2x0YWdlIC0gMC40KSAvIDAuMDE5NTsgLy8gVGVtcChDZWxzaXVzKSA9IChbQUQgVm9sdGFnZV0tW1ZvbHRhZ2UgYXQgMCBkZWddKS9bVGVtcCBjb2VmZmljaWVudF1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNQ1A5NzAxO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/S8100B/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
// sensor resopnse not found
class S8100B extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "S8100B",
        };
    }
    calc(voltage) {
        return 30 + (1.508 - voltage) / -0.08; // Temp(Celsius) =
    }
}
exports.default = S8100B;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvUzgxMDBCL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUZBQWlFO0FBRWpFLDRCQUE0QjtBQUU1QixNQUFNLE1BQU8sU0FBUSxpQ0FBdUI7SUFDbkMsTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBWTtRQUN0QixPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGtCQUFrQjtJQUMzRCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1RlbXBlcmF0dXJlU2Vuc29yL2FuYWxvZy9TODEwMEIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3IgZnJvbSBcIi4uL0FuYWxvZ1RlbXBlcmF0dXJlU2Vuc29yXCI7XG5cbi8vIHNlbnNvciByZXNvcG5zZSBub3QgZm91bmRcblxuY2xhc3MgUzgxMDBCIGV4dGVuZHMgQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3Ige1xuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiUzgxMDBCXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBjYWxjKHZvbHRhZ2U6IGFueSkge1xuICAgIHJldHVybiAzMCArICgxLjUwOCAtIHZvbHRhZ2UpIC8gLTAuMDg7IC8vIFRlbXAoQ2Vsc2l1cykgPVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFM4MTAwQjtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/analog/S8120C/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnalogTemperatureSensor_1 = __importDefault(__webpack_require__("./dist/src/parts/TemperatureSensor/analog/AnalogTemperatureSensor.js"));
// this not work, but sometimes good
// resason1:too low of obniz input Impedance ?
// resoson2:Is the sensor oscillating?
class S8120C extends AnalogTemperatureSensor_1.default {
    static info() {
        return {
            name: "S8120C",
        };
    }
    calc(voltage) {
        return (voltage - 1.474) / -0.0082 + 30; // Temp(Celsius) = (([AD Voltage] - [Output Voltage at 30deg])/[V/deg]) + 30
    }
}
exports.default = S8120C;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9hbmFsb2cvUzgxMjBDL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUZBQWlFO0FBRWpFLG9DQUFvQztBQUNwQyw4Q0FBOEM7QUFDOUMsc0NBQXNDO0FBRXRDLE1BQU0sTUFBTyxTQUFRLGlDQUF1QjtJQUNuQyxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFZO1FBQ3RCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsNEVBQTRFO0lBQ3ZILENBQUM7Q0FDRjtBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvVGVtcGVyYXR1cmVTZW5zb3IvYW5hbG9nL1M4MTIwQy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciBmcm9tIFwiLi4vQW5hbG9nVGVtcGVyYXR1cmVTZW5zb3JcIjtcblxuLy8gdGhpcyBub3Qgd29yaywgYnV0IHNvbWV0aW1lcyBnb29kXG4vLyByZXNhc29uMTp0b28gbG93IG9mIG9ibml6IGlucHV0IEltcGVkYW5jZSA/XG4vLyByZXNvc29uMjpJcyB0aGUgc2Vuc29yIG9zY2lsbGF0aW5nP1xuXG5jbGFzcyBTODEyMEMgZXh0ZW5kcyBBbmFsb2dUZW1wZXJhdHVyZVNlbnNvciB7XG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJTODEyMENcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNhbGModm9sdGFnZTogYW55KSB7XG4gICAgcmV0dXJuICh2b2x0YWdlIC0gMS40NzQpIC8gLTAuMDA4MiArIDMwOyAvLyBUZW1wKENlbHNpdXMpID0gKChbQUQgVm9sdGFnZV0gLSBbT3V0cHV0IFZvbHRhZ2UgYXQgMzBkZWddKS9bVi9kZWddKSArIDMwXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUzgxMjBDO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/ADT7410/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ADT7410 {
    constructor() {
        this.keys = ["vcc", "gnd", "sda", "scl", "addressMode"];
        this.requiredKeys = ["addressMode"];
    }
    static info() {
        return {
            name: "ADT7410",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (this.params.addressMode === 8) {
            this.address = 0x48;
        }
        else if (this.params.addressMode === 9) {
            this.address = 0x49;
        }
        this.params.clock = 400000;
        this.params.pull = "5v";
        this.params.mode = "master";
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.i2c.readWait(this.address, 2);
            let tempBin = ret[0] << 8;
            tempBin |= ret[1];
            tempBin = tempBin >> 3;
            if (tempBin & 0x1000) {
                tempBin = tempBin - 8192;
            }
            return tempBin / 16;
        });
    }
}
exports.default = ADT7410;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvQURUNzQxMC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sT0FBTztJQWVYO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQWhCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFjTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUU1QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVZLFdBQVc7O1lBQ3RCLE1BQU0sR0FBRyxHQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLE9BQU8sR0FBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE9BQU8sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsT0FBTyxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUM7WUFFdkIsSUFBSSxPQUFPLEdBQUcsTUFBTSxFQUFFO2dCQUNwQixPQUFPLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQzthQUMxQjtZQUVELE9BQU8sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUN0QixDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvVGVtcGVyYXR1cmVTZW5zb3IvaTJjL0FEVDc0MTAvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBRFQ3NDEwIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiQURUNzQxMFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJ2Y2NcIiwgXCJnbmRcIiwgXCJzZGFcIiwgXCJzY2xcIiwgXCJhZGRyZXNzTW9kZVwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcImFkZHJlc3NNb2RlXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCBcIjV2XCIpO1xuXG4gICAgaWYgKHRoaXMucGFyYW1zLmFkZHJlc3NNb2RlID09PSA4KSB7XG4gICAgICB0aGlzLmFkZHJlc3MgPSAweDQ4O1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJhbXMuYWRkcmVzc01vZGUgPT09IDkpIHtcbiAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NDk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJhbXMuY2xvY2sgPSA0MDAwMDA7XG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IFwiNXZcIjtcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gXCJtYXN0ZXJcIjtcblxuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VGVtcFdhaXQoKSB7XG4gICAgY29uc3QgcmV0OiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLmFkZHJlc3MsIDIpO1xuICAgIGxldCB0ZW1wQmluOiBhbnkgPSByZXRbMF0gPDwgODtcbiAgICB0ZW1wQmluIHw9IHJldFsxXTtcbiAgICB0ZW1wQmluID0gdGVtcEJpbiA+PiAzO1xuXG4gICAgaWYgKHRlbXBCaW4gJiAweDEwMDApIHtcbiAgICAgIHRlbXBCaW4gPSB0ZW1wQmluIC0gODE5MjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGVtcEJpbiAvIDE2O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFEVDc0MTA7XG4iXX0=


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/AM2320/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AM2320 {
    constructor() {
        this.keys = ["vcc", "gnd", "sda", "scl", "i2c"];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: "AM2320",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.address = 0x5c;
        this.params.pull = "5v";
        this.params.mode = "master";
        this.params.clock = this.params.clock || 100 * 1000;
        this.i2c = obniz.getI2CWithConfig(this.params);
    }
    getAllWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const i2cOnerror = this.i2c.onerror;
            this.i2c.onerror = () => {
            };
            this.i2c.write(this.address, [0]); // wake
            this.obniz.wait(2);
            this.i2c.write(this.address, [0x03, 0x00, 0x04]);
            this.obniz.wait(2);
            this.i2c.write(this.address, [0x03, 0x00, 0x04]);
            const ret = yield this.i2c.readWait(this.address, 6);
            this.i2c.onerror = i2cOnerror;
            if (ret[0] !== 3 || ret[1] !== 4) {
                console.log("AM2320: Could not receive data correctly");
                return {};
            }
            const humidity = (ret[2] * 256 + ret[3]) / 10.0;
            const temperature = (ret[4] * 256 + ret[5]) / 10.0;
            return { temperature, humidity };
        });
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).temperature;
        });
    }
    getHumdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).humidity;
        });
    }
}
exports.default = AM2320;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvQU0yMzIwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxNQUFNO0lBZVY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFoQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFjTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQztRQUNwRCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVZLFVBQVU7O1lBQ3JCLE1BQU0sVUFBVSxHQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUN4QixDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87WUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sR0FBRyxHQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7WUFDOUIsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQztnQkFDeEQsT0FBTyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sUUFBUSxHQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDckQsTUFBTSxXQUFXLEdBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUN4RCxPQUFPLEVBQUMsV0FBVyxFQUFFLFFBQVEsRUFBQyxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVZLFdBQVc7O1lBQ3RCLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUMvQyxDQUFDO0tBQUE7SUFFWSxXQUFXOztZQUN0QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDNUMsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1RlbXBlcmF0dXJlU2Vuc29yL2kyYy9BTTIzMjAvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBTTIzMjAge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJBTTIzMjBcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgYWRkcmVzczogYW55O1xuICBwdWJsaWMgaTJjOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwic2RhXCIsIFwic2NsXCIsIFwiaTJjXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gICAgdGhpcy5hZGRyZXNzID0gMHg1YztcbiAgICB0aGlzLnBhcmFtcy5wdWxsID0gXCI1dlwiO1xuICAgIHRoaXMucGFyYW1zLm1vZGUgPSBcIm1hc3RlclwiO1xuICAgIHRoaXMucGFyYW1zLmNsb2NrID0gdGhpcy5wYXJhbXMuY2xvY2sgfHwgMTAwICogMTAwMDtcbiAgICB0aGlzLmkyYyA9IG9ibml6LmdldEkyQ1dpdGhDb25maWcodGhpcy5wYXJhbXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFsbFdhaXQoKSB7XG4gICAgY29uc3QgaTJjT25lcnJvcjogYW55ID0gdGhpcy5pMmMub25lcnJvcjtcbiAgICB0aGlzLmkyYy5vbmVycm9yID0gKCkgPT4ge1xuICAgIH07XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbMF0pOyAvLyB3YWtlXG4gICAgdGhpcy5vYm5pei53YWl0KDIpO1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgWzB4MDMsIDB4MDAsIDB4MDRdKTtcbiAgICB0aGlzLm9ibml6LndhaXQoMik7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbMHgwMywgMHgwMCwgMHgwNF0pO1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5pMmMucmVhZFdhaXQodGhpcy5hZGRyZXNzLCA2KTtcbiAgICB0aGlzLmkyYy5vbmVycm9yID0gaTJjT25lcnJvcjtcbiAgICBpZiAocmV0WzBdICE9PSAzIHx8IHJldFsxXSAhPT0gNCkge1xuICAgICAgY29uc29sZS5sb2coXCJBTTIzMjA6IENvdWxkIG5vdCByZWNlaXZlIGRhdGEgY29ycmVjdGx5XCIpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBodW1pZGl0eTogYW55ID0gKHJldFsyXSAqIDI1NiArIHJldFszXSkgLyAxMC4wO1xuICAgIGNvbnN0IHRlbXBlcmF0dXJlOiBhbnkgPSAocmV0WzRdICogMjU2ICsgcmV0WzVdKSAvIDEwLjA7XG4gICAgcmV0dXJuIHt0ZW1wZXJhdHVyZSwgaHVtaWRpdHl9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFRlbXBXYWl0KCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRBbGxXYWl0KCkpLnRlbXBlcmF0dXJlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEh1bWRXYWl0KCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRBbGxXYWl0KCkpLmh1bWlkaXR5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFNMjMyMDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/AMG8833/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class AMG8833 {
    constructor() {
        this.requiredKeys = [];
        this.keys = ["vcc", "gnd", "sda", "scl", "address"];
        this.ioKeys = ["vcc", "gnd", "sda", "scl"];
        this.commands = {};
        this.commands.mode_normal = [0x00, 0x00];
        this.commands.reset_flag = [0x01, 0x30];
        this.commands.reset_initial = [0x01, 0x3f];
        this.commands.frameRate_10fps = [0x02, 0x00];
        this.commands.frameRate_1fps = [0x02, 0x01];
        this.commands.int_disable = [0x03, 0x00];
        this.commands.int_absVal = [0x03, 0x03];
        this.commands.int_diff = [0x03, 0x01];
        this.commands.stat = [0x04];
        this.commands.statClr_ovs = [0x05, 0x04];
        this.commands.statClr_int = [0x05, 0x02];
        this.commands.average_disable = [0x07, 0x00];
        this.commands.average_enable = [0x07, 0x10];
    }
    static info() {
        return {
            name: "AMG8833",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.address = 0x69;
        if (this.params.address === 0x69) {
            this.address = 0x69;
        }
        else if (this.params.addressmode === 0x68) {
            this.address = 0x68;
        }
        else if (this.params.address !== undefined) {
            throw new Error("address must be 0x68 or 0x69");
        }
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.pull = this.params.pull || null; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(50);
        obniz.i2c0.write(this.address, this.commands.mode_normal);
        obniz.i2c0.write(this.address, this.commands.reset_flag);
        obniz.i2c0.write(this.address, this.commands.frameRate_10fps);
        obniz.i2c0.write(this.address, this.commands.int_disable);
    }
    getOnePixWait(pixel) {
        return __awaiter(this, void 0, void 0, function* () {
            let pixelAddrL = 0x80;
            let pixelAddrH = 0x81;
            if (pixel >= 0 && pixel <= 63) {
                pixelAddrL = 0x80 + pixel * 2;
                pixelAddrH = 0x81 + pixel * 2;
            }
            else {
                throw new Error("pixel number must be range of 0 to 63");
            }
            this.i2c.write(this.address, [pixelAddrL]);
            const dataL = yield this.i2c.readWait(this.address, 1);
            this.i2c.write(this.address, [pixelAddrH]);
            const dataH = yield this.i2c.readWait(this.address, 1);
            let temp12bit = (dataH << 8) | dataL;
            if (dataH & 0x08) {
                // negative temperature
                temp12bit = temp12bit - 1;
                temp12bit = 0xfff - temp12bit; // bit inverting
                return temp12bit * -0.25;
            }
            else {
                // positive temperature
                return temp12bit * 0.25;
            }
        });
    }
    getAllPixWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const tempArray = new Array(64);
            this.i2c.write(this.address, [0x80]);
            const datas = yield this.i2c.readWait(this.address, 64 * 2);
            for (let i = 0; i < 64; i++) {
                let temp12bit = (datas[i * 2 + 1] << 8) | datas[i * 2];
                let temp = 0;
                if (datas[i * 2 + 1] & 0x08) {
                    // negative temperature
                    temp12bit = temp12bit - 1;
                    temp12bit = 0xfff - temp12bit; // bit inverting
                    temp = temp12bit * -0.25;
                }
                else {
                    // positive temperature
                    temp = temp12bit * 0.25;
                }
                tempArray[i] = temp;
            }
            return tempArray;
        });
    }
}
exports.default = AMG8833;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvQU1HODgzMy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sT0FBTztJQWlCWDtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQWxDTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFnQ00sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxLQUFLLElBQUksRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUNqRDtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVO1FBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLFVBQVU7UUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsVUFBVTtRQUN2RCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFcEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFWSxhQUFhLENBQUMsS0FBVTs7WUFDbkMsSUFBSSxVQUFVLEdBQVEsSUFBSSxDQUFDO1lBQzNCLElBQUksVUFBVSxHQUFRLElBQUksQ0FBQztZQUMzQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRTtnQkFDN0IsVUFBVSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixVQUFVLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDL0I7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0MsTUFBTSxLQUFLLEdBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sS0FBSyxHQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLFNBQVMsR0FBUSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDMUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFO2dCQUNoQix1QkFBdUI7Z0JBQ3ZCLFNBQVMsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQixTQUFTLEdBQUcsS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQjtnQkFDL0MsT0FBTyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsdUJBQXVCO2dCQUN2QixPQUFPLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDekI7UUFDSCxDQUFDO0tBQUE7SUFFWSxhQUFhOztZQUN4QixNQUFNLFNBQVMsR0FBUSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLEtBQUssR0FBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRWpFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxHQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDNUQsSUFBSSxJQUFJLEdBQVEsQ0FBQyxDQUFDO2dCQUNsQixJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtvQkFDM0IsdUJBQXVCO29CQUN2QixTQUFTLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztvQkFDMUIsU0FBUyxHQUFHLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0I7b0JBQy9DLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQzFCO3FCQUFNO29CQUNMLHVCQUF1QjtvQkFDdkIsSUFBSSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUM7aUJBQ3pCO2dCQUNELFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDckI7WUFFRCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE9BQU8sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvVGVtcGVyYXR1cmVTZW5zb3IvaTJjL0FNRzg4MzMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBTUc4ODMzIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiQU1HODgzM1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyBpb0tleXM6IGFueTtcbiAgcHVibGljIGNvbW1hbmRzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuICAgIHRoaXMua2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcInNkYVwiLCBcInNjbFwiLCBcImFkZHJlc3NcIl07XG5cbiAgICB0aGlzLmlvS2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcInNkYVwiLCBcInNjbFwiXTtcbiAgICB0aGlzLmNvbW1hbmRzID0ge307XG4gICAgdGhpcy5jb21tYW5kcy5tb2RlX25vcm1hbCA9IFsweDAwLCAweDAwXTtcbiAgICB0aGlzLmNvbW1hbmRzLnJlc2V0X2ZsYWcgPSBbMHgwMSwgMHgzMF07XG4gICAgdGhpcy5jb21tYW5kcy5yZXNldF9pbml0aWFsID0gWzB4MDEsIDB4M2ZdO1xuICAgIHRoaXMuY29tbWFuZHMuZnJhbWVSYXRlXzEwZnBzID0gWzB4MDIsIDB4MDBdO1xuICAgIHRoaXMuY29tbWFuZHMuZnJhbWVSYXRlXzFmcHMgPSBbMHgwMiwgMHgwMV07XG4gICAgdGhpcy5jb21tYW5kcy5pbnRfZGlzYWJsZSA9IFsweDAzLCAweDAwXTtcbiAgICB0aGlzLmNvbW1hbmRzLmludF9hYnNWYWwgPSBbMHgwMywgMHgwM107XG4gICAgdGhpcy5jb21tYW5kcy5pbnRfZGlmZiA9IFsweDAzLCAweDAxXTtcbiAgICB0aGlzLmNvbW1hbmRzLnN0YXQgPSBbMHgwNF07XG4gICAgdGhpcy5jb21tYW5kcy5zdGF0Q2xyX292cyA9IFsweDA1LCAweDA0XTtcbiAgICB0aGlzLmNvbW1hbmRzLnN0YXRDbHJfaW50ID0gWzB4MDUsIDB4MDJdO1xuICAgIHRoaXMuY29tbWFuZHMuYXZlcmFnZV9kaXNhYmxlID0gWzB4MDcsIDB4MDBdO1xuICAgIHRoaXMuY29tbWFuZHMuYXZlcmFnZV9lbmFibGUgPSBbMHgwNywgMHgxMF07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcblxuICAgIHRoaXMuYWRkcmVzcyA9IDB4Njk7XG4gICAgaWYgKHRoaXMucGFyYW1zLmFkZHJlc3MgPT09IDB4NjkpIHtcbiAgICAgIHRoaXMuYWRkcmVzcyA9IDB4Njk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmFtcy5hZGRyZXNzbW9kZSA9PT0gMHg2OCkge1xuICAgICAgdGhpcy5hZGRyZXNzID0gMHg2ODtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFyYW1zLmFkZHJlc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkcmVzcyBtdXN0IGJlIDB4Njggb3IgMHg2OVwiKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhcmFtcy5jbG9jayA9IHRoaXMucGFyYW1zLmNsb2NrIHx8IDQwMCAqIDEwMDA7IC8vIGZvciBpMmNcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gdGhpcy5wYXJhbXMubW9kZSB8fCBcIm1hc3RlclwiOyAvLyBmb3IgaTJjXG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IHRoaXMucGFyYW1zLnB1bGwgfHwgbnVsbDsgLy8gZm9yIGkyY1xuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5vYm5pei53YWl0KDUwKTtcblxuICAgIG9ibml6LmkyYzAud3JpdGUodGhpcy5hZGRyZXNzLCB0aGlzLmNvbW1hbmRzLm1vZGVfbm9ybWFsKTtcbiAgICBvYm5pei5pMmMwLndyaXRlKHRoaXMuYWRkcmVzcywgdGhpcy5jb21tYW5kcy5yZXNldF9mbGFnKTtcbiAgICBvYm5pei5pMmMwLndyaXRlKHRoaXMuYWRkcmVzcywgdGhpcy5jb21tYW5kcy5mcmFtZVJhdGVfMTBmcHMpO1xuICAgIG9ibml6LmkyYzAud3JpdGUodGhpcy5hZGRyZXNzLCB0aGlzLmNvbW1hbmRzLmludF9kaXNhYmxlKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRPbmVQaXhXYWl0KHBpeGVsOiBhbnkpIHtcbiAgICBsZXQgcGl4ZWxBZGRyTDogYW55ID0gMHg4MDtcbiAgICBsZXQgcGl4ZWxBZGRySDogYW55ID0gMHg4MTtcbiAgICBpZiAocGl4ZWwgPj0gMCAmJiBwaXhlbCA8PSA2Mykge1xuICAgICAgcGl4ZWxBZGRyTCA9IDB4ODAgKyBwaXhlbCAqIDI7XG4gICAgICBwaXhlbEFkZHJIID0gMHg4MSArIHBpeGVsICogMjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGl4ZWwgbnVtYmVyIG11c3QgYmUgcmFuZ2Ugb2YgMCB0byA2M1wiKTtcbiAgICB9XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbcGl4ZWxBZGRyTF0pO1xuICAgIGNvbnN0IGRhdGFMOiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLmFkZHJlc3MsIDEpO1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3BpeGVsQWRkckhdKTtcbiAgICBjb25zdCBkYXRhSDogYW55ID0gYXdhaXQgdGhpcy5pMmMucmVhZFdhaXQodGhpcy5hZGRyZXNzLCAxKTtcbiAgICBsZXQgdGVtcDEyYml0OiBhbnkgPSAoZGF0YUggPDwgOCkgfCBkYXRhTDtcbiAgICBpZiAoZGF0YUggJiAweDA4KSB7XG4gICAgICAvLyBuZWdhdGl2ZSB0ZW1wZXJhdHVyZVxuICAgICAgdGVtcDEyYml0ID0gdGVtcDEyYml0IC0gMTtcbiAgICAgIHRlbXAxMmJpdCA9IDB4ZmZmIC0gdGVtcDEyYml0OyAvLyBiaXQgaW52ZXJ0aW5nXG4gICAgICByZXR1cm4gdGVtcDEyYml0ICogLTAuMjU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHBvc2l0aXZlIHRlbXBlcmF0dXJlXG4gICAgICByZXR1cm4gdGVtcDEyYml0ICogMC4yNTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0QWxsUGl4V2FpdCgpIHtcbiAgICBjb25zdCB0ZW1wQXJyYXk6IGFueSA9IG5ldyBBcnJheSg2NCk7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbMHg4MF0pO1xuICAgIGNvbnN0IGRhdGFzOiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLmFkZHJlc3MsIDY0ICogMik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgIGxldCB0ZW1wMTJiaXQ6IGFueSA9IChkYXRhc1tpICogMiArIDFdIDw8IDgpIHwgZGF0YXNbaSAqIDJdO1xuICAgICAgbGV0IHRlbXA6IGFueSA9IDA7XG4gICAgICBpZiAoZGF0YXNbaSAqIDIgKyAxXSAmIDB4MDgpIHtcbiAgICAgICAgLy8gbmVnYXRpdmUgdGVtcGVyYXR1cmVcbiAgICAgICAgdGVtcDEyYml0ID0gdGVtcDEyYml0IC0gMTtcbiAgICAgICAgdGVtcDEyYml0ID0gMHhmZmYgLSB0ZW1wMTJiaXQ7IC8vIGJpdCBpbnZlcnRpbmdcbiAgICAgICAgdGVtcCA9IHRlbXAxMmJpdCAqIC0wLjI1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcG9zaXRpdmUgdGVtcGVyYXR1cmVcbiAgICAgICAgdGVtcCA9IHRlbXAxMmJpdCAqIDAuMjU7XG4gICAgICB9XG4gICAgICB0ZW1wQXJyYXlbaV0gPSB0ZW1wO1xuICAgIH1cblxuICAgIHJldHVybiB0ZW1wQXJyYXk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQU1HODgzMztcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/BME280/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class BME280 {
    constructor() {
        this.requiredKeys = [];
        this.keys = [
            "vcore",
            "vio",
            "gnd",
            "csb",
            "sdi",
            "sck",
            "sdo",
            "i2c",
            "address",
        ];
        this.ioKeys = ["vcore", "vio", "gnd", "csb", "sdi", "sdo", "sck"];
        this.configration = {
            sampling: {
                temp: 1,
                hum: 1,
                pres: 1,
            },
            interval: 5,
            iir_strength: 0,
            mode: 3,
            Modes: {
                sleep: 0,
                forced: 1,
                normal: 3,
            },
        };
        this.commands = {};
        this.commands.addresses = {
            config: 0xf5,
            ctrl_meas: 0xf4,
            ctrl_hum: 0xf2,
        };
    }
    static info() {
        return {
            name: "BME280",
            datasheet: "https://ae-bst.resource.bosch.com/media/_tech/media/datasheets/BST-BME280_DS001-12.pdf",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (obniz.isValidIO(this.params.csb)) {
            // selecting I2C mode before powerup
            this.io_csb = obniz.getIO(this.params.csb);
            this.io_csb.drive("3v");
            this.io_csb.output(true);
        }
        this.obniz.setVccGnd(this.params.vio, null, "3v");
        this.obniz.setVccGnd(this.params.vcore, null, "3v");
        this.obniz.setVccGnd(null, this.params.gnd, "5v");
        this.obniz.wait(10);
        this.address = 0x76;
        if (this.params.address === 0x76) {
            this.address = 0x76;
        }
        else if (this.params.address === 0x77) {
            this.address = 0x77;
        }
        else if (this.params.address !== undefined) {
            throw new Error("address must be 0x76 or 0x77");
        }
        if (obniz.isValidIO(this.params.sdo)) {
            this.io_sdo = obniz.getIO(this.params.sdo);
            this.io_sdo.drive("3v");
            this.io_sdo.output(this.address === 0x76 ? false : true);
        }
        this.params.sda = this.params.sda || this.params.sdi;
        this.params.scl = this.params.scl || this.params.sck;
        this.params.clock = this.params.clock || 100 * 1000;
        this.params.mode = "master";
        this.params.pull = "3v";
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(10);
        this.config();
        this.obniz.wait(10);
    }
    config() {
        return __awaiter(this, void 0, void 0, function* () {
            this.write([
                this.commands.addresses.config,
                (this.configration.interval << 5) |
                    (this.configration.iir_strength << 2) |
                    0,
            ]);
            this.write([
                this.commands.addresses.ctrl_hum,
                this.configration.sampling.hum,
            ]);
            this.write([
                this.commands.addresses.ctrl_meas,
                (this.configration.sampling.temp << 5) |
                    (this.configration.sampling.pres << 2) |
                    this.configration.mode,
            ]);
        });
    }
    setIIRStrength(strengh) {
        return __awaiter(this, void 0, void 0, function* () {
            this.configration.iir_strength = strengh;
            this.config();
        });
    }
    applyCalibration() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [0x88]);
            const data = yield this.i2c.readWait(this.address, 24);
            this.i2c.write(this.address, [0xa1]);
            let data_next = yield this.i2c.readWait(this.address, 1);
            data.push(...data_next);
            this.i2c.write(this.address, [0xe1]);
            data_next = yield this.i2c.readWait(this.address, 7);
            data.push(...data_next);
            this._calibrated = {
                dig_T1: (data[1] << 8) | data[0],
                dig_T2: this._readSigned16((data[3] << 8) | data[2]),
                dig_T3: this._readSigned16((data[5] << 8) | data[4]),
                dig_P1: (data[7] << 8) | data[6],
                dig_P2: this._readSigned16((data[9] << 8) | data[8]),
                dig_P3: this._readSigned16((data[11] << 8) | data[10]),
                dig_P4: this._readSigned16((data[13] << 8) | data[12]),
                dig_P5: this._readSigned16((data[15] << 8) | data[14]),
                dig_P6: this._readSigned16((data[17] << 8) | data[16]),
                dig_P7: this._readSigned16((data[19] << 8) | data[18]),
                dig_P8: this._readSigned16((data[21] << 8) | data[20]),
                dig_P9: this._readSigned16((data[23] << 8) | data[22]),
                dig_H1: this._readSigned8(data[24]),
                dig_H2: this._readSigned16((data[26] << 8) | data[25]),
                dig_H3: this._readSigned8(data[27]),
                dig_H4: this._readSigned16((data[28] << 4) | (0x0f & data[29])),
                dig_H5: this._readSigned16((data[30] << 4) | ((data[29] >> 4) & 0x0f)),
                dig_H6: this._readSigned8(data[31]),
            };
            this._t_fine = 0;
        });
    }
    _readSigned16(value) {
        if (value >= 0x8000) {
            value = value - 0x10000;
        }
        return value;
    }
    _readSigned8(value) {
        if (value >= 0x80) {
            value = value - 0x100;
        }
        return value;
    }
    write(data) {
        this.obniz.i2c0.write(this.address, data);
    }
    getData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [0xf7]);
            return yield this.i2c.readWait(this.address, 8);
        });
    }
    getAllWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.getData();
            const press_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
            const temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);
            const hum_raw = (data[6] << 8) | data[7];
            const temperature = this.calibration_T(temp_raw) / 100.0;
            const pressure = this.calibration_P(press_raw) / 100.0;
            const humidity = this.calibration_H(hum_raw);
            return { temperature, humidity, pressure };
        });
    }
    calibration_T(adc_T) {
        let var1;
        let var2;
        let T;
        var1 =
            (((adc_T >> 3) - (this._calibrated.dig_T1 << 1)) *
                this._calibrated.dig_T2) >>
                11;
        var2 =
            (((((adc_T >> 4) - this._calibrated.dig_T1) *
                ((adc_T >> 4) - this._calibrated.dig_T1)) >>
                12) *
                this._calibrated.dig_T3) >>
                14;
        this._t_fine = var1 + var2;
        T = (this._t_fine * 5 + 128) >> 8;
        return T;
    }
    calibration_P(adc_P) {
        let pvar1 = this._t_fine / 2 - 64000;
        let pvar2 = (pvar1 * pvar1 * this._calibrated.dig_P6) / 32768;
        pvar2 = pvar2 + pvar1 * this._calibrated.dig_P5 * 2;
        pvar2 = pvar2 / 4 + this._calibrated.dig_P4 * 65536;
        pvar1 =
            ((this._calibrated.dig_P3 * pvar1 * pvar1) / 524288 +
                this._calibrated.dig_P2 * pvar1) /
                524288;
        pvar1 = (1 + pvar1 / 32768) * this._calibrated.dig_P1;
        if (pvar1 !== 0) {
            let p = 1048576 - adc_P;
            p = ((p - pvar2 / 4096) * 6250) / pvar1;
            pvar1 = (this._calibrated.dig_P9 * p * p) / 2147483648;
            pvar2 = (p * this._calibrated.dig_P8) / 32768;
            p = p + (pvar1 + pvar2 + this._calibrated.dig_P7) / 16;
            return p;
        }
        return 0;
    }
    calibration_H(adc_H) {
        let h = this._t_fine - 76800;
        h =
            (adc_H -
                (this._calibrated.dig_H4 * 64 +
                    (this._calibrated.dig_H5 / 16384) * h)) *
                ((this._calibrated.dig_H2 / 65536) *
                    (1 +
                        (this._calibrated.dig_H6 / 67108864) *
                            h *
                            (1 + (this._calibrated.dig_H3 / 67108864) * h)));
        h = h * (1 - (this._calibrated.dig_H1 * h) / 524288);
        return h;
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).temperature;
        });
    }
    getHumdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).humidity;
        });
    }
    getPressureWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).pressure;
        });
    }
    getAltitudeWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const pressure = yield this.getPressureWait();
            return this.calcAltitude(pressure);
        });
    }
    calcAltitude(pressure, seaLevel = 1013.25) {
        return ((1.0 - Math.pow(pressure / seaLevel, 1 / 5.2553)) * 145366.45 * 0.3048);
    }
}
exports.default = BME280;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/D6T44L/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class D6T44L {
    constructor() {
        this.requiredKeys = [];
        this.keys = ["vcc", "gnd", "sda", "scl", "clock"];
        this.address = 0x0a;
        this.ioKeys = ["vcc", "gnd", "sda", "scl"];
        this.commands = {};
        this.commands.read_data = [0x4c];
    }
    static info() {
        return {
            name: "D6T44L",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.clock = this.params.clock || 100 * 1000; // for i2c
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.pull = this.params.pull || null; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        this.obniz.wait(50);
    }
    getOnePixWait(pixcel) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.getAllPixWait();
            return data[pixcel];
        });
    }
    getAllPixWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [0x4c]);
            // await obniz.wait(160);
            const raw = yield this.i2c.readWait(this.address, 35);
            const data = [];
            for (let i = 0; i < 16; i++) {
                data[i] = parseFloat(((raw[i * 2 + 2] + (raw[i * 2 + 3] << 8)) * 0.1).toFixed(1));
            }
            return data;
        });
    }
}
exports.default = D6T44L;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvRDZUNDRML2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTSxNQUFNO0lBaUJWO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBdkJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7SUFDSixDQUFDO0lBcUJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVO1FBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLFVBQVU7UUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsVUFBVTtRQUN2RCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVZLGFBQWEsQ0FBQyxNQUFXOztZQUNwQyxNQUFNLElBQUksR0FBUSxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM3QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixDQUFDO0tBQUE7SUFFWSxhQUFhOztZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNyQyx5QkFBeUI7WUFDekIsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRTNELE1BQU0sSUFBSSxHQUFRLEVBQUUsQ0FBQztZQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUNsQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDNUQsQ0FBQzthQUNIO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvVGVtcGVyYXR1cmVTZW5zb3IvaTJjL0Q2VDQ0TC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEQ2VDQ0TCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkQ2VDQ0TFwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBpb0tleXM6IGFueTtcbiAgcHVibGljIGNvbW1hbmRzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuICAgIHRoaXMua2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcInNkYVwiLCBcInNjbFwiLCBcImNsb2NrXCJdO1xuICAgIHRoaXMuYWRkcmVzcyA9IDB4MGE7XG5cbiAgICB0aGlzLmlvS2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcInNkYVwiLCBcInNjbFwiXTtcbiAgICB0aGlzLmNvbW1hbmRzID0ge307XG4gICAgdGhpcy5jb21tYW5kcy5yZWFkX2RhdGEgPSBbMHg0Y107XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcblxuICAgIHRoaXMucGFyYW1zLmNsb2NrID0gdGhpcy5wYXJhbXMuY2xvY2sgfHwgMTAwICogMTAwMDsgLy8gZm9yIGkyY1xuICAgIHRoaXMucGFyYW1zLm1vZGUgPSB0aGlzLnBhcmFtcy5tb2RlIHx8IFwibWFzdGVyXCI7IC8vIGZvciBpMmNcbiAgICB0aGlzLnBhcmFtcy5wdWxsID0gdGhpcy5wYXJhbXMucHVsbCB8fCBudWxsOyAvLyBmb3IgaTJjXG4gICAgdGhpcy5pMmMgPSBvYm5pei5nZXRJMkNXaXRoQ29uZmlnKHRoaXMucGFyYW1zKTtcbiAgICB0aGlzLm9ibml6LndhaXQoNTApO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE9uZVBpeFdhaXQocGl4Y2VsOiBhbnkpIHtcbiAgICBjb25zdCBkYXRhOiBhbnkgPSBhd2FpdCB0aGlzLmdldEFsbFBpeFdhaXQoKTtcbiAgICByZXR1cm4gZGF0YVtwaXhjZWxdO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFsbFBpeFdhaXQoKSB7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbMHg0Y10pO1xuICAgIC8vIGF3YWl0IG9ibml6LndhaXQoMTYwKTtcbiAgICBjb25zdCByYXc6IGFueSA9IGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgMzUpO1xuXG4gICAgY29uc3QgZGF0YTogYW55ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBwYXJzZUZsb2F0KFxuICAgICAgICAoKHJhd1tpICogMiArIDJdICsgKHJhd1tpICogMiArIDNdIDw8IDgpKSAqIDAuMSkudG9GaXhlZCgxKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRDZUNDRMO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/DHT12/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const i2cParts = __webpack_require__("./dist/src/parts/i2cParts.js");
class DHT12 extends i2cParts {
    static info() {
        return {
            name: "DHT12",
        };
    }
    i2cInfo() {
        return {
            address: 0x5c,
            clock: 100000,
            voltage: "3v",
        };
    }
    getAllDataWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.readWait(0x00, 5);
            const humidity = data[0] + data[1] * 0.1;
            let temperature = data[2] + (data[3] & 0x7f) * 0.1;
            if (data[3] & 0x80) {
                temperature *= -1;
            }
            const checksum = data[0] + data[1] + data[2] + data[3];
            if (checksum !== data[4]) {
                return null;
            }
            return {
                humidity,
                temperature,
            };
        });
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).temperature;
        });
    }
    getHumdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllDataWait()).humidity;
        });
    }
}
exports.default = DHT12;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvREhUMTIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLFFBQVEsR0FBUSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUVuRCxNQUFNLEtBQU0sU0FBUSxRQUFRO0lBRW5CLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBSU0sT0FBTztRQUNaLE9BQU87WUFDTCxPQUFPLEVBQUUsSUFBSTtZQUNiLEtBQUssRUFBRSxNQUFNO1lBQ2IsT0FBTyxFQUFFLElBQUk7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVZLGNBQWM7O1lBQ3pCLE1BQU0sSUFBSSxHQUFRLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDOUMsSUFBSSxXQUFXLEdBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN4RCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUU7Z0JBQ2xCLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNuQjtZQUVELE1BQU0sUUFBUSxHQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCxPQUFPO2dCQUNMLFFBQVE7Z0JBQ1IsV0FBVzthQUNaLENBQUM7UUFDSixDQUFDO0tBQUE7SUFFWSxXQUFXOztZQUN0QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFVLENBQUEsQ0FBQyxXQUFXLENBQUM7UUFDMUQsQ0FBQztLQUFBO0lBRVksV0FBVzs7WUFDdEIsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBVyxDQUFBLENBQUMsUUFBUSxDQUFDO1FBQ3hELENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsS0FBSyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvREhUMTIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpMmNQYXJ0czogYW55ID0gcmVxdWlyZShcIi4uLy4uLy4uL2kyY1BhcnRzXCIpO1xuXG5jbGFzcyBESFQxMiBleHRlbmRzIGkyY1BhcnRzIHtcblxuICBwdWJsaWMgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiREhUMTJcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHJlYWRXYWl0OiBhbnk7XG5cbiAgcHVibGljIGkyY0luZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZHJlc3M6IDB4NWMsXG4gICAgICBjbG9jazogMTAwMDAwLFxuICAgICAgdm9sdGFnZTogXCIzdlwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0QWxsRGF0YVdhaXQoKSB7XG4gICAgY29uc3QgZGF0YTogYW55ID0gYXdhaXQgdGhpcy5yZWFkV2FpdCgweDAwLCA1KTtcbiAgICBjb25zdCBodW1pZGl0eTogYW55ID0gZGF0YVswXSArIGRhdGFbMV0gKiAwLjE7XG4gICAgbGV0IHRlbXBlcmF0dXJlOiBhbnkgPSBkYXRhWzJdICsgKGRhdGFbM10gJiAweDdmKSAqIDAuMTtcbiAgICBpZiAoZGF0YVszXSAmIDB4ODApIHtcbiAgICAgIHRlbXBlcmF0dXJlICo9IC0xO1xuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrc3VtOiBhbnkgPSBkYXRhWzBdICsgZGF0YVsxXSArIGRhdGFbMl0gKyBkYXRhWzNdO1xuICAgIGlmIChjaGVja3N1bSAhPT0gZGF0YVs0XSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGh1bWlkaXR5LFxuICAgICAgdGVtcGVyYXR1cmUsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUZW1wV2FpdCgpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0QWxsRGF0YVdhaXQoKSBhcyBhbnkpLnRlbXBlcmF0dXJlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEh1bWRXYWl0KCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRBbGxEYXRhV2FpdCgpIGFzIGFueSApLmh1bWlkaXR5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERIVDEyO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/S-5851A/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// sensor response not found
class S5851A {
    constructor() {
        this.requiredKeys = ["vcc", "gnd", "adr0", "adr1", "adr_select"];
        this.keys = ["sda", "scl", "adr0", "adr1", "adr_select", "i2c"];
    }
    static info() {
        return {
            name: "S5851A",
        };
    }
    wired(obniz) {
        // params: pwr, gnd, sda, scl, adr0, adr1, adr_select
        this.io_adr0 = obniz.getIO(this.params.adr0);
        this.io_adr1 = obniz.getIO(this.params.adr1);
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        switch (this.params.adr_select) {
            case 8:
                this.io_adr0.output(false);
                this.io_adr1.output(false);
                this.address = 0x48;
                break;
            case 9:
                this.io_adr0.pull(null);
                this.io_adr1.output(false);
                this.address = 0x49;
                break;
            case "A":
                this.io_adr0.output(true);
                this.io_adr1.output(false);
                this.address = 0x4a;
                break;
            case "B":
                this.io_adr0.output(false);
                this.io_adr1.output(true);
                this.address = 0x4b;
                break;
            case "C":
                this.io_adr0.pull(null);
                this.io_adr1.output(true);
                this.address = 0x4c;
                break;
            case "D":
                this.io_adr0.output(true);
                this.io_adr1.output(true);
                this.address = 0x4d;
                break;
            case "E":
                this.io_adr0.output(false);
                this.io_adr1.pull(null);
                this.address = 0x4e;
                break;
            case "F":
                this.io_adr0.output(true);
                this.io_adr1.pull(null);
                this.address = 0x4f;
                break;
            default:
                this.io_adr0.output(false);
                this.io_adr1.output(false);
                this.address = 0x48;
                break;
        }
        console.log("i2c address=" + this.address);
        this.params.clock = this.params.clock || 400 * 1000; // for i2c
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.pull = this.params.pull || "5v"; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        // obniz.i2c0.write(address, [0x20, 0x24]);
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log("gettempwait");
            // obniz.i2c0.write(address, [0x20, 0x24]);
            // obniz.i2c0.write(address, [0xE0, 0x00]);
            const ret = yield this.i2c0.readWait(this.address, 2);
            // console.log('ret:' + ret);
            const tempBin = ret[0].toString(2) + ("00000000" + ret[1].toString(2)).slice(-8);
            const temperature = -45 + 175 * (parseInt(tempBin, 2) / (65536 - 1));
            return temperature;
        });
    }
    getHumdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [0x20, 0x24]);
            this.i2c.write(this.address, [0xe0, 0x00]);
            const ret = yield this.i2c.readWait(this.address, 4);
            const humdBin = ret[2].toString(2) + ("00000000" + ret[3].toString(2)).slice(-8);
            const humidity = 100 * (parseInt(humdBin, 2) / (65536 - 1));
            return humidity;
        });
    }
}
exports.default = S5851A;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvUy01ODUxQS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLDRCQUE0QjtBQUM1QixNQUFNLE1BQU07SUFrQlY7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFuQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFpQk0sS0FBSyxDQUFDLEtBQVU7UUFDckIscURBQXFEO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTdELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDOUIsS0FBSyxDQUFDO2dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU07WUFDUixLQUFLLENBQUM7Z0JBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTTtZQUNSLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixNQUFNO1lBQ1IsS0FBSyxHQUFHO2dCQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU07WUFDUixLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTTtZQUNSLEtBQUssR0FBRztnQkFDTixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixNQUFNO1lBQ1IsS0FBSyxHQUFHO2dCQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU07WUFDUixLQUFLLEdBQUc7Z0JBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTTtZQUNSO2dCQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU07U0FDVDtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVTtRQUMvRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBQyxVQUFVO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLFVBQVU7UUFDdkQsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLDJDQUEyQztJQUM3QyxDQUFDO0lBRVksV0FBVzs7WUFDdEIsOEJBQThCO1lBQzlCLDJDQUEyQztZQUMzQywyQ0FBMkM7WUFDM0MsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzNELDZCQUE2QjtZQUM3QixNQUFNLE9BQU8sR0FDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRSxNQUFNLFdBQVcsR0FBUSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUUsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQztLQUFBO0lBRVksV0FBVzs7WUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLEdBQUcsR0FBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsTUFBTSxPQUFPLEdBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkUsTUFBTSxRQUFRLEdBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9pMmMvUy01ODUxQS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNlbnNvciByZXNwb25zZSBub3QgZm91bmRcbmNsYXNzIFM1ODUxQSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIlM1ODUxQVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyBpb19hZHIwOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGlvX2FkcjE6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcbiAgcHVibGljIGkyYzA6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInZjY1wiLCBcImduZFwiLCBcImFkcjBcIiwgXCJhZHIxXCIsIFwiYWRyX3NlbGVjdFwiXTtcbiAgICB0aGlzLmtleXMgPSBbXCJzZGFcIiwgXCJzY2xcIiwgXCJhZHIwXCIsIFwiYWRyMVwiLCBcImFkcl9zZWxlY3RcIiwgXCJpMmNcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIC8vIHBhcmFtczogcHdyLCBnbmQsIHNkYSwgc2NsLCBhZHIwLCBhZHIxLCBhZHJfc2VsZWN0XG4gICAgdGhpcy5pb19hZHIwID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuYWRyMCk7XG4gICAgdGhpcy5pb19hZHIxID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuYWRyMSk7XG5cbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcblxuICAgIHN3aXRjaCAodGhpcy5wYXJhbXMuYWRyX3NlbGVjdCkge1xuICAgICAgY2FzZSA4OlxuICAgICAgICB0aGlzLmlvX2FkcjAub3V0cHV0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLm91dHB1dChmYWxzZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NDg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLmlvX2FkcjAucHVsbChudWxsKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLm91dHB1dChmYWxzZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NDk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFcIjpcbiAgICAgICAgdGhpcy5pb19hZHIwLm91dHB1dCh0cnVlKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLm91dHB1dChmYWxzZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkJcIjpcbiAgICAgICAgdGhpcy5pb19hZHIwLm91dHB1dChmYWxzZSk7XG4gICAgICAgIHRoaXMuaW9fYWRyMS5vdXRwdXQodHJ1ZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkNcIjpcbiAgICAgICAgdGhpcy5pb19hZHIwLnB1bGwobnVsbCk7XG4gICAgICAgIHRoaXMuaW9fYWRyMS5vdXRwdXQodHJ1ZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NGM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkRcIjpcbiAgICAgICAgdGhpcy5pb19hZHIwLm91dHB1dCh0cnVlKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLm91dHB1dCh0cnVlKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gMHg0ZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgICB0aGlzLmlvX2FkcjAub3V0cHV0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLnB1bGwobnVsbCk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkZcIjpcbiAgICAgICAgdGhpcy5pb19hZHIwLm91dHB1dCh0cnVlKTtcbiAgICAgICAgdGhpcy5pb19hZHIxLnB1bGwobnVsbCk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IDB4NGY7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5pb19hZHIwLm91dHB1dChmYWxzZSk7XG4gICAgICAgIHRoaXMuaW9fYWRyMS5vdXRwdXQoZmFsc2UpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSAweDQ4O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJpMmMgYWRkcmVzcz1cIiArIHRoaXMuYWRkcmVzcyk7XG5cbiAgICB0aGlzLnBhcmFtcy5jbG9jayA9IHRoaXMucGFyYW1zLmNsb2NrIHx8IDQwMCAqIDEwMDA7IC8vIGZvciBpMmNcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gdGhpcy5wYXJhbXMubW9kZSB8fCBcIm1hc3RlclwiOyAvLyBmb3IgaTJjXG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IHRoaXMucGFyYW1zLnB1bGwgfHwgXCI1dlwiOyAvLyBmb3IgaTJjXG4gICAgdGhpcy5pMmMgPSBvYm5pei5nZXRJMkNXaXRoQ29uZmlnKHRoaXMucGFyYW1zKTtcbiAgICAvLyBvYm5pei5pMmMwLndyaXRlKGFkZHJlc3MsIFsweDIwLCAweDI0XSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VGVtcFdhaXQoKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJnZXR0ZW1wd2FpdFwiKTtcbiAgICAvLyBvYm5pei5pMmMwLndyaXRlKGFkZHJlc3MsIFsweDIwLCAweDI0XSk7XG4gICAgLy8gb2JuaXouaTJjMC53cml0ZShhZGRyZXNzLCBbMHhFMCwgMHgwMF0pO1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5pMmMwLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgMik7XG4gICAgLy8gY29uc29sZS5sb2coJ3JldDonICsgcmV0KTtcbiAgICBjb25zdCB0ZW1wQmluOiBhbnkgPVxuICAgICAgcmV0WzBdLnRvU3RyaW5nKDIpICsgKFwiMDAwMDAwMDBcIiArIHJldFsxXS50b1N0cmluZygyKSkuc2xpY2UoLTgpO1xuICAgIGNvbnN0IHRlbXBlcmF0dXJlOiBhbnkgPSAtNDUgKyAxNzUgKiAocGFyc2VJbnQodGVtcEJpbiwgMikgLyAoNjU1MzYgLSAxKSk7XG4gICAgcmV0dXJuIHRlbXBlcmF0dXJlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEh1bWRXYWl0KCkge1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgWzB4MjAsIDB4MjRdKTtcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFsweGUwLCAweDAwXSk7XG4gICAgY29uc3QgcmV0OiBhbnkgPSBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLmFkZHJlc3MsIDQpO1xuICAgIGNvbnN0IGh1bWRCaW46IGFueSA9XG4gICAgICByZXRbMl0udG9TdHJpbmcoMikgKyAoXCIwMDAwMDAwMFwiICsgcmV0WzNdLnRvU3RyaW5nKDIpKS5zbGljZSgtOCk7XG4gICAgY29uc3QgaHVtaWRpdHk6IGFueSA9IDEwMCAqIChwYXJzZUludChodW1kQmluLCAyKSAvICg2NTUzNiAtIDEpKTtcbiAgICByZXR1cm4gaHVtaWRpdHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUzU4NTFBO1xuIl19


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/i2c/SHT31/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class SHT31 {
    constructor() {
        this.requiredKeys = ["adr", "addressmode"];
        this.keys = [
            "vcc",
            "sda",
            "scl",
            "gnd",
            "adr",
            "addressmode",
            "i2c",
            "pull",
        ];
        this.ioKeys = ["vcc", "sda", "scl", "gnd", "adr"];
        this.commands = {};
        this.commands.softReset = [0x30, 0xa2];
        this.commands.highRepeatStreach = [0x2c, 0x06];
        this.commands.middleRepeatStreach = [0x2c, 0x0d];
        this.commands.lowRepeatStreach = [0x2c, 0x10];
        this.commands.highRepeat = [0x24, 0x00];
        this.commands.mediumRepeat = [0x24, 0x0b];
        this.commands.lowRepeat = [0x24, 0x16];
        this.waitTime = {};
        this.waitTime.wakeup = 1;
        this.waitTime.softReset = 1;
        this.waitTime.lowRepeat = 4;
        this.waitTime.mediumRepeat = 6;
        this.waitTime.highRepeat = 15;
        // not tested
        this.commands.readStatus = [0xf3, 0x2d];
    }
    static info() {
        return {
            name: "SHT31",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.io_adr = obniz.getIO(this.params.adr);
        if (this.params.addressmode === 4) {
            this.io_adr.output(false);
            this.address = 0x44;
        }
        else if (this.params.addressmode === 5) {
            this.io_adr.pull(null);
            this.address = 0x45;
        }
        this.params.clock = this.params.clock || 100 * 1000; // for i2c
        this.params.mode = this.params.mode || "master"; // for i2c
        this.params.pull = this.params.pull || "5v"; // for i2c
        this.i2c = obniz.getI2CWithConfig(this.params);
        obniz.i2c0.write(this.address, this.commands.softReset);
    }
    getData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, this.commands.highRepeat);
            yield this.obniz.wait(this.waitTime.highRepeat);
            return yield this.i2c.readWait(this.address, 6);
        });
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).temperature;
        });
    }
    getHumdWait() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getAllWait()).humidity;
        });
    }
    getAllWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const ret = yield this.getData();
            const tempBin = ret[0] * 256 + ret[1];
            const temperature = -45 + 175 * (tempBin / (65536 - 1));
            const humdBin = ret[3] * 256 + ret[4];
            const humidity = 100 * (humdBin / (65536 - 1));
            return { temperature, humidity };
        });
    }
}
exports.default = SHT31;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/TemperatureSensor/spi/ADT7310/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ADT7310 {
    constructor() {
        this.keys = ["vcc", "gnd", "frequency", "din", "dout", "clk", "spi"];
        this.requiredKeys = [];
    }
    static info() {
        return {
            name: "ADT7310",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.params.mode = this.params.mode || "master";
        this.params.frequency = this.params.frequency || 500000;
        this.params.mosi = this.params.din;
        this.params.miso = this.params.dout;
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    getTempWait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.spi.writeWait([0x54]); // send before each commands for stable
            yield this.obniz.wait(200);
            const ret = yield this.spi.writeWait([0x00, 0x00]);
            let tempBin = ret[0] << 8;
            tempBin |= ret[1];
            tempBin = tempBin >> 3;
            if (tempBin & 0x1000) {
                tempBin = tempBin - 8192;
            }
            return tempBin / 16;
        });
    }
}
exports.default = ADT7310;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9UZW1wZXJhdHVyZVNlbnNvci9zcGkvQURUNzMxMC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sT0FBTztJQWNYO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFmTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFhTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRVksV0FBVzs7WUFDdEIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7WUFDekUsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixNQUFNLEdBQUcsR0FBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxPQUFPLEdBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixPQUFPLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDO1lBRXZCLElBQUksT0FBTyxHQUFHLE1BQU0sRUFBRTtnQkFDcEIsT0FBTyxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDMUI7WUFFRCxPQUFPLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDdEIsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxPQUFPLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1RlbXBlcmF0dXJlU2Vuc29yL3NwaS9BRFQ3MzEwL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQURUNzMxMCB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkFEVDczMTBcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgc3BpOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwiZnJlcXVlbmN5XCIsIFwiZGluXCIsIFwiZG91dFwiLCBcImNsa1wiLCBcInNwaVwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gdGhpcy5wYXJhbXMubW9kZSB8fCBcIm1hc3RlclwiO1xuICAgIHRoaXMucGFyYW1zLmZyZXF1ZW5jeSA9IHRoaXMucGFyYW1zLmZyZXF1ZW5jeSB8fCA1MDAwMDA7XG4gICAgdGhpcy5wYXJhbXMubW9zaSA9IHRoaXMucGFyYW1zLmRpbjtcbiAgICB0aGlzLnBhcmFtcy5taXNvID0gdGhpcy5wYXJhbXMuZG91dDtcbiAgICB0aGlzLnNwaSA9IHRoaXMub2JuaXouZ2V0U3BpV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VGVtcFdhaXQoKSB7XG4gICAgYXdhaXQgdGhpcy5zcGkud3JpdGVXYWl0KFsweDU0XSk7IC8vIHNlbmQgYmVmb3JlIGVhY2ggY29tbWFuZHMgZm9yIHN0YWJsZVxuICAgIGF3YWl0IHRoaXMub2JuaXoud2FpdCgyMDApO1xuICAgIGNvbnN0IHJldDogYW55ID0gYXdhaXQgdGhpcy5zcGkud3JpdGVXYWl0KFsweDAwLCAweDAwXSk7XG4gICAgbGV0IHRlbXBCaW46IGFueSA9IHJldFswXSA8PCA4O1xuICAgIHRlbXBCaW4gfD0gcmV0WzFdO1xuICAgIHRlbXBCaW4gPSB0ZW1wQmluID4+IDM7XG5cbiAgICBpZiAodGVtcEJpbiAmIDB4MTAwMCkge1xuICAgICAgdGVtcEJpbiA9IHRlbXBCaW4gLSA4MTkyO1xuICAgIH1cblxuICAgIHJldHVybiB0ZW1wQmluIC8gMTY7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQURUNzMxMDtcbiJdfQ==


/***/ }),

/***/ "./dist/src/parts/Wireless/MFRC522/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* ver 1.0
 * 2019/10/14
 * Created by Zjalic
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*jshint esversion: 8 */
const OK = true;
const ERROR = false;
class MFRC522 {
    constructor() {
        // PCD commands. Described in chapter 10 of the datasheet.
        // PCD(Proximity Coupling Device): NXP MFRC522 Contactless Reader IC.
        this.PCD_Idle = 0x00; // no action, cancels current command execution.
        this.PCD_Mem = 0x01; // stores 25 bytes into the internal buffer.
        this.PCD_GenerateRandomID = 0x02; // generates a 10-byte random ID number.
        this.PCD_CalcCRC = 0x03; // activates the CRC coprocessor or performs a self-test.
        this.PCD_Transmit = 0x04; // transmits data from the FIFO buffer.
        this.PCD_NoCmdChange = 0x07; // no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit.
        this.PCD_Receive = 0x08; // activates the receiver circuits.
        this.PCD_Transceive = 0x0c; // transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission.
        // this.PCD_Reserved0Dh = 0x0D;
        this.PCD_MFAuthent = 0x0e; // performs the MIFARE standard authentication as a reader.
        this.PCD_SoftReset = 0x0f; // resets the MFRC522.
        // MFRC522 RxGain[2:0] masks, defines the receiver's signal voltage gain factor (on the PCD).
        // Described in 9.3.3.6 / table 98 of the datasheet at http://www.nxp.com/documents/data_sheet/MFRC522.pdf
        this.RxGain_18dB = 0x00 << 4; // 000b - 18 dB, minimum.
        this.RxGain_23dB = 0x01 << 4; // 001b - 23 dB.
        this.RxGain_18dB_2 = 0x02 << 4; // 010b - 18 dB, it seems 010b is a duplicate for 000b.
        this.RxGain_23dB_2 = 0x03 << 4; // 011b - 23 dB, it seems 011b is a duplicate for 001b.
        this.RxGain_33dB = 0x04 << 4; // 100b - 33 dB, average, and typical default.
        this.RxGain_38dB = 0x05 << 4; // 101b - 38 dB.
        this.RxGain_43dB = 0x06 << 4; // 110b - 43 dB.
        this.RxGain_48dB = 0x07 << 4; // 111b - 48 dB, maximum.
        this.RxGain_min = 0x00 << 4; // 000b - 18 dB, minimum, convenience for RxGain_18dB.
        this.RxGain_avg = 0x04 << 4; // 100b - 33 dB, average, convenience for RxGain_33dB.
        this.RxGain_max = 0x07 << 4; // 111b - 48 dB, maximum, convenience for RxGain_48dB.
        // The PICC commands used by the PCD to manage communication with several PICCs (ISO 14443-3, Type A, section 6.4).
        this.PICC_REQA = 0x26; // REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
        this.PICC_WUPA = 0x52; // Wake-UP command, Type A. Invites PICCs in state IDLE and HALT to go to READY(*) and prepare for anticollision or selection. 7 bit frame.
        this.PICC_CT = 0x88; // Cascade Tag. Not really a command, but used during anti collision.
        this.PICC_SEL_CL1 = 0x93; // Anti collision/Select, Cascade Level 1.
        this.PICC_SEL_CL2 = 0x95; // Anti collision/Select, Cascade Level 2.
        this.PICC_SEL_CL3 = 0x97; // Anti collision/Select, Cascade Level 3.
        this.PICC_HLTA = 0x50; // HaLT command, Type A. Instructs an ACTIVE PICC to go to state HALT.
        this.PICC_RATS = 0xe0; // Request command for Answer To Reset.
        // The commands used for MIFARE Classic (from http://www.mouser.com/ds/2/302/MF1S503x-89574.pdf, Section 9)
        // Use PCD_MFAuthent to authenticate access to a sector, then use these commands to read/write/modify the blocks on the sector.
        // The read/write commands can also be used for MIFARE Ultralight.
        this.PICC_AUTH_KEYA = 0x60; // Perform authentication with Key A.
        this.PICC_AUTH_KEYB = 0x61; // Perform authentication with Key B.
        this.PICC_READ = 0x30; // Reads one 16 byte block from the authenticated sector of the PICC. Also used for MIFARE Ultralight.
        this.PICC_WRITE = 0xa0; // Writes one 16 byte block to the authenticated sector of the PICC. Called "COMPATIBILITY WRITE" for MIFARE Ultralight.
        this.PICC_DECREMENT = 0xc0; // Decrements the contents of a block and stores the result in the internal data register.
        this.PICC_INCREMENT = 0xc1; // Increments the contents of a block and stores the result in the internal data register.
        this.PICC_RESTORE = 0xc2; // Reads the contents of a block into the internal data register.
        this.PICC_TRANSFER = 0xb0; // Writes the contents of the internal data register to a block.
        // The commands used for MIFARE Ultralight (from http://www.nxp.com/documents/data_sheet/MF0ICU1.pdf, Section 8.6)
        // The PICC_CMD_MF_READ and PICC_CMD_MF_WRITE can also be used for MIFARE Ultralight.
        this.PICC_UL_WRITE = 0xa2; // Writes one 4 byte page to the PICC.
        this.PICC_SElECTTAG = 0x93;
        // Page 0: Command and status
        // this.Reserved00h = 0x00;
        this.CommandReg = 0x01;
        this.ComlEnReg = 0x02;
        this.DivlEnReg = 0x03;
        this.ComIrqReg = 0x04;
        this.DivIrqReg = 0x05;
        this.ErrorReg = 0x06;
        this.Status1Reg = 0x07;
        this.Status2Reg = 0x08;
        this.FIFODataReg = 0x09;
        this.FIFOLevelReg = 0x0a;
        this.WaterLevelReg = 0x0b;
        this.ControlReg = 0x0c;
        this.BitFramingReg = 0x0d;
        this.CollReg = 0x0e;
        // this.Reserved0Fh = 0x0F;
        // Page 1: Command
        // this.Reserved10h = 0x10;
        this.ModeReg = 0x11;
        this.TxModeReg = 0x12;
        this.RxModeReg = 0x13;
        this.TxControlReg = 0x14;
        this.TxASKReg = 0x15;
        this.TxSelReg = 0x16;
        this.RxSelReg = 0x17;
        this.RxThresholdReg = 0x18;
        this.DemodReg = 0x19;
        this.Reserved1Ah = 0x1a;
        this.Reserved1Bh = 0x1b;
        this.MfTxReg = 0x1c;
        this.MfRxReg = 0x1d;
        this.Reserved1Eh = 0x1e;
        this.SerialSpeedReg = 0x1f;
        // Page 2: Configuration
        // this.Reserved20h = 0x20;
        this.CRCResultRegMSB = 0x21;
        this.CRCResultRegLSB = 0x22;
        // this.Reserved23h = 0x23;
        this.ModWidthReg = 0x24;
        // this.Reserved25h = 0x25;
        this.RFCfgReg = 0x26;
        this.GsNReg = 0x27;
        this.CWGsPReg = 0x28;
        this.ModGsPReg = 0x29;
        this.TModeReg = 0x2a;
        this.TPrescalerReg = 0x2b;
        this.TReloadRegHi = 0x2c;
        this.TReloadRegLo = 0x2d;
        this.TCounterValRegHi = 0x2e;
        this.TCounterValRegLo = 0x2f;
        // Page 3: Test register
        // this.Reserved30h = 0x30;
        this.TestSel1Reg = 0x31;
        this.TestSel2Reg = 0x32;
        this.TestPinEnReg = 0x33;
        this.TestPinValueReg = 0x34;
        this.TestBusReg = 0x35;
        this.AutoTestReg = 0x36;
        this.VersionReg = 0x37;
        this.AnalogTestReg = 0x38;
        this.TestDAC1Reg = 0x39;
        this.TestDAC2Reg = 0x3a;
        this.TestADCReg = 0x3b;
        // this.Reserved3Ch = 0x3C;
        // this.Reserved3Dh = 0x3D;
        // this.Reserved3Eh = 0x3E;
        // this.Reserved3Fh = 0x3F;
        // required pin of obniz
        this.keys = [
            "cs",
            "clk",
            "mosi",
            "miso",
            "rst",
            "vcc",
            "gnd",
            "spi",
            "spi_frequency",
        ];
        this.required = ["cs", "mosi", "miso", "rst"];
    }
    static info() {
        return {
            name: "MFRC522",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        // IO pin settings
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.rst = obniz.getIO(this.params.rst);
        // SPI settings
        this.cs = obniz.getIO(this.params.cs);
        this.cs.output(true);
        this.params.mode = "master";
        this.params.drive = "3v";
        this.params.pull = "3v";
        this.params.frequency = this.params.spi_frequency || 5 * 1000 * 1000;
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // Initializes the MFRC522 chip
            // Hardware and Software reset
            this.rst.output(false);
            yield this.obniz.wait(50); // 8.8.2 says the oscillator start-up time is the start up time of the crystal + 37,74us: 50ms.
            this.rst.output(true);
            this.writeRegister(this.CommandReg, this.PCD_SoftReset);
            // Timer setup: When communicating with a PICC we need a timeout if something goes wrong.
            // f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
            this.writeRegister(this.TModeReg, 0x80); // TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
            this.writeRegister(this.TPrescalerReg, 0xa9); // TPreScaler = TModeReg[3..0]: TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.
            this.writeRegister(this.TReloadRegHi, 0x03);
            this.writeRegister(this.TReloadRegLo, 0xe8); // Reload timer with 0x3E8 = 1000, ie. 25ms before timeout
            this.writeRegister(this.TxASKReg, 0x40); // Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
            this.writeRegister(this.ModeReg, 0x3d); // Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (6.2.4)
            yield this.antennaOn(); // Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
        });
    }
    writeRegister(addr, val) {
        let data;
        if (val instanceof Array) {
            // If val is Array
            data = [(addr << 1) & 0x7e].concat(val);
        }
        else {
            data = [(addr << 1) & 0x7e, val];
        }
        this.cs.output(false);
        this.spi.write(data);
        this.cs.output(true);
    }
    readRegister(addr) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = [((addr << 1) & 0x7e) | 0x80, 0];
            this.cs.output(false);
            const response = yield this.spi.writeWait(data);
            this.cs.output(true);
            return response[1];
        });
    }
    readRegister_nByte(addr, n) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataArray = [];
            if (addr instanceof Array) {
                // Multiple addresses(If addr is Array)
                for (let i = 0; i < addr.length; i++) {
                    dataArray.push(((addr[i] << 1) & 0x7e) | 0x80);
                }
            }
            else {
                // Single address & read n times
                for (let i = 0; i < n; i++) {
                    dataArray.push(((addr << 1) & 0x7e) | 0x80);
                }
            }
            dataArray.push(0); // End reading
            this.cs.output(false);
            const values = yield this.spi.writeWait(dataArray);
            this.cs.output(true);
            values.shift();
            return values;
        });
    }
    setRegisterBitMask(reg, mask) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readRegister(reg);
            this.writeRegister(reg, response | mask);
        });
    }
    clearRegisterBitMask(reg, mask) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readRegister(reg);
            this.writeRegister(reg, response & ~mask);
        });
    }
    antennaOn() {
        return __awaiter(this, void 0, void 0, function* () {
            // Turns the antenna on by enabling pins TX1 and TX2
            const response = yield this.readRegister(this.TxControlReg);
            if ((response & 0x03) !== 0x03) {
                // If TX1 and TX2 down
                yield this.setRegisterBitMask(this.TxControlReg, response | 0x03);
            }
        });
    }
    antennaOff() {
        return __awaiter(this, void 0, void 0, function* () {
            // Turns the antenna off by disabling pins TX1 and TX2
            yield this.clearRegisterBitMask(this.TxControlReg, 0x03);
        });
    }
    // RC522 and ISO14443 card communication
    toCard(command, bitsToSend) {
        return __awaiter(this, void 0, void 0, function* () {
            let data = [];
            let bitSize = 0;
            let status = ERROR;
            let irqEn = 0x00;
            let waitIRq = 0x00;
            if (command === this.PCD_MFAuthent) {
                irqEn = 0x12;
                waitIRq = 0x10;
            }
            if (command === this.PCD_Transceive) {
                irqEn = 0x77;
                waitIRq = 0x30;
            }
            this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command
            this.writeRegister(this.ComlEnReg, irqEn | 0x80); // Interrupt request is enabled
            this.writeRegister(this.ComIrqReg, 0x7f); // Clear all seven interrupt request bits
            this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization
            this.writeRegister(this.FIFODataReg, bitsToSend); // Write sendData to the FIFO
            this.writeRegister(this.CommandReg, command); // Execute the command
            if (command === this.PCD_Transceive) {
                yield this.setRegisterBitMask(this.BitFramingReg, 0x80); // StartSend=1, transmission of data starts
            }
            let TryingTimes = 10;
            let n = 0;
            do {
                // Wait for the received data complete
                n = yield this.readRegister(this.ComIrqReg);
                TryingTimes--;
            } while (TryingTimes !== 0 && !(n & 0x01) && !(n & waitIRq)); // !(Timer interrupt - nothing received before timeout) & !(One of the interrupts that signal success has been set)
            // await this.clearRegisterBitMask(this.BitFramingReg, 0x80);	//Reset with resetAndInit()
            const response = yield this.readRegister_nByte([
                this.ErrorReg,
                this.FIFOLevelReg,
                this.ControlReg,
            ]);
            if (TryingTimes !== 0) {
                if ((response[0] & 0x1b) === 0x00) {
                    // BufferOvfl CollErr ParityErr ProtocolErr
                    status = n & irqEn & 0x01 ? ERROR : OK;
                    if (command === this.PCD_Transceive) {
                        n = response[1]; // Number of bytes in the FIFO
                        const lastBits = response[2] & 0x07; // RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
                        if (lastBits) {
                            bitSize = (n - 1) * 8 + lastBits;
                        }
                        else {
                            bitSize = n * 8;
                        }
                        if (n === 0) {
                            n = 1;
                        }
                        if (n > 16) {
                            n = 16;
                        } // Restrict until 16bytes
                        data = yield this.readRegister_nByte(this.FIFODataReg, n); // Get received data from FIFO buffer
                    }
                }
                else {
                    status = ERROR;
                }
            }
            return { status, data, bitSize };
        });
    }
    findCardWait() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            yield this.searchTagWait();
            const uid = yield this.getUidWait();
            const PICC_Type = yield this.identifyCardTypeWait(uid);
            return { uid, PICC_Type };
        });
    }
    searchTagWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.writeRegister(this.BitFramingReg, 0x07);
            const tagType = [this.PICC_REQA];
            const response = yield this.toCard(this.PCD_Transceive, tagType);
            if (response.bitSize !== 0x10) {
                throw new Error("card_search_ERROR");
            }
        });
    }
    getUidWait() {
        return __awaiter(this, void 0, void 0, function* () {
            this.writeRegister(this.BitFramingReg, 0x00);
            let uid = [this.PICC_SEL_CL1, 0x20];
            const response = yield this.toCard(this.PCD_Transceive, uid);
            if (!response.status) {
                throw new Error("uid_scan_ERROR");
            }
            const uidCheck = response.data[0] ^ response.data[1] ^ response.data[2] ^ response.data[3];
            if (uidCheck !== response.data[4]) {
                throw new Error("uid_check_ERROR");
            }
            uid = response.data;
            // (uid).pop();
            return uid;
        });
    }
    calculateCRCWait(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.writeRegister(this.CommandReg, this.PCD_Idle); // Stop any active command
            this.writeRegister(this.DivIrqReg, 0x04); // Clear the CRCIRq interrupt request bit
            this.writeRegister(this.FIFOLevelReg, 0x80); // FlushBuffer = 1, FIFO initialization
            this.writeRegister(this.FIFODataReg, data); // Write data to the FIFO
            this.writeRegister(this.CommandReg, this.PCD_CalcCRC); // Start the calculation
            let i = 0xff;
            let n;
            // Wait for the CRC calculation to complete
            do {
                n = yield this.readRegister(this.DivIrqReg);
                i--;
            } while (i !== 0 && !(n & 0x04)); // CRCIrq = 1 (Calculation done)
            // CRC calculation result
            return yield this.readRegister_nByte([
                this.CRCResultRegLSB,
                this.CRCResultRegMSB,
            ]);
        });
    }
    identifySoftwareWait() {
        return __awaiter(this, void 0, void 0, function* () {
            let version = yield this.readRegister(this.VersionReg);
            switch (version) {
                case 0x88:
                    version = "(clone)";
                    break;
                case 0x90:
                    version = "v0.0";
                    break;
                case 0x91:
                    version = "v1.0";
                    break;
                case 0x92:
                    version = "v2.0";
                    break;
                case 0x12:
                    version = "counterfeit chip";
                    break;
                default:
                    version = "(unknown)";
            }
            // When 0x00 or 0xFF is returned, communication probably failed
            if (version === 0x00 || version === 0xff) {
                throw new Error("software_version_ERROR");
            }
            return version;
        });
    }
    identifyCardTypeWait(uid) {
        return __awaiter(this, void 0, void 0, function* () {
            // Identify type of the scanned card
            let buffer = [this.PICC_SElECTTAG, 0x70].concat(uid);
            buffer = buffer.concat(yield this.calculateCRCWait(buffer));
            const response = yield this.toCard(this.PCD_Transceive, buffer);
            let PICC_Type;
            if (response.status && response.bitSize === 0x18) {
                PICC_Type = response.data[0];
            }
            switch (PICC_Type) {
                case 0x04:
                    PICC_Type = "SAK indicates UID is not complete.";
                    break; // UID not complete
                case 0x09:
                    PICC_Type = "MIFARE Mini, 320 bytes";
                    break;
                case 0x08:
                    PICC_Type = "MIFARE 1KB";
                    break;
                case 0x18:
                    PICC_Type = "MIFARE 4KB";
                    break;
                case 0x00:
                    PICC_Type = "MIFARE Ultralight or Ultralight C";
                    break;
                case 0x11:
                    PICC_Type = "MIFARE Plus";
                    break;
                case 0x01:
                    PICC_Type = "MIFARE TNP3XXX";
                    break;
                case 0x20:
                    PICC_Type = "PICC compliant with ISO/IEC 14443-4";
                    break;
                case 0x40:
                    PICC_Type = "PICC compliant with ISO/IEC 18092 (NFC)";
                    break;
                default:
                    throw new Error("PICC_type_ERROR");
            }
            return PICC_Type;
        });
    }
    readSectorDataWait(Sector, uid) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.authenticateSectorWait(Sector, uid);
            return yield this.getSectorDataWait(Sector);
        });
    }
    readBlockDataWait(Block, uid) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.authenticateBlockWait(Block, uid);
            return yield this.getBlockDataWait(Block);
        });
    }
    authenticateSectorWait(Sector, uid) {
        return __awaiter(this, void 0, void 0, function* () {
            /* Password authentication mode (A or B)
                 * PICC_AUTH_KEYA = Verify the A key are the first 6 bit of 4th Block of each sector
                 * PICC_AUTH_KEYB = Verify the B key are the last 6 bit of 4th Block of each sector
                 */
            const KEY_A = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
            // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
            const Block = Sector * 4;
            let buffer = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF
            uid = uid.slice(0, 4); // Append the first 4 bit of the UID
            buffer = buffer.concat(uid); // 12byte
            // Start authentication itself
            yield this.toCard(this.PCD_MFAuthent, buffer);
            if (!((yield this.readRegister(this.Status2Reg)) & 0x08)) {
                throw new Error("password_authentication_ERROR");
            }
        });
    }
    authenticateBlockWait(Block, uid) {
        return __awaiter(this, void 0, void 0, function* () {
            /* Password authentication mode (A or B)
                 * PICC_AUTH_KEYA = Verify the A key (the first 6 bit of 3th Block fo each Sector)
                 * PICC_AUTH_KEYB = Verify the B key (the last 6 bit of 3th Block fo each Sector)
                 */
            const KEY_A = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
            // const KEY_B = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
            let buffer = [this.PICC_AUTH_KEYA, Block].concat(KEY_A); // Append key = 6 bit of 0xFF
            uid = uid.slice(0, 4); // Append the first 4 bit of the UID
            buffer = buffer.concat(uid); // 12byte
            // Start authentication itself
            yield this.toCard(this.PCD_MFAuthent, buffer);
            if (!((yield this.readRegister(this.Status2Reg)) & 0x08)) {
                throw new Error("password_authentication_ERROR");
            }
        });
    }
    readAgainWait() {
        return __awaiter(this, void 0, void 0, function* () {
            // If you finish reading and want to read again, this can use instead of init()
            yield this.clearRegisterBitMask(this.Status2Reg, 0x08);
        });
    }
    getSectorDataWait(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = [];
            const blockData = [];
            for (let i = 0; i < 4; i++) {
                let request = [this.PICC_READ, address * 4 + i];
                request = request.concat(yield this.calculateCRCWait(request));
                response[i] = yield this.toCard(this.PCD_Transceive, request);
                if (!response[i].status) {
                    throw new Error("data_read_ERROR");
                }
                blockData[i] = response[i].data;
            }
            return blockData;
        });
    }
    getBlockDataWait(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let request = [this.PICC_READ, address];
            request = request.concat(yield this.calculateCRCWait(request));
            const response = yield this.toCard(this.PCD_Transceive, request);
            if (!response.status) {
                throw new Error("data_read_ERROR");
            }
            return response.data;
        });
    }
    appendCRCtoBufferAndSendToCardWait(buffer) {
        return __awaiter(this, void 0, void 0, function* () {
            buffer = buffer.concat(yield this.calculateCRCWait(buffer));
            const response = yield this.toCard(this.PCD_Transceive, buffer);
            if (!response.status ||
                response.bitSize !== 4 ||
                (response.data[0] & 0x0f) !== 0x0a) {
                response.status = ERROR;
            }
            return response;
        });
    }
    writeBlockDataWait(Block, sixteenBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Block === 0 || Block % 4 === 3) {
                throw new Error("deny_Write");
            }
            const buffer = [this.PICC_WRITE, Block];
            let response = yield this.appendCRCtoBufferAndSendToCardWait(buffer);
            if (response.status) {
                response = yield this.appendCRCtoBufferAndSendToCardWait(sixteenBytes);
            }
            else {
                throw new Error("data_write_ERROR");
            }
        });
    }
}
exports.default = MFRC522;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9XaXJlbGVzcy9NRlJDNTIyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7O0FBRUgsd0JBQXdCO0FBRXhCLE1BQU0sRUFBRSxHQUFRLElBQUksQ0FBQztBQUNyQixNQUFNLEtBQUssR0FBUSxLQUFLLENBQUM7QUFFekIsTUFBTSxPQUFPO0lBNEdYO1FBQ0UsMERBQTBEO1FBQzFELHFFQUFxRTtRQUNyRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLGdEQUFnRDtRQUN0RSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLDRDQUE0QztRQUNqRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLENBQUMsd0NBQXdDO1FBQzFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMseURBQXlEO1FBQ2xGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsdUNBQXVDO1FBQ2pFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLENBQUMsdUlBQXVJO1FBQ3BLLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsbUNBQW1DO1FBQzVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMsMEdBQTBHO1FBQ3RJLCtCQUErQjtRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDLDJEQUEyRDtRQUN0RixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDLHNCQUFzQjtRQUVqRCw2RkFBNkY7UUFDN0YsMEdBQTBHO1FBQzFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtRQUN2RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7UUFDOUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsdURBQXVEO1FBQ3ZGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLHVEQUF1RDtRQUN2RixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7UUFDNUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCO1FBQzlDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7UUFDdkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsc0RBQXNEO1FBQ25GLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLHNEQUFzRDtRQUNuRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxzREFBc0Q7UUFFbkYsbUhBQW1IO1FBQ25ILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsK0hBQStIO1FBQ3RKLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsMklBQTJJO1FBQ2xLLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMscUVBQXFFO1FBQzFGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsMENBQTBDO1FBQ3BFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsMENBQTBDO1FBQ3BFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsMENBQTBDO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsc0VBQXNFO1FBQzdGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsdUNBQXVDO1FBQzlELDJHQUEyRztRQUMzRywrSEFBK0g7UUFDL0gsa0VBQWtFO1FBQ2xFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMscUNBQXFDO1FBQ2pFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMscUNBQXFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsc0dBQXNHO1FBQzdILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsd0hBQXdIO1FBQ2hKLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMsMEZBQTBGO1FBQ3RILElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMsMEZBQTBGO1FBQ3RILElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsaUVBQWlFO1FBQzNGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUMsZ0VBQWdFO1FBQzNGLGtIQUFrSDtRQUNsSCxxRkFBcUY7UUFDckYsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQyxzQ0FBc0M7UUFFakUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFFM0IsNkJBQTZCO1FBQzdCLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQiwyQkFBMkI7UUFFM0Isa0JBQWtCO1FBQ2xCLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUUzQix3QkFBd0I7UUFDeEIsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QiwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRTdCLHdCQUF3QjtRQUN4QiwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsMkJBQTJCO1FBQzNCLDJCQUEyQjtRQUMzQiwyQkFBMkI7UUFDM0IsMkJBQTJCO1FBRTNCLHdCQUF3QjtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1YsSUFBSTtZQUNKLEtBQUs7WUFDTCxNQUFNO1lBQ04sTUFBTTtZQUNOLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxlQUFlO1NBQ2hCLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQXRQTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFvUE0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLGVBQWU7UUFDZixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFWSxJQUFJOztZQUNmLCtCQUErQjtZQUMvQiw4QkFBOEI7WUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLCtGQUErRjtZQUMxSCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXhELHlGQUF5RjtZQUN6RiwyRkFBMkY7WUFDM0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsOEdBQThHO1lBQ3ZKLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLDBHQUEwRztZQUN4SixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsMERBQTBEO1lBQ3ZHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLDJGQUEyRjtZQUNwSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyx1R0FBdUc7WUFDL0ksTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQywrRUFBK0U7UUFDekcsQ0FBQztLQUFBO0lBRU0sYUFBYSxDQUFDLElBQVMsRUFBRSxHQUFRO1FBQ3RDLElBQUksSUFBUyxDQUFDO1FBQ2QsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFO1lBQ3hCLGtCQUFrQjtZQUNsQixJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNMLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNsQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFWSxZQUFZLENBQUMsSUFBUzs7WUFDakMsTUFBTSxJQUFJLEdBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuRCxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7S0FBQTtJQUVZLGtCQUFrQixDQUFDLElBQVMsRUFBRSxDQUFPOztZQUNoRCxNQUFNLFNBQVMsR0FBUSxFQUFFLENBQUM7WUFDMUIsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO2dCQUN6Qix1Q0FBdUM7Z0JBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNwQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7aUJBQ2hEO2FBQ0Y7aUJBQU07Z0JBQ0wsZ0NBQWdDO2dCQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7aUJBQzdDO2FBQ0Y7WUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYztZQUNqQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixNQUFNLE1BQU0sR0FBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVZLGtCQUFrQixDQUFDLEdBQVEsRUFBRSxJQUFTOztZQUNqRCxNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzNDLENBQUM7S0FBQTtJQUVZLG9CQUFvQixDQUFDLEdBQVEsRUFBRSxJQUFTOztZQUNuRCxNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQztLQUFBO0lBRVksU0FBUzs7WUFDcEIsb0RBQW9EO1lBQ3BELE1BQU0sUUFBUSxHQUFRLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQzlCLHNCQUFzQjtnQkFDdEIsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDbkU7UUFDSCxDQUFDO0tBQUE7SUFFWSxVQUFVOztZQUNyQixzREFBc0Q7WUFDdEQsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxDQUFDO0tBQUE7SUFFRCx3Q0FBd0M7SUFDM0IsTUFBTSxDQUFDLE9BQVksRUFBRSxVQUFlOztZQUMvQyxJQUFJLElBQUksR0FBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxPQUFPLEdBQVEsQ0FBQyxDQUFDO1lBQ3JCLElBQUksTUFBTSxHQUFRLEtBQUssQ0FBQztZQUN4QixJQUFJLEtBQUssR0FBUSxJQUFJLENBQUM7WUFDdEIsSUFBSSxPQUFPLEdBQVEsSUFBSSxDQUFDO1lBRXhCLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ2xDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNoQjtZQUNELElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ25DLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNoQjtZQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7WUFDOUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLCtCQUErQjtZQUNqRixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyx5Q0FBeUM7WUFDbkYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsdUNBQXVDO1lBQ3BGLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtZQUMvRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7WUFFcEUsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLDJDQUEyQzthQUNyRztZQUVELElBQUksV0FBVyxHQUFRLEVBQUUsQ0FBQztZQUFDLElBQUksQ0FBQyxHQUFRLENBQUMsQ0FBQztZQUMxQyxHQUFHO2dCQUNELHNDQUFzQztnQkFDdEMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzVDLFdBQVcsRUFBRSxDQUFDO2FBQ2YsUUFBUSxXQUFXLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLG1IQUFtSDtZQUVqTCx5RkFBeUY7WUFFekYsTUFBTSxRQUFRLEdBQVEsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxRQUFRO2dCQUNiLElBQUksQ0FBQyxZQUFZO2dCQUNqQixJQUFJLENBQUMsVUFBVTthQUNoQixDQUFDLENBQUM7WUFFSCxJQUFJLFdBQVcsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO29CQUNqQywyQ0FBMkM7b0JBQzNDLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7b0JBRXZDLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUU7d0JBQ25DLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw4QkFBOEI7d0JBQy9DLE1BQU0sUUFBUSxHQUFRLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxnSUFBZ0k7d0JBQzFLLElBQUksUUFBUSxFQUFFOzRCQUNaLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO3lCQUNsQzs2QkFBTTs0QkFDTCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzt5QkFDakI7d0JBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFOzRCQUNYLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBQ1A7d0JBQ0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFOzRCQUNWLENBQUMsR0FBRyxFQUFFLENBQUM7eUJBQ1IsQ0FBQyx5QkFBeUI7d0JBQzNCLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscUNBQXFDO3FCQUNqRztpQkFDRjtxQkFBTTtvQkFDTCxNQUFNLEdBQUcsS0FBSyxDQUFDO2lCQUNoQjthQUNGO1lBQ0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUM7UUFDakMsQ0FBQztLQUFBO0lBRVksWUFBWTs7WUFDdkIsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDM0IsTUFBTSxHQUFHLEdBQVEsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDekMsTUFBTSxTQUFTLEdBQVEsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUQsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUMsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFWSxhQUFhOztZQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0MsTUFBTSxPQUFPLEdBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFdEMsTUFBTSxRQUFRLEdBQVEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdEUsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQztLQUFBO0lBRVksVUFBVTs7WUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksR0FBRyxHQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUV6QyxNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ25DO1lBQ0QsTUFBTSxRQUFRLEdBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxJQUFJLFFBQVEsS0FBSyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDcEM7WUFDRCxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNwQixlQUFlO1lBQ2YsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO0tBQUE7SUFFWSxnQkFBZ0IsQ0FBQyxJQUFTOztZQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBQzlFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLHlDQUF5QztZQUNuRixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7WUFDcEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMseUJBQXlCO1lBQ3JFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7WUFFL0UsSUFBSSxDQUFDLEdBQVEsSUFBSSxDQUFDO1lBQUMsSUFBSSxDQUFNLENBQUM7WUFDOUIsMkNBQTJDO1lBQzNDLEdBQUc7Z0JBQ0QsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzVDLENBQUMsRUFBRSxDQUFDO2FBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQ0FBZ0M7WUFDbEUseUJBQXlCO1lBQ3pCLE9BQU8sTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxlQUFlO2dCQUNwQixJQUFJLENBQUMsZUFBZTthQUNyQixDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFWSxvQkFBb0I7O1lBQy9CLElBQUksT0FBTyxHQUFRLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUQsUUFBUSxPQUFPLEVBQUU7Z0JBQ2YsS0FBSyxJQUFJO29CQUNQLE9BQU8sR0FBRyxTQUFTLENBQUM7b0JBQ3BCLE1BQU07Z0JBQ1IsS0FBSyxJQUFJO29CQUNQLE9BQU8sR0FBRyxNQUFNLENBQUM7b0JBQ2pCLE1BQU07Z0JBQ1IsS0FBSyxJQUFJO29CQUNQLE9BQU8sR0FBRyxNQUFNLENBQUM7b0JBQ2pCLE1BQU07Z0JBQ1IsS0FBSyxJQUFJO29CQUNQLE9BQU8sR0FBRyxNQUFNLENBQUM7b0JBQ2pCLE1BQU07Z0JBQ1IsS0FBSyxJQUFJO29CQUNQLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQztvQkFDN0IsTUFBTTtnQkFDUjtvQkFDRSxPQUFPLEdBQUcsV0FBVyxDQUFDO2FBQ3pCO1lBQ0QsK0RBQStEO1lBQy9ELElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7YUFDM0M7WUFDRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO0tBQUE7SUFFWSxvQkFBb0IsQ0FBQyxHQUFROztZQUN4QyxvQ0FBb0M7WUFDcEMsSUFBSSxNQUFNLEdBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzVELE1BQU0sUUFBUSxHQUFRLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JFLElBQUksU0FBYyxDQUFDO1lBQ25CLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDaEQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFDRCxRQUFRLFNBQVMsRUFBRTtnQkFDakIsS0FBSyxJQUFJO29CQUNQLFNBQVMsR0FBRyxvQ0FBb0MsQ0FBQztvQkFDakQsTUFBTSxDQUFDLG1CQUFtQjtnQkFDNUIsS0FBSyxJQUFJO29CQUNQLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQztvQkFDckMsTUFBTTtnQkFDUixLQUFLLElBQUk7b0JBQ1AsU0FBUyxHQUFHLFlBQVksQ0FBQztvQkFDekIsTUFBTTtnQkFDUixLQUFLLElBQUk7b0JBQ1AsU0FBUyxHQUFHLFlBQVksQ0FBQztvQkFDekIsTUFBTTtnQkFDUixLQUFLLElBQUk7b0JBQ1AsU0FBUyxHQUFHLG1DQUFtQyxDQUFDO29CQUNoRCxNQUFNO2dCQUNSLEtBQUssSUFBSTtvQkFDUCxTQUFTLEdBQUcsYUFBYSxDQUFDO29CQUMxQixNQUFNO2dCQUNSLEtBQUssSUFBSTtvQkFDUCxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7b0JBQzdCLE1BQU07Z0JBQ1IsS0FBSyxJQUFJO29CQUNQLFNBQVMsR0FBRyxxQ0FBcUMsQ0FBQztvQkFDbEQsTUFBTTtnQkFDUixLQUFLLElBQUk7b0JBQ1AsU0FBUyxHQUFHLHlDQUF5QyxDQUFDO29CQUN0RCxNQUFNO2dCQUNSO29CQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUN0QztZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7S0FBQTtJQUVZLGtCQUFrQixDQUFDLE1BQVcsRUFBRSxHQUFROztZQUNuRCxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDL0MsT0FBTyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxDQUFDO0tBQUE7SUFFWSxpQkFBaUIsQ0FBQyxLQUFVLEVBQUUsR0FBUTs7WUFDakQsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLE9BQU8sTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQztLQUFBO0lBRVksc0JBQXNCLENBQUMsTUFBVyxFQUFFLEdBQVE7O1lBQ3ZEOzs7bUJBR0M7WUFDRCxNQUFNLEtBQUssR0FBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsc0RBQXNEO1lBQ3RELE1BQU0sS0FBSyxHQUFRLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDOUIsSUFBSSxNQUFNLEdBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtZQUMzRixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0M7WUFDM0QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQ3RDLDhCQUE4QjtZQUM5QixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRTtnQkFDeEQsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO2FBQ2xEO1FBQ0gsQ0FBQztLQUFBO0lBRVkscUJBQXFCLENBQUMsS0FBVSxFQUFFLEdBQVE7O1lBQ3JEOzs7bUJBR0M7WUFDRCxNQUFNLEtBQUssR0FBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsc0RBQXNEO1lBQ3RELElBQUksTUFBTSxHQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7WUFDM0YsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1lBQzNELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUV0Qyw4QkFBOEI7WUFDOUIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQzthQUNsRDtRQUNILENBQUM7S0FBQTtJQUVZLGFBQWE7O1lBQ3hCLCtFQUErRTtZQUMvRSxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pELENBQUM7S0FBQTtJQUVZLGlCQUFpQixDQUFDLE9BQVk7O1lBQ3pDLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztZQUN6QixNQUFNLFNBQVMsR0FBUSxFQUFFLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxPQUFPLEdBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7b0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztpQkFDcEM7Z0JBQ0QsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDakM7WUFDRCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO0tBQUE7SUFFWSxnQkFBZ0IsQ0FBQyxPQUFZOztZQUN4QyxJQUFJLE9BQU8sR0FBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0MsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMvRCxNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLENBQUM7S0FBQTtJQUVZLGtDQUFrQyxDQUFDLE1BQVc7O1lBQ3pELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUQsTUFBTSxRQUFRLEdBQVEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDckUsSUFDRSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUNoQixRQUFRLENBQUMsT0FBTyxLQUFLLENBQUM7Z0JBQ3RCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQ2xDO2dCQUNBLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2FBQ3pCO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQztLQUFBO0lBRVksa0JBQWtCLENBQUMsS0FBVSxFQUFFLFlBQWlCOztZQUMzRCxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0I7WUFDRCxNQUFNLE1BQU0sR0FBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxRQUFRLEdBQVEsTUFBTSxJQUFJLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUUsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUNuQixRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsa0NBQWtDLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDeEU7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxPQUFPLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL1dpcmVsZXNzL01GUkM1MjIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB2ZXIgMS4wXG4gKiAyMDE5LzEwLzE0XG4gKiBDcmVhdGVkIGJ5IFpqYWxpY1xuICovXG5cbi8qanNoaW50IGVzdmVyc2lvbjogOCAqL1xuXG5jb25zdCBPSzogYW55ID0gdHJ1ZTtcbmNvbnN0IEVSUk9SOiBhbnkgPSBmYWxzZTtcblxuY2xhc3MgTUZSQzUyMiB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1GUkM1MjJcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIFBDRF9JZGxlOiBhbnk7XG4gIHB1YmxpYyBQQ0RfTWVtOiBhbnk7XG4gIHB1YmxpYyBQQ0RfR2VuZXJhdGVSYW5kb21JRDogYW55O1xuICBwdWJsaWMgUENEX0NhbGNDUkM6IGFueTtcbiAgcHVibGljIFBDRF9UcmFuc21pdDogYW55O1xuICBwdWJsaWMgUENEX05vQ21kQ2hhbmdlOiBhbnk7XG4gIHB1YmxpYyBQQ0RfUmVjZWl2ZTogYW55O1xuICBwdWJsaWMgUENEX1RyYW5zY2VpdmU6IGFueTtcbiAgcHVibGljIFBDRF9NRkF1dGhlbnQ6IGFueTtcbiAgcHVibGljIFBDRF9Tb2Z0UmVzZXQ6IGFueTtcbiAgcHVibGljIFJ4R2Fpbl8xOGRCOiBhbnk7XG4gIHB1YmxpYyBSeEdhaW5fMjNkQjogYW55O1xuICBwdWJsaWMgUnhHYWluXzE4ZEJfMjogYW55O1xuICBwdWJsaWMgUnhHYWluXzIzZEJfMjogYW55O1xuICBwdWJsaWMgUnhHYWluXzMzZEI6IGFueTtcbiAgcHVibGljIFJ4R2Fpbl8zOGRCOiBhbnk7XG4gIHB1YmxpYyBSeEdhaW5fNDNkQjogYW55O1xuICBwdWJsaWMgUnhHYWluXzQ4ZEI6IGFueTtcbiAgcHVibGljIFJ4R2Fpbl9taW46IGFueTtcbiAgcHVibGljIFJ4R2Fpbl9hdmc6IGFueTtcbiAgcHVibGljIFJ4R2Fpbl9tYXg6IGFueTtcbiAgcHVibGljIFBJQ0NfUkVRQTogYW55O1xuICBwdWJsaWMgUElDQ19XVVBBOiBhbnk7XG4gIHB1YmxpYyBQSUNDX0NUOiBhbnk7XG4gIHB1YmxpYyBQSUNDX1NFTF9DTDE6IGFueTtcbiAgcHVibGljIFBJQ0NfU0VMX0NMMjogYW55O1xuICBwdWJsaWMgUElDQ19TRUxfQ0wzOiBhbnk7XG4gIHB1YmxpYyBQSUNDX0hMVEE6IGFueTtcbiAgcHVibGljIFBJQ0NfUkFUUzogYW55O1xuICBwdWJsaWMgUElDQ19BVVRIX0tFWUE6IGFueTtcbiAgcHVibGljIFBJQ0NfQVVUSF9LRVlCOiBhbnk7XG4gIHB1YmxpYyBQSUNDX1JFQUQ6IGFueTtcbiAgcHVibGljIFBJQ0NfV1JJVEU6IGFueTtcbiAgcHVibGljIFBJQ0NfREVDUkVNRU5UOiBhbnk7XG4gIHB1YmxpYyBQSUNDX0lOQ1JFTUVOVDogYW55O1xuICBwdWJsaWMgUElDQ19SRVNUT1JFOiBhbnk7XG4gIHB1YmxpYyBQSUNDX1RSQU5TRkVSOiBhbnk7XG4gIHB1YmxpYyBQSUNDX1VMX1dSSVRFOiBhbnk7XG4gIHB1YmxpYyBQSUNDX1NFbEVDVFRBRzogYW55O1xuICBwdWJsaWMgQ29tbWFuZFJlZzogYW55O1xuICBwdWJsaWMgQ29tbEVuUmVnOiBhbnk7XG4gIHB1YmxpYyBEaXZsRW5SZWc6IGFueTtcbiAgcHVibGljIENvbUlycVJlZzogYW55O1xuICBwdWJsaWMgRGl2SXJxUmVnOiBhbnk7XG4gIHB1YmxpYyBFcnJvclJlZzogYW55O1xuICBwdWJsaWMgU3RhdHVzMVJlZzogYW55O1xuICBwdWJsaWMgU3RhdHVzMlJlZzogYW55O1xuICBwdWJsaWMgRklGT0RhdGFSZWc6IGFueTtcbiAgcHVibGljIEZJRk9MZXZlbFJlZzogYW55O1xuICBwdWJsaWMgV2F0ZXJMZXZlbFJlZzogYW55O1xuICBwdWJsaWMgQ29udHJvbFJlZzogYW55O1xuICBwdWJsaWMgQml0RnJhbWluZ1JlZzogYW55O1xuICBwdWJsaWMgQ29sbFJlZzogYW55O1xuICBwdWJsaWMgTW9kZVJlZzogYW55O1xuICBwdWJsaWMgVHhNb2RlUmVnOiBhbnk7XG4gIHB1YmxpYyBSeE1vZGVSZWc6IGFueTtcbiAgcHVibGljIFR4Q29udHJvbFJlZzogYW55O1xuICBwdWJsaWMgVHhBU0tSZWc6IGFueTtcbiAgcHVibGljIFR4U2VsUmVnOiBhbnk7XG4gIHB1YmxpYyBSeFNlbFJlZzogYW55O1xuICBwdWJsaWMgUnhUaHJlc2hvbGRSZWc6IGFueTtcbiAgcHVibGljIERlbW9kUmVnOiBhbnk7XG4gIHB1YmxpYyBSZXNlcnZlZDFBaDogYW55O1xuICBwdWJsaWMgUmVzZXJ2ZWQxQmg6IGFueTtcbiAgcHVibGljIE1mVHhSZWc6IGFueTtcbiAgcHVibGljIE1mUnhSZWc6IGFueTtcbiAgcHVibGljIFJlc2VydmVkMUVoOiBhbnk7XG4gIHB1YmxpYyBTZXJpYWxTcGVlZFJlZzogYW55O1xuICBwdWJsaWMgQ1JDUmVzdWx0UmVnTVNCOiBhbnk7XG4gIHB1YmxpYyBDUkNSZXN1bHRSZWdMU0I6IGFueTtcbiAgcHVibGljIE1vZFdpZHRoUmVnOiBhbnk7XG4gIHB1YmxpYyBSRkNmZ1JlZzogYW55O1xuICBwdWJsaWMgR3NOUmVnOiBhbnk7XG4gIHB1YmxpYyBDV0dzUFJlZzogYW55O1xuICBwdWJsaWMgTW9kR3NQUmVnOiBhbnk7XG4gIHB1YmxpYyBUTW9kZVJlZzogYW55O1xuICBwdWJsaWMgVFByZXNjYWxlclJlZzogYW55O1xuICBwdWJsaWMgVFJlbG9hZFJlZ0hpOiBhbnk7XG4gIHB1YmxpYyBUUmVsb2FkUmVnTG86IGFueTtcbiAgcHVibGljIFRDb3VudGVyVmFsUmVnSGk6IGFueTtcbiAgcHVibGljIFRDb3VudGVyVmFsUmVnTG86IGFueTtcbiAgcHVibGljIFRlc3RTZWwxUmVnOiBhbnk7XG4gIHB1YmxpYyBUZXN0U2VsMlJlZzogYW55O1xuICBwdWJsaWMgVGVzdFBpbkVuUmVnOiBhbnk7XG4gIHB1YmxpYyBUZXN0UGluVmFsdWVSZWc6IGFueTtcbiAgcHVibGljIFRlc3RCdXNSZWc6IGFueTtcbiAgcHVibGljIEF1dG9UZXN0UmVnOiBhbnk7XG4gIHB1YmxpYyBWZXJzaW9uUmVnOiBhbnk7XG4gIHB1YmxpYyBBbmFsb2dUZXN0UmVnOiBhbnk7XG4gIHB1YmxpYyBUZXN0REFDMVJlZzogYW55O1xuICBwdWJsaWMgVGVzdERBQzJSZWc6IGFueTtcbiAgcHVibGljIFRlc3RBRENSZWc6IGFueTtcbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyByc3Q6IGFueTtcbiAgcHVibGljIGNzOiBhbnk7XG4gIHB1YmxpYyBzcGk6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBQQ0QgY29tbWFuZHMuIERlc2NyaWJlZCBpbiBjaGFwdGVyIDEwIG9mIHRoZSBkYXRhc2hlZXQuXG4gICAgLy8gUENEKFByb3hpbWl0eSBDb3VwbGluZyBEZXZpY2UpOiBOWFAgTUZSQzUyMiBDb250YWN0bGVzcyBSZWFkZXIgSUMuXG4gICAgdGhpcy5QQ0RfSWRsZSA9IDB4MDA7IC8vIG5vIGFjdGlvbiwgY2FuY2VscyBjdXJyZW50IGNvbW1hbmQgZXhlY3V0aW9uLlxuICAgIHRoaXMuUENEX01lbSA9IDB4MDE7IC8vIHN0b3JlcyAyNSBieXRlcyBpbnRvIHRoZSBpbnRlcm5hbCBidWZmZXIuXG4gICAgdGhpcy5QQ0RfR2VuZXJhdGVSYW5kb21JRCA9IDB4MDI7IC8vIGdlbmVyYXRlcyBhIDEwLWJ5dGUgcmFuZG9tIElEIG51bWJlci5cbiAgICB0aGlzLlBDRF9DYWxjQ1JDID0gMHgwMzsgLy8gYWN0aXZhdGVzIHRoZSBDUkMgY29wcm9jZXNzb3Igb3IgcGVyZm9ybXMgYSBzZWxmLXRlc3QuXG4gICAgdGhpcy5QQ0RfVHJhbnNtaXQgPSAweDA0OyAvLyB0cmFuc21pdHMgZGF0YSBmcm9tIHRoZSBGSUZPIGJ1ZmZlci5cbiAgICB0aGlzLlBDRF9Ob0NtZENoYW5nZSA9IDB4MDc7IC8vIG5vIGNvbW1hbmQgY2hhbmdlLCBjYW4gYmUgdXNlZCB0byBtb2RpZnkgdGhlIENvbW1hbmRSZWcgcmVnaXN0ZXIgYml0cyB3aXRob3V0IGFmZmVjdGluZyB0aGUgY29tbWFuZCwgZm9yIGV4YW1wbGUsIHRoZSBQb3dlckRvd24gYml0LlxuICAgIHRoaXMuUENEX1JlY2VpdmUgPSAweDA4OyAvLyBhY3RpdmF0ZXMgdGhlIHJlY2VpdmVyIGNpcmN1aXRzLlxuICAgIHRoaXMuUENEX1RyYW5zY2VpdmUgPSAweDBjOyAvLyB0cmFuc21pdHMgZGF0YSBmcm9tIEZJRk8gYnVmZmVyIHRvIGFudGVubmEgYW5kIGF1dG9tYXRpY2FsbHkgYWN0aXZhdGVzIHRoZSByZWNlaXZlciBhZnRlciB0cmFuc21pc3Npb24uXG4gICAgLy8gdGhpcy5QQ0RfUmVzZXJ2ZWQwRGggPSAweDBEO1xuICAgIHRoaXMuUENEX01GQXV0aGVudCA9IDB4MGU7IC8vIHBlcmZvcm1zIHRoZSBNSUZBUkUgc3RhbmRhcmQgYXV0aGVudGljYXRpb24gYXMgYSByZWFkZXIuXG4gICAgdGhpcy5QQ0RfU29mdFJlc2V0ID0gMHgwZjsgLy8gcmVzZXRzIHRoZSBNRlJDNTIyLlxuXG4gICAgLy8gTUZSQzUyMiBSeEdhaW5bMjowXSBtYXNrcywgZGVmaW5lcyB0aGUgcmVjZWl2ZXIncyBzaWduYWwgdm9sdGFnZSBnYWluIGZhY3RvciAob24gdGhlIFBDRCkuXG4gICAgLy8gRGVzY3JpYmVkIGluIDkuMy4zLjYgLyB0YWJsZSA5OCBvZiB0aGUgZGF0YXNoZWV0IGF0IGh0dHA6Ly93d3cubnhwLmNvbS9kb2N1bWVudHMvZGF0YV9zaGVldC9NRlJDNTIyLnBkZlxuICAgIHRoaXMuUnhHYWluXzE4ZEIgPSAweDAwIDw8IDQ7IC8vIDAwMGIgLSAxOCBkQiwgbWluaW11bS5cbiAgICB0aGlzLlJ4R2Fpbl8yM2RCID0gMHgwMSA8PCA0OyAvLyAwMDFiIC0gMjMgZEIuXG4gICAgdGhpcy5SeEdhaW5fMThkQl8yID0gMHgwMiA8PCA0OyAvLyAwMTBiIC0gMTggZEIsIGl0IHNlZW1zIDAxMGIgaXMgYSBkdXBsaWNhdGUgZm9yIDAwMGIuXG4gICAgdGhpcy5SeEdhaW5fMjNkQl8yID0gMHgwMyA8PCA0OyAvLyAwMTFiIC0gMjMgZEIsIGl0IHNlZW1zIDAxMWIgaXMgYSBkdXBsaWNhdGUgZm9yIDAwMWIuXG4gICAgdGhpcy5SeEdhaW5fMzNkQiA9IDB4MDQgPDwgNDsgLy8gMTAwYiAtIDMzIGRCLCBhdmVyYWdlLCBhbmQgdHlwaWNhbCBkZWZhdWx0LlxuICAgIHRoaXMuUnhHYWluXzM4ZEIgPSAweDA1IDw8IDQ7IC8vIDEwMWIgLSAzOCBkQi5cbiAgICB0aGlzLlJ4R2Fpbl80M2RCID0gMHgwNiA8PCA0OyAvLyAxMTBiIC0gNDMgZEIuXG4gICAgdGhpcy5SeEdhaW5fNDhkQiA9IDB4MDcgPDwgNDsgLy8gMTExYiAtIDQ4IGRCLCBtYXhpbXVtLlxuICAgIHRoaXMuUnhHYWluX21pbiA9IDB4MDAgPDwgNDsgLy8gMDAwYiAtIDE4IGRCLCBtaW5pbXVtLCBjb252ZW5pZW5jZSBmb3IgUnhHYWluXzE4ZEIuXG4gICAgdGhpcy5SeEdhaW5fYXZnID0gMHgwNCA8PCA0OyAvLyAxMDBiIC0gMzMgZEIsIGF2ZXJhZ2UsIGNvbnZlbmllbmNlIGZvciBSeEdhaW5fMzNkQi5cbiAgICB0aGlzLlJ4R2Fpbl9tYXggPSAweDA3IDw8IDQ7IC8vIDExMWIgLSA0OCBkQiwgbWF4aW11bSwgY29udmVuaWVuY2UgZm9yIFJ4R2Fpbl80OGRCLlxuXG4gICAgLy8gVGhlIFBJQ0MgY29tbWFuZHMgdXNlZCBieSB0aGUgUENEIHRvIG1hbmFnZSBjb21tdW5pY2F0aW9uIHdpdGggc2V2ZXJhbCBQSUNDcyAoSVNPIDE0NDQzLTMsIFR5cGUgQSwgc2VjdGlvbiA2LjQpLlxuICAgIHRoaXMuUElDQ19SRVFBID0gMHgyNjsgLy8gUkVRdWVzdCBjb21tYW5kLCBUeXBlIEEuIEludml0ZXMgUElDQ3MgaW4gc3RhdGUgSURMRSB0byBnbyB0byBSRUFEWSBhbmQgcHJlcGFyZSBmb3IgYW50aWNvbGxpc2lvbiBvciBzZWxlY3Rpb24uIDcgYml0IGZyYW1lLlxuICAgIHRoaXMuUElDQ19XVVBBID0gMHg1MjsgLy8gV2FrZS1VUCBjb21tYW5kLCBUeXBlIEEuIEludml0ZXMgUElDQ3MgaW4gc3RhdGUgSURMRSBhbmQgSEFMVCB0byBnbyB0byBSRUFEWSgqKSBhbmQgcHJlcGFyZSBmb3IgYW50aWNvbGxpc2lvbiBvciBzZWxlY3Rpb24uIDcgYml0IGZyYW1lLlxuICAgIHRoaXMuUElDQ19DVCA9IDB4ODg7IC8vIENhc2NhZGUgVGFnLiBOb3QgcmVhbGx5IGEgY29tbWFuZCwgYnV0IHVzZWQgZHVyaW5nIGFudGkgY29sbGlzaW9uLlxuICAgIHRoaXMuUElDQ19TRUxfQ0wxID0gMHg5MzsgLy8gQW50aSBjb2xsaXNpb24vU2VsZWN0LCBDYXNjYWRlIExldmVsIDEuXG4gICAgdGhpcy5QSUNDX1NFTF9DTDIgPSAweDk1OyAvLyBBbnRpIGNvbGxpc2lvbi9TZWxlY3QsIENhc2NhZGUgTGV2ZWwgMi5cbiAgICB0aGlzLlBJQ0NfU0VMX0NMMyA9IDB4OTc7IC8vIEFudGkgY29sbGlzaW9uL1NlbGVjdCwgQ2FzY2FkZSBMZXZlbCAzLlxuICAgIHRoaXMuUElDQ19ITFRBID0gMHg1MDsgLy8gSGFMVCBjb21tYW5kLCBUeXBlIEEuIEluc3RydWN0cyBhbiBBQ1RJVkUgUElDQyB0byBnbyB0byBzdGF0ZSBIQUxULlxuICAgIHRoaXMuUElDQ19SQVRTID0gMHhlMDsgLy8gUmVxdWVzdCBjb21tYW5kIGZvciBBbnN3ZXIgVG8gUmVzZXQuXG4gICAgLy8gVGhlIGNvbW1hbmRzIHVzZWQgZm9yIE1JRkFSRSBDbGFzc2ljIChmcm9tIGh0dHA6Ly93d3cubW91c2VyLmNvbS9kcy8yLzMwMi9NRjFTNTAzeC04OTU3NC5wZGYsIFNlY3Rpb24gOSlcbiAgICAvLyBVc2UgUENEX01GQXV0aGVudCB0byBhdXRoZW50aWNhdGUgYWNjZXNzIHRvIGEgc2VjdG9yLCB0aGVuIHVzZSB0aGVzZSBjb21tYW5kcyB0byByZWFkL3dyaXRlL21vZGlmeSB0aGUgYmxvY2tzIG9uIHRoZSBzZWN0b3IuXG4gICAgLy8gVGhlIHJlYWQvd3JpdGUgY29tbWFuZHMgY2FuIGFsc28gYmUgdXNlZCBmb3IgTUlGQVJFIFVsdHJhbGlnaHQuXG4gICAgdGhpcy5QSUNDX0FVVEhfS0VZQSA9IDB4NjA7IC8vIFBlcmZvcm0gYXV0aGVudGljYXRpb24gd2l0aCBLZXkgQS5cbiAgICB0aGlzLlBJQ0NfQVVUSF9LRVlCID0gMHg2MTsgLy8gUGVyZm9ybSBhdXRoZW50aWNhdGlvbiB3aXRoIEtleSBCLlxuICAgIHRoaXMuUElDQ19SRUFEID0gMHgzMDsgLy8gUmVhZHMgb25lIDE2IGJ5dGUgYmxvY2sgZnJvbSB0aGUgYXV0aGVudGljYXRlZCBzZWN0b3Igb2YgdGhlIFBJQ0MuIEFsc28gdXNlZCBmb3IgTUlGQVJFIFVsdHJhbGlnaHQuXG4gICAgdGhpcy5QSUNDX1dSSVRFID0gMHhhMDsgLy8gV3JpdGVzIG9uZSAxNiBieXRlIGJsb2NrIHRvIHRoZSBhdXRoZW50aWNhdGVkIHNlY3RvciBvZiB0aGUgUElDQy4gQ2FsbGVkIFwiQ09NUEFUSUJJTElUWSBXUklURVwiIGZvciBNSUZBUkUgVWx0cmFsaWdodC5cbiAgICB0aGlzLlBJQ0NfREVDUkVNRU5UID0gMHhjMDsgLy8gRGVjcmVtZW50cyB0aGUgY29udGVudHMgb2YgYSBibG9jayBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGludGVybmFsIGRhdGEgcmVnaXN0ZXIuXG4gICAgdGhpcy5QSUNDX0lOQ1JFTUVOVCA9IDB4YzE7IC8vIEluY3JlbWVudHMgdGhlIGNvbnRlbnRzIG9mIGEgYmxvY2sgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBpbnRlcm5hbCBkYXRhIHJlZ2lzdGVyLlxuICAgIHRoaXMuUElDQ19SRVNUT1JFID0gMHhjMjsgLy8gUmVhZHMgdGhlIGNvbnRlbnRzIG9mIGEgYmxvY2sgaW50byB0aGUgaW50ZXJuYWwgZGF0YSByZWdpc3Rlci5cbiAgICB0aGlzLlBJQ0NfVFJBTlNGRVIgPSAweGIwOyAvLyBXcml0ZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpbnRlcm5hbCBkYXRhIHJlZ2lzdGVyIHRvIGEgYmxvY2suXG4gICAgLy8gVGhlIGNvbW1hbmRzIHVzZWQgZm9yIE1JRkFSRSBVbHRyYWxpZ2h0IChmcm9tIGh0dHA6Ly93d3cubnhwLmNvbS9kb2N1bWVudHMvZGF0YV9zaGVldC9NRjBJQ1UxLnBkZiwgU2VjdGlvbiA4LjYpXG4gICAgLy8gVGhlIFBJQ0NfQ01EX01GX1JFQUQgYW5kIFBJQ0NfQ01EX01GX1dSSVRFIGNhbiBhbHNvIGJlIHVzZWQgZm9yIE1JRkFSRSBVbHRyYWxpZ2h0LlxuICAgIHRoaXMuUElDQ19VTF9XUklURSA9IDB4YTI7IC8vIFdyaXRlcyBvbmUgNCBieXRlIHBhZ2UgdG8gdGhlIFBJQ0MuXG5cbiAgICB0aGlzLlBJQ0NfU0VsRUNUVEFHID0gMHg5MztcblxuICAgIC8vIFBhZ2UgMDogQ29tbWFuZCBhbmQgc3RhdHVzXG4gICAgLy8gdGhpcy5SZXNlcnZlZDAwaCA9IDB4MDA7XG4gICAgdGhpcy5Db21tYW5kUmVnID0gMHgwMTtcbiAgICB0aGlzLkNvbWxFblJlZyA9IDB4MDI7XG4gICAgdGhpcy5EaXZsRW5SZWcgPSAweDAzO1xuICAgIHRoaXMuQ29tSXJxUmVnID0gMHgwNDtcbiAgICB0aGlzLkRpdklycVJlZyA9IDB4MDU7XG4gICAgdGhpcy5FcnJvclJlZyA9IDB4MDY7XG4gICAgdGhpcy5TdGF0dXMxUmVnID0gMHgwNztcbiAgICB0aGlzLlN0YXR1czJSZWcgPSAweDA4O1xuICAgIHRoaXMuRklGT0RhdGFSZWcgPSAweDA5O1xuICAgIHRoaXMuRklGT0xldmVsUmVnID0gMHgwYTtcbiAgICB0aGlzLldhdGVyTGV2ZWxSZWcgPSAweDBiO1xuICAgIHRoaXMuQ29udHJvbFJlZyA9IDB4MGM7XG4gICAgdGhpcy5CaXRGcmFtaW5nUmVnID0gMHgwZDtcbiAgICB0aGlzLkNvbGxSZWcgPSAweDBlO1xuICAgIC8vIHRoaXMuUmVzZXJ2ZWQwRmggPSAweDBGO1xuXG4gICAgLy8gUGFnZSAxOiBDb21tYW5kXG4gICAgLy8gdGhpcy5SZXNlcnZlZDEwaCA9IDB4MTA7XG4gICAgdGhpcy5Nb2RlUmVnID0gMHgxMTtcbiAgICB0aGlzLlR4TW9kZVJlZyA9IDB4MTI7XG4gICAgdGhpcy5SeE1vZGVSZWcgPSAweDEzO1xuICAgIHRoaXMuVHhDb250cm9sUmVnID0gMHgxNDtcbiAgICB0aGlzLlR4QVNLUmVnID0gMHgxNTtcbiAgICB0aGlzLlR4U2VsUmVnID0gMHgxNjtcbiAgICB0aGlzLlJ4U2VsUmVnID0gMHgxNztcbiAgICB0aGlzLlJ4VGhyZXNob2xkUmVnID0gMHgxODtcbiAgICB0aGlzLkRlbW9kUmVnID0gMHgxOTtcbiAgICB0aGlzLlJlc2VydmVkMUFoID0gMHgxYTtcbiAgICB0aGlzLlJlc2VydmVkMUJoID0gMHgxYjtcbiAgICB0aGlzLk1mVHhSZWcgPSAweDFjO1xuICAgIHRoaXMuTWZSeFJlZyA9IDB4MWQ7XG4gICAgdGhpcy5SZXNlcnZlZDFFaCA9IDB4MWU7XG4gICAgdGhpcy5TZXJpYWxTcGVlZFJlZyA9IDB4MWY7XG5cbiAgICAvLyBQYWdlIDI6IENvbmZpZ3VyYXRpb25cbiAgICAvLyB0aGlzLlJlc2VydmVkMjBoID0gMHgyMDtcbiAgICB0aGlzLkNSQ1Jlc3VsdFJlZ01TQiA9IDB4MjE7XG4gICAgdGhpcy5DUkNSZXN1bHRSZWdMU0IgPSAweDIyO1xuICAgIC8vIHRoaXMuUmVzZXJ2ZWQyM2ggPSAweDIzO1xuICAgIHRoaXMuTW9kV2lkdGhSZWcgPSAweDI0O1xuICAgIC8vIHRoaXMuUmVzZXJ2ZWQyNWggPSAweDI1O1xuICAgIHRoaXMuUkZDZmdSZWcgPSAweDI2O1xuICAgIHRoaXMuR3NOUmVnID0gMHgyNztcbiAgICB0aGlzLkNXR3NQUmVnID0gMHgyODtcbiAgICB0aGlzLk1vZEdzUFJlZyA9IDB4Mjk7XG4gICAgdGhpcy5UTW9kZVJlZyA9IDB4MmE7XG4gICAgdGhpcy5UUHJlc2NhbGVyUmVnID0gMHgyYjtcbiAgICB0aGlzLlRSZWxvYWRSZWdIaSA9IDB4MmM7XG4gICAgdGhpcy5UUmVsb2FkUmVnTG8gPSAweDJkO1xuICAgIHRoaXMuVENvdW50ZXJWYWxSZWdIaSA9IDB4MmU7XG4gICAgdGhpcy5UQ291bnRlclZhbFJlZ0xvID0gMHgyZjtcblxuICAgIC8vIFBhZ2UgMzogVGVzdCByZWdpc3RlclxuICAgIC8vIHRoaXMuUmVzZXJ2ZWQzMGggPSAweDMwO1xuICAgIHRoaXMuVGVzdFNlbDFSZWcgPSAweDMxO1xuICAgIHRoaXMuVGVzdFNlbDJSZWcgPSAweDMyO1xuICAgIHRoaXMuVGVzdFBpbkVuUmVnID0gMHgzMztcbiAgICB0aGlzLlRlc3RQaW5WYWx1ZVJlZyA9IDB4MzQ7XG4gICAgdGhpcy5UZXN0QnVzUmVnID0gMHgzNTtcbiAgICB0aGlzLkF1dG9UZXN0UmVnID0gMHgzNjtcbiAgICB0aGlzLlZlcnNpb25SZWcgPSAweDM3O1xuICAgIHRoaXMuQW5hbG9nVGVzdFJlZyA9IDB4Mzg7XG4gICAgdGhpcy5UZXN0REFDMVJlZyA9IDB4Mzk7XG4gICAgdGhpcy5UZXN0REFDMlJlZyA9IDB4M2E7XG4gICAgdGhpcy5UZXN0QURDUmVnID0gMHgzYjtcbiAgICAvLyB0aGlzLlJlc2VydmVkM0NoID0gMHgzQztcbiAgICAvLyB0aGlzLlJlc2VydmVkM0RoID0gMHgzRDtcbiAgICAvLyB0aGlzLlJlc2VydmVkM0VoID0gMHgzRTtcbiAgICAvLyB0aGlzLlJlc2VydmVkM0ZoID0gMHgzRjtcblxuICAgIC8vIHJlcXVpcmVkIHBpbiBvZiBvYm5pelxuICAgIHRoaXMua2V5cyA9IFtcbiAgICAgIFwiY3NcIixcbiAgICAgIFwiY2xrXCIsXG4gICAgICBcIm1vc2lcIixcbiAgICAgIFwibWlzb1wiLFxuICAgICAgXCJyc3RcIixcbiAgICAgIFwidmNjXCIsXG4gICAgICBcImduZFwiLFxuICAgICAgXCJzcGlcIixcbiAgICAgIFwic3BpX2ZyZXF1ZW5jeVwiLFxuICAgIF07XG4gICAgdGhpcy5yZXF1aXJlZCA9IFtcImNzXCIsIFwibW9zaVwiLCBcIm1pc29cIiwgXCJyc3RcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICAvLyBJTyBwaW4gc2V0dGluZ3NcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLnJzdCA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnJzdCk7XG4gICAgLy8gU1BJIHNldHRpbmdzXG4gICAgdGhpcy5jcyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmNzKTtcbiAgICB0aGlzLmNzLm91dHB1dCh0cnVlKTtcbiAgICB0aGlzLnBhcmFtcy5tb2RlID0gXCJtYXN0ZXJcIjtcbiAgICB0aGlzLnBhcmFtcy5kcml2ZSA9IFwiM3ZcIjtcbiAgICB0aGlzLnBhcmFtcy5wdWxsID0gXCIzdlwiO1xuICAgIHRoaXMucGFyYW1zLmZyZXF1ZW5jeSA9IHRoaXMucGFyYW1zLnNwaV9mcmVxdWVuY3kgfHwgNSAqIDEwMDAgKiAxMDAwO1xuICAgIHRoaXMuc3BpID0gdGhpcy5vYm5pei5nZXRTcGlXaXRoQ29uZmlnKHRoaXMucGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbml0KCkge1xuICAgIC8vIEluaXRpYWxpemVzIHRoZSBNRlJDNTIyIGNoaXBcbiAgICAvLyBIYXJkd2FyZSBhbmQgU29mdHdhcmUgcmVzZXRcbiAgICB0aGlzLnJzdC5vdXRwdXQoZmFsc2UpO1xuICAgIGF3YWl0IHRoaXMub2JuaXoud2FpdCg1MCk7IC8vIDguOC4yIHNheXMgdGhlIG9zY2lsbGF0b3Igc3RhcnQtdXAgdGltZSBpcyB0aGUgc3RhcnQgdXAgdGltZSBvZiB0aGUgY3J5c3RhbCArIDM3LDc0dXM6IDUwbXMuXG4gICAgdGhpcy5yc3Qub3V0cHV0KHRydWUpO1xuICAgIHRoaXMud3JpdGVSZWdpc3Rlcih0aGlzLkNvbW1hbmRSZWcsIHRoaXMuUENEX1NvZnRSZXNldCk7XG5cbiAgICAvLyBUaW1lciBzZXR1cDogV2hlbiBjb21tdW5pY2F0aW5nIHdpdGggYSBQSUNDIHdlIG5lZWQgYSB0aW1lb3V0IGlmIHNvbWV0aGluZyBnb2VzIHdyb25nLlxuICAgIC8vIGZfdGltZXIgPSAxMy41NiBNSHogLyAoMipUUHJlU2NhbGVyKzEpIHdoZXJlIFRQcmVTY2FsZXIgPSBbVFByZXNjYWxlcl9IaTpUUHJlc2NhbGVyX0xvXS5cbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5UTW9kZVJlZywgMHg4MCk7IC8vIFRBdXRvPTE7IHRpbWVyIHN0YXJ0cyBhdXRvbWF0aWNhbGx5IGF0IHRoZSBlbmQgb2YgdGhlIHRyYW5zbWlzc2lvbiBpbiBhbGwgY29tbXVuaWNhdGlvbiBtb2RlcyBhdCBhbGwgc3BlZWRzXG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuVFByZXNjYWxlclJlZywgMHhhOSk7IC8vIFRQcmVTY2FsZXIgPSBUTW9kZVJlZ1szLi4wXTogVFByZXNjYWxlclJlZywgaWUgMHgwQTkgPSAxNjkgPT4gZl90aW1lcj00MGtIeiwgaWUgYSB0aW1lciBwZXJpb2Qgb2YgMjV1cy5cbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5UUmVsb2FkUmVnSGksIDB4MDMpO1xuICAgIHRoaXMud3JpdGVSZWdpc3Rlcih0aGlzLlRSZWxvYWRSZWdMbywgMHhlOCk7IC8vIFJlbG9hZCB0aW1lciB3aXRoIDB4M0U4ID0gMTAwMCwgaWUuIDI1bXMgYmVmb3JlIHRpbWVvdXRcbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5UeEFTS1JlZywgMHg0MCk7IC8vIERlZmF1bHQgMHgwMC4gRm9yY2UgYSAxMDAgJSBBU0sgbW9kdWxhdGlvbiBpbmRlcGVuZGVudCBvZiB0aGUgTW9kR3NQUmVnIHJlZ2lzdGVyIHNldHRpbmdcbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5Nb2RlUmVnLCAweDNkKTsgLy8gRGVmYXVsdCAweDNGLiBTZXQgdGhlIHByZXNldCB2YWx1ZSBmb3IgdGhlIENSQyBjb3Byb2Nlc3NvciBmb3IgdGhlIENhbGNDUkMgY29tbWFuZCB0byAweDYzNjMgKDYuMi40KVxuICAgIGF3YWl0IHRoaXMuYW50ZW5uYU9uKCk7IC8vIEVuYWJsZSB0aGUgYW50ZW5uYSBkcml2ZXIgcGlucyBUWDEgYW5kIFRYMiAodGhleSB3ZXJlIGRpc2FibGVkIGJ5IHRoZSByZXNldClcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVJlZ2lzdGVyKGFkZHI6IGFueSwgdmFsOiBhbnkpIHtcbiAgICBsZXQgZGF0YTogYW55O1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgLy8gSWYgdmFsIGlzIEFycmF5XG4gICAgICBkYXRhID0gWyhhZGRyIDw8IDEpICYgMHg3ZV0uY29uY2F0KHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBbKGFkZHIgPDwgMSkgJiAweDdlLCB2YWxdO1xuICAgIH1cbiAgICB0aGlzLmNzLm91dHB1dChmYWxzZSk7XG4gICAgdGhpcy5zcGkud3JpdGUoZGF0YSk7XG4gICAgdGhpcy5jcy5vdXRwdXQodHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVhZFJlZ2lzdGVyKGFkZHI6IGFueSkge1xuICAgIGNvbnN0IGRhdGE6IGFueSA9IFsoKGFkZHIgPDwgMSkgJiAweDdlKSB8IDB4ODAsIDBdO1xuICAgIHRoaXMuY3Mub3V0cHV0KGZhbHNlKTtcbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgdGhpcy5zcGkud3JpdGVXYWl0KGRhdGEpO1xuICAgIHRoaXMuY3Mub3V0cHV0KHRydWUpO1xuICAgIHJldHVybiByZXNwb25zZVsxXTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkUmVnaXN0ZXJfbkJ5dGUoYWRkcjogYW55LCBuPzogYW55KSB7XG4gICAgY29uc3QgZGF0YUFycmF5OiBhbnkgPSBbXTtcbiAgICBpZiAoYWRkciBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAvLyBNdWx0aXBsZSBhZGRyZXNzZXMoSWYgYWRkciBpcyBBcnJheSlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkci5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhQXJyYXkucHVzaCgoKGFkZHJbaV0gPDwgMSkgJiAweDdlKSB8IDB4ODApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaW5nbGUgYWRkcmVzcyAmIHJlYWQgbiB0aW1lc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgZGF0YUFycmF5LnB1c2goKChhZGRyIDw8IDEpICYgMHg3ZSkgfCAweDgwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGF0YUFycmF5LnB1c2goMCk7IC8vIEVuZCByZWFkaW5nXG4gICAgdGhpcy5jcy5vdXRwdXQoZmFsc2UpO1xuICAgIGNvbnN0IHZhbHVlczogYW55ID0gYXdhaXQgdGhpcy5zcGkud3JpdGVXYWl0KGRhdGFBcnJheSk7XG4gICAgdGhpcy5jcy5vdXRwdXQodHJ1ZSk7XG4gICAgdmFsdWVzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRSZWdpc3RlckJpdE1hc2socmVnOiBhbnksIG1hc2s6IGFueSkge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLnJlYWRSZWdpc3RlcihyZWcpO1xuICAgIHRoaXMud3JpdGVSZWdpc3RlcihyZWcsIHJlc3BvbnNlIHwgbWFzayk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY2xlYXJSZWdpc3RlckJpdE1hc2socmVnOiBhbnksIG1hc2s6IGFueSkge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLnJlYWRSZWdpc3RlcihyZWcpO1xuICAgIHRoaXMud3JpdGVSZWdpc3RlcihyZWcsIHJlc3BvbnNlICYgfm1hc2spO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGFudGVubmFPbigpIHtcbiAgICAvLyBUdXJucyB0aGUgYW50ZW5uYSBvbiBieSBlbmFibGluZyBwaW5zIFRYMSBhbmQgVFgyXG4gICAgY29uc3QgcmVzcG9uc2U6IGFueSA9IGF3YWl0IHRoaXMucmVhZFJlZ2lzdGVyKHRoaXMuVHhDb250cm9sUmVnKTtcbiAgICBpZiAoKHJlc3BvbnNlICYgMHgwMykgIT09IDB4MDMpIHtcbiAgICAgIC8vIElmIFRYMSBhbmQgVFgyIGRvd25cbiAgICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXRNYXNrKHRoaXMuVHhDb250cm9sUmVnLCByZXNwb25zZSB8IDB4MDMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhbnRlbm5hT2ZmKCkge1xuICAgIC8vIFR1cm5zIHRoZSBhbnRlbm5hIG9mZiBieSBkaXNhYmxpbmcgcGlucyBUWDEgYW5kIFRYMlxuICAgIGF3YWl0IHRoaXMuY2xlYXJSZWdpc3RlckJpdE1hc2sodGhpcy5UeENvbnRyb2xSZWcsIDB4MDMpO1xuICB9XG5cbiAgLy8gUkM1MjIgYW5kIElTTzE0NDQzIGNhcmQgY29tbXVuaWNhdGlvblxuICBwdWJsaWMgYXN5bmMgdG9DYXJkKGNvbW1hbmQ6IGFueSwgYml0c1RvU2VuZDogYW55KSB7XG4gICAgbGV0IGRhdGE6IGFueSA9IFtdO1xuICAgIGxldCBiaXRTaXplOiBhbnkgPSAwO1xuICAgIGxldCBzdGF0dXM6IGFueSA9IEVSUk9SO1xuICAgIGxldCBpcnFFbjogYW55ID0gMHgwMDtcbiAgICBsZXQgd2FpdElScTogYW55ID0gMHgwMDtcblxuICAgIGlmIChjb21tYW5kID09PSB0aGlzLlBDRF9NRkF1dGhlbnQpIHtcbiAgICAgIGlycUVuID0gMHgxMjtcbiAgICAgIHdhaXRJUnEgPSAweDEwO1xuICAgIH1cbiAgICBpZiAoY29tbWFuZCA9PT0gdGhpcy5QQ0RfVHJhbnNjZWl2ZSkge1xuICAgICAgaXJxRW4gPSAweDc3O1xuICAgICAgd2FpdElScSA9IDB4MzA7XG4gICAgfVxuXG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQ29tbWFuZFJlZywgdGhpcy5QQ0RfSWRsZSk7IC8vIFN0b3AgYW55IGFjdGl2ZSBjb21tYW5kXG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQ29tbEVuUmVnLCBpcnFFbiB8IDB4ODApOyAvLyBJbnRlcnJ1cHQgcmVxdWVzdCBpcyBlbmFibGVkXG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQ29tSXJxUmVnLCAweDdmKTsgLy8gQ2xlYXIgYWxsIHNldmVuIGludGVycnVwdCByZXF1ZXN0IGJpdHNcbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5GSUZPTGV2ZWxSZWcsIDB4ODApOyAvLyBGbHVzaEJ1ZmZlciA9IDEsIEZJRk8gaW5pdGlhbGl6YXRpb25cbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5GSUZPRGF0YVJlZywgYml0c1RvU2VuZCk7IC8vIFdyaXRlIHNlbmREYXRhIHRvIHRoZSBGSUZPXG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQ29tbWFuZFJlZywgY29tbWFuZCk7IC8vIEV4ZWN1dGUgdGhlIGNvbW1hbmRcblxuICAgIGlmIChjb21tYW5kID09PSB0aGlzLlBDRF9UcmFuc2NlaXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFJlZ2lzdGVyQml0TWFzayh0aGlzLkJpdEZyYW1pbmdSZWcsIDB4ODApOyAvLyBTdGFydFNlbmQ9MSwgdHJhbnNtaXNzaW9uIG9mIGRhdGEgc3RhcnRzXG4gICAgfVxuXG4gICAgbGV0IFRyeWluZ1RpbWVzOiBhbnkgPSAxMDsgbGV0IG46IGFueSA9IDA7XG4gICAgZG8ge1xuICAgICAgLy8gV2FpdCBmb3IgdGhlIHJlY2VpdmVkIGRhdGEgY29tcGxldGVcbiAgICAgIG4gPSBhd2FpdCB0aGlzLnJlYWRSZWdpc3Rlcih0aGlzLkNvbUlycVJlZyk7XG4gICAgICBUcnlpbmdUaW1lcy0tO1xuICAgIH0gd2hpbGUgKFRyeWluZ1RpbWVzICE9PSAwICYmICEobiAmIDB4MDEpICYmICEobiAmIHdhaXRJUnEpKTsgLy8gIShUaW1lciBpbnRlcnJ1cHQgLSBub3RoaW5nIHJlY2VpdmVkIGJlZm9yZSB0aW1lb3V0KSAmICEoT25lIG9mIHRoZSBpbnRlcnJ1cHRzIHRoYXQgc2lnbmFsIHN1Y2Nlc3MgaGFzIGJlZW4gc2V0KVxuXG4gICAgLy8gYXdhaXQgdGhpcy5jbGVhclJlZ2lzdGVyQml0TWFzayh0aGlzLkJpdEZyYW1pbmdSZWcsIDB4ODApO1x0Ly9SZXNldCB3aXRoIHJlc2V0QW5kSW5pdCgpXG5cbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgdGhpcy5yZWFkUmVnaXN0ZXJfbkJ5dGUoW1xuICAgICAgdGhpcy5FcnJvclJlZyxcbiAgICAgIHRoaXMuRklGT0xldmVsUmVnLFxuICAgICAgdGhpcy5Db250cm9sUmVnLFxuICAgIF0pO1xuXG4gICAgaWYgKFRyeWluZ1RpbWVzICE9PSAwKSB7XG4gICAgICBpZiAoKHJlc3BvbnNlWzBdICYgMHgxYikgPT09IDB4MDApIHtcbiAgICAgICAgLy8gQnVmZmVyT3ZmbCBDb2xsRXJyIFBhcml0eUVyciBQcm90b2NvbEVyclxuICAgICAgICBzdGF0dXMgPSBuICYgaXJxRW4gJiAweDAxID8gRVJST1IgOiBPSztcblxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gdGhpcy5QQ0RfVHJhbnNjZWl2ZSkge1xuICAgICAgICAgIG4gPSByZXNwb25zZVsxXTsgLy8gTnVtYmVyIG9mIGJ5dGVzIGluIHRoZSBGSUZPXG4gICAgICAgICAgY29uc3QgbGFzdEJpdHM6IGFueSA9IHJlc3BvbnNlWzJdICYgMHgwNzsgLy8gUnhMYXN0Qml0c1syOjBdIGluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHZhbGlkIGJpdHMgaW4gdGhlIGxhc3QgcmVjZWl2ZWQgYnl0ZS4gSWYgdGhpcyB2YWx1ZSBpcyAwMDBiLCB0aGUgd2hvbGUgYnl0ZSBpcyB2YWxpZC5cbiAgICAgICAgICBpZiAobGFzdEJpdHMpIHtcbiAgICAgICAgICAgIGJpdFNpemUgPSAobiAtIDEpICogOCArIGxhc3RCaXRzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiaXRTaXplID0gbiAqIDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgICBuID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG4gPiAxNikge1xuICAgICAgICAgICAgbiA9IDE2O1xuICAgICAgICAgIH0gLy8gUmVzdHJpY3QgdW50aWwgMTZieXRlc1xuICAgICAgICAgIGRhdGEgPSBhd2FpdCB0aGlzLnJlYWRSZWdpc3Rlcl9uQnl0ZSh0aGlzLkZJRk9EYXRhUmVnLCBuKTsgLy8gR2V0IHJlY2VpdmVkIGRhdGEgZnJvbSBGSUZPIGJ1ZmZlclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSBFUlJPUjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXMsIGRhdGEsIGJpdFNpemV9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGZpbmRDYXJkV2FpdCgpIHtcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcbiAgICBhd2FpdCB0aGlzLnNlYXJjaFRhZ1dhaXQoKTtcbiAgICBjb25zdCB1aWQ6IGFueSA9IGF3YWl0IHRoaXMuZ2V0VWlkV2FpdCgpO1xuICAgIGNvbnN0IFBJQ0NfVHlwZTogYW55ID0gYXdhaXQgdGhpcy5pZGVudGlmeUNhcmRUeXBlV2FpdCh1aWQpO1xuICAgIHJldHVybiB7dWlkLCBQSUNDX1R5cGV9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlYXJjaFRhZ1dhaXQoKSB7XG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQml0RnJhbWluZ1JlZywgMHgwNyk7XG4gICAgY29uc3QgdGFnVHlwZTogYW55ID0gW3RoaXMuUElDQ19SRVFBXTtcblxuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLnRvQ2FyZCh0aGlzLlBDRF9UcmFuc2NlaXZlLCB0YWdUeXBlKTtcbiAgICBpZiAocmVzcG9uc2UuYml0U2l6ZSAhPT0gMHgxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FyZF9zZWFyY2hfRVJST1JcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFVpZFdhaXQoKSB7XG4gICAgdGhpcy53cml0ZVJlZ2lzdGVyKHRoaXMuQml0RnJhbWluZ1JlZywgMHgwMCk7XG4gICAgbGV0IHVpZDogYW55ID0gW3RoaXMuUElDQ19TRUxfQ0wxLCAweDIwXTtcblxuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLnRvQ2FyZCh0aGlzLlBDRF9UcmFuc2NlaXZlLCB1aWQpO1xuICAgIGlmICghcmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1aWRfc2Nhbl9FUlJPUlwiKTtcbiAgICB9XG4gICAgY29uc3QgdWlkQ2hlY2s6IGFueSA9XG4gICAgICByZXNwb25zZS5kYXRhWzBdIF4gcmVzcG9uc2UuZGF0YVsxXSBeIHJlc3BvbnNlLmRhdGFbMl0gXiByZXNwb25zZS5kYXRhWzNdO1xuICAgIGlmICh1aWRDaGVjayAhPT0gcmVzcG9uc2UuZGF0YVs0XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidWlkX2NoZWNrX0VSUk9SXCIpO1xuICAgIH1cbiAgICB1aWQgPSByZXNwb25zZS5kYXRhO1xuICAgIC8vICh1aWQpLnBvcCgpO1xuICAgIHJldHVybiB1aWQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY2FsY3VsYXRlQ1JDV2FpdChkYXRhOiBhbnkpIHtcbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5Db21tYW5kUmVnLCB0aGlzLlBDRF9JZGxlKTsgLy8gU3RvcCBhbnkgYWN0aXZlIGNvbW1hbmRcbiAgICB0aGlzLndyaXRlUmVnaXN0ZXIodGhpcy5EaXZJcnFSZWcsIDB4MDQpOyAvLyBDbGVhciB0aGUgQ1JDSVJxIGludGVycnVwdCByZXF1ZXN0IGJpdFxuICAgIHRoaXMud3JpdGVSZWdpc3Rlcih0aGlzLkZJRk9MZXZlbFJlZywgMHg4MCk7IC8vIEZsdXNoQnVmZmVyID0gMSwgRklGTyBpbml0aWFsaXphdGlvblxuICAgIHRoaXMud3JpdGVSZWdpc3Rlcih0aGlzLkZJRk9EYXRhUmVnLCBkYXRhKTsgLy8gV3JpdGUgZGF0YSB0byB0aGUgRklGT1xuICAgIHRoaXMud3JpdGVSZWdpc3Rlcih0aGlzLkNvbW1hbmRSZWcsIHRoaXMuUENEX0NhbGNDUkMpOyAvLyBTdGFydCB0aGUgY2FsY3VsYXRpb25cblxuICAgIGxldCBpOiBhbnkgPSAweGZmOyBsZXQgbjogYW55O1xuICAgIC8vIFdhaXQgZm9yIHRoZSBDUkMgY2FsY3VsYXRpb24gdG8gY29tcGxldGVcbiAgICBkbyB7XG4gICAgICBuID0gYXdhaXQgdGhpcy5yZWFkUmVnaXN0ZXIodGhpcy5EaXZJcnFSZWcpO1xuICAgICAgaS0tO1xuICAgIH0gd2hpbGUgKGkgIT09IDAgJiYgIShuICYgMHgwNCkpOyAvLyBDUkNJcnEgPSAxIChDYWxjdWxhdGlvbiBkb25lKVxuICAgIC8vIENSQyBjYWxjdWxhdGlvbiByZXN1bHRcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWFkUmVnaXN0ZXJfbkJ5dGUoW1xuICAgICAgdGhpcy5DUkNSZXN1bHRSZWdMU0IsXG4gICAgICB0aGlzLkNSQ1Jlc3VsdFJlZ01TQixcbiAgICBdKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpZGVudGlmeVNvZnR3YXJlV2FpdCgpIHtcbiAgICBsZXQgdmVyc2lvbjogYW55ID0gYXdhaXQgdGhpcy5yZWFkUmVnaXN0ZXIodGhpcy5WZXJzaW9uUmVnKTtcbiAgICBzd2l0Y2ggKHZlcnNpb24pIHtcbiAgICAgIGNhc2UgMHg4ODpcbiAgICAgICAgdmVyc2lvbiA9IFwiKGNsb25lKVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHg5MDpcbiAgICAgICAgdmVyc2lvbiA9IFwidjAuMFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHg5MTpcbiAgICAgICAgdmVyc2lvbiA9IFwidjEuMFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHg5MjpcbiAgICAgICAgdmVyc2lvbiA9IFwidjIuMFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHgxMjpcbiAgICAgICAgdmVyc2lvbiA9IFwiY291bnRlcmZlaXQgY2hpcFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZlcnNpb24gPSBcIih1bmtub3duKVwiO1xuICAgIH1cbiAgICAvLyBXaGVuIDB4MDAgb3IgMHhGRiBpcyByZXR1cm5lZCwgY29tbXVuaWNhdGlvbiBwcm9iYWJseSBmYWlsZWRcbiAgICBpZiAodmVyc2lvbiA9PT0gMHgwMCB8fCB2ZXJzaW9uID09PSAweGZmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb2Z0d2FyZV92ZXJzaW9uX0VSUk9SXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmVyc2lvbjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpZGVudGlmeUNhcmRUeXBlV2FpdCh1aWQ6IGFueSkge1xuICAgIC8vIElkZW50aWZ5IHR5cGUgb2YgdGhlIHNjYW5uZWQgY2FyZFxuICAgIGxldCBidWZmZXI6IGFueSA9IFt0aGlzLlBJQ0NfU0VsRUNUVEFHLCAweDcwXS5jb25jYXQodWlkKTtcbiAgICBidWZmZXIgPSBidWZmZXIuY29uY2F0KGF3YWl0IHRoaXMuY2FsY3VsYXRlQ1JDV2FpdChidWZmZXIpKTtcbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgdGhpcy50b0NhcmQodGhpcy5QQ0RfVHJhbnNjZWl2ZSwgYnVmZmVyKTtcbiAgICBsZXQgUElDQ19UeXBlOiBhbnk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5iaXRTaXplID09PSAweDE4KSB7XG4gICAgICBQSUNDX1R5cGUgPSByZXNwb25zZS5kYXRhWzBdO1xuICAgIH1cbiAgICBzd2l0Y2ggKFBJQ0NfVHlwZSkge1xuICAgICAgY2FzZSAweDA0OlxuICAgICAgICBQSUNDX1R5cGUgPSBcIlNBSyBpbmRpY2F0ZXMgVUlEIGlzIG5vdCBjb21wbGV0ZS5cIjtcbiAgICAgICAgYnJlYWs7IC8vIFVJRCBub3QgY29tcGxldGVcbiAgICAgIGNhc2UgMHgwOTpcbiAgICAgICAgUElDQ19UeXBlID0gXCJNSUZBUkUgTWluaSwgMzIwIGJ5dGVzXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAweDA4OlxuICAgICAgICBQSUNDX1R5cGUgPSBcIk1JRkFSRSAxS0JcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MTg6XG4gICAgICAgIFBJQ0NfVHlwZSA9IFwiTUlGQVJFIDRLQlwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHgwMDpcbiAgICAgICAgUElDQ19UeXBlID0gXCJNSUZBUkUgVWx0cmFsaWdodCBvciBVbHRyYWxpZ2h0IENcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MTE6XG4gICAgICAgIFBJQ0NfVHlwZSA9IFwiTUlGQVJFIFBsdXNcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MDE6XG4gICAgICAgIFBJQ0NfVHlwZSA9IFwiTUlGQVJFIFROUDNYWFhcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MjA6XG4gICAgICAgIFBJQ0NfVHlwZSA9IFwiUElDQyBjb21wbGlhbnQgd2l0aCBJU08vSUVDIDE0NDQzLTRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4NDA6XG4gICAgICAgIFBJQ0NfVHlwZSA9IFwiUElDQyBjb21wbGlhbnQgd2l0aCBJU08vSUVDIDE4MDkyIChORkMpXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUElDQ190eXBlX0VSUk9SXCIpO1xuICAgIH1cbiAgICByZXR1cm4gUElDQ19UeXBlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWRTZWN0b3JEYXRhV2FpdChTZWN0b3I6IGFueSwgdWlkOiBhbnkpIHtcbiAgICBhd2FpdCB0aGlzLmF1dGhlbnRpY2F0ZVNlY3RvcldhaXQoU2VjdG9yLCB1aWQpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFNlY3RvckRhdGFXYWl0KFNlY3Rvcik7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVhZEJsb2NrRGF0YVdhaXQoQmxvY2s6IGFueSwgdWlkOiBhbnkpIHtcbiAgICBhd2FpdCB0aGlzLmF1dGhlbnRpY2F0ZUJsb2NrV2FpdChCbG9jaywgdWlkKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRCbG9ja0RhdGFXYWl0KEJsb2NrKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhdXRoZW50aWNhdGVTZWN0b3JXYWl0KFNlY3RvcjogYW55LCB1aWQ6IGFueSkge1xuICAgIC8qIFBhc3N3b3JkIGF1dGhlbnRpY2F0aW9uIG1vZGUgKEEgb3IgQilcblx0XHQgKiBQSUNDX0FVVEhfS0VZQSA9IFZlcmlmeSB0aGUgQSBrZXkgYXJlIHRoZSBmaXJzdCA2IGJpdCBvZiA0dGggQmxvY2sgb2YgZWFjaCBzZWN0b3Jcblx0XHQgKiBQSUNDX0FVVEhfS0VZQiA9IFZlcmlmeSB0aGUgQiBrZXkgYXJlIHRoZSBsYXN0IDYgYml0IG9mIDR0aCBCbG9jayBvZiBlYWNoIHNlY3RvclxuXHRcdCAqL1xuICAgIGNvbnN0IEtFWV9BOiBhbnkgPSBbMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZl07XG4gICAgLy8gY29uc3QgS0VZX0IgPSBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XG4gICAgY29uc3QgQmxvY2s6IGFueSA9IFNlY3RvciAqIDQ7XG4gICAgbGV0IGJ1ZmZlcjogYW55ID0gW3RoaXMuUElDQ19BVVRIX0tFWUEsIEJsb2NrXS5jb25jYXQoS0VZX0EpOyAvLyBBcHBlbmQga2V5ID0gNiBiaXQgb2YgMHhGRlxuICAgIHVpZCA9IHVpZC5zbGljZSgwLCA0KTsgLy8gQXBwZW5kIHRoZSBmaXJzdCA0IGJpdCBvZiB0aGUgVUlEXG4gICAgYnVmZmVyID0gYnVmZmVyLmNvbmNhdCh1aWQpOyAvLyAxMmJ5dGVcbiAgICAvLyBTdGFydCBhdXRoZW50aWNhdGlvbiBpdHNlbGZcbiAgICBhd2FpdCB0aGlzLnRvQ2FyZCh0aGlzLlBDRF9NRkF1dGhlbnQsIGJ1ZmZlcik7XG4gICAgaWYgKCEoKGF3YWl0IHRoaXMucmVhZFJlZ2lzdGVyKHRoaXMuU3RhdHVzMlJlZykpICYgMHgwOCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhc3N3b3JkX2F1dGhlbnRpY2F0aW9uX0VSUk9SXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhdXRoZW50aWNhdGVCbG9ja1dhaXQoQmxvY2s6IGFueSwgdWlkOiBhbnkpIHtcbiAgICAvKiBQYXNzd29yZCBhdXRoZW50aWNhdGlvbiBtb2RlIChBIG9yIEIpXG5cdFx0ICogUElDQ19BVVRIX0tFWUEgPSBWZXJpZnkgdGhlIEEga2V5ICh0aGUgZmlyc3QgNiBiaXQgb2YgM3RoIEJsb2NrIGZvIGVhY2ggU2VjdG9yKVxuXHRcdCAqIFBJQ0NfQVVUSF9LRVlCID0gVmVyaWZ5IHRoZSBCIGtleSAodGhlIGxhc3QgNiBiaXQgb2YgM3RoIEJsb2NrIGZvIGVhY2ggU2VjdG9yKVxuXHRcdCAqL1xuICAgIGNvbnN0IEtFWV9BOiBhbnkgPSBbMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZl07XG4gICAgLy8gY29uc3QgS0VZX0IgPSBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XG4gICAgbGV0IGJ1ZmZlcjogYW55ID0gW3RoaXMuUElDQ19BVVRIX0tFWUEsIEJsb2NrXS5jb25jYXQoS0VZX0EpOyAvLyBBcHBlbmQga2V5ID0gNiBiaXQgb2YgMHhGRlxuICAgIHVpZCA9IHVpZC5zbGljZSgwLCA0KTsgLy8gQXBwZW5kIHRoZSBmaXJzdCA0IGJpdCBvZiB0aGUgVUlEXG4gICAgYnVmZmVyID0gYnVmZmVyLmNvbmNhdCh1aWQpOyAvLyAxMmJ5dGVcblxuICAgIC8vIFN0YXJ0IGF1dGhlbnRpY2F0aW9uIGl0c2VsZlxuICAgIGF3YWl0IHRoaXMudG9DYXJkKHRoaXMuUENEX01GQXV0aGVudCwgYnVmZmVyKTtcbiAgICBpZiAoISgoYXdhaXQgdGhpcy5yZWFkUmVnaXN0ZXIodGhpcy5TdGF0dXMyUmVnKSkgJiAweDA4KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGFzc3dvcmRfYXV0aGVudGljYXRpb25fRVJST1JcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWRBZ2FpbldhaXQoKSB7XG4gICAgLy8gSWYgeW91IGZpbmlzaCByZWFkaW5nIGFuZCB3YW50IHRvIHJlYWQgYWdhaW4sIHRoaXMgY2FuIHVzZSBpbnN0ZWFkIG9mIGluaXQoKVxuICAgIGF3YWl0IHRoaXMuY2xlYXJSZWdpc3RlckJpdE1hc2sodGhpcy5TdGF0dXMyUmVnLCAweDA4KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRTZWN0b3JEYXRhV2FpdChhZGRyZXNzOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gW107XG4gICAgY29uc3QgYmxvY2tEYXRhOiBhbnkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgbGV0IHJlcXVlc3Q6IGFueSA9IFt0aGlzLlBJQ0NfUkVBRCwgYWRkcmVzcyAqIDQgKyBpXTtcbiAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNvbmNhdChhd2FpdCB0aGlzLmNhbGN1bGF0ZUNSQ1dhaXQocmVxdWVzdCkpO1xuICAgICAgcmVzcG9uc2VbaV0gPSBhd2FpdCB0aGlzLnRvQ2FyZCh0aGlzLlBDRF9UcmFuc2NlaXZlLCByZXF1ZXN0KTtcbiAgICAgIGlmICghcmVzcG9uc2VbaV0uc3RhdHVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImRhdGFfcmVhZF9FUlJPUlwiKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrRGF0YVtpXSA9IHJlc3BvbnNlW2ldLmRhdGE7XG4gICAgfVxuICAgIHJldHVybiBibG9ja0RhdGE7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0QmxvY2tEYXRhV2FpdChhZGRyZXNzOiBhbnkpIHtcbiAgICBsZXQgcmVxdWVzdDogYW55ID0gW3RoaXMuUElDQ19SRUFELCBhZGRyZXNzXTtcbiAgICByZXF1ZXN0ID0gcmVxdWVzdC5jb25jYXQoYXdhaXQgdGhpcy5jYWxjdWxhdGVDUkNXYWl0KHJlcXVlc3QpKTtcbiAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgdGhpcy50b0NhcmQodGhpcy5QQ0RfVHJhbnNjZWl2ZSwgcmVxdWVzdCk7XG4gICAgaWYgKCFyZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRhdGFfcmVhZF9FUlJPUlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYXBwZW5kQ1JDdG9CdWZmZXJBbmRTZW5kVG9DYXJkV2FpdChidWZmZXI6IGFueSkge1xuICAgIGJ1ZmZlciA9IGJ1ZmZlci5jb25jYXQoYXdhaXQgdGhpcy5jYWxjdWxhdGVDUkNXYWl0KGJ1ZmZlcikpO1xuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLnRvQ2FyZCh0aGlzLlBDRF9UcmFuc2NlaXZlLCBidWZmZXIpO1xuICAgIGlmIChcbiAgICAgICFyZXNwb25zZS5zdGF0dXMgfHxcbiAgICAgIHJlc3BvbnNlLmJpdFNpemUgIT09IDQgfHxcbiAgICAgIChyZXNwb25zZS5kYXRhWzBdICYgMHgwZikgIT09IDB4MGFcbiAgICApIHtcbiAgICAgIHJlc3BvbnNlLnN0YXR1cyA9IEVSUk9SO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd3JpdGVCbG9ja0RhdGFXYWl0KEJsb2NrOiBhbnksIHNpeHRlZW5CeXRlczogYW55KSB7XG4gICAgaWYgKEJsb2NrID09PSAwIHx8IEJsb2NrICUgNCA9PT0gMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVueV9Xcml0ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyOiBhbnkgPSBbdGhpcy5QSUNDX1dSSVRFLCBCbG9ja107XG4gICAgbGV0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCB0aGlzLmFwcGVuZENSQ3RvQnVmZmVyQW5kU2VuZFRvQ2FyZFdhaXQoYnVmZmVyKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBwZW5kQ1JDdG9CdWZmZXJBbmRTZW5kVG9DYXJkV2FpdChzaXh0ZWVuQnl0ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhX3dyaXRlX0VSUk9SXCIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRlJDNTIyO1xuIl19


/***/ }),

/***/ "./dist/src/parts/Wireless/RN42/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class RN42 {
    constructor() {
        this.keys = ["tx", "rx", "gnd"];
        this.requiredKeys = ["tx", "rx"];
    }
    static info() {
        return {
            name: "RN42",
        };
    }
    wired(obniz) {
        if (obniz.isValidIO(this.params.gnd)) {
            obniz.getIO(this.params.gnd).output(false);
        }
        this.uart = obniz.getFreeUart();
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 115200,
            drive: "3v",
        });
        const self = this;
        this.uart.onreceive = (data, text) => {
            // this is not perfect. separation is possible.
            if (text.indexOf("CONNECT") >= 0) {
                console.log("connected");
            }
            else if (text.indexOf("DISCONNECT") >= 0) {
                console.log("disconnected");
            }
            if (typeof self.onreceive === "function") {
                self.onreceive(data, text);
            }
        };
    }
    send(data) {
        this.uart.send(data);
    }
    sendCommand(data) {
        this.uart.send(data + "\n");
        this.obniz.wait(100);
    }
    enterCommandMode() {
        this.send("$$$");
        this.obniz.wait(100);
    }
    config(json) {
        this.enterCommandMode();
        if (typeof json !== "object") {
            // TODO: warning
            return;
        }
        // remove noize data
        this.sendCommand("");
        if (json.master_slave) {
            this.config_masterslave(json.master_slave);
        }
        if (json.auth) {
            this.config_auth(json.auth);
        }
        if (json.hid_flag) {
            this.config_HIDflag(json.hid_flag);
        }
        if (json.profile) {
            this.config_profile(json.profile);
        }
        if (json.power) {
            this.config_power(json.power);
        }
        if (json.display_name) {
            this.config_displayName(json.display_name);
        }
        this.config_reboot();
    }
    config_reboot() {
        this.sendCommand("R,1");
    }
    config_masterslave(mode) {
        let val = -1;
        if (typeof mode === "number") {
            val = mode;
        }
        else if (typeof mode === "string") {
            const modes = [
                "slave",
                "master",
                "trigger",
                "auto-connect-master",
                "auto-connect-dtr",
                "auto-connect-any",
                "pairing",
            ];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand("SM," + val);
    }
    config_displayName(name) {
        this.sendCommand("SN," + name);
    }
    // // SH,0200 HID Flag register. Descriptor=keyboard
    config_HIDflag(flag) {
        this.sendCommand("SH," + flag);
    }
    config_profile(mode) {
        let val = -1;
        if (typeof mode === "number") {
            val = mode;
        }
        else if (typeof mode === "string") {
            const modes = [
                "SPP",
                "DUN-DCE",
                "DUN-DTE",
                "MDM-SPP",
                "SPP-DUN-DCE",
                "APL",
                "HID",
            ];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand("S~," + val);
    }
    config_revert_localecho() {
        this.sendCommand("+");
    }
    config_auth(mode) {
        let val = -1;
        if (typeof mode === "number") {
            val = mode;
        }
        else if (typeof mode === "string") {
            const modes = ["open", "ssp-keyboard", "just-work", "pincode"];
            for (let i = 0; i < modes.length; i++) {
                if (modes[i] === mode) {
                    val = i;
                    break;
                }
            }
        }
        if (val === -1) {
            // TODO: warning
            return;
        }
        this.sendCommand("SA," + val);
    }
    config_power(dbm) {
        let val = "0010";
        if (16 > dbm && dbm >= 12) {
            val = "000C";
        }
        else if (12 > dbm && dbm >= 8) {
            val = "0008";
        }
        else if (8 > dbm && dbm >= 4) {
            val = "0004";
        }
        else if (4 > dbm && dbm >= 0) {
            val = "0000";
        }
        else if (0 > dbm && dbm >= -4) {
            val = "FFFC";
        }
        else if (-4 > dbm && dbm >= -8) {
            val = "FFF8";
        }
        else if (-8 > dbm) {
            val = "FFF4";
        }
        this.sendCommand("SY," + val);
    }
    config_get_setting() {
        this.sendCommand("D");
    }
    config_get_extendSetting() {
        this.sendCommand("E");
    }
}
exports.default = RN42;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/Wireless/XBee/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class XBee {
    constructor() {
        this.keys = ["tx", "rx", "gnd"];
        this.requiredKeys = ["tx", "rx"];
        this.displayIoNames = { tx: "<tx", rx: ">rx" };
    }
    static info() {
        return {
            name: "XBee",
        };
    }
    wired(obniz) {
        this.uart = obniz.getFreeUart();
        this.currentCommand = null;
        this.commands = [];
        this.isAtMode = false;
        this.onFinishAtModeCallback = null;
        if (typeof this.params.gnd === "number") {
            obniz.getIO(this.params.gnd).output(false);
        }
        this.uart.start({
            tx: this.params.tx,
            rx: this.params.rx,
            baud: 9600,
            drive: "3v",
        });
        this.uart.onreceive = (data, text) => {
            if (this.isAtMode) {
                this.onAtResultsRecieve(data, text);
            }
            else {
                if (typeof this.onreceive === "function") {
                    this.onreceive(data, text);
                }
            }
        };
    }
    send(text) {
        if (this.isAtMode === false) {
            this.uart.send(text);
        }
        else {
            this.obniz.error("XBee is AT Command mode now. Wait for finish config.");
        }
    }
    onAtResultsRecieve(data, text) {
        if (!this.isAtMode) {
            return;
        }
        const next = () => {
            this.currentCommand = null;
            this.sendCommand();
        };
        if (text === "OK\r") {
            if (this.currentCommand === "ATCN") {
                this.isAtMode = false;
                this.currentCommand = null;
                if (typeof this.onFinishAtModeCallback === "function") {
                    this.onFinishAtModeCallback();
                    this.onFinishAtModeCallback = null;
                }
                return;
            }
            next();
        }
        else if (text === "ERROR\r") {
            this.obniz.error("XBee config error : " + this.currentCommand);
        }
        else {
            // response of at command.
            console.log("XBEE : no catch message", data);
            next();
        }
    }
    addCommand(command, value) {
        const str = command + (value ? " " + value : "");
        this.commands.push(str);
        if (this.isAtMode === true && this.currentCommand === null) {
            this.sendCommand();
        }
    }
    sendCommand() {
        if (this.isAtMode === true &&
            this.currentCommand === null &&
            this.commands.length > 0) {
            this.currentCommand = "AT" + this.commands.shift();
            this.uart.send(this.currentCommand + "\r");
        }
    }
    enterAtMode() {
        if (this.currentCommand !== null) {
            return;
        }
        this.isAtMode = true;
        this.obniz.wait(1000);
        const command = "+++";
        this.currentCommand = command;
        this.uart.send(this.currentCommand);
        this.obniz.wait(1000);
    }
    exitAtMode() {
        this.addCommand("CN");
    }
    configWait(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isAtMode) {
                throw new Error("Xbee : duplicate config setting");
            }
            return new Promise((resolve, reject) => {
                const standaloneKeys = {
                    destination_address_high: "DH",
                    destination_address_low: "DL",
                    source_address: "MY",
                };
                const highLowKeys = ["destination_address"];
                this.enterAtMode();
                for (const key in config) {
                    if (key.length === 2) {
                        this.addCommand(key, config[key]);
                    }
                    else if (standaloneKeys[key]) {
                        this.addCommand(standaloneKeys[key], config[key]);
                    }
                    else if (highLowKeys.includes(key)) {
                        let high = config[key].slice(0, -8);
                        if (!high) {
                            high = "0";
                        }
                        const low = config[key].slice(-8);
                        this.addCommand(standaloneKeys[key + "_high"], high);
                        this.addCommand(standaloneKeys[key + "_low"], low);
                    }
                }
                this.exitAtMode();
                this.onFinishAtModeCallback = () => {
                    resolve();
                };
            });
        });
    }
}
exports.default = XBee;

//# sourceMappingURL=data:application/json;charset=utf8;base64,


/***/ }),

/***/ "./dist/src/parts/i2cParts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class I2cPartsAbstruct {
    constructor() {
        this.keys = ["gnd", "vcc", "sda", "scl", "i2c", "vcc"];
        this.requiredKeys = [];
        this.i2cinfo = this.i2cInfo();
        this.address = this.i2cinfo.address;
    }
    i2cInfo() {
        throw new Error("abstruct class");
        // eslint-disable-next-line no-unreachable
        return {
            address: 0x00,
            clock: 100000,
            voltage: "3v",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, this.i2cinfo.voltage);
        this.params.clock = this.i2cinfo.clock;
        this.params.pull = this.i2cinfo.voltage;
        this.params.mode = "master";
        // @ts-ignore
        this.i2c = this.obniz.getI2CWithConfig(this.params);
    }
    char2short(val1, val2) {
        const buffer = new ArrayBuffer(2);
        const dv = new DataView(buffer);
        dv.setUint8(0, val1);
        dv.setUint8(1, val2);
        return dv.getInt16(0, false);
    }
    readWait(command, length) {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [command]);
            return yield this.i2c.readWait(this.address, length);
        });
    }
    readUint16Wait(command, length) {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [command]);
            return yield this.i2c.readWait(this.address, length);
        });
    }
    write(command, buf) {
        if (!Array.isArray(buf)) {
            buf = [buf];
        }
        this.i2c.write(this.address, [command, ...buf]);
    }
}
exports.default = I2cPartsAbstruct;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9pMmNQYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sZ0JBQWdCO0lBU3BCO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUVsQywwQ0FBMEM7UUFDMUMsT0FBTztZQUNMLE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLE1BQU07WUFDYixPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUM1QixhQUFhO1FBQ2IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sVUFBVSxDQUFDLElBQVMsRUFBRSxJQUFTO1FBQ3BDLE1BQU0sTUFBTSxHQUFRLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVZLFFBQVEsQ0FBQyxPQUFZLEVBQUUsTUFBVzs7WUFDN0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDeEMsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkQsQ0FBQztLQUFBO0lBRVksY0FBYyxDQUFDLE9BQVksRUFBRSxNQUFXOztZQUNuRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN4QyxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2RCxDQUFDO0tBQUE7SUFFTSxLQUFLLENBQUMsT0FBWSxFQUFFLEdBQVE7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdkIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDYjtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDRjtBQUVELGtCQUFlLGdCQUFnQixDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9pMmNQYXJ0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEkyY1BhcnRzQWJzdHJ1Y3Qge1xuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBpMmNpbmZvOiBhbnk7XG4gIHB1YmxpYyBhZGRyZXNzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJ2Y2NcIiwgXCJzZGFcIiwgXCJzY2xcIiwgXCJpMmNcIiwgXCJ2Y2NcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMuaTJjaW5mbyA9IHRoaXMuaTJjSW5mbygpO1xuICAgIHRoaXMuYWRkcmVzcyA9IHRoaXMuaTJjaW5mby5hZGRyZXNzO1xuICB9XG5cbiAgcHVibGljIGkyY0luZm8oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYWJzdHJ1Y3QgY2xhc3NcIik7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgICByZXR1cm4ge1xuICAgICAgYWRkcmVzczogMHgwMCxcbiAgICAgIGNsb2NrOiAxMDAwMDAsXG4gICAgICB2b2x0YWdlOiBcIjN2XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCB0aGlzLmkyY2luZm8udm9sdGFnZSk7XG4gICAgdGhpcy5wYXJhbXMuY2xvY2sgPSB0aGlzLmkyY2luZm8uY2xvY2s7XG4gICAgdGhpcy5wYXJhbXMucHVsbCA9IHRoaXMuaTJjaW5mby52b2x0YWdlO1xuICAgIHRoaXMucGFyYW1zLm1vZGUgPSBcIm1hc3RlclwiO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLmkyYyA9IHRoaXMub2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gIH1cblxuICBwdWJsaWMgY2hhcjJzaG9ydCh2YWwxOiBhbnksIHZhbDI6IGFueSkge1xuICAgIGNvbnN0IGJ1ZmZlcjogYW55ID0gbmV3IEFycmF5QnVmZmVyKDIpO1xuICAgIGNvbnN0IGR2OiBhbnkgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICBkdi5zZXRVaW50OCgwLCB2YWwxKTtcbiAgICBkdi5zZXRVaW50OCgxLCB2YWwyKTtcbiAgICByZXR1cm4gZHYuZ2V0SW50MTYoMCwgZmFsc2UpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWRXYWl0KGNvbW1hbmQ6IGFueSwgbGVuZ3RoOiBhbnkpIHtcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFtjb21tYW5kXSk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgbGVuZ3RoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkVWludDE2V2FpdChjb21tYW5kOiBhbnksIGxlbmd0aDogYW55KSB7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbY29tbWFuZF0pO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmkyYy5yZWFkV2FpdCh0aGlzLmFkZHJlc3MsIGxlbmd0aCk7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoY29tbWFuZDogYW55LCBidWY6IGFueSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShidWYpKSB7XG4gICAgICBidWYgPSBbYnVmXTtcbiAgICB9XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbY29tbWFuZCwgLi4uYnVmXSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSTJjUGFydHNBYnN0cnVjdDtcbiJdfQ==


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__("./node_modules/bn.js/lib/bn.js");

asn1.define = __webpack_require__("./node_modules/asn1.js/lib/asn1/api.js").define;
asn1.base = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js");
asn1.constants = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/index.js");
asn1.decoders = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/index.js");
asn1.encoders = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/index.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/api.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__("./node_modules/vm-browserify/index.js").runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/buffer.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/index.js":
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
base.DecoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
base.EncoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
base.Node = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/node.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/node.js":
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var EncoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;
var DecoderBuffer = __webpack_require__("./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/reporter.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/der.js":
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/index.js");

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/index.js":
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/constants/der.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/der.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/index.js":
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/der.js");
decoders.pem = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

var DERDecoder = __webpack_require__("./node_modules/asn1.js/lib/asn1/decoders/der.js");

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/der.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;

var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/index.js":
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/der.js");
encoders.pem = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/pem.js");


/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var DEREncoder = __webpack_require__("./node_modules/asn1.js/lib/asn1/encoders/der.js");

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),

/***/ "./node_modules/balanced-match/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(2).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/brace-expansion/index.js":
/***/ (function(module, exports, __webpack_require__) {

var concatMap = __webpack_require__("./node_modules/concat-map/index.js");
var balanced = __webpack_require__("./node_modules/balanced-match/index.js");

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ "./node_modules/brorand/index.js":
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(3);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),

/***/ "./node_modules/browserify-aes/aes.js":
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),

/***/ "./node_modules/browserify-aes/authCipher.js":
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var GHASH = __webpack_require__("./node_modules/browserify-aes/ghash.js")
var xor = __webpack_require__("./node_modules/buffer-xor/index.js")
var incr32 = __webpack_require__("./node_modules/browserify-aes/incr32.js")

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-aes/browser.js":
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__("./node_modules/browserify-aes/encrypter.js")
var deciphers = __webpack_require__("./node_modules/browserify-aes/decrypter.js")
var modes = __webpack_require__("./node_modules/browserify-aes/modes/list.json")

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-aes/decrypter.js":
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__("./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var MODES = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var StreamCipher = __webpack_require__("./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),

/***/ "./node_modules/browserify-aes/encrypter.js":
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var AuthCipher = __webpack_require__("./node_modules/browserify-aes/authCipher.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var StreamCipher = __webpack_require__("./node_modules/browserify-aes/streamCipher.js")
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),

/***/ "./node_modules/browserify-aes/ghash.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),

/***/ "./node_modules/browserify-aes/incr32.js":
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cbc.js":
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb1.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb8.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ctr.js":
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__("./node_modules/buffer-xor/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var incr32 = __webpack_require__("./node_modules/browserify-aes/incr32.js")

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/ecb.js":
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),

/***/ "./node_modules/browserify-aes/modes/index.js":
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__("./node_modules/browserify-aes/modes/ecb.js"),
  CBC: __webpack_require__("./node_modules/browserify-aes/modes/cbc.js"),
  CFB: __webpack_require__("./node_modules/browserify-aes/modes/cfb.js"),
  CFB8: __webpack_require__("./node_modules/browserify-aes/modes/cfb8.js"),
  CFB1: __webpack_require__("./node_modules/browserify-aes/modes/cfb1.js"),
  OFB: __webpack_require__("./node_modules/browserify-aes/modes/ofb.js"),
  CTR: __webpack_require__("./node_modules/browserify-aes/modes/ctr.js"),
  GCM: __webpack_require__("./node_modules/browserify-aes/modes/ctr.js")
}

var modes = __webpack_require__("./node_modules/browserify-aes/modes/list.json")

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),

/***/ "./node_modules/browserify-aes/modes/list.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ofb.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__("./node_modules/buffer-xor/index.js")

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-aes/streamCipher.js":
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__("./node_modules/browserify-aes/aes.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/cipher-base/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),

/***/ "./node_modules/browserify-cipher/browser.js":
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__("./node_modules/browserify-des/index.js")
var aes = __webpack_require__("./node_modules/browserify-aes/browser.js")
var aesModes = __webpack_require__("./node_modules/browserify-aes/modes/index.js")
var desModes = __webpack_require__("./node_modules/browserify-des/modes.js")
var ebtk = __webpack_require__("./node_modules/evp_bytestokey/index.js")

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),

/***/ "./node_modules/browserify-des/index.js":
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__("./node_modules/cipher-base/index.js")
var des = __webpack_require__("./node_modules/des.js/lib/des.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__("./node_modules/browserify-des/node_modules/safe-buffer/index.js").Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),

/***/ "./node_modules/browserify-des/modes.js":
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),

/***/ "./node_modules/browserify-des/node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/browserify-rsa/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/algos.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/browserify-sign/browser/algorithms.json")


/***/ }),

/***/ "./node_modules/browserify-sign/browser/algorithms.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/curves.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var stream = __webpack_require__("./node_modules/stream-browserify/index.js")
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var sign = __webpack_require__("./node_modules/browserify-sign/browser/sign.js")
var verify = __webpack_require__("./node_modules/browserify-sign/browser/verify.js")

var algorithms = __webpack_require__("./node_modules/browserify-sign/browser/algorithms.json")
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/sign.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__("./node_modules/create-hmac/browser.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var EC = __webpack_require__("./node_modules/elliptic/lib/elliptic.js").ec
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var curves = __webpack_require__("./node_modules/browserify-sign/browser/curves.json")

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/verify.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var EC = __webpack_require__("./node_modules/elliptic/lib/elliptic.js").ec
var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var curves = __webpack_require__("./node_modules/browserify-sign/browser/curves.json")

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer-xor/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__("./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__("./node_modules/ieee754/index.js")
var isArray = __webpack_require__("./node_modules/buffer/node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/buffer/node_modules/isarray/index.js":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/cipher-base/index.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/stream-browserify/index.js").Transform
var StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),

/***/ "./node_modules/concat-map/index.js":
/***/ (function(module, exports) {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-ecdh/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__("./node_modules/elliptic/lib/elliptic.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-hash/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var MD5 = __webpack_require__("./node_modules/md5.js/index.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")
var sha = __webpack_require__("./node_modules/sha.js/index.js")
var Base = __webpack_require__("./node_modules/cipher-base/index.js")

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),

/***/ "./node_modules/create-hash/md5.js":
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__("./node_modules/md5.js/index.js")

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),

/***/ "./node_modules/create-hmac/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Legacy = __webpack_require__("./node_modules/create-hmac/legacy.js")
var Base = __webpack_require__("./node_modules/cipher-base/index.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var md5 = __webpack_require__("./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")

var sha = __webpack_require__("./node_modules/sha.js/index.js")

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),

/***/ "./node_modules/create-hmac/legacy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var Base = __webpack_require__("./node_modules/cipher-base/index.js")

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),

/***/ "./node_modules/crypto-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__("./node_modules/randombytes/browser.js")
exports.createHash = exports.Hash = __webpack_require__("./node_modules/create-hash/browser.js")
exports.createHmac = exports.Hmac = __webpack_require__("./node_modules/create-hmac/browser.js")

var algos = __webpack_require__("./node_modules/browserify-sign/algos.js")
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__("./node_modules/pbkdf2/browser.js")
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__("./node_modules/browserify-cipher/browser.js")

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__("./node_modules/diffie-hellman/browser.js")

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__("./node_modules/browserify-sign/browser/index.js")

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__("./node_modules/create-ecdh/browser.js")

var publicEncrypt = __webpack_require__("./node_modules/public-encrypt/browser.js")

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__("./node_modules/randomfill/browser.js")

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),

/***/ "./node_modules/des.js/lib/des.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__("./node_modules/des.js/lib/des/utils.js");
exports.Cipher = __webpack_require__("./node_modules/des.js/lib/des/cipher.js");
exports.DES = __webpack_require__("./node_modules/des.js/lib/des/des.js");
exports.CBC = __webpack_require__("./node_modules/des.js/lib/des/cbc.js");
exports.EDE = __webpack_require__("./node_modules/des.js/lib/des/ede.js");


/***/ }),

/***/ "./node_modules/des.js/lib/des/cbc.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/cipher.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/des.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__("./node_modules/des.js/lib/des.js");
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),

/***/ "./node_modules/des.js/lib/des/ede.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__("./node_modules/des.js/lib/des.js");
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),

/***/ "./node_modules/des.js/lib/des/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),

/***/ "./node_modules/diffie-hellman/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__("./node_modules/diffie-hellman/lib/generatePrime.js")
var primes = __webpack_require__("./node_modules/diffie-hellman/lib/primes.json")

var DH = __webpack_require__("./node_modules/diffie-hellman/lib/dh.js")

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/dh.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var MillerRabin = __webpack_require__("./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__("./node_modules/diffie-hellman/lib/generatePrime.js");
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/generatePrime.js":
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__("./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),

/***/ "./node_modules/diffie-hellman/lib/primes.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__("./node_modules/elliptic/package.json").version;
elliptic.utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
elliptic.rand = __webpack_require__("./node_modules/brorand/index.js");
elliptic.curve = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/index.js");
elliptic.curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");

// Protocols
elliptic.ec = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/index.js");
elliptic.eddsa = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/index.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/base.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");
curve.short = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/short.js");
curve.mont = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/mont.js");
curve.edwards = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/edwards.js");


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/mont.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/short.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
var Base = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/base.js");

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curves.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var curve = __webpack_require__("./node_modules/elliptic/lib/elliptic/curve/index.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = __webpack_require__("./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var HmacDRBG = __webpack_require__("./node_modules/hmac-drbg/lib/hmac-drbg.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");
var rand = __webpack_require__("./node_modules/brorand/index.js");
var assert = utils.assert;

var KeyPair = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/key.js");
var Signature = __webpack_require__("./node_modules/elliptic/lib/elliptic/ec/signature.js");

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/key.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/signature.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");

var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var curves = __webpack_require__("./node_modules/elliptic/lib/elliptic/curves.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/key.js");
var Signature = __webpack_require__("./node_modules/elliptic/lib/elliptic/eddsa/signature.js");

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var utils = __webpack_require__("./node_modules/elliptic/lib/elliptic/utils.js");
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};


/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var minAssert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var minUtils = __webpack_require__("./node_modules/minimalistic-crypto-utils/lib/utils.js");

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),

/***/ "./node_modules/elliptic/package.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"dependencies\":{\"bn.js\":\"^4.4.0\",\"brorand\":\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",\"inherits\":\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^1.4.3\",\"coveralls\":\"^3.0.4\",\"grunt\":\"^1.0.4\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.2\",\"jscs\":\"^3.0.7\",\"jshint\":\"^2.6.0\",\"mocha\":\"^6.1.4\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"jscs\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"jshint\":\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\"lint\":\"npm run jscs && npm run jshint\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.5.1\"}");

/***/ }),

/***/ "./node_modules/esprima/dist/esprima.js":
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __webpack_require__(1);
	var jsx_parser_1 = __webpack_require__(3);
	var parser_1 = __webpack_require__(8);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.1';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __webpack_require__(4);
	var JSXNode = __webpack_require__(5);
	var jsx_syntax_1 = __webpack_require__(6);
	var Node = __webpack_require__(7);
	var parser_1 = __webpack_require__(8);
	var token_1 = __webpack_require__(13);
	var xhtml_entities_1 = __webpack_require__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	        /* istanbul ignore next */
	        default:
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __webpack_require__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var error_handler_1 = __webpack_require__(10);
	var messages_1 = __webpack_require__(11);
	var Node = __webpack_require__(7);
	var scanner_1 = __webpack_require__(12);
	var syntax_1 = __webpack_require__(2);
	var token_1 = __webpack_require__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token, lastLineStart) {
	        if (lastLineStart === void 0) { lastLineStart = 0; }
	        var column = token.start - token.lineStart;
	        var line = token.lineNumber;
	        if (column < 0) {
	            column += lastLineStart;
	            line--;
	        }
	        return {
	            index: token.start,
	            line: line,
	            column: column
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            var lastMarker = markers.pop();
	            while (i > 1) {
	                var marker = markers.pop();
	                var lastLineStart = lastMarker && lastMarker.lineStart;
	                var node = this.startNode(marker, lastLineStart);
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	                lastMarker = marker;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	            default:
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = (!this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
	            this.lookahead.type === 8 /* StringLiteral */ ||
	            this.lookahead.type === 10 /* Template */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	            default:
	                break;
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
	                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        this.scanner.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var character_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.isModule = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C && !this.isModule) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __webpack_require__(10);
	var scanner_1 = __webpack_require__(12);
	var token_1 = __webpack_require__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	            default:
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;

/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/events/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/evp_bytestokey/index.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var MD5 = __webpack_require__("./node_modules/md5.js/index.js")

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),

/***/ "./node_modules/hash-base/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var Transform = __webpack_require__("./node_modules/stream-browserify/index.js").Transform
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),

/***/ "./node_modules/hash.js/lib/hash.js":
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
hash.common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
hash.sha = __webpack_require__("./node_modules/hash.js/lib/hash/sha.js");
hash.ripemd = __webpack_require__("./node_modules/hash.js/lib/hash/ripemd.js");
hash.hmac = __webpack_require__("./node_modules/hash.js/lib/hash/hmac.js");

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/hmac.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/ripemd.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/1.js");
exports.sha224 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/224.js");
exports.sha256 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/256.js");
exports.sha384 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/384.js");
exports.sha512 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/512.js");


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__("./node_modules/hash.js/lib/hash/sha/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var SHA256 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/256.js");

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__("./node_modules/hash.js/lib/hash/sha/common.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");

var SHA512 = __webpack_require__("./node_modules/hash.js/lib/hash/sha/512.js");

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__("./node_modules/hash.js/lib/hash/common.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("./node_modules/hash.js/lib/hash/utils.js");
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),

/***/ "./node_modules/hash.js/lib/hash/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),

/***/ "./node_modules/hmac-drbg/lib/hmac-drbg.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__("./node_modules/hash.js/lib/hash.js");
var utils = __webpack_require__("./node_modules/minimalistic-crypto-utils/lib/utils.js");
var assert = __webpack_require__("./node_modules/minimalistic-assert/index.js");

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/js-yaml/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var yaml = __webpack_require__("./node_modules/js-yaml/lib/js-yaml.js");


module.exports = yaml;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var loader = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/loader.js");
var dumper = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/dumper.js");


function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}


module.exports.Type                = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");
module.exports.Schema              = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");
module.exports.FAILSAFE_SCHEMA     = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.JSON_SCHEMA         = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/json.js");
module.exports.CORE_SCHEMA         = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/core.js");
module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");
module.exports.load                = loader.load;
module.exports.loadAll             = loader.loadAll;
module.exports.safeLoad            = loader.safeLoad;
module.exports.safeLoadAll         = loader.safeLoadAll;
module.exports.dump                = dumper.dump;
module.exports.safeDump            = dumper.safeDump;
module.exports.YAMLException       = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

// Deprecated schema names from JS-YAML 2.0.x
module.exports.MINIMAL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.SAFE_SCHEMA    = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

// Deprecated functions from JS-YAML 1.x.x
module.exports.scan           = deprecated('scan');
module.exports.parse          = deprecated('parse');
module.exports.compose        = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


module.exports.isNothing      = isNothing;
module.exports.isObject       = isObject;
module.exports.toArray        = toArray;
module.exports.repeat         = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend         = extend;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/dumper.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*eslint-disable no-use-before-define*/

var common              = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");
var YAMLException       = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");
var DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");
var DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema        = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== 0xFEFF /* BOM */)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// Simplified test for values allowed after the first character in plain style.
function isPlainSafe(c) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF
    // - c-flow-indicator
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // - ":" - "#"
    && c !== CHAR_COLON
    && c !== CHAR_SHARP;
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(string.charCodeAt(0))
          && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char);
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string)
      ? STYLE_PLAIN : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey) {
  state.dump = (function () {
    if (string.length === 0) {
      return "''";
    }
    if (!state.noCompatMode &&
        DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i);
    // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
    if (char >= 0xD800 && char <= 0xDBFF/* high surrogate */) {
      nextChar = string.charCodeAt(i + 1);
      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF/* low surrogate */) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);
        // Advance index one extra since we already used that char here.
        i++; continue;
      }
    }
    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char)
      ? string[i]
      : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = state.condenseFlow ? '"' : '';

    if (index !== 0) pairBuffer += ', ';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = (state.noArrayIndent && (level > 0)) ? level - 1 : level;
      if (block && (state.dump.length !== 0)) {
        writeBlockSequence(state, arrayLevel, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';

  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}

module.exports.dump     = dump;
module.exports.safeDump = safeDump;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/exception.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;


YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';

  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};


module.exports = YAMLException;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/loader.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*eslint-disable max-len,no-use-before-define*/

var common              = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");
var YAMLException       = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");
var Mark                = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/mark.js");
var DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
var DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");


var _hasOwnProperty = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy    = options['legacy']    || false;
  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  return new YAMLException(
    message,
    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty.call(overridableKeys, keyNode) &&
        _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }
    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = {},
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.
    _pos = state.position;

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }

    } else {
      break; // Reading is done. Go to the epilogue.
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!state.anchorMap.hasOwnProperty(alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        // Implicit resolving is not allowed for non-scalar types, and '?'
        // non-specific tag is only assigned to plain scalars. So, it isn't
        // needed to check for 'kind' conformity.

        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll(input, iterator, options) {
  var documents = loadDocuments(input, options), index, length;

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}


function safeLoadAll(input, output, options) {
  if (typeof output === 'function') {
    loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  } else {
    return loadAll(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  }
}


function safeLoad(input, options) {
  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}


module.exports.loadAll     = loadAll;
module.exports.load        = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad    = safeLoad;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/mark.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");


function Mark(name, buffer, position, line, column) {
  this.name     = name;
  this.buffer   = buffer;
  this.position = position;
  this.line     = line;
  this.column   = column;
}


Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;

  if (!this.buffer) return null;

  indent = indent || 4;
  maxLength = maxLength || 75;

  head = '';
  start = this.position;

  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;
    if (this.position - start > (maxLength / 2 - 1)) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;
    if (end - this.position > (maxLength / 2 - 1)) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);

  return common.repeat(' ', indent) + head + snippet + tail + '\n' +
         common.repeat(' ', indent + this.position - start + head.length) + '^';
};


Mark.prototype.toString = function toString(compact) {
  var snippet, where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};


module.exports = Mark;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*eslint-disable max-len*/

var common        = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");
var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");
var Type          = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");


function compileList(schema, name, result) {
  var exclude = [];

  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });

  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });

    result.push(currentType);
  });

  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema(definition) {
  this.include  = definition.include  || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];

  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });

  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
}


Schema.DEFAULT = null;


Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) { return type instanceof Type; })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};


module.exports = Schema;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/core.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.





var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");


module.exports = new Schema({
  include: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/json.js")
  ]
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.





var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");


module.exports = Schema.DEFAULT = new Schema({
  include: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js")
  ],
  explicit: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/function.js")
  ]
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)





var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");


module.exports = new Schema({
  include: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/core.js")
  ],
  implicit: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/timestamp.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/merge.js")
  ],
  explicit: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/binary.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/omap.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/pairs.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/set.js")
  ]
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346





var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");


module.exports = new Schema({
  explicit: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/str.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/seq.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/map.js")
  ]
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/json.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.





var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");


module.exports = new Schema({
  include: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js")
  ],
  implicit: [
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/null.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/bool.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/int.js"),
    __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/float.js")
  ]
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.tag          = tag;
  this.kind         = options['kind']         || null;
  this.resolve      = options['resolve']      || function () { return true; };
  this.construct    = options['construct']    || function (data) { return data; };
  this.instanceOf   = options['instanceOf']   || null;
  this.predicate    = options['predicate']    || null;
  this.represent    = options['represent']    || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/binary.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var require;

/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = require;
  NodeBuffer = __webpack_require__("./node_modules/buffer/index.js").Buffer;
} catch (__) {}

var Type       = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");


// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  // Wrap into Buffer for NodeJS and leave Array for browser
  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/bool.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/float.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");
var Type   = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // 20:59
  '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;

  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });

    value = 0.0;
    base = 1;

    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });

    return sign * value;

  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/int.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");
var Type   = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }

    // base 8
    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }
    return hasDigits && ch !== '_';
  }

  // base 10 (except 0) or base 60

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  // if !base60 - done;
  if (ch !== ':') return true;

  // base60 almost not used, no needs to optimize
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch, base, digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });

    value = 0;
    base = 1;

    digits.forEach(function (d) {
      value += (d * base);
      base *= 60;
    });

    return sign * value;

  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var require;

var esprima;

// Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//
try {
  // workaround to exclude package from browserify list.
  var _require = require;
  esprima = __webpack_require__("./node_modules/esprima/dist/esprima.js");
} catch (_) {
  /*global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast    = esprima.parse(source, { range: true });

    if (ast.type                    !== 'Program'             ||
        ast.body.length             !== 1                     ||
        ast.body[0].type            !== 'ExpressionStatement' ||
        (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
          ast.body[0].expression.type !== 'FunctionExpression')) {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/

  var source = '(' + data + ')',
      ast    = esprima.parse(source, { range: true }),
      params = [],
      body;

  if (ast.type                    !== 'Program'             ||
      ast.body.length             !== 1                     ||
      ast.body[0].type            !== 'ExpressionStatement' ||
      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
        ast.body[0].expression.type !== 'FunctionExpression')) {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });

  body = ast.body[0].expression.body.range;

  // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.
  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  }
  // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.
  /*eslint-disable no-new-func*/
  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object /*, style*/) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;

  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];

    if (modifiers.length > 3) return false;
    // if expression starts with /, is should be properly terminated
    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // `/foo/gim` - tail can be maximum 4 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object /*, style*/) {
  var result = '/' + object.source + '/';

  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';

  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/map.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/null.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/omap.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/seq.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/set.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/str.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});


/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});


/***/ }),

/***/ "./node_modules/md5.js/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__("./node_modules/hash-base/index.js")
var Buffer = __webpack_require__("./node_modules/md5.js/node_modules/safe-buffer/index.js").Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),

/***/ "./node_modules/md5.js/node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/miller-rabin/lib/mr.js":
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__("./node_modules/bn.js/lib/bn.js");
var brorand = __webpack_require__("./node_modules/brorand/index.js");

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),

/***/ "./node_modules/minimalistic-assert/index.js":
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),

/***/ "./node_modules/minimalistic-crypto-utils/lib/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),

/***/ "./node_modules/minimatch/minimatch.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = { sep: '/' }
try {
  path = __webpack_require__("path")
} catch (er) {}

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __webpack_require__("./node_modules/brace-expansion/index.js")

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  a = a || {}
  b = b || {}
  var t = {}
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return minimatch

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig.minimatch(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return Minimatch
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  // "" only matches ""
  if (pattern.trim() === '') return p === ''

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}
  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  // don't do it more than once.
  if (this._made) return

  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = console.error

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  if (typeof pattern === 'undefined') {
    throw new TypeError('undefined pattern')
  }

  if (options.nobrace ||
    !pattern.match(/\{.*\}/)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  if (pattern.length > 1024 * 64) {
    throw new TypeError('pattern is too long')
  }

  var options = this.options

  // shortcuts
  if (!options.noglobstar && pattern === '**') return GLOBSTAR
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      case '/':
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        if (inClass) {
          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          var cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + cs + ']')
          } catch (er) {
            // not a valid class!
            var sp = this.parse(cs, SUBPARSE)
            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
            hasMagic = hasMagic || sp[1]
            inClass = false
            continue
          }
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '.':
    case '[':
    case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = match
function match (f, partial) {
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      if (options.nocase) {
        hit = f.toLowerCase() === p.toLowerCase()
      } else {
        hit = f === p
      }
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
    return emptyFileEnd
  }

  // should be unreachable.
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ "./node_modules/node-dir/index.js":
/***/ (function(module, exports, __webpack_require__) {

var dirpaths = __webpack_require__("./node_modules/node-dir/lib/paths.js");

Object.assign(exports, dirpaths)
exports.readFiles = __webpack_require__("./node_modules/node-dir/lib/readfiles.js");
exports.readFilesStream = __webpack_require__("./node_modules/node-dir/lib/readfilesstream.js");


/***/ }),

/***/ "./node_modules/node-dir/lib/paths.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {﻿var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
    path = __webpack_require__("path");

exports.promiseFiles = function promiseFiles(dir, type, options){
  type = type || 'file'

  var processor = function(res,rej){
    var cb = function(err,data){
      if(err)return rej(err)
      res(data)
    }
    exports.files(dir,type,cb,options)
  }
  return new Promise(processor)
}

/**
 * find all files or subdirs (recursive) and pass to callback fn
 *
 * @param {string} dir directory in which to recurse files or subdirs
 * @param {string} type type of dir entry to recurse ('file', 'dir', or 'all', defaults to 'file')
 * @param {function(error, <Array.<string>)} callback fn to call when done
 * @example
 * dir.files(__dirname, function(err, files) {
 *      if (err) throw err;
 *      console.log('files:', files);
 *  });
 */
exports.files = function files(dir, type, callback, options) {
  var ofType = typeof type
  if(ofType == 'object'){
    options = options || type
    type = 'file'
    callback = function(){}
  }else if (ofType !== 'string') {
    //ignoreType = callback;
    callback = type;
    type = 'file';
  }
  
  options = options || {}

  var pending,
      results = {
          files: [],
          dirs: []
      };

  var done = function() {
    if(type==='combine'){
      results = results.files.concat(results.dirs)
    } else if (!type || options.ignoreType || ['all','combine'].indexOf(type)>=0) {
        results = results
    } else {
      results = results[type + 's']
    }

    if(options.sync)return;


    callback(null, results);
  };

  var getStatHandler = function(statPath, name, lstatCalled) {
    return function(err, stat) {
      if (err) {
        if (!lstatCalled) {
          return fs.lstat(statPath, getStatHandler(statPath, name, true));
        }
        return callback(err);
      }

      var pushVal = options.shortName ? name : statPath

      if (stat && stat.isDirectory() && stat.mode !== 17115) {
        if (type !== 'file') {
          results.dirs.push(pushVal);
        }

        if (options.recursive==null || options.recursive) {
          var subloop = function(err, res) {
            if (err){
                return callback(err)
            }
            
            if(type === 'combine'){
              results.files = results.files.concat(res);
            }else if (type === 'all') {
              results.files = results.files.concat(res.files);
              results.dirs = results.dirs.concat(res.dirs);
            } else if (type === 'file') {
                results.files = results.files.concat(res.files);
            } else {
                results.dirs = results.dirs.concat(res.dirs);
            }

            if (!--pending){
              done();
            }
          }

          var newOptions = Object.assign({}, options)
          newOptions.ignoreType = true
          var moreResults = files(statPath, type, subloop, newOptions);

          if(options.sync){
            subloop(null, moreResults)
          }
        }else if (!--pending){
          done()
        }
      } else {
        if (type !== 'dir') {
          results.files.push(pushVal);
        }
        // should be the last statement in statHandler
        if (!--pending){
          done()
        }
      }
    }
  }

  var bufdir = Buffer.from(dir);

  const onDirRead = function(err, list) {
    if (err) return callback(err);
    
    pending = list.length;
    if (!pending) return done();
    
    for (var file, i = 0, l = list.length; i < l; i++) {
      var fname = list[i].toString();
      file = path.join(dir, fname);
      var buffile = Buffer.concat([bufdir, Buffer.from(path.sep), list[i]]);

      if(options.sync){
        var res = fs.statSync(buffile);
        getStatHandler(file,fname)(null, res)
      }else{
        fs.stat(buffile, getStatHandler(file,fname));
      }
    }

    return results
  }

  const onStat = function(err, stat) {
    if (err) return callback(err);
    if (stat && stat.mode === 17115) return done();

    if(options.sync){
      const list = fs.readdirSync(bufdir, {encoding: 'buffer'})
      return onDirRead(null, list)
    }else{
      fs.readdir(bufdir, {encoding: 'buffer'}, onDirRead)
    }
  }

  if(options.sync){
    const stat = fs.statSync(bufdir);
    return onStat(null, stat)
  }else{
    fs.stat(bufdir, onStat);
  }
};


/**
 * find all files and subdirs in  a directory (recursive) and pass them to callback fn
 *
 * @param {string} dir directory in which to recurse files or subdirs
 * @param {boolean} combine whether to combine both subdirs and filepaths into one array (default false)
 * @param {function(error, Object.<<Array.<string>, Array.<string>>)} callback fn to call when done
 * @example
 * dir.paths(__dirname, function (err, paths) {
 *     if (err) throw err;
 *     console.log('files:', paths.files);
 *     console.log('subdirs:', paths.dirs);
 * });
 * dir.paths(__dirname, true, function (err, paths) {
 *      if (err) throw err;
 *      console.log('paths:', paths);
 * });
 */
exports.paths = function paths(dir, combine, callback) {

    var type;

    if (typeof combine === 'function') {
        callback = combine;
        combine = false;
    }

    exports.files(dir, 'all', function(err, results) {
        if (err) return callback(err);
        if (combine) {

            callback(null, results.files.concat(results.dirs));
        } else {
            callback(null, results);
        }
    });
};


/**
 * find all subdirs (recursive) of a directory and pass them to callback fn
 *
 * @param {string} dir directory in which to find subdirs
 * @param {string} type type of dir entry to recurse ('file' or 'dir', defaults to 'file')
 * @param {function(error, <Array.<string>)} callback fn to call when done
 * @example
 * dir.subdirs(__dirname, function (err, paths) {
 *      if (err) throw err;
 *      console.log('files:', paths.files);
 *      console.log('subdirs:', paths.dirs);
 * });
 */
exports.subdirs = function subdirs(dir, callback, type, options) {
  options = options || {}

  const iCallback = function(err, subdirs) {
    if (err) return callback(err);

    if(type=='combine'){
      subdirs = subdirs.files.concat(subdirs.dirs)
    }
    
    if(options.sync)return subdirs

    callback(null, subdirs);
  }

  const res = exports.files(dir, 'dir', iCallback, options)

  if(options && options.sync){
    return iCallback(null,res)
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/node-dir/lib/readfiles.js":
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
    path = __webpack_require__("path");

/**
 * merge two objects by extending target object with source object
 * @param target object to merge
 * @param source object to merge
 * @param {Boolean} [modify] whether to modify the target
 * @returns {Object} extended object
 */
function extend(target, source, modify) {
    var result = target ? modify ? target : extend({}, target, true) : {};
    if (!source) return result;
    for (var key in source) {
        if (source.hasOwnProperty(key) && source[key] !== undefined) {
            result[key] = source[key];
        }
    }
    return result;
}

/**
 * determine if a string is contained within an array or matches a regular expression
 * @param   {String} str string to match
 * @param   {Array|Regex} match array or regular expression to match against
 * @returns {Boolean} whether there is a match
 */
function matches(str, match) {
    if (Array.isArray(match)) return match.indexOf(str) > -1;
    return match.test(str);
}

/**
 * read files and call a function with the contents of each file
 * @param  {String} dir path of dir containing the files to be read
 * @param  {String} encoding file encoding (default is 'utf8')
 * @param  {Object} options options hash for encoding, recursive, and match/exclude
 * @param  {Function(error, string)} callback  callback for each files content
 * @param  {Function(error)}   complete  fn to call when finished
 */
function readFiles(dir, options, callback, complete) {
    if (typeof options === 'function') {
        complete = callback;
        callback = options;
        options = {};
    }
    if (typeof options === 'string') options = {
        encoding: options
    };
    options = extend({
        recursive: true,
        encoding: 'utf8',
        doneOnErr: true
    }, options);
    var files = [];

    var done = function(err) {
        if (typeof complete === 'function') {
            if (err) return complete(err);
            complete(null, files);
        }
    };

    fs.readdir(dir, function(err, list) {
        if (err)  {
            if (options.doneOnErr === true) {
              if (err.code === 'EACCES') return done();
              return done(err);
            }
        }
        var i = 0;

        if (options.reverse === true ||
            (typeof options.sort == 'string' &&
                (/reverse|desc/i).test(options.sort))) {
            list = list.reverse();
        } else if (options.sort !== false) list = list.sort();

        (function next() {
            var filename = list[i++];
            if (!filename) return done(null, files);
            var file = path.join(dir, filename);
            fs.stat(file, function(err, stat) {
                if (err && options.doneOnErr === true) return done(err);
                if (stat && stat.isDirectory()) {
                    if (options.recursive) {
                        if (options.matchDir && !matches(filename, options.matchDir)) return next();
                        if (options.excludeDir && matches(filename, options.excludeDir)) return next();
                        readFiles(file, options, callback, function(err, sfiles) {
                            if (err && options.doneOnErr === true) return done(err);
                            files = files.concat(sfiles);
                            next();
                        });
                    } else next();
                } else if (stat && stat.isFile()) {
                    if (options.match && !matches(filename, options.match)) return next();
                    if (options.exclude && matches(filename, options.exclude)) return next();
                    if (options.filter && !options.filter(filename)) return next();
                    if (options.shortName) files.push(filename);
                    else files.push(file);
                    fs.readFile(file, options.encoding, function(err, data) {
                        if (err) {
                            if (err.code === 'EACCES') return next();
                            if (options.doneOnErr === true) {
                                return done(err);
                            }
                        }
                        if (callback.length > 3)
                            if (options.shortName) callback(null, data, filename, next);
                            else callback(null, data, file, next);
                            else callback(null, data, next);
                    });
                }
                else {
                    next();
                }
            });
        })();

    });
}
module.exports = readFiles;


/***/ }),

/***/ "./node_modules/node-dir/lib/readfilesstream.js":
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
    mm = __webpack_require__("./node_modules/minimatch/minimatch.js"),
    path = __webpack_require__("path");

/**
 * merge two objects by extending target object with source object
 * @param target object to merge
 * @param source object to merge
 * @param {Boolean} [modify] whether to modify the target
 * @returns {Object} extended object
 */
function extend(target, source, modify) {
    var result = target ? modify ? target : extend({}, target, true) : {};
    if (!source) return result;
    for (var key in source) {
        if (source.hasOwnProperty(key) && source[key] !== undefined) {
            result[key] = source[key];
        }
    }
    return result;
}

/**
 * determine if a string is contained within an array or matches a regular expression
 * @param   {String} str string to match
 * @param   {Array|Regex} match array or regular expression to match against
 * @returns {Boolean} whether there is a match
 */
function matches(str, match) {
    if (Array.isArray(match)) {
        var l = match.length;
        for( var s=0; s < l; s++) {
            if ( mm(str,match[s])) {
                return true;
            }
        }
        return false;
    }
    return match.test(str);
}

/**
 * read files and call a function with the contents of each file
 * @param  {String} dir path of dir containing the files to be read
 * @param  {String} encoding file encoding (default is 'utf8')
 * @param  {Object} options options hash for encoding, recursive, and match/exclude
 * @param  {Function(error, string)} callback  callback for each files content
 * @param  {Function(error)}   complete  fn to call when finished
 */
function readFilesStream(dir, options, callback, complete) {
    if (typeof options === 'function') {
        complete = callback;
        callback = options;
        options = {};
    }
    if (typeof options === 'string') options = {
        encoding: options
    };
    options = extend({
        recursive: true,
        encoding: 'utf8',
        doneOnErr: true
    }, options);
    var files = [];

    var done = function(err) {
        if (typeof complete === 'function') {
            if (err) return complete(err);
            complete(null, files);
        }
    };

    fs.readdir(dir, function(err, list) {
        if (err)  {
            if (options.doneOnErr === true) {
              if (err.code === 'EACCES') return done();
              return done(err);
            }
        }
        var i = 0;

        if (options.reverse === true ||
            (typeof options.sort == 'string' &&
                (/reverse|desc/i).test(options.sort))) {
            list = list.reverse();
        } else if (options.sort !== false) list = list.sort();

        (function next() {
            var filename = list[i++];
            if (!filename) return done(null, files);
            var file = path.join(dir, filename);
            fs.stat(file, function(err, stat) {
                if (err && options.doneOnErr === true) return done(err);
                if (stat && stat.isDirectory()) {
                    if (options.recursive) {
                        if (options.matchDir && !matches(filename, options.matchDir)) return next();
                        if (options.excludeDir && matches(filename, options.excludeDir)) return next();
                        readFilesStream(file, options, callback, function(err, sfiles) {
                            if (err && options.doneOnErr === true) return done(err);
                            files = files.concat(sfiles);
                            next();
                        });
                    } else next();
                } else if (stat && stat.isFile()) {
                    if (options.match && !matches(filename, options.match)) return next();
                    if (options.exclude && matches(filename, options.exclude)) return next();
                    if (options.filter && !options.filter(filename)) return next();
                    if (options.shortName) files.push(filename);
                    else files.push(file);
                    var stream = fs.createReadStream(file);
                    if (options.encoding !== null) {
                        stream.setEncoding(options.encoding);
                    }
                    stream.on('error',function(err) {
                      if (options.doneOnErr === true) return done(err);
                      next();
                    });
                    if (callback.length > 3)
                        if (options.shortName) callback(null, stream, filename, next);
                        else callback(null, stream, file, next);
                        else callback(null, stream, next);
                }
                else {
                  next();
                }
            });
        })();

    });
}
module.exports = readFilesStream;


/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
exports.default = global.fetch.bind(global);

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),

/***/ "./node_modules/os-browserify/browser.js":
/***/ (function(module, exports) {

exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};


/***/ }),

/***/ "./node_modules/parse-asn1/aesid.json":
/***/ (function(module) {

module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

/***/ }),

/***/ "./node_modules/parse-asn1/asn1.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__("./node_modules/asn1.js/lib/asn1.js")

exports.certificate = __webpack_require__("./node_modules/parse-asn1/certificate.js")

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),

/***/ "./node_modules/parse-asn1/certificate.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__("./node_modules/asn1.js/lib/asn1.js")

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),

/***/ "./node_modules/parse-asn1/fixProc.js":
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__("./node_modules/evp_bytestokey/index.js")
var ciphers = __webpack_require__("./node_modules/browserify-aes/browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),

/***/ "./node_modules/parse-asn1/index.js":
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__("./node_modules/parse-asn1/asn1.js")
var aesid = __webpack_require__("./node_modules/parse-asn1/aesid.json")
var fixProc = __webpack_require__("./node_modules/parse-asn1/fixProc.js")
var ciphers = __webpack_require__("./node_modules/browserify-aes/browser.js")
var compat = __webpack_require__("./node_modules/pbkdf2/browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),

/***/ "./node_modules/pbkdf2/browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__("./node_modules/pbkdf2/lib/async.js")
exports.pbkdf2Sync = __webpack_require__("./node_modules/pbkdf2/lib/sync-browser.js")


/***/ }),

/***/ "./node_modules/pbkdf2/lib/async.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__("./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__("./node_modules/pbkdf2/lib/default-encoding.js")
var sync = __webpack_require__("./node_modules/pbkdf2/lib/sync-browser.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/default-encoding.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/precondition.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/sync-browser.js":
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__("./node_modules/create-hash/md5.js")
var RIPEMD160 = __webpack_require__("./node_modules/ripemd160/index.js")
var sha = __webpack_require__("./node_modules/sha.js/index.js")

var checkParameters = __webpack_require__("./node_modules/pbkdf2/lib/precondition.js")
var defaultEncoding = __webpack_require__("./node_modules/pbkdf2/lib/default-encoding.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/public-encrypt/browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__("./node_modules/public-encrypt/publicEncrypt.js")
exports.privateDecrypt = __webpack_require__("./node_modules/public-encrypt/privateDecrypt.js")

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),

/***/ "./node_modules/public-encrypt/mgf.js":
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var Buffer = __webpack_require__("./node_modules/public-encrypt/node_modules/safe-buffer/index.js").Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/public-encrypt/privateDecrypt.js":
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var mgf = __webpack_require__("./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__("./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var withPublic = __webpack_require__("./node_modules/public-encrypt/withPublic.js")
var Buffer = __webpack_require__("./node_modules/public-encrypt/node_modules/safe-buffer/index.js").Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),

/***/ "./node_modules/public-encrypt/publicEncrypt.js":
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__("./node_modules/parse-asn1/index.js")
var randomBytes = __webpack_require__("./node_modules/randombytes/browser.js")
var createHash = __webpack_require__("./node_modules/create-hash/browser.js")
var mgf = __webpack_require__("./node_modules/public-encrypt/mgf.js")
var xor = __webpack_require__("./node_modules/public-encrypt/xor.js")
var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var withPublic = __webpack_require__("./node_modules/public-encrypt/withPublic.js")
var crt = __webpack_require__("./node_modules/browserify-rsa/index.js")
var Buffer = __webpack_require__("./node_modules/public-encrypt/node_modules/safe-buffer/index.js").Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),

/***/ "./node_modules/public-encrypt/withPublic.js":
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__("./node_modules/bn.js/lib/bn.js")
var Buffer = __webpack_require__("./node_modules/public-encrypt/node_modules/safe-buffer/index.js").Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),

/***/ "./node_modules/public-encrypt/xor.js":
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),

/***/ "./node_modules/randombytes/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/randomfill/browser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__("./node_modules/safe-buffer/index.js")
var randombytes = __webpack_require__("./node_modules/randombytes/browser.js")
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");


/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__("./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__("./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__("./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = __webpack_require__("./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__("./node_modules/readable-stream/node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__("./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__("./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(0);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = __webpack_require__("./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__("./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__("./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__("./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js"), __webpack_require__("./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__("./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "./node_modules/readable-stream/node_modules/isarray/index.js":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/readable-browser.js").PassThrough


/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__("./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__("./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__("./node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/readable-browser.js").Transform


/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./node_modules/readable-stream/lib/_stream_writable.js");


/***/ }),

/***/ "./node_modules/ripemd160/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("./node_modules/buffer/index.js").Buffer
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var HashBase = __webpack_require__("./node_modules/hash-base/index.js")

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/semver/semver.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer

var debug
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0)
    args.unshift('SEMVER')
    console.log.apply(console, args)
  }
} else {
  debug = function () {}
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0'

var MAX_LENGTH = 256
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16

// The actual regexps go on exports.re
var re = exports.re = []
var src = exports.src = []
var R = 0

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*'
var NUMERICIDENTIFIERLOOSE = R++
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'

// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')'

var MAINVERSIONLOOSE = R++
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')'

var PRERELEASEIDENTIFIERLOOSE = R++
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')'

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))'

var PRERELEASELOOSE = R++
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?'

src[FULL] = '^' + FULLPLAIN + '$'

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?'

var LOOSE = R++
src[LOOSE] = '^' + LOOSEPLAIN + '$'

var GTLT = R++
src[GTLT] = '((?:<|>)?=?)'

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
var XRANGEIDENTIFIER = R++
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*'

var XRANGEPLAIN = R++
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?'

var XRANGEPLAINLOOSE = R++
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?'

var XRANGE = R++
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$'
var XRANGELOOSE = R++
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])'

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++
src[LONETILDE] = '(?:~>?)'

var TILDETRIM = R++
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+'
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')
var tildeTrimReplace = '$1~'

var TILDE = R++
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'
var TILDELOOSE = R++
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++
src[LONECARET] = '(?:\\^)'

var CARETTRIM = R++
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+'
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')
var caretTrimReplace = '$1^'

var CARET = R++
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'
var CARETLOOSE = R++
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$'
var COMPARATOR = R++
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')
var comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$'

var HYPHENRANGELOOSE = R++
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$'

// Star ranges basically just allow anything at all.
var STAR = R++
src[STAR] = '(<|>)?=?\\s*\\*'

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i])
  if (!re[i]) {
    re[i] = new RegExp(src[i])
  }
}

exports.parse = parse
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[LOOSE] : re[FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid
function valid (version, options) {
  var v = parse(version, options)
  return v ? v.version : null
}

exports.clean = clean
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}

exports.SemVer = SemVer

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options)
  this.options = options
  this.loose = !!options.loose

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version

  // these are actually numbers
  this.major = +m[1]
  this.minor = +m[2]
  this.patch = +m[3]

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = []
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    })
  }

  this.build = m[5] ? m[5].split('.') : []
  this.format()
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.')
  }
  return this.version
}

SemVer.prototype.toString = function () {
  return this.version
}

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other)
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return this.compareMain(other) || this.comparePre(other)
}

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
}

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0
  do {
    var a = this.prerelease[i]
    var b = other.prerelease[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor = 0
      this.major++
      this.inc('pre', identifier)
      break
    case 'preminor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor++
      this.inc('pre', identifier)
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0
      this.inc('patch', identifier)
      this.inc('pre', identifier)
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier)
      }
      this.inc('pre', identifier)
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++
      }
      this.minor = 0
      this.patch = 0
      this.prerelease = []
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++
      }
      this.patch = 0
      this.prerelease = []
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++
      }
      this.prerelease = []
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0]
      } else {
        var i = this.prerelease.length
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++
            i = -2
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0)
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0]
          }
        } else {
          this.prerelease = [identifier, 0]
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format()
  this.raw = this.version
  return this
}

exports.inc = inc
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose
    loose = undefined
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1)
    var v2 = parse(version2)
    var prefix = ''
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre'
      var defaultResult = 'prerelease'
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers

var numeric = /^[0-9]+$/
function compareIdentifiers (a, b) {
  var anum = numeric.test(a)
  var bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.rcompare = rcompare
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compare(a, b, loose)
  })
}

exports.rsort = rsort
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.rcompare(a, b, loose)
  })
}

exports.gt = gt
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options)
  this.options = options
  this.loose = !!options.loose
  this.parse(comp)

  if (this.semver === ANY) {
    this.value = ''
  } else {
    this.value = this.operator + this.semver.version
  }

  debug('comp', this)
}

var ANY = {}
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var m = comp.match(r)

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1]
  if (this.operator === '=') {
    this.operator = ''
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY
  } else {
    this.semver = new SemVer(m[2], this.options.loose)
  }
}

Comparator.prototype.toString = function () {
  return this.value
}

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose)

  if (this.semver === ANY) {
    return true
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  return cmp(version, this.operator, this.semver, this.options)
}

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  var rangeTmp

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options)
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options)
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>')
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<')
  var sameSemVer = this.semver.version === comp.semver.version
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=')
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'))
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'))

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
}

exports.Range = Range
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options
  this.loose = !!options.loose
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  })

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format()
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim()
  return this.range
}

Range.prototype.toString = function () {
  return this.range
}

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose
  range = range.trim()
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]
  range = range.replace(hr, hyphenReplace)
  debug('hyphen replace', range)
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)
  debug('comparator trim', range, re[COMPARATORTRIM])

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace)

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace)

  // normalize spaces
  range = range.split(/\s+/).join(' ')

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/)
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    })
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this)

  return set
}

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return thisComparators.every(function (thisComparator) {
      return range.set.some(function (rangeComparators) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options)
        })
      })
    })
  })
}

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[TILDELOOSE] : re[TILDE]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0'
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0'
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options)
  var r = options.loose ? re[CARETLOOSE] : re[CARET]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0'
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0'
      }
    }

    debug('caret return', ret)
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim()
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    var xM = isX(M)
    var xm = xM || isX(m)
    var xp = xm || isX(p)
    var anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      ret = gtlt + M + '.' + m + '.' + p
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '')
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0'
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0'
  } else {
    from = '>=' + from
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0'
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0'
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
  } else {
    to = '<=' + to
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
}

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies
function satisfies (version, range, options) {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying
function maxSatisfying (versions, range, options) {
  var max = null
  var maxSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}

exports.minSatisfying = minSatisfying
function minSatisfying (versions, range, options) {
  var min = null
  var minSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}

exports.minVersion = minVersion
function minVersion (range, loose) {
  range = new Range(range, loose)

  var minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    })
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside
function outside (version, range, hilo, options) {
  version = new SemVer(version, options)
  range = new Range(range, options)

  var gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    var high = null
    var low = null

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease
function prerelease (version, options) {
  var parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects
function intersects (r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce
function coerce (version) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  var match = version.match(re[COERCE])

  if (match == null) {
    return null
  }

  return parse(match[1] +
    '.' + (match[2] || '0') +
    '.' + (match[3] || '0'))
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "./node_modules/sha.js/index.js":
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__("./node_modules/sha.js/sha.js")
exports.sha1 = __webpack_require__("./node_modules/sha.js/sha1.js")
exports.sha224 = __webpack_require__("./node_modules/sha.js/sha224.js")
exports.sha256 = __webpack_require__("./node_modules/sha.js/sha256.js")
exports.sha384 = __webpack_require__("./node_modules/sha.js/sha384.js")
exports.sha512 = __webpack_require__("./node_modules/sha.js/sha512.js")


/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Sha256 = __webpack_require__("./node_modules/sha.js/sha256.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var SHA512 = __webpack_require__("./node_modules/sha.js/sha512.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__("./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__("./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__("./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__("./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__("./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__("./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__("./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__("./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vm-browserify/index.js":
/***/ (function(module, exports) {

var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 0:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "path":
/***/ (function(module, exports) {

module.exports = require("path");

/***/ })

/******/ });