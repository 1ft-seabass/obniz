"use strict";
const ObnizComponents = require('./ObnizComponents');
module.exports = class ObnizSystemMethods extends ObnizComponents {
    constructor(id, options) {
        super(id, options);
    }
    wait(msec) {
        if (msec < 0) {
            msec = 0;
        }
        else if (msec > 60 * 1000) {
            msec = 60 * 1000;
        }
        this.send({ system: { wait: msec } });
        return new Promise(resolve => setTimeout(resolve, msec));
    }
    reset() {
        this.send({ system: { reset: true } });
        this._resetComponents();
    }
    reboot() {
        this.send({ system: { reboot: true } });
    }
    selfCheck() {
        this.send({ system: { self_check: true } });
    }
    keepWorkingAtOffline(working) {
        this.send({ system: { keep_working_at_offline: working } });
    }
    resetOnDisconnect(reset) {
        this.send({ ws: { reset_obniz_on_ws_disconnection: reset } });
    }
    sleepSeconds(sec) {
        if (sec < 1) {
            //min 1s
            sec = 1;
        }
        else if (sec > 60 * 60 * 18) {
            //max 18h (60(s)*60(m)*18(h))
            throw new Error('Error max 18h(64800) sleep');
        }
        this.send({ system: { sleep_seconds: sec } });
    }
    sleepMinute(minute) {
        if (minute < 1) {
            //min 1m
            minute = 1;
        }
        else if (minute > 60 * 24 * 45) {
            //max 45day (60(m)*24(h)*45(d))
            throw new Error('max 45day(64800m) sleep');
        }
        this.send({ system: { sleep_minute: minute } });
    }
    sleep(date) {
        if (!(date instanceof Date)) {
            throw new Error('Date instance argument required');
        }
        let sleepTime = Math.floor((date - new Date()) / 1000);
        this.print_debug(`sleep time : ${sleepTime}s`);
        if (sleepTime <= 0) {
            throw new Error(`past sleep time : ${sleepTime}s`);
        }
        if (sleepTime <= 60 * 60 * 18) {
            this.sleepSeconds(sleepTime);
            return;
        }
        sleepTime = Math.floor(sleepTime / 60);
        this.print_debug(`sleep time : ${sleepTime}m`);
        if (sleepTime <= 60 * 24 * 45) {
            this.sleepMinute(sleepTime);
        }
        else {
            throw new Error(`over max sleep time : ${sleepTime}m`);
        }
    }
    sleepIoTrigger(trigger) {
        if (typeof trigger !== 'boolean') {
            throw new Error('sleepIoTrigger need boolean arg');
        }
        this.send({ system: { sleep_io_trigger: trigger } });
    }
    pingWait(unixtime, rand, forceGlobalNetwork) {
        unixtime = unixtime || new Date().getTime();
        let upper = Math.floor(unixtime / Math.pow(2, 32));
        let lower = unixtime - upper * Math.pow(2, 32);
        rand = rand || Math.floor(Math.random() * Math.pow(2, 4));
        let buf = [];
        buf.push((upper >>> (8 * 3)) & 0xff);
        buf.push((upper >>> (8 * 2)) & 0xff);
        buf.push((upper >>> (8 * 1)) & 0xff);
        buf.push((upper >>> (8 * 0)) & 0xff);
        buf.push((lower >>> (8 * 3)) & 0xff);
        buf.push((lower >>> (8 * 2)) & 0xff);
        buf.push((lower >>> (8 * 1)) & 0xff);
        buf.push((lower >>> (8 * 0)) & 0xff);
        buf.push((rand >>> (8 * 3)) & 0xff);
        buf.push((rand >>> (8 * 2)) & 0xff);
        buf.push((rand >>> (8 * 1)) & 0xff);
        buf.push((rand >>> (8 * 0)) & 0xff);
        let obj = {
            system: {
                ping: {
                    key: buf,
                },
            },
        };
        this.send(obj, { local_connect: forceGlobalNetwork ? false : true });
        return new Promise(resolve => {
            let callback = systemObj => {
                for (let i = 0; i < buf.length; i++) {
                    if (buf[i] !== systemObj.pong.key[i]) {
                        return;
                    }
                }
                this.removePongObserver(callback);
                let upper = ((systemObj.pong.key[0] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[1] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[2] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[3] << (8 * 0)) >>> 0);
                let lower = ((systemObj.pong.key[4] << (8 * 3)) >>> 0) +
                    ((systemObj.pong.key[5] << (8 * 2)) >>> 0) +
                    ((systemObj.pong.key[6] << (8 * 1)) >>> 0) +
                    ((systemObj.pong.key[7] << (8 * 0)) >>> 0);
                let obnizJsPingUnixtime = upper * Math.pow(2, 32) + lower;
                let obnizJsPongUnixtime = new Date().getTime();
                let allTime = obnizJsPongUnixtime - obnizJsPingUnixtime;
                let timeJs2server = systemObj.pong.pingServerTime - obnizJsPingUnixtime;
                let timeServer2Obniz = systemObj.pong.obnizTime - systemObj.pong.pingServerTime;
                let timeObniz2Server = systemObj.pong.pongServerTime - systemObj.pong.obnizTime;
                let timeServer2Js = obnizJsPongUnixtime - systemObj.pong.pongServerTime;
                let str = `ping ${allTime}ms (js --[${timeJs2server}ms]--> server --[${timeServer2Obniz}ms]--> obniz --[${timeObniz2Server}ms]--> server --[${timeServer2Js}ms]--> js)`;
                this.print_debug(str);
                resolve(str);
            };
            this.addPongObserver(callback);
        });
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9PYm5pelN5c3RlbU1ldGhvZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRXJELE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxrQkFBbUIsU0FBUSxlQUFlO0lBQy9ELFlBQVksRUFBRSxFQUFFLE9BQU87UUFDckIsS0FBSyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxDQUFDLElBQUk7UUFDUCxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDWixJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ1Y7YUFBTSxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFO1lBQzNCLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLElB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QUFRLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxrQkFBa0I7UUFDekMsUUFBUSxHQUFHLFFBQVEsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzVDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxLQUFLLEdBQUcsUUFBUSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxHQUFH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Q0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFDIiwiZmlsZSI6Im9ibml6L09ibml6U3lzdGVtTWV0aG9kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9ibml6Q29tcG9uZW50cyA9IHJlcXVpcmUoJy4vT2JuaXpDb21wb25lbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgT2JuaXpTeXN0ZW1NZXRob2RzIGV4dGVuZHMgT2JuaXpDb21wb25lbnRzIHtcbiAgY29uc3RydWN0b3IoaWQsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihpZCwgb3B0aW9ucyk7XG4gIH1cblxuICB3YWl0KG1zZWMpIHtcbiAgICBpZiAobXNlYyA8IDApIHtcbiAgICAgIG1zZWMgPSAwO1xuICAgIH0gZWxzZSBpZiAobXNlYyA+IDYwICogMTAwMCkge1xuICAgICAgbXNlYyA9IDYwICogMTAwMDtcbiAgICB9XG4gICAgdGhpcy5zZW5kKHsgc3lzdGVtOiB7IHdhaXQ6IG1zZWMgfSB9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zZWMpKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2VuZCh7IHN5c3RlbTogeyByZXNldDogdHJ1ZSB9IH0pO1xuICAgIHRoaXMuX3Jlc2V0Q29tcG9uZW50cygpO1xuICB9XG5cbiAgcmVib290KCkge1xuICAgIHRoaXMuc2VuZCh7IHN5c3RlbTogeyByZWJvb3Q6IHRydWUgfSB9KTtcbiAgfVxuXG4gIHNlbGZDaGVjaygpIHtcbiAgICB0aGlzLnNlbmQoeyBzeXN0ZW06IHsgc2VsZl9jaGVjazogdHJ1ZSB9IH0pO1xuICB9XG5cbiAga2VlcFdvcmtpbmdBdE9mZmxpbmUod29ya2luZykge1xuICAgIHRoaXMuc2VuZCh7IHN5c3RlbTogeyBrZWVwX3dvcmtpbmdfYXRfb2ZmbGluZTogd29ya2luZyB9IH0pO1xuICB9XG5cbiAgcmVzZXRPbkRpc2Nvbm5lY3QocmVzZXQpIHtcbiAgICB0aGlzLnNlbmQoeyB3czogeyByZXNldF9vYm5pel9vbl93c19kaXNjb25uZWN0aW9uOiByZXNldCB9IH0pO1xuICB9XG5cbiAgc2xlZXBTZWNvbmRzKHNlYykge1xuICAgIGlmIChzZWMgPCAxKSB7XG4gICAgICAvL21pbiAxc1xuICAgICAgc2VjID0gMTtcbiAgICB9IGVsc2UgaWYgKHNlYyA+IDYwICogNjAgKiAxOCkge1xuICAgICAgLy9tYXggMThoICg2MChzKSo2MChtKSoxOChoKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgbWF4IDE4aCg2NDgwMCkgc2xlZXAnKTtcbiAgICB9XG4gICAgdGhpcy5zZW5kKHsgc3lzdGVtOiB7IHNsZWVwX3NlY29uZHM6IHNlYyB9IH0pO1xuICB9XG5cbiAgc2xlZXBNaW51dGUobWludXRlKSB7XG4gICAgaWYgKG1pbnV0ZSA8IDEpIHtcbiAgICAgIC8vbWluIDFtXG4gICAgICBtaW51dGUgPSAxO1xuICAgIH0gZWxzZSBpZiAobWludXRlID4gNjAgKiAyNCAqIDQ1KSB7XG4gICAgICAvL21heCA0NWRheSAoNjAobSkqMjQoaCkqNDUoZCkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21heCA0NWRheSg2NDgwMG0pIHNsZWVwJyk7XG4gICAgfVxuICAgIHRoaXMuc2VuZCh7IHN5c3RlbTogeyBzbGVlcF9taW51dGU6IG1pbnV0ZSB9IH0pO1xuICB9XG5cbiAgc2xlZXAoZGF0ZSkge1xuICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRlIGluc3RhbmNlIGFyZ3VtZW50IHJlcXVpcmVkJyk7XG4gICAgfVxuICAgIGxldCBzbGVlcFRpbWUgPSBNYXRoLmZsb29yKChkYXRlIC0gbmV3IERhdGUoKSkgLyAxMDAwKTtcbiAgICB0aGlzLnByaW50X2RlYnVnKGBzbGVlcCB0aW1lIDogJHtzbGVlcFRpbWV9c2ApO1xuICAgIGlmIChzbGVlcFRpbWUgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwYXN0IHNsZWVwIHRpbWUgOiAke3NsZWVwVGltZX1zYCk7XG4gICAgfVxuICAgIGlmIChzbGVlcFRpbWUgPD0gNjAgKiA2MCAqIDE4KSB7XG4gICAgICB0aGlzLnNsZWVwU2Vjb25kcyhzbGVlcFRpbWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzbGVlcFRpbWUgPSBNYXRoLmZsb29yKHNsZWVwVGltZSAvIDYwKTtcbiAgICB0aGlzLnByaW50X2RlYnVnKGBzbGVlcCB0aW1lIDogJHtzbGVlcFRpbWV9bWApO1xuICAgIGlmIChzbGVlcFRpbWUgPD0gNjAgKiAyNCAqIDQ1KSB7XG4gICAgICB0aGlzLnNsZWVwTWludXRlKHNsZWVwVGltZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgb3ZlciBtYXggc2xlZXAgdGltZSA6ICR7c2xlZXBUaW1lfW1gKTtcbiAgICB9XG4gIH1cblxuICBzbGVlcElvVHJpZ2dlcih0cmlnZ2VyKSB7XG4gICAgaWYgKHR5cGVvZiB0cmlnZ2VyICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2xlZXBJb1RyaWdnZXIgbmVlZCBib29sZWFuIGFyZycpO1xuICAgIH1cbiAgICB0aGlzLnNlbmQoeyBzeXN0ZW06IHsgc2xlZXBfaW9fdHJpZ2dlcjogdHJpZ2dlciB9IH0pO1xuICB9XG5cbiAgcGluZ1dhaXQodW5peHRpbWUsIHJhbmQsIGZvcmNlR2xvYmFsTmV0d29yaykge1xuICAgIHVuaXh0aW1lID0gdW5peHRpbWUgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgbGV0IHVwcGVyID0gTWF0aC5mbG9vcih1bml4dGltZSAvIE1hdGgucG93KDIsIDMyKSk7XG4gICAgbGV0IGxvd2VyID0gdW5peHRpbWUgLSB1cHBlciAqIE1hdGgucG93KDIsIDMyKTtcbiAgICByYW5kID0gcmFuZCB8fCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCA0KSk7XG4gICAgbGV0IGJ1ZiA9IFtdO1xuXG4gICAgYnVmLnB1c2goKHVwcGVyID4+PiAoOCAqIDMpKSAmIDB4ZmYpO1xuICAgIGJ1Zi5wdXNoKCh1cHBlciA+Pj4gKDggKiAyKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgodXBwZXIgPj4+ICg4ICogMSkpICYgMHhmZik7XG4gICAgYnVmLnB1c2goKHVwcGVyID4+PiAoOCAqIDApKSAmIDB4ZmYpO1xuICAgIGJ1Zi5wdXNoKChsb3dlciA+Pj4gKDggKiAzKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgobG93ZXIgPj4+ICg4ICogMikpICYgMHhmZik7XG4gICAgYnVmLnB1c2goKGxvd2VyID4+PiAoOCAqIDEpKSAmIDB4ZmYpO1xuICAgIGJ1Zi5wdXNoKChsb3dlciA+Pj4gKDggKiAwKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgocmFuZCA+Pj4gKDggKiAzKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgocmFuZCA+Pj4gKDggKiAyKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgocmFuZCA+Pj4gKDggKiAxKSkgJiAweGZmKTtcbiAgICBidWYucHVzaCgocmFuZCA+Pj4gKDggKiAwKSkgJiAweGZmKTtcblxuICAgIGxldCBvYmogPSB7XG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgcGluZzoge1xuICAgICAgICAgIGtleTogYnVmLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5zZW5kKG9iaiwgeyBsb2NhbF9jb25uZWN0OiBmb3JjZUdsb2JhbE5ldHdvcmsgPyBmYWxzZSA6IHRydWUgfSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgY2FsbGJhY2sgPSBzeXN0ZW1PYmogPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChidWZbaV0gIT09IHN5c3RlbU9iai5wb25nLmtleVtpXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZVBvbmdPYnNlcnZlcihjYWxsYmFjayk7XG4gICAgICAgIGxldCB1cHBlciA9XG4gICAgICAgICAgKChzeXN0ZW1PYmoucG9uZy5rZXlbMF0gPDwgKDggKiAzKSkgPj4+IDApICtcbiAgICAgICAgICAoKHN5c3RlbU9iai5wb25nLmtleVsxXSA8PCAoOCAqIDIpKSA+Pj4gMCkgK1xuICAgICAgICAgICgoc3lzdGVtT2JqLnBvbmcua2V5WzJdIDw8ICg4ICogMSkpID4+PiAwKSArXG4gICAgICAgICAgKChzeXN0ZW1PYmoucG9uZy5rZXlbM10gPDwgKDggKiAwKSkgPj4+IDApO1xuICAgICAgICBsZXQgbG93ZXIgPVxuICAgICAgICAgICgoc3lzdGVtT2JqLnBvbmcua2V5WzRdIDw8ICg4ICogMykpID4+PiAwKSArXG4gICAgICAgICAgKChzeXN0ZW1PYmoucG9uZy5rZXlbNV0gPDwgKDggKiAyKSkgPj4+IDApICtcbiAgICAgICAgICAoKHN5c3RlbU9iai5wb25nLmtleVs2XSA8PCAoOCAqIDEpKSA+Pj4gMCkgK1xuICAgICAgICAgICgoc3lzdGVtT2JqLnBvbmcua2V5WzddIDw8ICg4ICogMCkpID4+PiAwKTtcbiAgICAgICAgbGV0IG9ibml6SnNQaW5nVW5peHRpbWUgPSB1cHBlciAqIE1hdGgucG93KDIsIDMyKSArIGxvd2VyO1xuICAgICAgICBsZXQgb2JuaXpKc1BvbmdVbml4dGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgYWxsVGltZSA9IG9ibml6SnNQb25nVW5peHRpbWUgLSBvYm5pekpzUGluZ1VuaXh0aW1lO1xuICAgICAgICBsZXQgdGltZUpzMnNlcnZlciA9IHN5c3RlbU9iai5wb25nLnBpbmdTZXJ2ZXJUaW1lIC0gb2JuaXpKc1BpbmdVbml4dGltZTtcbiAgICAgICAgbGV0IHRpbWVTZXJ2ZXIyT2JuaXogPVxuICAgICAgICAgIHN5c3RlbU9iai5wb25nLm9ibml6VGltZSAtIHN5c3RlbU9iai5wb25nLnBpbmdTZXJ2ZXJUaW1lO1xuICAgICAgICBsZXQgdGltZU9ibml6MlNlcnZlciA9XG4gICAgICAgICAgc3lzdGVtT2JqLnBvbmcucG9uZ1NlcnZlclRpbWUgLSBzeXN0ZW1PYmoucG9uZy5vYm5pelRpbWU7XG4gICAgICAgIGxldCB0aW1lU2VydmVyMkpzID0gb2JuaXpKc1BvbmdVbml4dGltZSAtIHN5c3RlbU9iai5wb25nLnBvbmdTZXJ2ZXJUaW1lO1xuICAgICAgICBsZXQgc3RyID0gYHBpbmcgJHthbGxUaW1lfW1zIChqcyAtLVske3RpbWVKczJzZXJ2ZXJ9bXNdLS0+IHNlcnZlciAtLVske3RpbWVTZXJ2ZXIyT2JuaXp9bXNdLS0+IG9ibml6IC0tWyR7dGltZU9ibml6MlNlcnZlcn1tc10tLT4gc2VydmVyIC0tWyR7dGltZVNlcnZlcjJKc31tc10tLT4ganMpYDtcblxuICAgICAgICB0aGlzLnByaW50X2RlYnVnKHN0cik7XG4gICAgICAgIHJlc29sdmUoc3RyKTtcbiAgICAgIH07XG4gICAgICB0aGlzLmFkZFBvbmdPYnNlcnZlcihjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cbn07XG4iXX0=
