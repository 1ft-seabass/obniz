"use strict";
const ObnizConnection = require('./ObnizConnection');
const ObnizUtil = require('./libs/utils/util');
let _parts = {};
module.exports = class ObnizParts extends ObnizConnection {
    constructor(id, options) {
        super(id, options);
    }
    static _parts() {
        return _parts;
    }
    static PartsRegistrate(arg0, arg1) {
        if (arg0 &&
            typeof arg0.info === 'function' &&
            typeof arg0.info().name === 'string') {
            _parts[arg0.info().name] = arg0;
        }
        else if (typeof arg0 === 'string' && typeof arg1 === 'object') {
            _parts[arg0] = arg1;
        }
    }
    static Parts(name) {
        if (!_parts[name]) {
            throw new Error(`unknown parts [${name}]`);
        }
        return new _parts[name]();
    }
    wired(partsname) {
        let parts = ObnizParts.Parts(partsname);
        if (!parts) {
            throw new Error('No such a parts [' + partsname + '] found');
        }
        let args = Array.from(arguments);
        args.shift();
        args.unshift(this);
        if (parts.keys) {
            if (parts.requiredKeys) {
                let err = ObnizUtil._requiredKeys(args[1], parts.requiredKeys);
                if (err) {
                    throw new Error(partsname + " wired param '" + err + "' required, but not found ");
                }
            }
            parts.params = ObnizUtil._keyFilter(args[1], parts.keys);
        }
        parts.obniz = this;
        parts.wired.apply(parts, args);
        if (parts.keys || parts.ioKeys) {
            let keys = parts.ioKeys || parts.keys;
            let displayPartsName = parts.displayName || partsname;
            let ioNames = {};
            for (let index in keys) {
                let pinName = keys[index];
                let io = args[1][pinName];
                if (this.isValidIO(io)) {
                    if (parts.displayIoNames && parts.displayIoNames[pinName]) {
                        pinName = parts.displayIoNames[pinName];
                    }
                    ioNames[io] = pinName;
                }
            }
            this.display.setPinNames(displayPartsName, ioNames);
        }
        return parts;
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9PYm5pelBhcnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNyRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUUvQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFFaEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLFVBQVcsU0FBUSxlQUFlO0lBQ3ZELFlBQVksRUFBRSxFQUFFLE9BQU87UUFDckIsS0FBSyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU07UUFDWCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSTtRQUMvQixJQUNFLElBQUk7WUFDSixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVTtZQUMvQixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUNwQztZQUNBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUztRQUNiLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtnQkFDdEIsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUMvRCxJQUFJLEdBQUcsRUFBRTtvQkFDUCxNQUFNLElBQUksS0FBSyxDQUNiLFNBQVMsR0FBRyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsNEJBQTRCLENBQ2xFLENBQUM7aUJBQ0g7YUFDRjtZQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9CLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzlCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztZQUN0QyxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksU0FBUyxDQUFDO1lBQ3RELElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNqQixLQUFLLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDdEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzFCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtvQkFDdEIsSUFBSSxLQUFLLENBQUMsY0FBYyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ3pELE9BQU8sR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUN6QztvQkFDRCxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO2lCQUN2QjthQUNGO1lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDckQ7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFDIiwiZmlsZSI6Im9ibml6L09ibml6UGFydHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBPYm5pekNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL09ibml6Q29ubmVjdGlvbicpO1xuY29uc3QgT2JuaXpVdGlsID0gcmVxdWlyZSgnLi9saWJzL3V0aWxzL3V0aWwnKTtcblxubGV0IF9wYXJ0cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE9ibml6UGFydHMgZXh0ZW5kcyBPYm5pekNvbm5lY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihpZCwgb3B0aW9ucykge1xuICAgIHN1cGVyKGlkLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBfcGFydHMoKSB7XG4gICAgcmV0dXJuIF9wYXJ0cztcbiAgfVxuXG4gIHN0YXRpYyBQYXJ0c1JlZ2lzdHJhdGUoYXJnMCwgYXJnMSkge1xuICAgIGlmIChcbiAgICAgIGFyZzAgJiZcbiAgICAgIHR5cGVvZiBhcmcwLmluZm8gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBhcmcwLmluZm8oKS5uYW1lID09PSAnc3RyaW5nJ1xuICAgICkge1xuICAgICAgX3BhcnRzW2FyZzAuaW5mbygpLm5hbWVdID0gYXJnMDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcwID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIF9wYXJ0c1thcmcwXSA9IGFyZzE7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIFBhcnRzKG5hbWUpIHtcbiAgICBpZiAoIV9wYXJ0c1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHBhcnRzIFske25hbWV9XWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9wYXJ0c1tuYW1lXSgpO1xuICB9XG5cbiAgd2lyZWQocGFydHNuYW1lKSB7XG4gICAgbGV0IHBhcnRzID0gT2JuaXpQYXJ0cy5QYXJ0cyhwYXJ0c25hbWUpO1xuICAgIGlmICghcGFydHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCBhIHBhcnRzIFsnICsgcGFydHNuYW1lICsgJ10gZm91bmQnKTtcbiAgICB9XG4gICAgbGV0IGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7XG4gICAgYXJncy5zaGlmdCgpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAocGFydHMua2V5cykge1xuICAgICAgaWYgKHBhcnRzLnJlcXVpcmVkS2V5cykge1xuICAgICAgICBsZXQgZXJyID0gT2JuaXpVdGlsLl9yZXF1aXJlZEtleXMoYXJnc1sxXSwgcGFydHMucmVxdWlyZWRLZXlzKTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIHBhcnRzbmFtZSArIFwiIHdpcmVkIHBhcmFtICdcIiArIGVyciArIFwiJyByZXF1aXJlZCwgYnV0IG5vdCBmb3VuZCBcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcnRzLnBhcmFtcyA9IE9ibml6VXRpbC5fa2V5RmlsdGVyKGFyZ3NbMV0sIHBhcnRzLmtleXMpO1xuICAgIH1cbiAgICBwYXJ0cy5vYm5peiA9IHRoaXM7XG4gICAgcGFydHMud2lyZWQuYXBwbHkocGFydHMsIGFyZ3MpO1xuICAgIGlmIChwYXJ0cy5rZXlzIHx8IHBhcnRzLmlvS2V5cykge1xuICAgICAgbGV0IGtleXMgPSBwYXJ0cy5pb0tleXMgfHwgcGFydHMua2V5cztcbiAgICAgIGxldCBkaXNwbGF5UGFydHNOYW1lID0gcGFydHMuZGlzcGxheU5hbWUgfHwgcGFydHNuYW1lO1xuICAgICAgbGV0IGlvTmFtZXMgPSB7fTtcbiAgICAgIGZvciAobGV0IGluZGV4IGluIGtleXMpIHtcbiAgICAgICAgbGV0IHBpbk5hbWUgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgbGV0IGlvID0gYXJnc1sxXVtwaW5OYW1lXTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZElPKGlvKSkge1xuICAgICAgICAgIGlmIChwYXJ0cy5kaXNwbGF5SW9OYW1lcyAmJiBwYXJ0cy5kaXNwbGF5SW9OYW1lc1twaW5OYW1lXSkge1xuICAgICAgICAgICAgcGluTmFtZSA9IHBhcnRzLmRpc3BsYXlJb05hbWVzW3Bpbk5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpb05hbWVzW2lvXSA9IHBpbk5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZGlzcGxheS5zZXRQaW5OYW1lcyhkaXNwbGF5UGFydHNOYW1lLCBpb05hbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9XG59O1xuIl19
