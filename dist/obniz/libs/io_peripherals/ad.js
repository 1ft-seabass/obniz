"use strict";
class PeripheralAD {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.value = 0.0;
        this.observers = [];
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    start(callback) {
        this.onchange = callback;
        let obj = {};
        obj['ad' + this.id] = {
            stream: true,
        };
        this.Obniz.send(obj);
        return this.value;
    }
    getWait() {
        let self = this;
        return new Promise(function (resolve, reject) {
            self.addObserver(resolve);
            let obj = {};
            obj['ad' + self.id] = {
                stream: false,
            };
            self.Obniz.send(obj);
        });
    }
    end() {
        this.onchange = null;
        let obj = {};
        obj['ad' + this.id] = null;
        this.Obniz.send(obj);
        return;
    }
    notified(obj) {
        this.value = obj;
        if (this.onchange) {
            this.onchange(obj);
        }
        let callback = this.observers.shift();
        if (callback) {
            callback(obj);
        }
    }
}
module.exports = PeripheralAD;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2lvX3BlcmlwaGVyYWxzL2FkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLFlBQVk7SUFDaEIsWUFBWSxLQUFLLEVBQUUsRUFBRTtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBUTtRQUNsQixJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1osSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDcEIsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtZQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNiLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO2dCQUNwQixNQUFNLEVBQUUsS0FBSzthQUNkLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxHQUFHO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLE9BQU87SUFDVCxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNwQjtRQUNELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEMsSUFBSSxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZjtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvaW9fcGVyaXBoZXJhbHMvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQZXJpcGhlcmFsQUQge1xuICBjb25zdHJ1Y3RvcihPYm5peiwgaWQpIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBfcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IDAuMDtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICB9XG5cbiAgYWRkT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vbmNoYW5nZSA9IGNhbGxiYWNrO1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBvYmpbJ2FkJyArIHRoaXMuaWRdID0ge1xuICAgICAgc3RyZWFtOiB0cnVlLFxuICAgIH07XG4gICAgdGhpcy5PYm5pei5zZW5kKG9iaik7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cblxuICBnZXRXYWl0KCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBzZWxmLmFkZE9ic2VydmVyKHJlc29sdmUpO1xuICAgICAgbGV0IG9iaiA9IHt9O1xuICAgICAgb2JqWydhZCcgKyBzZWxmLmlkXSA9IHtcbiAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgIH07XG4gICAgICBzZWxmLk9ibml6LnNlbmQob2JqKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuZCgpIHtcbiAgICB0aGlzLm9uY2hhbmdlID0gbnVsbDtcbiAgICBsZXQgb2JqID0ge307XG4gICAgb2JqWydhZCcgKyB0aGlzLmlkXSA9IG51bGw7XG4gICAgdGhpcy5PYm5pei5zZW5kKG9iaik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbm90aWZpZWQob2JqKSB7XG4gICAgdGhpcy52YWx1ZSA9IG9iajtcbiAgICBpZiAodGhpcy5vbmNoYW5nZSkge1xuICAgICAgdGhpcy5vbmNoYW5nZShvYmopO1xuICAgIH1cbiAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLm9ic2VydmVycy5zaGlmdCgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2sob2JqKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQZXJpcGhlcmFsQUQ7XG4iXX0=
