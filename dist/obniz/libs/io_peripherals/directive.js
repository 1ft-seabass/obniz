"use strict";
const semver = require('semver');
class Directive {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.observers = [];
        this._reset();
    }
    _reset() {
        for (let i = 0; i < this.observers.length; i++) {
            this.observers[i].reject(new Error('reset called'));
        }
        this.observers = [];
        this._animationIdentifier = 0;
    }
    addObserver(name, resolve, reject) {
        if (name && resolve && reject) {
            this.observers.push({
                name,
                resolve,
                reject,
            });
        }
    }
    animation(name, status, array, repeat) {
        if ((typeof repeat == 'number' || status == 'registrate') &&
            semver.lt(this.Obniz.firmware_ver, '2.0.0')) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        let obj = {};
        obj.io = {
            animation: {
                name: name,
                status: status,
            },
        };
        if (typeof repeat == 'number') {
            obj.io.animation.repeat = repeat;
        }
        if (!array) {
            array = [];
        }
        let states = [];
        for (let i = 0; i < array.length; i++) {
            let state = array[i];
            let duration = state.duration;
            let operation = state.state;
            // dry run. and get json commands
            this.Obniz.sendPool = [];
            operation(i);
            let pooledJsonArray = this.Obniz.sendPool;
            this.Obniz.sendPool = null;
            states.push({
                duration: duration,
                state: pooledJsonArray,
            });
        }
        if (status === 'loop' || status === 'registrate') {
            obj.io.animation.states = states;
        }
        this.Obniz.send(obj);
    }
    repeatWait(array, repeat) {
        if (semver.lt(this.Obniz.firmware_ver, '2.0.0')) {
            throw new Error(`Please update obniz firmware >= 2.0.0`);
        }
        if (typeof repeat !== 'number' || repeat < 1) {
            throw new Error('please specify repeat count > 0');
        }
        if (parseInt(repeat) !== repeat) {
            throw new Error('please provide integer number like 1, 2, 3,,,');
        }
        return new Promise((resolve, reject) => {
            const name = '_repeatwait' + Date.now() + this._animationIdentifier;
            if (++this._animationIdentifier > 1000) {
                this._animationIdentifier = 0;
            }
            this.animation(name, 'loop', array, repeat);
            this.addObserver(name, resolve, reject);
        });
    }
    notified(obj) {
        if (obj.animation.status == 'finish') {
            for (let i = this.observers.length - 1; i >= 0; i--) {
                if (obj.animation.name === this.observers[i].name) {
                    this.observers[i].resolve();
                    this.observers.splice(i, 1);
                }
            }
        }
    }
}
module.exports = Directive;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2lvX3BlcmlwaGVyYWxzL2RpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sU0FBUztJQUNiLFlBQVksS0FBSyxFQUFFLEVBQUU7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNO1FBQ0osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNO1FBQy9CLElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxNQUFNLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xCLElBQUk7Z0JBQ0osT0FBTztnQkFDUCxNQUFNO2FBQ1AsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU07UUFDbkMsSUFDRSxDQUFDLE9BQU8sTUFBTSxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksWUFBWSxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQzNDO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLEVBQUUsR0FBRztZQUNQLFNBQVMsRUFBRTtnQkFDVCxJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNLEVBQUUsTUFBTTthQUNmO1NBQ0YsQ0FBQztRQUNGLElBQUksT0FBTyxNQUFNLElBQUksUUFBUSxFQUFFO1lBQzdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBRUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQzlCLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFFNUIsaUNBQWlDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUN6QixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDVixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsS0FBSyxFQUFFLGVBQWU7YUFDdkIsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxLQUFLLFlBQVksRUFBRTtZQUNoRCxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ2xDO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtRQUN0QixJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QyxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxNQUFNLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLElBQUksR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUNwRSxJQUFJLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksRUFBRTtnQkFDdEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsQ0FBQzthQUMvQjtZQUVELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHO1FBQ1YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUU7WUFDcEMsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkQsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtvQkFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL2lvX3BlcmlwaGVyYWxzL2RpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNlbXZlciA9IHJlcXVpcmUoJ3NlbXZlcicpO1xuXG5jbGFzcyBEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3RvcihPYm5peiwgaWQpIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICB0aGlzLl9yZXNldCgpO1xuICB9XG5cbiAgX3Jlc2V0KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2ldLnJlamVjdChuZXcgRXJyb3IoJ3Jlc2V0IGNhbGxlZCcpKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICB0aGlzLl9hbmltYXRpb25JZGVudGlmaWVyID0gMDtcbiAgfVxuXG4gIGFkZE9ic2VydmVyKG5hbWUsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChuYW1lICYmIHJlc29sdmUgJiYgcmVqZWN0KSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYW5pbWF0aW9uKG5hbWUsIHN0YXR1cywgYXJyYXksIHJlcGVhdCkge1xuICAgIGlmIChcbiAgICAgICh0eXBlb2YgcmVwZWF0ID09ICdudW1iZXInIHx8IHN0YXR1cyA9PSAncmVnaXN0cmF0ZScpICYmXG4gICAgICBzZW12ZXIubHQodGhpcy5PYm5pei5maXJtd2FyZV92ZXIsICcyLjAuMCcpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBsZWFzZSB1cGRhdGUgb2JuaXogZmlybXdhcmUgPj0gMi4wLjBgKTtcbiAgICB9XG4gICAgbGV0IG9iaiA9IHt9O1xuICAgIG9iai5pbyA9IHtcbiAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHJlcGVhdCA9PSAnbnVtYmVyJykge1xuICAgICAgb2JqLmlvLmFuaW1hdGlvbi5yZXBlYXQgPSByZXBlYXQ7XG4gICAgfVxuICAgIGlmICghYXJyYXkpIHtcbiAgICAgIGFycmF5ID0gW107XG4gICAgfVxuXG4gICAgbGV0IHN0YXRlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzdGF0ZSA9IGFycmF5W2ldO1xuICAgICAgbGV0IGR1cmF0aW9uID0gc3RhdGUuZHVyYXRpb247XG4gICAgICBsZXQgb3BlcmF0aW9uID0gc3RhdGUuc3RhdGU7XG5cbiAgICAgIC8vIGRyeSBydW4uIGFuZCBnZXQganNvbiBjb21tYW5kc1xuICAgICAgdGhpcy5PYm5pei5zZW5kUG9vbCA9IFtdO1xuICAgICAgb3BlcmF0aW9uKGkpO1xuICAgICAgbGV0IHBvb2xlZEpzb25BcnJheSA9IHRoaXMuT2JuaXouc2VuZFBvb2w7XG4gICAgICB0aGlzLk9ibml6LnNlbmRQb29sID0gbnVsbDtcbiAgICAgIHN0YXRlcy5wdXNoKHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBzdGF0ZTogcG9vbGVkSnNvbkFycmF5LFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09ICdsb29wJyB8fCBzdGF0dXMgPT09ICdyZWdpc3RyYXRlJykge1xuICAgICAgb2JqLmlvLmFuaW1hdGlvbi5zdGF0ZXMgPSBzdGF0ZXM7XG4gICAgfVxuICAgIHRoaXMuT2JuaXouc2VuZChvYmopO1xuICB9XG5cbiAgcmVwZWF0V2FpdChhcnJheSwgcmVwZWF0KSB7XG4gICAgaWYgKHNlbXZlci5sdCh0aGlzLk9ibml6LmZpcm13YXJlX3ZlciwgJzIuMC4wJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGxlYXNlIHVwZGF0ZSBvYm5peiBmaXJtd2FyZSA+PSAyLjAuMGApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcGVhdCAhPT0gJ251bWJlcicgfHwgcmVwZWF0IDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2Ugc3BlY2lmeSByZXBlYXQgY291bnQgPiAwJyk7XG4gICAgfVxuICAgIGlmIChwYXJzZUludChyZXBlYXQpICE9PSByZXBlYXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncGxlYXNlIHByb3ZpZGUgaW50ZWdlciBudW1iZXIgbGlrZSAxLCAyLCAzLCwsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSAnX3JlcGVhdHdhaXQnICsgRGF0ZS5ub3coKSArIHRoaXMuX2FuaW1hdGlvbklkZW50aWZpZXI7XG4gICAgICBpZiAoKyt0aGlzLl9hbmltYXRpb25JZGVudGlmaWVyID4gMTAwMCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb25JZGVudGlmaWVyID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hbmltYXRpb24obmFtZSwgJ2xvb3AnLCBhcnJheSwgcmVwZWF0KTtcbiAgICAgIHRoaXMuYWRkT2JzZXJ2ZXIobmFtZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5vdGlmaWVkKG9iaikge1xuICAgIGlmIChvYmouYW5pbWF0aW9uLnN0YXR1cyA9PSAnZmluaXNoJykge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChvYmouYW5pbWF0aW9uLm5hbWUgPT09IHRoaXMub2JzZXJ2ZXJzW2ldLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyc1tpXS5yZXNvbHZlKCk7XG4gICAgICAgICAgdGhpcy5vYnNlcnZlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGlyZWN0aXZlO1xuIl19
