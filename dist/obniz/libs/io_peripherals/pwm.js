"use strict";
const ObnizUtil = require('../utils/util');
class PeripheralPWM {
    constructor(Obniz, id) {
        this.Obniz = Obniz;
        this.id = id;
        this._reset();
    }
    _reset() {
        this.state = {};
        this.used = false;
    }
    sendWS(obj) {
        let wsObj = {};
        wsObj['pwm' + this.id] = obj;
        this.Obniz.send(wsObj);
    }
    start(params) {
        const err = ObnizUtil._requiredKeys(params, ['io']);
        if (err) {
            throw new Error("pwm start param '" + err + "' required, but not found ");
        }
        this.params = ObnizUtil._keyFilter(params, ['io', 'drive', 'pull']);
        const io = this.params.io;
        const ioObj = this.Obniz.getIO(io);
        ioObj.drive(this.params.drive || '5v');
        ioObj.pull(this.params.pull || null);
        this.state = {
            io: io,
            freq: 1000,
        };
        this.sendWS({
            io: io,
        });
        this.used = true;
    }
    freq(freq) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        freq *= 1;
        if (typeof freq !== 'number') {
            throw new Error('please provide freq in number');
        }
        this.state.freq = freq;
        this.sendWS({
            freq: freq,
        });
        if (typeof this.state.duty === 'number') {
            this.duty(this.state.duty);
        }
    }
    pulse(pulse_width) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.state.pulse = pulse_width;
        delete this.state.duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    duty(duty) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        duty *= 1;
        if (typeof this.state.freq !== 'number' || this.state.freq <= 0) {
            throw new Error('please provide freq first.');
        }
        if (typeof duty !== 'number') {
            throw new Error('please provide duty in number');
        }
        if (duty < 0) {
            duty = 0;
        }
        if (duty > 100) {
            duty = 100;
        }
        const pulse_width = (1.0 / this.state.freq) * 1000 * duty * 0.01;
        this.state.duty = duty;
        this.sendWS({
            pulse: pulse_width,
        });
    }
    isUsed() {
        return this.used;
    }
    end() {
        this.state = {};
        this.sendWS(null);
        this.used = false;
    }
    modulate(type, symbol_length, data) {
        if (!this.used) {
            throw new Error(`pwm${this.id} is not started`);
        }
        this.sendWS({
            modulate: {
                type: type,
                symbol_length: symbol_length,
                data: data,
            },
        });
    }
}
module.exports = PeripheralPWM;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2lvX3BlcmlwaGVyYWxzL3B3bS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRTNDLE1BQU0sYUFBYTtJQUNqQixZQUFZLEtBQUssRUFBRSxFQUFFO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHO1FBQ1IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTTtRQUNWLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwRCxJQUFJLEdBQUcsRUFBRTtZQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxHQUFHLDRCQUE0QixDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXBFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzFCLE1B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O1lBQ1YsS0FBSyxFQUFFLFdBQVc7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELEdBQUc7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ1YsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJO2dCQUNWLGFBQWEsRUFBRSxhQUFhO2dCQUM1QixJQUFJLEVBQUUsSUFBSTthQUNYO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMiLCJmaWxlIjoib2JuaXovbGlicy9pb19wZXJpcGhlcmFscy9wd20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBPYm5pelV0aWwgPSByZXF1aXJlKCcuLi91dGlscy91dGlsJyk7XG5cbmNsYXNzIFBlcmlwaGVyYWxQV00ge1xuICBjb25zdHJ1Y3RvcihPYm5peiwgaWQpIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBfcmVzZXQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMudXNlZCA9IGZhbHNlO1xuICB9XG5cbiAgc2VuZFdTKG9iaikge1xuICAgIGxldCB3c09iaiA9IHt9O1xuICAgIHdzT2JqWydwd20nICsgdGhpcy5pZF0gPSBvYmo7XG4gICAgdGhpcy5PYm5pei5zZW5kKHdzT2JqKTtcbiAgfVxuXG4gIHN0YXJ0KHBhcmFtcykge1xuICAgIGNvbnN0IGVyciA9IE9ibml6VXRpbC5fcmVxdWlyZWRLZXlzKHBhcmFtcywgWydpbyddKTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwd20gc3RhcnQgcGFyYW0gJ1wiICsgZXJyICsgXCInIHJlcXVpcmVkLCBidXQgbm90IGZvdW5kIFwiKTtcbiAgICB9XG4gICAgdGhpcy5wYXJhbXMgPSBPYm5pelV0aWwuX2tleUZpbHRlcihwYXJhbXMsIFsnaW8nLCAnZHJpdmUnLCAncHVsbCddKTtcblxuICAgIGNvbnN0IGlvID0gdGhpcy5wYXJhbXMuaW87XG4gICAgY29uc3QgaW9PYmogPSB0aGlzLk9ibml6LmdldElPKGlvKTtcblxuICAgIGlvT2JqLmRyaXZlKHRoaXMucGFyYW1zLmRyaXZlIHx8ICc1dicpO1xuICAgIGlvT2JqLnB1bGwodGhpcy5wYXJhbXMucHVsbCB8fCBudWxsKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbzogaW8sXG4gICAgICBmcmVxOiAxMDAwLFxuICAgIH07XG4gICAgdGhpcy5zZW5kV1Moe1xuICAgICAgaW86IGlvLFxuICAgIH0pO1xuICAgIHRoaXMudXNlZCA9IHRydWU7XG4gIH1cblxuICBmcmVxKGZyZXEpIHtcbiAgICBpZiAoIXRoaXMudXNlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwd20ke3RoaXMuaWR9IGlzIG5vdCBzdGFydGVkYCk7XG4gICAgfVxuICAgIGZyZXEgKj0gMTtcbiAgICBpZiAodHlwZW9mIGZyZXEgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BsZWFzZSBwcm92aWRlIGZyZXEgaW4gbnVtYmVyJyk7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUuZnJlcSA9IGZyZXE7XG4gICAgdGhpcy5zZW5kV1Moe1xuICAgICAgZnJlcTogZnJlcSxcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHRoaXMuc3RhdGUuZHV0eSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuZHV0eSh0aGlzLnN0YXRlLmR1dHkpO1xuICAgIH1cbiAgfVxuXG4gIHB1bHNlKHB1bHNlX3dpZHRoKSB7XG4gICAgaWYgKCF0aGlzLnVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHdtJHt0aGlzLmlkfSBpcyBub3Qgc3RhcnRlZGApO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUucHVsc2UgPSBwdWxzZV93aWR0aDtcbiAgICBkZWxldGUgdGhpcy5zdGF0ZS5kdXR5O1xuICAgIHRoaXMuc2VuZFdTKHtcbiAgICAgIHB1bHNlOiBwdWxzZV93aWR0aCxcbiAgICB9KTtcbiAgfVxuXG4gIGR1dHkoZHV0eSkge1xuICAgIGlmICghdGhpcy51c2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHB3bSR7dGhpcy5pZH0gaXMgbm90IHN0YXJ0ZWRgKTtcbiAgICB9XG4gICAgZHV0eSAqPSAxO1xuICAgIGlmICh0eXBlb2YgdGhpcy5zdGF0ZS5mcmVxICE9PSAnbnVtYmVyJyB8fCB0aGlzLnN0YXRlLmZyZXEgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2UgcHJvdmlkZSBmcmVxIGZpcnN0LicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGR1dHkgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BsZWFzZSBwcm92aWRlIGR1dHkgaW4gbnVtYmVyJyk7XG4gICAgfVxuICAgIGlmIChkdXR5IDwgMCkge1xuICAgICAgZHV0eSA9IDA7XG4gICAgfVxuICAgIGlmIChkdXR5ID4gMTAwKSB7XG4gICAgICBkdXR5ID0gMTAwO1xuICAgIH1cbiAgICBjb25zdCBwdWxzZV93aWR0aCA9ICgxLjAgLyB0aGlzLnN0YXRlLmZyZXEpICogMTAwMCAqIGR1dHkgKiAwLjAxO1xuICAgIHRoaXMuc3RhdGUuZHV0eSA9IGR1dHk7XG4gICAgdGhpcy5zZW5kV1Moe1xuICAgICAgcHVsc2U6IHB1bHNlX3dpZHRoLFxuICAgIH0pO1xuICB9XG5cbiAgaXNVc2VkKCkge1xuICAgIHJldHVybiB0aGlzLnVzZWQ7XG4gIH1cblxuICBlbmQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMuc2VuZFdTKG51bGwpO1xuICAgIHRoaXMudXNlZCA9IGZhbHNlO1xuICB9XG5cbiAgbW9kdWxhdGUodHlwZSwgc3ltYm9sX2xlbmd0aCwgZGF0YSkge1xuICAgIGlmICghdGhpcy51c2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHB3bSR7dGhpcy5pZH0gaXMgbm90IHN0YXJ0ZWRgKTtcbiAgICB9XG4gICAgdGhpcy5zZW5kV1Moe1xuICAgICAgbW9kdWxhdGU6IHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgc3ltYm9sX2xlbmd0aDogc3ltYm9sX2xlbmd0aCxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQZXJpcGhlcmFsUFdNO1xuIl19
