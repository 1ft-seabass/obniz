"use strict";
class ObnizUtil {
    constructor(obniz) {
        this.obniz = obniz;
    }
    static _keyFilter(params, keys) {
        let filterdParams = {};
        if (typeof params !== "object") {
            return filterdParams;
        }
        filterdParams = Object.keys(params)
            .filter((key) => keys.includes(key))
            .reduce((obj, key) => {
            obj[key] = params[key];
            return obj;
        }, {});
        return filterdParams;
    }
    /**
     *
     * @return {String} key name of not found.
     */
    static _requiredKeys(params, keys) {
        if (typeof params !== "object") {
            return keys[0];
        }
        for (const index in keys) {
            if (!(keys[index] in params)) {
                return keys[index];
            }
        }
        return null;
    }
    static dataArray2string(data) {
        let string = null;
        try {
            const StringDecoder = require("string_decoder").StringDecoder;
            if (StringDecoder) {
                string = new StringDecoder("utf8").write(Buffer.from(data));
            }
        }
        catch (e) {
            // this.obniz.error(e);
        }
        return string;
    }
    static string2dataArray(str) {
        const buf = Buffer.from(str);
        return [...buf];
    }
    createCanvasContext(width, height) {
        if (this.obniz.isNode) {
            try {
                const { createCanvas } = require("canvas");
                return createCanvas(this.width, this.height);
            }
            catch (e) {
                throw new Error("obniz.js require node-canvas to draw rich contents. see more detail on docs");
            }
        }
        else {
            const canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            canvas.style["-webkit-font-smoothing"] = "none";
            const body = document.getElementsByTagName("body")[0];
            body.appendChild(canvas);
            const ctx = canvas.getContext("2d");
            return ctx;
        }
    }
}
module.exports = ObnizUtil;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3V0aWxzL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sU0FBUztJQXlEYixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQXpETSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQVcsRUFBRSxJQUFTO1FBQzdDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM5QixPQUFPLGFBQWEsQ0FBQztTQUN0QjtRQUNELGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUNoQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkMsTUFBTSxDQUFDLENBQUMsR0FBUSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFVCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFXLEVBQUUsSUFBUztRQUNoRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoQjtRQUVELEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRTtnQkFDNUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDcEI7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFjO1FBQzNDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJO1lBQ0YsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsYUFBYSxDQUFDO1lBQzlELElBQUksYUFBYSxFQUFFO2dCQUNqQixNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUM3RDtTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVix1QkFBdUI7U0FDeEI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQVc7UUFDeEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBV00sbUJBQW1CLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDdEQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNyQixJQUFJO2dCQUNGLE1BQU0sRUFBQyxZQUFZLEVBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYiw2RUFBNkUsQ0FDOUUsQ0FBQzthQUNIO1NBQ0Y7YUFBTTtZQUNMLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDckIsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDdEIsTUFBTSxDQUFDLEtBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUN6RCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV6QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL3V0aWxzL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBPYm5pelV0aWwge1xuXG4gIHB1YmxpYyBzdGF0aWMgX2tleUZpbHRlcihwYXJhbXM6IGFueSwga2V5czogYW55KSB7XG4gICAgbGV0IGZpbHRlcmRQYXJhbXMgPSB7fTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZpbHRlcmRQYXJhbXM7XG4gICAgfVxuICAgIGZpbHRlcmRQYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAuZmlsdGVyKChrZXkpID0+IGtleXMuaW5jbHVkZXMoa2V5KSlcbiAgICAgIC5yZWR1Y2UoKG9iajogYW55LCBrZXkpID0+IHtcbiAgICAgICAgb2JqW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcblxuICAgIHJldHVybiBmaWx0ZXJkUGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30ga2V5IG5hbWUgb2Ygbm90IGZvdW5kLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBfcmVxdWlyZWRLZXlzKHBhcmFtczogYW55LCBrZXlzOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGtleXNbMF07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBrZXlzKSB7XG4gICAgICBpZiAoIShrZXlzW2luZGV4XSBpbiBwYXJhbXMpKSB7XG4gICAgICAgIHJldHVybiBrZXlzW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGRhdGFBcnJheTJzdHJpbmcoZGF0YTogbnVtYmVyW10pIHtcbiAgICBsZXQgc3RyaW5nID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoXCJzdHJpbmdfZGVjb2RlclwiKS5TdHJpbmdEZWNvZGVyO1xuICAgICAgaWYgKFN0cmluZ0RlY29kZXIpIHtcbiAgICAgICAgc3RyaW5nID0gbmV3IFN0cmluZ0RlY29kZXIoXCJ1dGY4XCIpLndyaXRlKEJ1ZmZlci5mcm9tKGRhdGEpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyB0aGlzLm9ibml6LmVycm9yKGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzdHJpbmcyZGF0YUFycmF5KHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20oc3RyKTtcbiAgICByZXR1cm4gWy4uLmJ1Zl07XG4gIH1cblxuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHdpZHRoOiBhbnk7XG4gIHB1YmxpYyBoZWlnaHQ6IGFueTtcbiAgcHVibGljIGNyZWF0ZUNhbnZhczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlQ2FudmFzQ29udGV4dCh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLm9ibml6LmlzTm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2NyZWF0ZUNhbnZhc30gPSByZXF1aXJlKFwiY2FudmFzXCIpO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ2FudmFzKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwib2JuaXouanMgcmVxdWlyZSBub2RlLWNhbnZhcyB0byBkcmF3IHJpY2ggY29udGVudHMuIHNlZSBtb3JlIGRldGFpbCBvbiBkb2NzXCIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAoY2FudmFzLnN0eWxlIGFzIGFueSlbXCItd2Via2l0LWZvbnQtc21vb3RoaW5nXCJdID0gXCJub25lXCI7XG4gICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdO1xuICAgICAgYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgcmV0dXJuIGN0eDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYm5pelV0aWw7XG4iXX0=
