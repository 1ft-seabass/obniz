"use strict";
class ObnizSwitch {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this._reset();
    }
    _reset() {
        this.observers = [];
        this.onChangeForStateWait = function () { };
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    getWait() {
        let self = this;
        return new Promise(function (resolve, reject) {
            let obj = {};
            obj.switch = 'get';
            self.Obniz.send(obj);
            self.addObserver(resolve);
        });
    }
    stateWait(isPressed) {
        let self = this;
        return new Promise(function (resolve, reject) {
            self.onChangeForStateWait = function (pressed) {
                if (isPressed == pressed) {
                    self.onChangeForStateWait = function () { };
                    resolve();
                }
            };
        });
    }
    notified(obj) {
        this.state = obj.state;
        if (this.onchange) {
            this.onchange(this.state);
        }
        this.onChangeForStateWait(this.state);
        const callback = this.observers.shift();
        if (callback) {
            callback(this.state);
        }
    }
}
module.exports = ObnizSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9zd2l0Y2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sV0FBVztJQUNmLFlBQVksS0FBSztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxjQUFZLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQVE7UUFDbEIsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtZQUN6QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBQyxTQUFTO1FBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU07WUFDekMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFVBQVMsT0FBTztnQkFDMUMsSUFBSSxTQUFTLElBQUksT0FBTyxFQUFFO29CQUN4QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsY0FBWSxDQUFDLENBQUM7b0JBQzFDLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hDLElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL3N3aXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE9ibml6U3dpdGNoIHtcbiAgY29uc3RydWN0b3IoT2JuaXopIHtcbiAgICB0aGlzLk9ibml6ID0gT2JuaXo7XG4gICAgdGhpcy5fcmVzZXQoKTtcbiAgfVxuXG4gIF9yZXNldCgpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSBmdW5jdGlvbigpIHt9O1xuICB9XG5cbiAgYWRkT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIGdldFdhaXQoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgIG9iai5zd2l0Y2ggPSAnZ2V0JztcbiAgICAgIHNlbGYuT2JuaXouc2VuZChvYmopO1xuICAgICAgc2VsZi5hZGRPYnNlcnZlcihyZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRlV2FpdChpc1ByZXNzZWQpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc2VsZi5vbkNoYW5nZUZvclN0YXRlV2FpdCA9IGZ1bmN0aW9uKHByZXNzZWQpIHtcbiAgICAgICAgaWYgKGlzUHJlc3NlZCA9PSBwcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5vbkNoYW5nZUZvclN0YXRlV2FpdCA9IGZ1bmN0aW9uKCkge307XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgbm90aWZpZWQob2JqKSB7XG4gICAgdGhpcy5zdGF0ZSA9IG9iai5zdGF0ZTtcbiAgICBpZiAodGhpcy5vbmNoYW5nZSkge1xuICAgICAgdGhpcy5vbmNoYW5nZSh0aGlzLnN0YXRlKTtcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZUZvclN0YXRlV2FpdCh0aGlzLnN0YXRlKTtcblxuICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5vYnNlcnZlcnMuc2hpZnQoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuc3RhdGUpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9ibml6U3dpdGNoO1xuIl19
