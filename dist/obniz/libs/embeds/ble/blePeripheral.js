"use strict";
const BleService = require('./bleService');
const BleHelper = require('./bleHelper');
class BlePeripheral {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this._services = [];
    }
    get services() {
        return this._services;
    }
    addService(obj) {
        if (!(obj instanceof BleService)) {
            obj = new BleService(obj);
        }
        this._services.push(obj);
        obj.peripheral = this;
        this.Obniz.send({ ble: { peripheral: { services: [obj] } } });
    }
    setJson(json) {
        if (json.services) {
            for (let service of json.services) {
                this.addService(service);
            }
        }
    }
    getService(uuid) {
        uuid = BleHelper.uuidFilter(uuid);
        return this._services
            .filter(function (element) {
            return BleHelper.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    removeService(uuid) {
        this._services = this._services.filter(function (element) {
            return BleHelper.uuidFilter(element.uuid) !== uuid;
        });
    }
    stopAllService() {
        this.Obniz.send({
            ble: {
                peripheral: null,
            },
        });
        this._services = [];
    }
    toJSON() {
        return {
            services: this._services,
        };
    }
    findCharacteristic(param) {
        let serviceUuid = BleHelper.uuidFilter(param.service_uuid);
        let characteristicUuid = BleHelper.uuidFilter(param.characteristic_uuid);
        let s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        let descriptorUuid = BleHelper.uuidFilter(param.descriptor_uuid);
        let c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    end() {
        this.Obniz.send({ ble: { peripheral: null } });
    }
    onconnectionupdates() { }
    onerror() { }
}
module.exports = BlePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGUvYmxlUGVyaXBoZXJhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzNDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV6QyxNQUFNLGFBQWE7SUFDakIsWUFBWSxLQUFLO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQUc7UUFDWixJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksVUFBVSxDQUFDLEVBQUU7WUFDaEMsR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBSTtRQUNWLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsSUFBSTtRQUNiLElBQUksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVM7YUFDbEIsTUFBTSxDQUFDLFVBQVMsT0FBTztZQUN0QixPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUM7YUFDRCxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVMsT0FBTztZQUNyRCxPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDZCxHQUFHLEVBQUU7Z0JBQ0gsVUFBVSxFQUFFLElBQUk7YUFDakI7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFLO1FBQ3RCLElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELElBQUksa0JBQWtCLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxFQUFFO1lBQ0wsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNoRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUFLO1FBQ2xCLElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsRUFBRTtZQUNMLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN4QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUc7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELG1CQUFtQixLQUFJLENBQUM7SUFFeEIsT0FBTyxLQUFJLENBQUM7Q0FDYjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL2JsZS9ibGVQZXJpcGhlcmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxlU2VydmljZSA9IHJlcXVpcmUoJy4vYmxlU2VydmljZScpO1xuY29uc3QgQmxlSGVscGVyID0gcmVxdWlyZSgnLi9ibGVIZWxwZXInKTtcblxuY2xhc3MgQmxlUGVyaXBoZXJhbCB7XG4gIGNvbnN0cnVjdG9yKE9ibml6KSB7XG4gICAgdGhpcy5PYm5peiA9IE9ibml6O1xuICAgIHRoaXMuX3NlcnZpY2VzID0gW107XG4gIH1cblxuICBnZXQgc2VydmljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZpY2VzO1xuICB9XG5cbiAgYWRkU2VydmljZShvYmopIHtcbiAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBCbGVTZXJ2aWNlKSkge1xuICAgICAgb2JqID0gbmV3IEJsZVNlcnZpY2Uob2JqKTtcbiAgICB9XG4gICAgdGhpcy5fc2VydmljZXMucHVzaChvYmopO1xuICAgIG9iai5wZXJpcGhlcmFsID0gdGhpcztcbiAgICB0aGlzLk9ibml6LnNlbmQoeyBibGU6IHsgcGVyaXBoZXJhbDogeyBzZXJ2aWNlczogW29ial0gfSB9IH0pO1xuICB9XG5cbiAgc2V0SnNvbihqc29uKSB7XG4gICAgaWYgKGpzb24uc2VydmljZXMpIHtcbiAgICAgIGZvciAobGV0IHNlcnZpY2Ugb2YganNvbi5zZXJ2aWNlcykge1xuICAgICAgICB0aGlzLmFkZFNlcnZpY2Uoc2VydmljZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U2VydmljZSh1dWlkKSB7XG4gICAgdXVpZCA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHV1aWQpO1xuICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlc1xuICAgICAgLmZpbHRlcihmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBCbGVIZWxwZXIudXVpZEZpbHRlcihlbGVtZW50LnV1aWQpID09PSB1dWlkO1xuICAgICAgfSlcbiAgICAgIC5zaGlmdCgpO1xuICB9XG5cbiAgcmVtb3ZlU2VydmljZSh1dWlkKSB7XG4gICAgdGhpcy5fc2VydmljZXMgPSB0aGlzLl9zZXJ2aWNlcy5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIEJsZUhlbHBlci51dWlkRmlsdGVyKGVsZW1lbnQudXVpZCkgIT09IHV1aWQ7XG4gICAgfSk7XG4gIH1cblxuICBzdG9wQWxsU2VydmljZSgpIHtcbiAgICB0aGlzLk9ibml6LnNlbmQoe1xuICAgICAgYmxlOiB7XG4gICAgICAgIHBlcmlwaGVyYWw6IG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMuX3NlcnZpY2VzID0gW107XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlcnZpY2VzOiB0aGlzLl9zZXJ2aWNlcyxcbiAgICB9O1xuICB9XG5cbiAgZmluZENoYXJhY3RlcmlzdGljKHBhcmFtKSB7XG4gICAgbGV0IHNlcnZpY2VVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uc2VydmljZV91dWlkKTtcbiAgICBsZXQgY2hhcmFjdGVyaXN0aWNVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uY2hhcmFjdGVyaXN0aWNfdXVpZCk7XG4gICAgbGV0IHMgPSB0aGlzLmdldFNlcnZpY2Uoc2VydmljZVV1aWQpO1xuICAgIGlmIChzKSB7XG4gICAgICByZXR1cm4gcy5nZXRDaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpY1V1aWQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZpbmREZXNjcmlwdG9yKHBhcmFtKSB7XG4gICAgbGV0IGRlc2NyaXB0b3JVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uZGVzY3JpcHRvcl91dWlkKTtcbiAgICBsZXQgYyA9IHRoaXMuZmluZENoYXJhY3RlcmlzdGljKHBhcmFtKTtcbiAgICBpZiAoYykge1xuICAgICAgcmV0dXJuIGMuZ2V0RGVzY3JpcHRvcihkZXNjcmlwdG9yVXVpZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZW5kKCkge1xuICAgIHRoaXMuT2JuaXouc2VuZCh7IGJsZTogeyBwZXJpcGhlcmFsOiBudWxsIH0gfSk7XG4gIH1cblxuICBvbmNvbm5lY3Rpb251cGRhdGVzKCkge31cblxuICBvbmVycm9yKCkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbGVQZXJpcGhlcmFsO1xuIl19
