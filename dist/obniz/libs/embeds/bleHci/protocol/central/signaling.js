"use strict";
// let debug = require('debug')('signaling');
let debug = () => { };
let events = require('events');
let CONNECTION_PARAMETER_UPDATE_REQUEST = 0x12;
let CONNECTION_PARAMETER_UPDATE_RESPONSE = 0x13;
let SIGNALING_CID = 0x0005;
class Signaling extends events.EventEmitter {
    constructor(handle, aclStream) {
        super();
        this._handle = handle;
        this._aclStream = aclStream;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on('data', this.onAclStreamDataBinded);
        this._aclStream.on('end', this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== SIGNALING_CID) {
            return;
        }
        debug('onAclStreamData: ' + data.toString('hex'));
        let code = data.readUInt8(0);
        let identifier = data.readUInt8(1);
        let length = data.readUInt16LE(2);
        let signalingData = data.slice(4);
        debug('\tcode = ' + code);
        debug('\tidentifier = ' + identifier);
        debug('\tlength = ' + length);
        if (code === CONNECTION_PARAMETER_UPDATE_REQUEST) {
            this.processConnectionParameterUpdateRequest(identifier, signalingData);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener('data', this.onAclStreamDataBinded);
        this._aclStream.removeListener('end', this.onAclStreamEndBinded);
    }
    processConnectionParameterUpdateRequest(identifier, data) {
        let minInterval = data.readUInt16LE(0) * 1.25;
        let maxInterval = data.readUInt16LE(2) * 1.25;
        let latency = data.readUInt16LE(4);
        let supervisionTimeout = data.readUInt16LE(6) * 10;
        debug('\t\tmin interval = ', minInterval);
        debug('\t\tmax interval = ', maxInterval);
        debug('\t\tlatency = ', latency);
        debug('\t\tsupervision timeout = ', supervisionTimeout);
        let response = Buffer.alloc(6);
        response.writeUInt8(CONNECTION_PARAMETER_UPDATE_RESPONSE, 0); // code
        response.writeUInt8(identifier, 1); // identifier
        response.writeUInt16LE(2, 2); // length
        response.writeUInt16LE(0, 4);
        this._aclStream.write(SIGNALING_CID, response);
        this.emit('connectionParameterUpdateRequest', this._handle, minInterval, maxInterval, latency, supervisionTimeout);
    }
}
module.exports = Signaling;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zaWduYWxpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZDQUE2QztBQUM3QyxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7QUFFckIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRS9CLElBQUksbUNBQW1DLEdBQUcsSUFBSSxDQUFDO0FBQy9DLElBQUksb0NBQW9DLEdBQUcsSUFBSSxDQUFDO0FBRWhELElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQztBQUUzQixNQUFNLFNBQVUsU0FBUSxNQUFNLENBQUMsWUFBWTtJQUN6QyxZQUFZLE1BQU0sRUFBRSxTQUFTO1FBQzNCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFFNUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDdkIsSUFBSSxHQUFHLEtBQUssYUFBYSxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUVELEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzFCLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRTlCLElBQUksSUFBSSxLQUFLLG1DQUFtQyxFQUFFO1lBQ2hELElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDekU7SUFDSCxDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELHVDQUF1QyxDQUFDLFVBQVUsRUFBRSxJQUFJO1FBQ3RELElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVuRCxLQUFLLENBQUMscUJBQXFCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUV4RCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9CLFFBQVEsQ0FBQyxVQUFVLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO1FBQ3JFLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYTtRQUNqRCxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDdkMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLENBQ1Asa0NBQWtDLEVBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQ1osV0FBVyxFQUNYLFdBQVcsRUFDWCxPQUFPLEVBQ1Asa0JBQWtCLENBQ25CLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zaWduYWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsZXQgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzaWduYWxpbmcnKTtcbmxldCBkZWJ1ZyA9ICgpID0+IHt9O1xuXG5sZXQgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbmxldCBDT05ORUNUSU9OX1BBUkFNRVRFUl9VUERBVEVfUkVRVUVTVCA9IDB4MTI7XG5sZXQgQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFU1BPTlNFID0gMHgxMztcblxubGV0IFNJR05BTElOR19DSUQgPSAweDAwMDU7XG5cbmNsYXNzIFNpZ25hbGluZyBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihoYW5kbGUsIGFjbFN0cmVhbSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faGFuZGxlID0gaGFuZGxlO1xuICAgIHRoaXMuX2FjbFN0cmVhbSA9IGFjbFN0cmVhbTtcblxuICAgIHRoaXMub25BY2xTdHJlYW1EYXRhQmluZGVkID0gdGhpcy5vbkFjbFN0cmVhbURhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQWNsU3RyZWFtRW5kQmluZGVkID0gdGhpcy5vbkFjbFN0cmVhbUVuZC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fYWNsU3RyZWFtLm9uKCdkYXRhJywgdGhpcy5vbkFjbFN0cmVhbURhdGFCaW5kZWQpO1xuICAgIHRoaXMuX2FjbFN0cmVhbS5vbignZW5kJywgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCk7XG4gIH1cblxuICBvbkFjbFN0cmVhbURhdGEoY2lkLCBkYXRhKSB7XG4gICAgaWYgKGNpZCAhPT0gU0lHTkFMSU5HX0NJRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlYnVnKCdvbkFjbFN0cmVhbURhdGE6ICcgKyBkYXRhLnRvU3RyaW5nKCdoZXgnKSk7XG5cbiAgICBsZXQgY29kZSA9IGRhdGEucmVhZFVJbnQ4KDApO1xuICAgIGxldCBpZGVudGlmaWVyID0gZGF0YS5yZWFkVUludDgoMSk7XG4gICAgbGV0IGxlbmd0aCA9IGRhdGEucmVhZFVJbnQxNkxFKDIpO1xuICAgIGxldCBzaWduYWxpbmdEYXRhID0gZGF0YS5zbGljZSg0KTtcblxuICAgIGRlYnVnKCdcXHRjb2RlID0gJyArIGNvZGUpO1xuICAgIGRlYnVnKCdcXHRpZGVudGlmaWVyID0gJyArIGlkZW50aWZpZXIpO1xuICAgIGRlYnVnKCdcXHRsZW5ndGggPSAnICsgbGVuZ3RoKTtcblxuICAgIGlmIChjb2RlID09PSBDT05ORUNUSU9OX1BBUkFNRVRFUl9VUERBVEVfUkVRVUVTVCkge1xuICAgICAgdGhpcy5wcm9jZXNzQ29ubmVjdGlvblBhcmFtZXRlclVwZGF0ZVJlcXVlc3QoaWRlbnRpZmllciwgc2lnbmFsaW5nRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgb25BY2xTdHJlYW1FbmQoKSB7XG4gICAgdGhpcy5fYWNsU3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgdGhpcy5vbkFjbFN0cmVhbURhdGFCaW5kZWQpO1xuICAgIHRoaXMuX2FjbFN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCk7XG4gIH1cblxuICBwcm9jZXNzQ29ubmVjdGlvblBhcmFtZXRlclVwZGF0ZVJlcXVlc3QoaWRlbnRpZmllciwgZGF0YSkge1xuICAgIGxldCBtaW5JbnRlcnZhbCA9IGRhdGEucmVhZFVJbnQxNkxFKDApICogMS4yNTtcbiAgICBsZXQgbWF4SW50ZXJ2YWwgPSBkYXRhLnJlYWRVSW50MTZMRSgyKSAqIDEuMjU7XG4gICAgbGV0IGxhdGVuY3kgPSBkYXRhLnJlYWRVSW50MTZMRSg0KTtcbiAgICBsZXQgc3VwZXJ2aXNpb25UaW1lb3V0ID0gZGF0YS5yZWFkVUludDE2TEUoNikgKiAxMDtcblxuICAgIGRlYnVnKCdcXHRcXHRtaW4gaW50ZXJ2YWwgPSAnLCBtaW5JbnRlcnZhbCk7XG4gICAgZGVidWcoJ1xcdFxcdG1heCBpbnRlcnZhbCA9ICcsIG1heEludGVydmFsKTtcbiAgICBkZWJ1ZygnXFx0XFx0bGF0ZW5jeSA9ICcsIGxhdGVuY3kpO1xuICAgIGRlYnVnKCdcXHRcXHRzdXBlcnZpc2lvbiB0aW1lb3V0ID0gJywgc3VwZXJ2aXNpb25UaW1lb3V0KTtcblxuICAgIGxldCByZXNwb25zZSA9IEJ1ZmZlci5hbGxvYyg2KTtcblxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFU1BPTlNFLCAwKTsgLy8gY29kZVxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoaWRlbnRpZmllciwgMSk7IC8vIGlkZW50aWZpZXJcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDIsIDIpOyAvLyBsZW5ndGhcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDAsIDQpO1xuXG4gICAgdGhpcy5fYWNsU3RyZWFtLndyaXRlKFNJR05BTElOR19DSUQsIHJlc3BvbnNlKTtcblxuICAgIHRoaXMuZW1pdChcbiAgICAgICdjb25uZWN0aW9uUGFyYW1ldGVyVXBkYXRlUmVxdWVzdCcsXG4gICAgICB0aGlzLl9oYW5kbGUsXG4gICAgICBtaW5JbnRlcnZhbCxcbiAgICAgIG1heEludGVydmFsLFxuICAgICAgbGF0ZW5jeSxcbiAgICAgIHN1cGVydmlzaW9uVGltZW91dFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYWxpbmc7XG4iXX0=
