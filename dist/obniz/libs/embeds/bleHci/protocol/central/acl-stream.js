"use strict";
// var debug = require('debug')('acl-att-stream');
let events = require('events');
let Smp = require('./smp');
class AclStream extends events.EventEmitter {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._hci = hci;
        this._handle = handle;
        this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);
        this.onSmpStkBinded = this.onSmpStk.bind(this);
        this.onSmpFailBinded = this.onSmpFail.bind(this);
        this.onSmpEndBinded = this.onSmpEnd.bind(this);
        this._smp.on('stk', this.onSmpStkBinded);
        this._smp.on('fail', this.onSmpFailBinded);
        this._smp.on('end', this.onSmpEndBinded);
    }
    encrypt() {
        this._smp.sendPairingRequest();
    }
    write(cid, data) {
        this._hci.writeAclDataPkt(this._handle, cid, data);
    }
    push(cid, data) {
        if (data) {
            this.emit('data', cid, data);
        }
        else {
            this.emit('end');
        }
    }
    pushEncrypt(encrypt) {
        this.emit('encrypt', encrypt);
    }
    onSmpStk(stk) {
        let random = Buffer.from('0000000000000000', 'hex');
        let diversifier = Buffer.from('0000', 'hex');
        this._hci.startLeEncryption(this._handle, random, diversifier, stk);
    }
    onSmpFail() {
        this.emit('encryptFail');
    }
    onSmpEnd() {
        this._smp.removeListener('stk', this.onSmpStkBinded);
        this._smp.removeListener('fail', this.onSmpFailBinded);
        this._smp.removeListener('end', this.onSmpEndBinded);
    }
}
module.exports = AclStream;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9hY2wtc3RyZWFtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrREFBa0Q7QUFFbEQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRS9CLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUzQixNQUFNLFNBQVUsU0FBUSxNQUFNLENBQUMsWUFBWTtJQUN6QyxZQUNFLEdBQUcsRUFDSCxNQUFNLEVBQ04sZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsYUFBYTtRQUViLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FDakIsSUFBSSxFQUNKLGdCQUFnQixFQUNoQixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGFBQWEsQ0FDZCxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDWixJQUFJLElBQUksRUFBRTtZQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBTztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9wcm90b2NvbC9jZW50cmFsL2FjbC1zdHJlYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdhY2wtYXR0LXN0cmVhbScpO1xuXG5sZXQgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbmxldCBTbXAgPSByZXF1aXJlKCcuL3NtcCcpO1xuXG5jbGFzcyBBY2xTdHJlYW0gZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgaGNpLFxuICAgIGhhbmRsZSxcbiAgICBsb2NhbEFkZHJlc3NUeXBlLFxuICAgIGxvY2FsQWRkcmVzcyxcbiAgICByZW1vdGVBZGRyZXNzVHlwZSxcbiAgICByZW1vdGVBZGRyZXNzXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faGNpID0gaGNpO1xuICAgIHRoaXMuX2hhbmRsZSA9IGhhbmRsZTtcblxuICAgIHRoaXMuX3NtcCA9IG5ldyBTbXAoXG4gICAgICB0aGlzLFxuICAgICAgbG9jYWxBZGRyZXNzVHlwZSxcbiAgICAgIGxvY2FsQWRkcmVzcyxcbiAgICAgIHJlbW90ZUFkZHJlc3NUeXBlLFxuICAgICAgcmVtb3RlQWRkcmVzc1xuICAgICk7XG5cbiAgICB0aGlzLm9uU21wU3RrQmluZGVkID0gdGhpcy5vblNtcFN0ay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TbXBGYWlsQmluZGVkID0gdGhpcy5vblNtcEZhaWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU21wRW5kQmluZGVkID0gdGhpcy5vblNtcEVuZC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fc21wLm9uKCdzdGsnLCB0aGlzLm9uU21wU3RrQmluZGVkKTtcbiAgICB0aGlzLl9zbXAub24oJ2ZhaWwnLCB0aGlzLm9uU21wRmFpbEJpbmRlZCk7XG4gICAgdGhpcy5fc21wLm9uKCdlbmQnLCB0aGlzLm9uU21wRW5kQmluZGVkKTtcbiAgfVxuXG4gIGVuY3J5cHQoKSB7XG4gICAgdGhpcy5fc21wLnNlbmRQYWlyaW5nUmVxdWVzdCgpO1xuICB9XG5cbiAgd3JpdGUoY2lkLCBkYXRhKSB7XG4gICAgdGhpcy5faGNpLndyaXRlQWNsRGF0YVBrdCh0aGlzLl9oYW5kbGUsIGNpZCwgZGF0YSk7XG4gIH1cblxuICBwdXNoKGNpZCwgZGF0YSkge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBjaWQsIGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hFbmNyeXB0KGVuY3J5cHQpIHtcbiAgICB0aGlzLmVtaXQoJ2VuY3J5cHQnLCBlbmNyeXB0KTtcbiAgfVxuXG4gIG9uU21wU3RrKHN0aykge1xuICAgIGxldCByYW5kb20gPSBCdWZmZXIuZnJvbSgnMDAwMDAwMDAwMDAwMDAwMCcsICdoZXgnKTtcbiAgICBsZXQgZGl2ZXJzaWZpZXIgPSBCdWZmZXIuZnJvbSgnMDAwMCcsICdoZXgnKTtcblxuICAgIHRoaXMuX2hjaS5zdGFydExlRW5jcnlwdGlvbih0aGlzLl9oYW5kbGUsIHJhbmRvbSwgZGl2ZXJzaWZpZXIsIHN0ayk7XG4gIH1cblxuICBvblNtcEZhaWwoKSB7XG4gICAgdGhpcy5lbWl0KCdlbmNyeXB0RmFpbCcpO1xuICB9XG5cbiAgb25TbXBFbmQoKSB7XG4gICAgdGhpcy5fc21wLnJlbW92ZUxpc3RlbmVyKCdzdGsnLCB0aGlzLm9uU21wU3RrQmluZGVkKTtcbiAgICB0aGlzLl9zbXAucmVtb3ZlTGlzdGVuZXIoJ2ZhaWwnLCB0aGlzLm9uU21wRmFpbEJpbmRlZCk7XG4gICAgdGhpcy5fc21wLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB0aGlzLm9uU21wRW5kQmluZGVkKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFjbFN0cmVhbTtcbiJdfQ==
