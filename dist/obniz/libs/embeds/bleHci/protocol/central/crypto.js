"use strict";
let crypto = require('crypto');
function r() {
    return crypto.randomBytes(16);
}
function c1(k, r, pres, preq, iat, ia, rat, ra) {
    let p1 = Buffer.concat([iat, rat, preq, pres]);
    let p2 = Buffer.concat([ra, ia, Buffer.from('00000000', 'hex')]);
    let res = xor(r, p1);
    res = e(k, res);
    res = xor(res, p2);
    res = e(k, res);
    return res;
}
function s1(k, r1, r2) {
    return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));
}
function e(key, data) {
    key = swap(key);
    data = swap(data);
    let cipher = crypto.createCipheriv('aes-128-ecb', key, '');
    cipher.setAutoPadding(false);
    return swap(Buffer.concat([cipher.update(data), cipher.final()]));
}
function xor(b1, b2) {
    let result = Buffer.alloc(b1.length);
    for (let i = 0; i < b1.length; i++) {
        result[i] = b1[i] ^ b2[i];
    }
    return result;
}
function swap(input) {
    let output = Buffer.alloc(input.length);
    for (let i = 0; i < output.length; i++) {
        output[i] = input[input.length - i - 1];
    }
    return output;
}
module.exports = {
    r: r,
    c1: c1,
    s1: s1,
    e: e,
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9jcnlwdG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixTQUFTLENBQUM7SUFDUixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzVDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRS9DLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUNuQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSTtJQUNsQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFN0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNqQixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxTQUFTLElBQUksQ0FBQyxLQUFLO0lBQ2pCLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDekM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLENBQUMsRUFBRSxDQUFDO0lBQ0osRUFBRSxFQUFFLEVBQUU7SUFDTixFQUFFLEVBQUUsRUFBRTtJQUNOLENBQUMsRUFBRSxDQUFDO0NBQ0wsQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9jcnlwdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmZ1bmN0aW9uIHIoKSB7XG4gIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoMTYpO1xufVxuXG5mdW5jdGlvbiBjMShrLCByLCBwcmVzLCBwcmVxLCBpYXQsIGlhLCByYXQsIHJhKSB7XG4gIGxldCBwMSA9IEJ1ZmZlci5jb25jYXQoW2lhdCwgcmF0LCBwcmVxLCBwcmVzXSk7XG5cbiAgbGV0IHAyID0gQnVmZmVyLmNvbmNhdChbcmEsIGlhLCBCdWZmZXIuZnJvbSgnMDAwMDAwMDAnLCAnaGV4JyldKTtcblxuICBsZXQgcmVzID0geG9yKHIsIHAxKTtcbiAgcmVzID0gZShrLCByZXMpO1xuICByZXMgPSB4b3IocmVzLCBwMik7XG4gIHJlcyA9IGUoaywgcmVzKTtcblxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBzMShrLCByMSwgcjIpIHtcbiAgcmV0dXJuIGUoaywgQnVmZmVyLmNvbmNhdChbcjIuc2xpY2UoMCwgOCksIHIxLnNsaWNlKDAsIDgpXSkpO1xufVxuXG5mdW5jdGlvbiBlKGtleSwgZGF0YSkge1xuICBrZXkgPSBzd2FwKGtleSk7XG4gIGRhdGEgPSBzd2FwKGRhdGEpO1xuXG4gIGxldCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoJ2Flcy0xMjgtZWNiJywga2V5LCAnJyk7XG4gIGNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG5cbiAgcmV0dXJuIHN3YXAoQnVmZmVyLmNvbmNhdChbY2lwaGVyLnVwZGF0ZShkYXRhKSwgY2lwaGVyLmZpbmFsKCldKSk7XG59XG5cbmZ1bmN0aW9uIHhvcihiMSwgYjIpIHtcbiAgbGV0IHJlc3VsdCA9IEJ1ZmZlci5hbGxvYyhiMS5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBiMVtpXSBeIGIyW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3dhcChpbnB1dCkge1xuICBsZXQgb3V0cHV0ID0gQnVmZmVyLmFsbG9jKGlucHV0Lmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXQubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbaV0gPSBpbnB1dFtpbnB1dC5sZW5ndGggLSBpIC0gMV07XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcjogcixcbiAgYzE6IGMxLFxuICBzMTogczEsXG4gIGU6IGUsXG59O1xuIl19
