"use strict";
// let debug = require('debug')('mgmt');
const debug = () => { };
let LTK_INFO_SIZE = 36;
let MGMT_OP_LOAD_LONG_TERM_KEYS = 0x0013;
class Mgmt {
    construcotr(hciProtocol) {
        this._ltkInfos = [];
        this._hci = hciProtocol;
    }
    nSocketData(data) {
        debug('on data ->' + data.toString('hex'));
    }
    nSocketError(error) {
        debug('on error ->' + error.message);
    }
    ddLongTermKey(address, addressType, authenticated, master, ediv, rand, key) {
        let ltkInfo = Buffer.alloc(LTK_INFO_SIZE);
        address.copy(ltkInfo, 0);
        ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one
        ltkInfo.writeUInt8(authenticated, 7);
        ltkInfo.writeUInt8(master, 8);
        ltkInfo.writeUInt8(key.length, 9);
        ediv.copy(ltkInfo, 10);
        rand.copy(ltkInfo, 12);
        key.copy(ltkInfo, 20);
        this._ltkInfos.push(ltkInfo);
        this.loadLongTermKeys();
    }
    learLongTermKeys() {
        this._ltkInfos = [];
        this.loadLongTermKeys();
    }
    oadLongTermKeys() {
        let numLongTermKeys = this._ltkInfos.length;
        let op = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);
        op.writeUInt16LE(numLongTermKeys, 0);
        for (let i = 0; i < numLongTermKeys; i++) {
            this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);
        }
        this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);
    }
    rite(opcode, index, data) {
        let length = 0;
        if (data) {
            length = data.length;
        }
        let pkt = Buffer.alloc(6 + length);
        pkt.writeUInt16LE(opcode, 0);
        pkt.writeUInt16LE(index, 2);
        pkt.writeUInt16LE(length, 4);
        if (length) {
            data.copy(pkt, 6);
        }
        debug('writing -> ' + pkt.toString('hex'));
        this._hci._socket.write(pkt);
    }
}
module.exports = Mgmt;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9tZ210LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx3Q0FBd0M7QUFDeEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0FBRXZCLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUV2QixJQUFJLDJCQUEyQixHQUFHLE1BQU0sQ0FBQztBQUV6QyxNQUFNLElBQUk7SUFDUixXQUFXLENBQUMsV0FBVztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVyxDQUFDLElBQUk7UUFDZCxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQUs7UUFDaEIsS0FBSyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHO1FBQ3hFLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDZEQUE2RDtRQUVsSCxPQUFPLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDNUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsZUFBZSxHQUFHLGFBQWEsQ0FBQyxDQUFDO1FBRTNELEVBQUUsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXJDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUN0QixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFZixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFbkMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFN0IsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELEtBQUssQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9tZ210LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGV0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnbWdtdCcpO1xuY29uc3QgZGVidWcgPSAoKSA9PiB7fTtcblxubGV0IExUS19JTkZPX1NJWkUgPSAzNjtcblxubGV0IE1HTVRfT1BfTE9BRF9MT05HX1RFUk1fS0VZUyA9IDB4MDAxMztcblxuY2xhc3MgTWdtdCB7XG4gIGNvbnN0cnVjb3RyKGhjaVByb3RvY29sKSB7XG4gICAgdGhpcy5fbHRrSW5mb3MgPSBbXTtcbiAgICB0aGlzLl9oY2kgPSBoY2lQcm90b2NvbDtcbiAgfVxuXG4gIG5Tb2NrZXREYXRhKGRhdGEpIHtcbiAgICBkZWJ1Zygnb24gZGF0YSAtPicgKyBkYXRhLnRvU3RyaW5nKCdoZXgnKSk7XG4gIH1cblxuICBuU29ja2V0RXJyb3IoZXJyb3IpIHtcbiAgICBkZWJ1Zygnb24gZXJyb3IgLT4nICsgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICBkZExvbmdUZXJtS2V5KGFkZHJlc3MsIGFkZHJlc3NUeXBlLCBhdXRoZW50aWNhdGVkLCBtYXN0ZXIsIGVkaXYsIHJhbmQsIGtleSkge1xuICAgIGxldCBsdGtJbmZvID0gQnVmZmVyLmFsbG9jKExUS19JTkZPX1NJWkUpO1xuXG4gICAgYWRkcmVzcy5jb3B5KGx0a0luZm8sIDApO1xuICAgIGx0a0luZm8ud3JpdGVVSW50OChhZGRyZXNzVHlwZS5yZWFkVUludDgoMCkgKyAxLCA2KTsgLy8gQkRBRERSX0xFX1BVQkxJQyA9IDB4MDEsIEJEQUREUl9MRV9SQU5ET00gMHgwMiwgc28gYWRkIG9uZVxuXG4gICAgbHRrSW5mby53cml0ZVVJbnQ4KGF1dGhlbnRpY2F0ZWQsIDcpO1xuICAgIGx0a0luZm8ud3JpdGVVSW50OChtYXN0ZXIsIDgpO1xuICAgIGx0a0luZm8ud3JpdGVVSW50OChrZXkubGVuZ3RoLCA5KTtcblxuICAgIGVkaXYuY29weShsdGtJbmZvLCAxMCk7XG4gICAgcmFuZC5jb3B5KGx0a0luZm8sIDEyKTtcbiAgICBrZXkuY29weShsdGtJbmZvLCAyMCk7XG5cbiAgICB0aGlzLl9sdGtJbmZvcy5wdXNoKGx0a0luZm8pO1xuXG4gICAgdGhpcy5sb2FkTG9uZ1Rlcm1LZXlzKCk7XG4gIH1cblxuICBsZWFyTG9uZ1Rlcm1LZXlzKCkge1xuICAgIHRoaXMuX2x0a0luZm9zID0gW107XG5cbiAgICB0aGlzLmxvYWRMb25nVGVybUtleXMoKTtcbiAgfVxuXG4gIG9hZExvbmdUZXJtS2V5cygpIHtcbiAgICBsZXQgbnVtTG9uZ1Rlcm1LZXlzID0gdGhpcy5fbHRrSW5mb3MubGVuZ3RoO1xuICAgIGxldCBvcCA9IEJ1ZmZlci5hbGxvYygyICsgbnVtTG9uZ1Rlcm1LZXlzICogTFRLX0lORk9fU0laRSk7XG5cbiAgICBvcC53cml0ZVVJbnQxNkxFKG51bUxvbmdUZXJtS2V5cywgMCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUxvbmdUZXJtS2V5czsgaSsrKSB7XG4gICAgICB0aGlzLl9sdGtJbmZvc1tpXS5jb3B5KG9wLCAyICsgaSAqIExUS19JTkZPX1NJWkUpO1xuICAgIH1cblxuICAgIHRoaXMud3JpdGUoTUdNVF9PUF9MT0FEX0xPTkdfVEVSTV9LRVlTLCAwLCBvcCk7XG4gIH1cblxuICByaXRlKG9wY29kZSwgaW5kZXgsIGRhdGEpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcblxuICAgIGlmIChkYXRhKSB7XG4gICAgICBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBsZXQgcGt0ID0gQnVmZmVyLmFsbG9jKDYgKyBsZW5ndGgpO1xuXG4gICAgcGt0LndyaXRlVUludDE2TEUob3Bjb2RlLCAwKTtcbiAgICBwa3Qud3JpdGVVSW50MTZMRShpbmRleCwgMik7XG4gICAgcGt0LndyaXRlVUludDE2TEUobGVuZ3RoLCA0KTtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGRhdGEuY29weShwa3QsIDYpO1xuICAgIH1cblxuICAgIGRlYnVnKCd3cml0aW5nIC0+ICcgKyBwa3QudG9TdHJpbmcoJ2hleCcpKTtcbiAgICB0aGlzLl9oY2kuX3NvY2tldC53cml0ZShwa3QpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWdtdDtcbiJdfQ==
