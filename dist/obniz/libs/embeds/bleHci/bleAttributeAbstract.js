"use strict";
const ObnizUtil = require('../../utils/util');
const emitter = require('eventemitter3');
const BleHelper = require('./bleHelper');
class BleAttributeAbstract {
    constructor(params) {
        this.uuid = BleHelper.uuidFilter(params.uuid);
        this.parent = null;
        this.children = [];
        this.isRemote = false;
        this.discoverdOnRemote = false;
        this.data = params.data || null;
        if (!this.data && params.text) {
            this.data = ObnizUtil.string2dataArray(params.text);
        }
        if (!this.data && params.value) {
            this.data = [params.value];
        }
        if (params[this.childrenName]) {
            for (let child of params[this.childrenName]) {
                this.addChild(child);
            }
        }
        this.setFunctions();
        this.emitter = new emitter();
    }
    setFunctions() {
        let childrenName = this.childrenName;
        if (childrenName) {
            childrenName =
                childrenName.charAt(0).toUpperCase() + childrenName.slice(1);
            let childName = childrenName.slice(0, -1);
            let funcName = 'add' + childName;
            this[funcName] = this.addChild;
            funcName = 'get' + childName;
            this[funcName] = this.getChild;
        }
        let parentName = this.parentName;
        if (parentName) {
            Object.defineProperty(this, parentName, {
                get() {
                    return this.parent;
                },
                set(newValue) {
                    this.parent = newValue;
                },
            });
        }
    }
    get childrenClass() {
        return Object;
    }
    get childrenName() {
        return null;
    }
    get parentName() {
        return null;
    }
    addChild(child) {
        if (!(child instanceof this.childrenClass)) {
            let childrenClass = this.childrenClass;
            child = new childrenClass(child);
        }
        child.parent = this;
        this.children.push(child);
        return child;
    }
    getChild(uuid) {
        uuid = BleHelper.uuidFilter(uuid);
        return this.children
            .filter(function (element) {
            return BleHelper.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    toJSON() {
        let obj = {
            uuid: BleHelper.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            let key = this.childrenName;
            obj[key] = this.children;
        }
        if (this.data) {
            obj.data = this.data;
        }
        return obj;
    }
    /**
     * WS COMMANDS
     */
    read() { }
    write() { }
    writeNumber(val, needResponse) {
        this.write([val], needResponse);
    }
    writeText(str, needResponse) {
        this.write(ObnizUtil.string2dataArray(str), needResponse);
    }
    readWait() {
        return new Promise((resolve, reject) => {
            this.emitter.once('onread', params => {
                if (params.result === 'success') {
                    resolve(params.data);
                }
                else {
                    reject(new Error('readWait failed'));
                }
            });
            this.read();
        });
    }
    writeWait(data, needResponse) {
        return new Promise((resolve, reject) => {
            this.emitter.once('onwrite', params => {
                if (params.result === 'success') {
                    resolve(true);
                }
                else {
                    reject(new Error('writeWait failed'));
                }
            });
            this.write(data, needResponse);
        });
    }
    writeTextWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once('onwrite', params => {
                if (params.result === 'success') {
                    resolve(true);
                }
                else {
                    reject(new Error('writeTextWait failed'));
                }
            });
            this.writeText(data);
        });
    }
    writeNumberWait(data) {
        return new Promise((resolve, reject) => {
            this.emitter.once('onwrite', params => {
                if (params.result === 'success') {
                    resolve(true);
                }
                else {
                    reject(new Error('writeNumberWait failed'));
                }
            });
            this.writeNumber(data);
        });
    }
    readFromRemoteWait() {
        return new Promise(resolve => {
            this.emitter.once('onreadfromremote', () => {
                resolve();
            });
        });
    }
    writeFromRemoteWait() {
        return new Promise(resolve => {
            this.emitter.once('onreadfromremote', params => {
                resolve(params.data);
            });
        });
    }
    /**
     * CALLBACKS
     */
    onwrite() { }
    onread() { }
    onwritefromremote() { }
    onreadfromremote() { }
    onerror(err) {
        console.error(err.message);
    }
    notifyFromServer(notifyName, params) {
        this.emitter.emit(notifyName, params);
        switch (notifyName) {
            case 'onerror': {
                this.onerror(params);
                break;
            }
            case 'onwrite': {
                this.onwrite(params.result);
                break;
            }
            case 'onread': {
                this.onread(params.data);
                break;
            }
            case 'onwritefromremote': {
                this.onwritefromremote(params.address, params.data);
                break;
            }
            case 'onreadfromremote': {
                this.onreadfromremote(params.address);
                break;
            }
        }
    }
}
module.exports = BleAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlQXR0cmlidXRlQWJzdHJhY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFekMsTUFBTSxvQkFBb0I7SUFDeEIsWUFBWSxNQUFNO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUUvQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzdCLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtTQUNGO1FBRUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDckMsSUFBSSxZQUFZLEVBQUU7WUFDaEIsWUFBWTtnQkFDVixZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0QsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxQyxJQUFJLFFBQVEsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBRS9CLFFBQVEsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNqQyxJQUFJLFVBQVUsRUFBRTtZQUNkLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtnQkFDdEMsR0FBRztvQkFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ3JCLENBQUM7Z0JBQ0QsR0FBRyxDQUFDLFFBQVE7b0JBQ1YsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7Z0JBQ3pCLENBQUM7YUFDRixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzFDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDdkMsS0FBSyxHQUFHLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQUk7UUFDWCxJQUFJLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQyxRQUFRO2FBQ2pCLE1BQU0sQ0FBQyxVQUFTLE9BQU87WUFDdEIsT0FBTyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUM7UUFDckQsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksR0FBRyxHQUFHO1lBQ1IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN0QyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDNUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDMUI7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDdEI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUVILElBQUksS0FBSSxDQUFDO0lBRVQsS0FBSyxLQUFJLENBQUM7SUFFVixXQUFXLENBQUMsR0FBRyxFQUFFLFlBQVk7UUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBRyxFQUFFLFlBQVk7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDL0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDdEI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztpQkFDdEM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtRQUMxQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNmO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUNoQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDcEMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNmO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7aUJBQzNDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWUsQ0FBQyxJQUFJO1FBQ2xCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO29CQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2Y7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztpQkFDN0M7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO2dCQUN6QyxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEVBQUU7Z0JBQzdDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sS0FBSSxDQUFDO0lBRVosTUFBTSxLQUFJLENBQUM7SUFFWCxpQkFBaUIsS0FBSSxDQUFDO0lBRXRCLGdCQUFnQixLQUFJLENBQUM7SUFFckIsT0FBTyxDQUFDLEdBQUc7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLE1BQU07UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLFFBQVEsVUFBVSxFQUFFO1lBQ2xCLEtBQUssU0FBUyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDckIsTUFBTTthQUNQO1lBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztnQkFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDNUIsTUFBTTthQUNQO1lBQ0QsS0FBSyxRQUFRLENBQUMsQ0FBQztnQkFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekIsTUFBTTthQUNQO1lBQ0QsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELE1BQU07YUFDUDtZQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdEMsTUFBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9ibGVBdHRyaWJ1dGVBYnN0cmFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9ibml6VXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3V0aWwnKTtcbmNvbnN0IGVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyk7XG5jb25zdCBCbGVIZWxwZXIgPSByZXF1aXJlKCcuL2JsZUhlbHBlcicpO1xuXG5jbGFzcyBCbGVBdHRyaWJ1dGVBYnN0cmFjdCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMudXVpZCA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHBhcmFtcy51dWlkKTtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgdGhpcy5pc1JlbW90ZSA9IGZhbHNlO1xuICAgIHRoaXMuZGlzY292ZXJkT25SZW1vdGUgPSBmYWxzZTtcblxuICAgIHRoaXMuZGF0YSA9IHBhcmFtcy5kYXRhIHx8IG51bGw7XG4gICAgaWYgKCF0aGlzLmRhdGEgJiYgcGFyYW1zLnRleHQpIHtcbiAgICAgIHRoaXMuZGF0YSA9IE9ibml6VXRpbC5zdHJpbmcyZGF0YUFycmF5KHBhcmFtcy50ZXh0KTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRhdGEgJiYgcGFyYW1zLnZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgPSBbcGFyYW1zLnZhbHVlXTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zW3RoaXMuY2hpbGRyZW5OYW1lXSkge1xuICAgICAgZm9yIChsZXQgY2hpbGQgb2YgcGFyYW1zW3RoaXMuY2hpbGRyZW5OYW1lXSkge1xuICAgICAgICB0aGlzLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldEZ1bmN0aW9ucygpO1xuXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IGVtaXR0ZXIoKTtcbiAgfVxuXG4gIHNldEZ1bmN0aW9ucygpIHtcbiAgICBsZXQgY2hpbGRyZW5OYW1lID0gdGhpcy5jaGlsZHJlbk5hbWU7XG4gICAgaWYgKGNoaWxkcmVuTmFtZSkge1xuICAgICAgY2hpbGRyZW5OYW1lID1cbiAgICAgICAgY2hpbGRyZW5OYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgY2hpbGRyZW5OYW1lLnNsaWNlKDEpO1xuICAgICAgbGV0IGNoaWxkTmFtZSA9IGNoaWxkcmVuTmFtZS5zbGljZSgwLCAtMSk7XG5cbiAgICAgIGxldCBmdW5jTmFtZSA9ICdhZGQnICsgY2hpbGROYW1lO1xuICAgICAgdGhpc1tmdW5jTmFtZV0gPSB0aGlzLmFkZENoaWxkO1xuXG4gICAgICBmdW5jTmFtZSA9ICdnZXQnICsgY2hpbGROYW1lO1xuICAgICAgdGhpc1tmdW5jTmFtZV0gPSB0aGlzLmdldENoaWxkO1xuICAgIH1cblxuICAgIGxldCBwYXJlbnROYW1lID0gdGhpcy5wYXJlbnROYW1lO1xuICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcGFyZW50TmFtZSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgICAgICB9LFxuICAgICAgICBzZXQobmV3VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnBhcmVudCA9IG5ld1ZhbHVlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGNoaWxkcmVuQ2xhc3MoKSB7XG4gICAgcmV0dXJuIE9iamVjdDtcbiAgfVxuXG4gIGdldCBjaGlsZHJlbk5hbWUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXQgcGFyZW50TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFkZENoaWxkKGNoaWxkKSB7XG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiB0aGlzLmNoaWxkcmVuQ2xhc3MpKSB7XG4gICAgICBsZXQgY2hpbGRyZW5DbGFzcyA9IHRoaXMuY2hpbGRyZW5DbGFzcztcbiAgICAgIGNoaWxkID0gbmV3IGNoaWxkcmVuQ2xhc3MoY2hpbGQpO1xuICAgIH1cbiAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuXG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICBnZXRDaGlsZCh1dWlkKSB7XG4gICAgdXVpZCA9IEJsZUhlbHBlci51dWlkRmlsdGVyKHV1aWQpO1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIEJsZUhlbHBlci51dWlkRmlsdGVyKGVsZW1lbnQudXVpZCkgPT09IHV1aWQ7XG4gICAgICB9KVxuICAgICAgLnNoaWZ0KCk7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIHV1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMudXVpZCksXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmNoaWxkcmVuTmFtZSkge1xuICAgICAgbGV0IGtleSA9IHRoaXMuY2hpbGRyZW5OYW1lO1xuICAgICAgb2JqW2tleV0gPSB0aGlzLmNoaWxkcmVuO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhKSB7XG4gICAgICBvYmouZGF0YSA9IHRoaXMuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBXUyBDT01NQU5EU1xuICAgKi9cblxuICByZWFkKCkge31cblxuICB3cml0ZSgpIHt9XG5cbiAgd3JpdGVOdW1iZXIodmFsLCBuZWVkUmVzcG9uc2UpIHtcbiAgICB0aGlzLndyaXRlKFt2YWxdLCBuZWVkUmVzcG9uc2UpO1xuICB9XG5cbiAgd3JpdGVUZXh0KHN0ciwgbmVlZFJlc3BvbnNlKSB7XG4gICAgdGhpcy53cml0ZShPYm5pelV0aWwuc3RyaW5nMmRhdGFBcnJheShzdHIpLCBuZWVkUmVzcG9uc2UpO1xuICB9XG5cbiAgcmVhZFdhaXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZW1pdHRlci5vbmNlKCdvbnJlYWQnLCBwYXJhbXMgPT4ge1xuICAgICAgICBpZiAocGFyYW1zLnJlc3VsdCA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgcmVzb2x2ZShwYXJhbXMuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigncmVhZFdhaXQgZmFpbGVkJykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVhZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgd3JpdGVXYWl0KGRhdGEsIG5lZWRSZXNwb25zZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIub25jZSgnb253cml0ZScsIHBhcmFtcyA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMucmVzdWx0ID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3dyaXRlV2FpdCBmYWlsZWQnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy53cml0ZShkYXRhLCBuZWVkUmVzcG9uc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgd3JpdGVUZXh0V2FpdChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZW1pdHRlci5vbmNlKCdvbndyaXRlJywgcGFyYW1zID0+IHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZXN1bHQgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignd3JpdGVUZXh0V2FpdCBmYWlsZWQnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy53cml0ZVRleHQoZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICB3cml0ZU51bWJlcldhaXQoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIub25jZSgnb253cml0ZScsIHBhcmFtcyA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMucmVzdWx0ID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3dyaXRlTnVtYmVyV2FpdCBmYWlsZWQnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy53cml0ZU51bWJlcihkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlYWRGcm9tUmVtb3RlV2FpdCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIub25jZSgnb25yZWFkZnJvbXJlbW90ZScsICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB3cml0ZUZyb21SZW1vdGVXYWl0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuZW1pdHRlci5vbmNlKCdvbnJlYWRmcm9tcmVtb3RlJywgcGFyYW1zID0+IHtcbiAgICAgICAgcmVzb2x2ZShwYXJhbXMuZGF0YSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDQUxMQkFDS1NcbiAgICovXG4gIG9ud3JpdGUoKSB7fVxuXG4gIG9ucmVhZCgpIHt9XG5cbiAgb253cml0ZWZyb21yZW1vdGUoKSB7fVxuXG4gIG9ucmVhZGZyb21yZW1vdGUoKSB7fVxuXG4gIG9uZXJyb3IoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XG4gIH1cblxuICBub3RpZnlGcm9tU2VydmVyKG5vdGlmeU5hbWUsIHBhcmFtcykge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KG5vdGlmeU5hbWUsIHBhcmFtcyk7XG4gICAgc3dpdGNoIChub3RpZnlOYW1lKSB7XG4gICAgICBjYXNlICdvbmVycm9yJzoge1xuICAgICAgICB0aGlzLm9uZXJyb3IocGFyYW1zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdvbndyaXRlJzoge1xuICAgICAgICB0aGlzLm9ud3JpdGUocGFyYW1zLnJlc3VsdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnb25yZWFkJzoge1xuICAgICAgICB0aGlzLm9ucmVhZChwYXJhbXMuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnb253cml0ZWZyb21yZW1vdGUnOiB7XG4gICAgICAgIHRoaXMub253cml0ZWZyb21yZW1vdGUocGFyYW1zLmFkZHJlc3MsIHBhcmFtcy5kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdvbnJlYWRmcm9tcmVtb3RlJzoge1xuICAgICAgICB0aGlzLm9ucmVhZGZyb21yZW1vdGUocGFyYW1zLmFkZHJlc3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbGVBdHRyaWJ1dGVBYnN0cmFjdDtcbiJdfQ==
