"use strict";
const BleHelper = require('./bleHelper');
const BleAttributeAbstract = require('./bleAttributeAbstract');
class BleLocalAttributeAbstract extends BleAttributeAbstract {
    constructor(params) {
        super(params);
        this.RESULT_SUCCESS = 0x00;
        this.RESULT_INVALID_OFFSET = 0x07;
        this.RESULT_ATTR_NOT_LONG = 0x0b;
        this.RESULT_INVALID_ATTRIBUTE_LENGTH = 0x0d;
        this.RESULT_UNLIKELY_ERROR = 0x0e;
    }
    toBufferObj() {
        let obj = {
            uuid: BleHelper.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            let key = this.childrenName;
            obj[key] = this.children.map(e => e.toBufferObj());
        }
        obj.emit = this.emit.bind(this);
        return obj;
    }
    emit(name, ...params) {
        switch (name) {
            case 'readRequest':
                this._onReadRequest(...params);
                return true;
            case 'writeRequest':
                this._onWriteRequest(...params);
                return true;
        }
        return false;
    }
    _onReadRequest(offset, callback) {
        if (this.data.length >= offset) {
            callback(this.RESULT_SUCCESS, Buffer.from(this.data.slice(offset)));
            let address = null;
            if (this.parentName === 'characteristic') {
                address = this.characteristic.service.peripheral
                    .currentConnectedDeviceAddress;
            }
            else if (this.parentName === 'service') {
                address = this.service.peripheral.currentConnectedDeviceAddress;
            }
            this.notifyFromServer('onreadfromremote', { address });
        }
        else {
            callback(this.RESULT_UNLIKELY_ERROR, null);
        }
    }
    _onWriteRequest(data, offset, withoutResponse, callback) {
        // console.log('onWriteRequest');
        this.data = Array.from(data);
        callback(this.RESULT_SUCCESS);
        let address = null;
        if (this.parentName === 'characteristic') {
            address = this.characteristic.service.peripheral
                .currentConnectedDeviceAddress;
        }
        else if (this.parentName === 'service') {
            address = this.service.peripheral.currentConnectedDeviceAddress;
        }
        this.notifyFromServer('onwritefromremote', { address, data });
    }
    write(dataArray) {
        this.data = dataArray;
        this.notifyFromServer('onwrite', { result: 'success' });
    }
    read() {
        this.notifyFromServer('onread', { data: this.data });
    }
}
module.exports = BleLocalAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFFL0QsTUFBTSx5QkFBMEIsU0FBUSxvQkFBb0I7SUFDMUQsWUFBWSxNQUFNO1FBQ2hCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsK0JBQStCLEdBQUcsSUFBSSxDQUFDO1FBQzVDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLEdBQUcsR0FBRztZQUNSLElBQUksRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDdEMsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsTUFBTTtRQUNsQixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssYUFBYTtnQkFDaEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUMvQixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssY0FBYztnQkFDakIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFO1lBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssZ0JBQWdCLEVBQUU7Z0JBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVO3FCQUM3Qyw2QkFBNkIsQ0FBQzthQUNsQztpQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsNkJBQTZCLENBQUM7YUFDakU7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3hEO2FBQU07WUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVELGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRO1FBQ3JELGlDQUFpQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLGdCQUFnQixFQUFFO1lBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVO2lCQUM3Qyw2QkFBNkIsQ0FBQztTQUNsQzthQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFDeEMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLDZCQUE2QixDQUFDO1NBQ2pFO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7UUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLHlCQUF5QixDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9ibGVMb2NhbEF0dHJpYnV0ZUFic3RyYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxlSGVscGVyID0gcmVxdWlyZSgnLi9ibGVIZWxwZXInKTtcbmNvbnN0IEJsZUF0dHJpYnV0ZUFic3RyYWN0ID0gcmVxdWlyZSgnLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdCcpO1xuXG5jbGFzcyBCbGVMb2NhbEF0dHJpYnV0ZUFic3RyYWN0IGV4dGVuZHMgQmxlQXR0cmlidXRlQWJzdHJhY3Qge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdGhpcy5SRVNVTFRfU1VDQ0VTUyA9IDB4MDA7XG4gICAgdGhpcy5SRVNVTFRfSU5WQUxJRF9PRkZTRVQgPSAweDA3O1xuICAgIHRoaXMuUkVTVUxUX0FUVFJfTk9UX0xPTkcgPSAweDBiO1xuICAgIHRoaXMuUkVTVUxUX0lOVkFMSURfQVRUUklCVVRFX0xFTkdUSCA9IDB4MGQ7XG4gICAgdGhpcy5SRVNVTFRfVU5MSUtFTFlfRVJST1IgPSAweDBlO1xuICB9XG5cbiAgdG9CdWZmZXJPYmooKSB7XG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIHV1aWQ6IEJsZUhlbHBlci51dWlkRmlsdGVyKHRoaXMudXVpZCksXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmNoaWxkcmVuTmFtZSkge1xuICAgICAgbGV0IGtleSA9IHRoaXMuY2hpbGRyZW5OYW1lO1xuICAgICAgb2JqW2tleV0gPSB0aGlzLmNoaWxkcmVuLm1hcChlID0+IGUudG9CdWZmZXJPYmooKSk7XG4gICAgfVxuXG4gICAgb2JqLmVtaXQgPSB0aGlzLmVtaXQuYmluZCh0aGlzKTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZW1pdChuYW1lLCAuLi5wYXJhbXMpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3JlYWRSZXF1ZXN0JzpcbiAgICAgICAgdGhpcy5fb25SZWFkUmVxdWVzdCguLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ3dyaXRlUmVxdWVzdCc6XG4gICAgICAgIHRoaXMuX29uV3JpdGVSZXF1ZXN0KC4uLnBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBfb25SZWFkUmVxdWVzdChvZmZzZXQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPj0gb2Zmc2V0KSB7XG4gICAgICBjYWxsYmFjayh0aGlzLlJFU1VMVF9TVUNDRVNTLCBCdWZmZXIuZnJvbSh0aGlzLmRhdGEuc2xpY2Uob2Zmc2V0KSkpO1xuICAgICAgbGV0IGFkZHJlc3MgPSBudWxsO1xuICAgICAgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gJ2NoYXJhY3RlcmlzdGljJykge1xuICAgICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgICAuY3VycmVudENvbm5lY3RlZERldmljZUFkZHJlc3M7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gJ3NlcnZpY2UnKSB7XG4gICAgICAgIGFkZHJlc3MgPSB0aGlzLnNlcnZpY2UucGVyaXBoZXJhbC5jdXJyZW50Q29ubmVjdGVkRGV2aWNlQWRkcmVzcztcbiAgICAgIH1cbiAgICAgIHRoaXMubm90aWZ5RnJvbVNlcnZlcignb25yZWFkZnJvbXJlbW90ZScsIHsgYWRkcmVzcyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodGhpcy5SRVNVTFRfVU5MSUtFTFlfRVJST1IsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIF9vbldyaXRlUmVxdWVzdChkYXRhLCBvZmZzZXQsIHdpdGhvdXRSZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICAvLyBjb25zb2xlLmxvZygnb25Xcml0ZVJlcXVlc3QnKTtcbiAgICB0aGlzLmRhdGEgPSBBcnJheS5mcm9tKGRhdGEpO1xuICAgIGNhbGxiYWNrKHRoaXMuUkVTVUxUX1NVQ0NFU1MpO1xuICAgIGxldCBhZGRyZXNzID0gbnVsbDtcbiAgICBpZiAodGhpcy5wYXJlbnROYW1lID09PSAnY2hhcmFjdGVyaXN0aWMnKSB7XG4gICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnROYW1lID09PSAnc2VydmljZScpIHtcbiAgICAgIGFkZHJlc3MgPSB0aGlzLnNlcnZpY2UucGVyaXBoZXJhbC5jdXJyZW50Q29ubmVjdGVkRGV2aWNlQWRkcmVzcztcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlGcm9tU2VydmVyKCdvbndyaXRlZnJvbXJlbW90ZScsIHsgYWRkcmVzcywgZGF0YSB9KTtcbiAgfVxuXG4gIHdyaXRlKGRhdGFBcnJheSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGFBcnJheTtcbiAgICB0aGlzLm5vdGlmeUZyb21TZXJ2ZXIoJ29ud3JpdGUnLCB7IHJlc3VsdDogJ3N1Y2Nlc3MnIH0pO1xuICB9XG5cbiAgcmVhZCgpIHtcbiAgICB0aGlzLm5vdGlmeUZyb21TZXJ2ZXIoJ29ucmVhZCcsIHsgZGF0YTogdGhpcy5kYXRhIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdDtcbiJdfQ==
