"use strict";
const BleService = require('./bleService');
const BleHelper = require('./bleHelper');
class BlePeripheral {
    constructor(obnizBle) {
        this.obnizBle = obnizBle;
        this._services = [];
        this.currentConnectedDeviceAddress = null;
    }
    _updateServices() {
        let bufData = this._services.map(e => e.toBufferObj());
        this.obnizBle.peripheralBindings.setServices(bufData);
    }
    addService(obj) {
        this.obnizBle.warningIfNotInitialize();
        if (!(obj instanceof BleService)) {
            obj = new BleService(obj);
        }
        this._services.push(obj);
        obj.peripheral = this;
        this._updateServices();
    }
    setJson(json) {
        if (json.services) {
            for (let service of json.services) {
                this.addService(service);
            }
        }
    }
    getService(uuid) {
        uuid = BleHelper.uuidFilter(uuid);
        return this._services
            .filter(function (element) {
            return BleHelper.uuidFilter(element.uuid) === uuid;
        })
            .shift();
    }
    removeService(uuid) {
        this._services = this._services.filter(function (element) {
            return BleHelper.uuidFilter(element.uuid) !== uuid;
        });
        this._updateServices();
    }
    stopAllService() {
        this._services = [];
        this._updateServices();
    }
    toJSON() {
        return {
            services: this._services,
        };
    }
    findCharacteristic(param) {
        let serviceUuid = BleHelper.uuidFilter(param.service_uuid);
        let characteristicUuid = BleHelper.uuidFilter(param.characteristic_uuid);
        let s = this.getService(serviceUuid);
        if (s) {
            return s.getCharacteristic(characteristicUuid);
        }
        return null;
    }
    findDescriptor(param) {
        let descriptorUuid = BleHelper.uuidFilter(param.descriptor_uuid);
        let c = this.findCharacteristic(param);
        if (c) {
            return c.getDescriptor(descriptorUuid);
        }
        return null;
    }
    end() {
        this.stopAllService();
    }
    onconnectionupdates() { }
    onerror() { }
}
module.exports = BlePeripheral;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlUGVyaXBoZXJhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzNDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV6QyxNQUFNLGFBQWE7SUFDakIsWUFBWSxRQUFRO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7SUFDNUMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxVQUFVLENBQUMsR0FBRztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksVUFBVSxDQUFDLEVBQUU7WUFDaEMsR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFdEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBSTtRQUNWLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsSUFBSTtRQUNiLElBQUksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVM7YUFDbEIsTUFBTSxDQUFDLFVBQVMsT0FBTztZQUN0QixPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUM7YUFDRCxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVMsT0FBTztZQUNyRCxPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFLO1FBQ3RCLElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELElBQUksa0JBQWtCLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxFQUFFO1lBQ0wsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNoRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWMsQ0FBQyxLQUFLO1FBQ2xCLElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsRUFBRTtZQUNMLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN4QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUc7UUFDRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELG1CQUFtQixLQUFJLENBQUM7SUFFeEIsT0FBTyxLQUFJLENBQUM7Q0FDYjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9ibGVQZXJpcGhlcmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmxlU2VydmljZSA9IHJlcXVpcmUoJy4vYmxlU2VydmljZScpO1xuY29uc3QgQmxlSGVscGVyID0gcmVxdWlyZSgnLi9ibGVIZWxwZXInKTtcblxuY2xhc3MgQmxlUGVyaXBoZXJhbCB7XG4gIGNvbnN0cnVjdG9yKG9ibml6QmxlKSB7XG4gICAgdGhpcy5vYm5pekJsZSA9IG9ibml6QmxlO1xuICAgIHRoaXMuX3NlcnZpY2VzID0gW107XG4gICAgdGhpcy5jdXJyZW50Q29ubmVjdGVkRGV2aWNlQWRkcmVzcyA9IG51bGw7XG4gIH1cblxuICBfdXBkYXRlU2VydmljZXMoKSB7XG4gICAgbGV0IGJ1ZkRhdGEgPSB0aGlzLl9zZXJ2aWNlcy5tYXAoZSA9PiBlLnRvQnVmZmVyT2JqKCkpO1xuICAgIHRoaXMub2JuaXpCbGUucGVyaXBoZXJhbEJpbmRpbmdzLnNldFNlcnZpY2VzKGJ1ZkRhdGEpO1xuICB9XG5cbiAgYWRkU2VydmljZShvYmopIHtcbiAgICB0aGlzLm9ibml6QmxlLndhcm5pbmdJZk5vdEluaXRpYWxpemUoKTtcbiAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBCbGVTZXJ2aWNlKSkge1xuICAgICAgb2JqID0gbmV3IEJsZVNlcnZpY2Uob2JqKTtcbiAgICB9XG4gICAgdGhpcy5fc2VydmljZXMucHVzaChvYmopO1xuICAgIG9iai5wZXJpcGhlcmFsID0gdGhpcztcblxuICAgIHRoaXMuX3VwZGF0ZVNlcnZpY2VzKCk7XG4gIH1cblxuICBzZXRKc29uKGpzb24pIHtcbiAgICBpZiAoanNvbi5zZXJ2aWNlcykge1xuICAgICAgZm9yIChsZXQgc2VydmljZSBvZiBqc29uLnNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuYWRkU2VydmljZShzZXJ2aWNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRTZXJ2aWNlKHV1aWQpIHtcbiAgICB1dWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIodXVpZCk7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZpY2VzXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIEJsZUhlbHBlci51dWlkRmlsdGVyKGVsZW1lbnQudXVpZCkgPT09IHV1aWQ7XG4gICAgICB9KVxuICAgICAgLnNoaWZ0KCk7XG4gIH1cblxuICByZW1vdmVTZXJ2aWNlKHV1aWQpIHtcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IHRoaXMuX3NlcnZpY2VzLmZpbHRlcihmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gQmxlSGVscGVyLnV1aWRGaWx0ZXIoZWxlbWVudC51dWlkKSAhPT0gdXVpZDtcbiAgICB9KTtcblxuICAgIHRoaXMuX3VwZGF0ZVNlcnZpY2VzKCk7XG4gIH1cblxuICBzdG9wQWxsU2VydmljZSgpIHtcbiAgICB0aGlzLl9zZXJ2aWNlcyA9IFtdO1xuICAgIHRoaXMuX3VwZGF0ZVNlcnZpY2VzKCk7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlcnZpY2VzOiB0aGlzLl9zZXJ2aWNlcyxcbiAgICB9O1xuICB9XG5cbiAgZmluZENoYXJhY3RlcmlzdGljKHBhcmFtKSB7XG4gICAgbGV0IHNlcnZpY2VVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uc2VydmljZV91dWlkKTtcbiAgICBsZXQgY2hhcmFjdGVyaXN0aWNVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uY2hhcmFjdGVyaXN0aWNfdXVpZCk7XG4gICAgbGV0IHMgPSB0aGlzLmdldFNlcnZpY2Uoc2VydmljZVV1aWQpO1xuICAgIGlmIChzKSB7XG4gICAgICByZXR1cm4gcy5nZXRDaGFyYWN0ZXJpc3RpYyhjaGFyYWN0ZXJpc3RpY1V1aWQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZpbmREZXNjcmlwdG9yKHBhcmFtKSB7XG4gICAgbGV0IGRlc2NyaXB0b3JVdWlkID0gQmxlSGVscGVyLnV1aWRGaWx0ZXIocGFyYW0uZGVzY3JpcHRvcl91dWlkKTtcbiAgICBsZXQgYyA9IHRoaXMuZmluZENoYXJhY3RlcmlzdGljKHBhcmFtKTtcbiAgICBpZiAoYykge1xuICAgICAgcmV0dXJuIGMuZ2V0RGVzY3JpcHRvcihkZXNjcmlwdG9yVXVpZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZW5kKCkge1xuICAgIHRoaXMuc3RvcEFsbFNlcnZpY2UoKTtcbiAgfVxuXG4gIG9uY29ubmVjdGlvbnVwZGF0ZXMoKSB7fVxuXG4gIG9uZXJyb3IoKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsZVBlcmlwaGVyYWw7XG4iXX0=
