"use strict";
const WSCommand = require('./WSCommand.js').default;
class WSCommandSwitch extends WSCommand {
    constructor() {
        super();
        this.module = 9;
        this._CommandNotifyValue = 0;
        this._CommandOnece = 1;
    }
    // Commands
    get(params) {
        let buf = new Uint8Array(0);
        this.sendCommand(this._CommandOnece, buf);
    }
    parseFromJson(json) {
        let module = json.switch;
        if (module === undefined) {
            return;
        }
        let schemaData = [{ uri: '/request/switch/get', onValid: this.get }];
        let res = this.validateCommandSchema(schemaData, module, 'switch');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[switch]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if ((func === this._CommandOnece || func === this._CommandNotifyValue) &&
            payload.byteLength == 1) {
            let state = parseInt(payload[0]);
            let states = ['none', 'push', 'left', 'right'];
            objToSend.switch = {
                state: states[state],
            };
            if (func === this._CommandOnece) {
                objToSend.switch.action = 'get';
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
module.exports = WSCommandSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRTd2l0Y2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUVwRCxNQUFNLGVBQWdCLFNBQVEsU0FBUztJQUNyQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztJQUVYLEdBQUcsQ0FBQyxNQUFNO1FBQ1IsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUNoQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN4QixPQUFPO1NBQ1I7UUFDRCxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNyRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVuRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ25CLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDaEQ7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2FBQ2xFO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPO1FBQ3ZDLElBQ0UsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ2xFLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxFQUN2QjtZQUNBLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxJQUFJLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLFNBQVMsQ0FBQyxNQUFNLEdBQUc7Z0JBQ2pCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3JCLENBQUM7WUFDRixJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUMvQixTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7YUFDakM7U0FDRjthQUFNO1lBQ0wsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyIsImZpbGUiOiJvYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRTd2l0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXU0NvbW1hbmQgPSByZXF1aXJlKCcuL1dTQ29tbWFuZC5qcycpLmRlZmF1bHQ7XG5cbmNsYXNzIFdTQ29tbWFuZFN3aXRjaCBleHRlbmRzIFdTQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2R1bGUgPSA5O1xuXG4gICAgdGhpcy5fQ29tbWFuZE5vdGlmeVZhbHVlID0gMDtcbiAgICB0aGlzLl9Db21tYW5kT25lY2UgPSAxO1xuICB9XG5cbiAgLy8gQ29tbWFuZHNcblxuICBnZXQocGFyYW1zKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZE9uZWNlLCBidWYpO1xuICB9XG5cbiAgcGFyc2VGcm9tSnNvbihqc29uKSB7XG4gICAgbGV0IG1vZHVsZSA9IGpzb24uc3dpdGNoO1xuICAgIGlmIChtb2R1bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc2NoZW1hRGF0YSA9IFt7IHVyaTogJy9yZXF1ZXN0L3N3aXRjaC9nZXQnLCBvblZhbGlkOiB0aGlzLmdldCB9XTtcbiAgICBsZXQgcmVzID0gdGhpcy52YWxpZGF0ZUNvbW1hbmRTY2hlbWEoc2NoZW1hRGF0YSwgbW9kdWxlLCAnc3dpdGNoJyk7XG5cbiAgICBpZiAocmVzLnZhbGlkID09PSAwKSB7XG4gICAgICBpZiAocmVzLmludmFsaWRCdXRMaWtlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5pbnZhbGlkQnV0TGlrZVswXS5tZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyB0aGlzLldTQ29tbWFuZE5vdEZvdW5kRXJyb3IoYFtzd2l0Y2hddW5rbm93biBjb21tYW5kYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5RnJvbUJpbmFyeShvYmpUb1NlbmQsIGZ1bmMsIHBheWxvYWQpIHtcbiAgICBpZiAoXG4gICAgICAoZnVuYyA9PT0gdGhpcy5fQ29tbWFuZE9uZWNlIHx8IGZ1bmMgPT09IHRoaXMuX0NvbW1hbmROb3RpZnlWYWx1ZSkgJiZcbiAgICAgIHBheWxvYWQuYnl0ZUxlbmd0aCA9PSAxXG4gICAgKSB7XG4gICAgICBsZXQgc3RhdGUgPSBwYXJzZUludChwYXlsb2FkWzBdKTtcbiAgICAgIGxldCBzdGF0ZXMgPSBbJ25vbmUnLCAncHVzaCcsICdsZWZ0JywgJ3JpZ2h0J107XG4gICAgICBvYmpUb1NlbmQuc3dpdGNoID0ge1xuICAgICAgICBzdGF0ZTogc3RhdGVzW3N0YXRlXSxcbiAgICAgIH07XG4gICAgICBpZiAoZnVuYyA9PT0gdGhpcy5fQ29tbWFuZE9uZWNlKSB7XG4gICAgICAgIG9ialRvU2VuZC5zd2l0Y2guYWN0aW9uID0gJ2dldCc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLm5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXU0NvbW1hbmRTd2l0Y2g7XG4iXX0=
