"use strict";
const WSCommand = require('./WSCommand.js').default;
const COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_HIGH = 1;
const COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_LOW = 2;
const COMMAND_IO_ERRORS_IO_TOO_LOW = 3;
const COMMAND_IO_ERRORS_IO_TOO_HIGH = 4;
const COMMAND_IO_ERRORS_IO_FORCE_RELEASED = 0xf0;
const COMMAND_IO_ERROR_MESSAGES = {
    0: 'unknown error',
    1: 'heavy output. output voltage is too low when driving high',
    2: 'heavy output. output voltage is too high when driving low',
    3: 'output voltage is too low when driving high. io state has changed output to input',
    4: 'output voltage is too high when driving low. io state has changed output to input',
};
const COMMAND_IO_MUTEX_NAMES = {
    1: 'io.input',
    2: 'io.output',
    3: 'pwm',
    4: 'uart',
    5: 'i2c',
    6: 'spi',
    7: 'LogicAnalyzer',
    8: 'Measure',
};
class WSCommandIO extends WSCommand {
    constructor() {
        super();
        this.module = 2;
        this._CommandOutput = 0;
        this._CommandInputStream = 1;
        this._CommandInputOnece = 2;
        this._CommandOutputType = 3;
        this._CommandPullResisterType = 4;
        this._CommandEnd = 5;
    }
    // Commands
    output(value, id) {
        let buf = new Uint8Array([id, value]);
        this.sendCommand(this._CommandOutput, buf);
    }
    outputDetail(params, id) {
        let buf = new Uint8Array([id, params.value]);
        this.sendCommand(this._CommandOutput, buf);
    }
    input(params, id) {
        let buf = new Uint8Array([id]);
        this.sendCommand(this._CommandInputOnece, buf);
    }
    inputDetail(params, id) {
        let buf = new Uint8Array([id]);
        this.sendCommand(params.stream ? this._CommandInputStream : this._CommandInputOnece, buf);
    }
    outputType(params, id) {
        let buf = new Uint8Array(2);
        buf[0] = id;
        if (params.output_type === 'push-pull5v') {
            buf[1] = 0;
        }
        else if (params.output_type === 'push-pull3v') {
            buf[1] = 2;
        }
        else if (params.output_type === 'open-drain') {
            buf[1] = 3;
        }
        else {
            return 'io unknown outputtype: ' + params.output_type;
        }
        this.sendCommand(this._CommandOutputType, buf);
    }
    pullType(params, id) {
        let buf = new Uint8Array(2);
        buf[0] = id;
        if (params.pull_type === 'float') {
            buf[1] = 0;
        }
        else if (params.pull_type === 'pull-up3v') {
            buf[1] = 1;
        }
        else if (params.pull_type === 'pull-down') {
            buf[1] = 2;
        }
        else if (params.pull_type === 'pull-up5v') {
            buf[1] = 3;
        }
        else {
            return 'io unknown pull_type: ' + params.pull_type;
        }
        this.sendCommand(this._CommandPullResisterType, buf);
    }
    deinit(params, id) {
        let buf = new Uint8Array([id]);
        this.sendCommand(this._CommandEnd, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < 40; i++) {
            let module = json['io' + i];
            if (module === undefined) {
                continue;
            }
            let schemaData = [
                { uri: '/request/io/input', onValid: this.input },
                { uri: '/request/io/input_detail', onValid: this.inputDetail },
                { uri: '/request/io/output', onValid: this.output },
                { uri: '/request/io/output_detail', onValid: this.outputDetail },
                { uri: '/request/io/output_type', onValid: this.outputType },
                { uri: '/request/io/pull_type', onValid: this.pullType },
                { uri: '/request/io/deinit', onValid: this.deinit },
            ];
            let res = this.validateCommandSchema(schemaData, module, 'io' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[io${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandInputStream || func === this._CommandInputOnece) {
            for (let i = 0; i < payload.byteLength; i += 2) {
                objToSend['io' + payload[i]] = payload[i + 1] > 0;
            }
        }
        else if (func === this.COMMAND_FUNC_ID_ERROR && payload.byteLength >= 4) {
            // const esperr = payload[0];
            const err = payload[1];
            // const ref_func_id = payload[2];
            const module_index = payload[3];
            if (err === COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_HIGH ||
                err === COMMAND_IO_ERRORS_IO_TOO_HEAVY_WHEN_LOW) {
                this.envelopWarning(objToSend, `io${module_index}`, {
                    message: COMMAND_IO_ERROR_MESSAGES[err],
                });
            }
            else if (err === COMMAND_IO_ERRORS_IO_TOO_LOW ||
                err === COMMAND_IO_ERRORS_IO_TOO_HIGH) {
                this.envelopError(objToSend, `io${module_index}`, {
                    message: COMMAND_IO_ERROR_MESSAGES[err],
                });
            }
            else if (err === COMMAND_IO_ERRORS_IO_FORCE_RELEASED &&
                payload.byteLength >= 6) {
                const oldMutexOwner = payload[4];
                const newMutexOwner = payload[5];
                this.envelopWarning(objToSend, 'debug', {
                    message: `io${module_index} binded "${COMMAND_IO_MUTEX_NAMES[oldMutexOwner]}" was stopped. "${COMMAND_IO_MUTEX_NAMES[newMutexOwner]}" have started using this io.`,
                });
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
module.exports = WSCommandIO;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRJTy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBRXBELE1BQU0sd0NBQXdDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELE1BQU0sdUNBQXVDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sNEJBQTRCLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sbUNBQW1DLEdBQUcsSUFBSSxDQUFDO0FBRWpELE1BQU0seUJBQXlCLEdBQUc7SUFDaEMsQ0FBQyxFQUFFLGVBQWU7SUFDbEIsQ0FBQyxFQUFFLDJEQUEyRDtJQUM5RCxDQUFDLEVBQUUsMkRBQTJEO0lBQzlELENBQUMsRUFBRSxtRkFBbUY7SUFDdEYsQ0FBQyxFQUFFLG1GQUFtRjtDQUN2RixDQUFDO0FBRUYsTUFBTSxzQkFBc0IsR0FBRztJQUM3QixDQUFDLEVBQUUsVUFBVTtJQUNiLENBQUMsRUFBRSxXQUFXO0lBQ2QsQ0FBQyxFQUFFLEtBQUs7SUFDUixDQUFDLEVBQUUsTUFBTTtJQUNULENBQUMsRUFBRSxLQUFLO0lBQ1IsQ0FBQyxFQUFFLEtBQUs7SUFDUixDQUFDLEVBQUUsZUFBZTtJQUNsQixDQUFDLEVBQUUsU0FBUztDQUNiLENBQUM7QUFFRixNQUFNLFdBQVksU0FBUSxTQUFTO0lBQ2pDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUVoQixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUM1QixJ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dGVudCI6WyJjb25zdCBXU0NvbW1hbmQgPSByZXF1aXJlKCcuL1dTQ29tbWFuZC5qcycpLmRlZmF1bHQ7XG5cbmNvbnN0IENPTU1BTkRfSU9fRVJST1JTX0lPX1RPT19IRUFWWV9XSEVOX0hJR0ggPSAxO1xuY29uc3QgQ09NTUFORF9JT19FUlJPUlNfSU9fVE9PX0hFQVZZX1dIRU5fTE9XID0gMjtcbmNvbnN0IENPTU1BTkRfSU9fRVJST1JTX0lPX1RPT19MT1cgPSAzO1xuY29uc3QgQ09NTUFORF9JT19FUlJPUlNfSU9fVE9PX0hJR0ggPSA0O1xuY29uc3QgQ09NTUFORF9JT19FUlJPUlNfSU9fRk9SQ0VfUkVMRUFTRUQgPSAweGYwO1xuXG5jb25zdCBDT01NQU5EX0lPX0VSUk9SX01FU1NBR0VTID0ge1xuICAwOiAndW5rbm93biBlcnJvcicsXG4gIDE6ICdoZWF2eSBvdXRwdXQuIG91dHB1dCB2b2x0YWdlIGlzIHRvbyBsb3cgd2hlbiBkcml2aW5nIGhpZ2gnLFxuICAyOiAnaGVhdnkgb3V0cHV0LiBvdXRwdXQgdm9sdGFnZSBpcyB0b28gaGlnaCB3aGVuIGRyaXZpbmcgbG93JyxcbiAgMzogJ291dHB1dCB2b2x0YWdlIGlzIHRvbyBsb3cgd2hlbiBkcml2aW5nIGhpZ2guIGlvIHN0YXRlIGhhcyBjaGFuZ2VkIG91dHB1dCB0byBpbnB1dCcsXG4gIDQ6ICdvdXRwdXQgdm9sdGFnZSBpcyB0b28gaGlnaCB3aGVuIGRyaXZpbmcgbG93LiBpbyBzdGF0ZSBoYXMgY2hhbmdlZCBvdXRwdXQgdG8gaW5wdXQnLFxufTtcblxuY29uc3QgQ09NTUFORF9JT19NVVRFWF9OQU1FUyA9IHtcbiAgMTogJ2lvLmlucHV0JyxcbiAgMjogJ2lvLm91dHB1dCcsXG4gIDM6ICdwd20nLFxuICA0OiAndWFydCcsXG4gIDU6ICdpMmMnLFxuICA2OiAnc3BpJyxcbiAgNzogJ0xvZ2ljQW5hbHl6ZXInLFxuICA4OiAnTWVhc3VyZScsXG59O1xuXG5jbGFzcyBXU0NvbW1hbmRJTyBleHRlbmRzIFdTQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2R1bGUgPSAyO1xuXG4gICAgdGhpcy5fQ29tbWFuZE91dHB1dCA9IDA7XG4gICAgdGhpcy5fQ29tbWFuZElucHV0U3RyZWFtID0gMTtcbiAgICB0aGlzLl9Db21tYW5kSW5wdXRPbmVjZSA9IDI7XG4gICAgdGhpcy5fQ29tbWFuZE91dHB1dFR5cGUgPSAzO1xuICAgIHRoaXMuX0NvbW1hbmRQdWxsUmVzaXN0ZXJUeXBlID0gNDtcbiAgICB0aGlzLl9Db21tYW5kRW5kID0gNTtcbiAgfVxuXG4gIC8vIENvbW1hbmRzXG5cbiAgb3V0cHV0KHZhbHVlLCBpZCkge1xuICAgIGxldCBidWYgPSBuZXcgVWludDhBcnJheShbaWQsIHZhbHVlXSk7XG4gICAgdGhpcy5zZW5kQ29tbWFuZCh0aGlzLl9Db21tYW5kT3V0cHV0LCBidWYpO1xuICB9XG5cbiAgb3V0cHV0RGV0YWlsKHBhcmFtcywgaWQpIHtcbiAgICBsZXQgYnVmID0gbmV3IFVpbnQ4QXJyYXkoW2lkLCBwYXJhbXMudmFsdWVdKTtcbiAgICB0aGlzLnNlbmRDb21tYW5kKHRoaXMuX0NvbW1hbmRPdXRwdXQsIGJ1Zik7XG4gIH1cblxuICBpbnB1dChwYXJhbXMsIGlkKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KFtpZF0pO1xuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZElucHV0T25lY2UsIGJ1Zik7XG4gIH1cblxuICBpbnB1dERldGFpbChwYXJhbXMsIGlkKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KFtpZF0pO1xuICAgIHRoaXMuc2VuZENvbW1hbmQoXG4gICAgICBwYXJhbXMuc3RyZWFtID8gdGhpcy5fQ29tbWFuZElucHV0U3RyZWFtIDogdGhpcy5fQ29tbWFuZElucHV0T25lY2UsXG4gICAgICBidWZcbiAgICApO1xuICB9XG5cbiAgb3V0cHV0VHlwZShwYXJhbXMsIGlkKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgIGJ1ZlswXSA9IGlkO1xuICAgIGlmIChwYXJhbXMub3V0cHV0X3R5cGUgPT09ICdwdXNoLXB1bGw1dicpIHtcbiAgICAgIGJ1ZlsxXSA9IDA7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMub3V0cHV0X3R5cGUgPT09ICdwdXNoLXB1bGwzdicpIHtcbiAgICAgIGJ1ZlsxXSA9IDI7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMub3V0cHV0X3R5cGUgPT09ICdvcGVuLWRyYWluJykge1xuICAgICAgYnVmWzFdID0gMztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdpbyB1bmtub3duIG91dHB1dHR5cGU6ICcgKyBwYXJhbXMub3V0cHV0X3R5cGU7XG4gICAgfVxuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZE91dHB1dFR5cGUsIGJ1Zik7XG4gIH1cblxuICBwdWxsVHlwZShwYXJhbXMsIGlkKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgIGJ1ZlswXSA9IGlkO1xuICAgIGlmIChwYXJhbXMucHVsbF90eXBlID09PSAnZmxvYXQnKSB7XG4gICAgICBidWZbMV0gPSAwO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLnB1bGxfdHlwZSA9PT0gJ3B1bGwtdXAzdicpIHtcbiAgICAgIGJ1ZlsxXSA9IDE7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucHVsbF90eXBlID09PSAncHVsbC1kb3duJykge1xuICAgICAgYnVmWzFdID0gMjtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5wdWxsX3R5cGUgPT09ICdwdWxsLXVwNXYnKSB7XG4gICAgICBidWZbMV0gPSAzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2lvIHVua25vd24gcHVsbF90eXBlOiAnICsgcGFyYW1zLnB1bGxfdHlwZTtcbiAgICB9XG4gICAgdGhpcy5zZW5kQ29tbWFuZCh0aGlzLl9Db21tYW5kUHVsbFJlc2lzdGVyVHlwZSwgYnVmKTtcbiAgfVxuXG4gIGRlaW5pdChwYXJhbXMsIGlkKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KFtpZF0pO1xuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZEVuZCwgYnVmKTtcbiAgfVxuXG4gIHBhcnNlRnJvbUpzb24oanNvbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkrKykge1xuICAgICAgbGV0IG1vZHVsZSA9IGpzb25bJ2lvJyArIGldO1xuICAgICAgaWYgKG1vZHVsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2NoZW1hRGF0YSA9IFtcbiAgICAgICAgeyB1cmk6ICcvcmVxdWVzdC9pby9pbnB1dCcsIG9uVmFsaWQ6IHRoaXMuaW5wdXQgfSxcbiAgICAgICAgeyB1cmk6ICcvcmVxdWVzdC9pby9pbnB1dF9kZXRhaWwnLCBvblZhbGlkOiB0aGlzLmlucHV0RGV0YWlsIH0sXG4gICAgICAgIHsgdXJpOiAnL3JlcXVlc3QvaW8vb3V0cHV0Jywgb25WYWxpZDogdGhpcy5vdXRwdXQgfSxcbiAgICAgICAgeyB1cmk6ICcvcmVxdWVzdC9pby9vdXRwdXRfZGV0YWlsJywgb25WYWxpZDogdGhpcy5vdXRwdXREZXRhaWwgfSxcbiAgICAgICAgeyB1cmk6ICcvcmVxdWVzdC9pby9vdXRwdXRfdHlwZScsIG9uVmFsaWQ6IHRoaXMub3V0cHV0VHlwZSB9LFxuICAgICAgICB7IHVyaTogJy9yZXF1ZXN0L2lvL3B1bGxfdHlwZScsIG9uVmFsaWQ6IHRoaXMucHVsbFR5cGUgfSxcbiAgICAgICAgeyB1cmk6ICcvcmVxdWVzdC9pby9kZWluaXQnLCBvblZhbGlkOiB0aGlzLmRlaW5pdCB9LFxuICAgICAgXTtcbiAgICAgIGxldCByZXMgPSB0aGlzLnZhbGlkYXRlQ29tbWFuZFNjaGVtYShzY2hlbWFEYXRhLCBtb2R1bGUsICdpbycgKyBpLCBpKTtcblxuICAgICAgaWYgKHJlcy52YWxpZCA9PT0gMCkge1xuICAgICAgICBpZiAocmVzLmludmFsaWRCdXRMaWtlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLmludmFsaWRCdXRMaWtlWzBdLm1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyB0aGlzLldTQ29tbWFuZE5vdEZvdW5kRXJyb3IoYFtpbyR7aX1ddW5rbm93biBjb21tYW5kYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub3RpZnlGcm9tQmluYXJ5KG9ialRvU2VuZCwgZnVuYywgcGF5bG9hZCkge1xuICAgIGlmIChmdW5jID09PSB0aGlzLl9Db21tYW5kSW5wdXRTdHJlYW0gfHwgZnVuYyA9PT0gdGhpcy5fQ29tbWFuZElucHV0T25lY2UpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF5bG9hZC5ieXRlTGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgb2JqVG9TZW5kWydpbycgKyBwYXlsb2FkW2ldXSA9IHBheWxvYWRbaSArIDFdID4gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZ1bmMgPT09IHRoaXMuQ09NTUFORF9GVU5DX0lEX0VSUk9SICYmIHBheWxvYWQuYnl0ZUxlbmd0aCA+PSA0KSB7XG4gICAgICAvLyBjb25zdCBlc3BlcnIgPSBwYXlsb2FkWzBdO1xuICAgICAgY29uc3QgZXJyID0gcGF5bG9hZFsxXTtcbiAgICAgIC8vIGNvbnN0IHJlZl9mdW5jX2lkID0gcGF5bG9hZFsyXTtcbiAgICAgIGNvbnN0IG1vZHVsZV9pbmRleCA9IHBheWxvYWRbM107XG5cbiAgICAgIGlmIChcbiAgICAgICAgZXJyID09PSBDT01NQU5EX0lPX0VSUk9SU19JT19UT09fSEVBVllfV0hFTl9ISUdIIHx8XG4gICAgICAgIGVyciA9PT0gQ09NTUFORF9JT19FUlJPUlNfSU9fVE9PX0hFQVZZX1dIRU5fTE9XXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbnZlbG9wV2FybmluZyhvYmpUb1NlbmQsIGBpbyR7bW9kdWxlX2luZGV4fWAsIHtcbiAgICAgICAgICBtZXNzYWdlOiBDT01NQU5EX0lPX0VSUk9SX01FU1NBR0VTW2Vycl0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZXJyID09PSBDT01NQU5EX0lPX0VSUk9SU19JT19UT09fTE9XIHx8XG4gICAgICAgIGVyciA9PT0gQ09NTUFORF9JT19FUlJPUlNfSU9fVE9PX0hJR0hcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVudmVsb3BFcnJvcihvYmpUb1NlbmQsIGBpbyR7bW9kdWxlX2luZGV4fWAsIHtcbiAgICAgICAgICBtZXNzYWdlOiBDT01NQU5EX0lPX0VSUk9SX01FU1NBR0VTW2Vycl0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZXJyID09PSBDT01NQU5EX0lPX0VSUk9SU19JT19GT1JDRV9SRUxFQVNFRCAmJlxuICAgICAgICBwYXlsb2FkLmJ5dGVMZW5ndGggPj0gNlxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IG9sZE11dGV4T3duZXIgPSBwYXlsb2FkWzRdO1xuICAgICAgICBjb25zdCBuZXdNdXRleE93bmVyID0gcGF5bG9hZFs1XTtcbiAgICAgICAgdGhpcy5lbnZlbG9wV2FybmluZyhvYmpUb1NlbmQsICdkZWJ1ZycsIHtcbiAgICAgICAgICBtZXNzYWdlOiBgaW8ke21vZHVsZV9pbmRleH0gYmluZGVkIFwiJHtcbiAgICAgICAgICAgIENPTU1BTkRfSU9fTVVURVhfTkFNRVNbb2xkTXV0ZXhPd25lcl1cbiAgICAgICAgICB9XCIgd2FzIHN0b3BwZWQuIFwiJHtcbiAgICAgICAgICAgIENPTU1BTkRfSU9fTVVURVhfTkFNRVNbbmV3TXV0ZXhPd25lcl1cbiAgICAgICAgICB9XCIgaGF2ZSBzdGFydGVkIHVzaW5nIHRoaXMgaW8uYCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLm5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXU0NvbW1hbmRJTztcbiJdfQ==
