"use strict";
const WSCommand = require('./WSCommand.js').default;
class WSCommandMeasurement extends WSCommand {
    constructor() {
        super();
        this.module = 12;
        this._CommandMeasurementEcho = 0;
    }
    // Commands
    echo(params) {
        let triggerIO = params.echo.io_pulse;
        let triggerPosNeg = params.echo.pulse === 'negative' ? false : true;
        let triggerWidthUs = parseInt(params.echo.pulse_width * 1000);
        let echoIO = params.echo.io_echo;
        let responseCount = params.echo.measure_edges;
        let timeoutUs = params.echo.timeout * 1000;
        timeoutUs = parseInt(timeoutUs);
        let buf = new Uint8Array(13);
        buf[0] = 0;
        buf[1] = triggerIO;
        buf[2] = triggerPosNeg ? 1 : 0;
        buf[3] = triggerWidthUs >> (8 * 3);
        buf[4] = triggerWidthUs >> (8 * 2);
        buf[5] = triggerWidthUs >> 8;
        buf[6] = triggerWidthUs;
        buf[7] = echoIO;
        buf[8] = responseCount;
        buf[9] = timeoutUs >> (8 * 3);
        buf[10] = timeoutUs >> (8 * 2);
        buf[11] = timeoutUs >> 8;
        buf[12] = timeoutUs;
        this.sendCommand(this._CommandMeasurementEcho, buf);
    }
    parseFromJson(json) {
        let module = json.measure;
        if (module === undefined) {
            return;
        }
        let schemaData = [{ uri: '/request/measure/echo', onValid: this.echo }];
        let res = this.validateCommandSchema(schemaData, module, 'measure');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[measure]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandMeasurementEcho) {
            let index = 0;
            let count = parseInt(payload[index++]);
            let array = [];
            for (let i = 0; i < count; i++) {
                let timing;
                let edge = payload[index++] > 0 ? true : false;
                timing = payload[index++] << (8 * 3);
                timing += payload[index++] << (8 * 2);
                timing += payload[index++] << 8;
                timing += payload[index++];
                timing = timing / 1000;
                array.push({
                    edge,
                    timing,
                });
            }
            objToSend.measure = {
                echo: array,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
module.exports = WSCommandMeasurement;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRNZWFzdXJlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBRXBELE1BQU0sb0JBQXFCLFNBQVEsU0FBUztJQUMxQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsV0FBVztJQUVYLElBQUksQ0FBQyxNQUFNO1FBQ1QsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckMsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRSxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUQsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDakMsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDOUMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQzNDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDbkIsR0FB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TSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDVCxJQUFJO29CQUNKLE1BQU07aUJBQ1AsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxTQUFTLENBQUMsT0FBTyxHQUFHO2dCQUNsQixJQUFJLEVBQUUsS0FBSzthQUNaLENBQUM7U0FDSDthQUFNO1lBQ0wsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvd3Njb21tYW5kL1dTQ29tbWFuZE1lYXN1cmVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV1NDb21tYW5kID0gcmVxdWlyZSgnLi9XU0NvbW1hbmQuanMnKS5kZWZhdWx0O1xuXG5jbGFzcyBXU0NvbW1hbmRNZWFzdXJlbWVudCBleHRlbmRzIFdTQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2R1bGUgPSAxMjtcblxuICAgIHRoaXMuX0NvbW1hbmRNZWFzdXJlbWVudEVjaG8gPSAwO1xuICB9XG5cbiAgLy8gQ29tbWFuZHNcblxuICBlY2hvKHBhcmFtcykge1xuICAgIGxldCB0cmlnZ2VySU8gPSBwYXJhbXMuZWNoby5pb19wdWxzZTtcbiAgICBsZXQgdHJpZ2dlclBvc05lZyA9IHBhcmFtcy5lY2hvLnB1bHNlID09PSAnbmVnYXRpdmUnID8gZmFsc2UgOiB0cnVlO1xuICAgIGxldCB0cmlnZ2VyV2lkdGhVcyA9IHBhcnNlSW50KHBhcmFtcy5lY2hvLnB1bHNlX3dpZHRoICogMTAwMCk7XG4gICAgbGV0IGVjaG9JTyA9IHBhcmFtcy5lY2hvLmlvX2VjaG87XG4gICAgbGV0IHJlc3BvbnNlQ291bnQgPSBwYXJhbXMuZWNoby5tZWFzdXJlX2VkZ2VzO1xuICAgIGxldCB0aW1lb3V0VXMgPSBwYXJhbXMuZWNoby50aW1lb3V0ICogMTAwMDtcbiAgICB0aW1lb3V0VXMgPSBwYXJzZUludCh0aW1lb3V0VXMpO1xuXG4gICAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDEzKTtcbiAgICBidWZbMF0gPSAwO1xuICAgIGJ1ZlsxXSA9IHRyaWdnZXJJTztcbiAgICBidWZbMl0gPSB0cmlnZ2VyUG9zTmVnID8gMSA6IDA7XG4gICAgYnVmWzNdID0gdHJpZ2dlcldpZHRoVXMgPj4gKDggKiAzKTtcbiAgICBidWZbNF0gPSB0cmlnZ2VyV2lkdGhVcyA+PiAoOCAqIDIpO1xuICAgIGJ1Zls1XSA9IHRyaWdnZXJXaWR0aFVzID4+IDg7XG4gICAgYnVmWzZdID0gdHJpZ2dlcldpZHRoVXM7XG4gICAgYnVmWzddID0gZWNob0lPO1xuICAgIGJ1Zls4XSA9IHJlc3BvbnNlQ291bnQ7XG4gICAgYnVmWzldID0gdGltZW91dFVzID4+ICg4ICogMyk7XG4gICAgYnVmWzEwXSA9IHRpbWVvdXRVcyA+PiAoOCAqIDIpO1xuICAgIGJ1ZlsxMV0gPSB0aW1lb3V0VXMgPj4gODtcbiAgICBidWZbMTJdID0gdGltZW91dFVzO1xuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZE1lYXN1cmVtZW50RWNobywgYnVmKTtcbiAgfVxuXG4gIHBhcnNlRnJvbUpzb24oanNvbikge1xuICAgIGxldCBtb2R1bGUgPSBqc29uLm1lYXN1cmU7XG4gICAgaWYgKG1vZHVsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzY2hlbWFEYXRhID0gW3sgdXJpOiAnL3JlcXVlc3QvbWVhc3VyZS9lY2hvJywgb25WYWxpZDogdGhpcy5lY2hvIH1dO1xuICAgIGxldCByZXMgPSB0aGlzLnZhbGlkYXRlQ29tbWFuZFNjaGVtYShzY2hlbWFEYXRhLCBtb2R1bGUsICdtZWFzdXJlJyk7XG5cbiAgICBpZiAocmVzLnZhbGlkID09PSAwKSB7XG4gICAgICBpZiAocmVzLmludmFsaWRCdXRMaWtlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5pbnZhbGlkQnV0TGlrZVswXS5tZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyB0aGlzLldTQ29tbWFuZE5vdEZvdW5kRXJyb3IoYFttZWFzdXJlXXVua25vd24gY29tbWFuZGApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKSB7XG4gICAgaWYgKGZ1bmMgPT09IHRoaXMuX0NvbW1hbmRNZWFzdXJlbWVudEVjaG8pIHtcbiAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICBsZXQgY291bnQgPSBwYXJzZUludChwYXlsb2FkW2luZGV4KytdKTtcbiAgICAgIGxldCBhcnJheSA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGxldCB0aW1pbmc7XG4gICAgICAgIGxldCBlZGdlID0gcGF5bG9hZFtpbmRleCsrXSA+IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHRpbWluZyA9IHBheWxvYWRbaW5kZXgrK10gPDwgKDggKiAzKTtcbiAgICAgICAgdGltaW5nICs9IHBheWxvYWRbaW5kZXgrK10gPDwgKDggKiAyKTtcbiAgICAgICAgdGltaW5nICs9IHBheWxvYWRbaW5kZXgrK10gPDwgODtcbiAgICAgICAgdGltaW5nICs9IHBheWxvYWRbaW5kZXgrK107XG4gICAgICAgIHRpbWluZyA9IHRpbWluZyAvIDEwMDA7XG4gICAgICAgIGFycmF5LnB1c2goe1xuICAgICAgICAgIGVkZ2UsXG4gICAgICAgICAgdGltaW5nLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG9ialRvU2VuZC5tZWFzdXJlID0ge1xuICAgICAgICBlY2hvOiBhcnJheSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLm5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXU0NvbW1hbmRNZWFzdXJlbWVudDtcbiJdfQ==
