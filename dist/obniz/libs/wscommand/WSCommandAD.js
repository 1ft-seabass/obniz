"use strict";
const WSCommand = require('./WSCommand.js').default;
class WSCommandAD extends WSCommand {
    constructor() {
        super();
        this.module = 7;
        this._CommandInitNormalInterval = 0;
        this._CommandDeinit = 1;
        this._CommandNotifyValue = 2;
        this._CommandDoOnece = 3;
    }
    // Commands
    get(params, no) {
        let buf = new Uint8Array([no]);
        this.sendCommand(params.stream ? this._CommandInitNormalInterval : this._CommandDoOnece, buf);
    }
    deinit(params, no) {
        let buf = new Uint8Array([no]);
        this.sendCommand(this._CommandDeinit, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < 40; i++) {
            let module = json['ad' + i];
            if (module === undefined) {
                continue;
            }
            let schemaData = [
                { uri: '/request/ad/deinit', onValid: this.deinit },
                { uri: '/request/ad/get', onValid: this.get },
            ];
            let res = this.validateCommandSchema(schemaData, module, 'ad' + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[ad${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandNotifyValue) {
            for (let i = 0; i + 2 < payload.byteLength; i += 3) {
                let value;
                if (payload[i + 1] & 0x80) {
                    // 10bit mode
                    value = ((payload[i + 1] & 0x03) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                    value = (5.0 * value) / 1023.0; // 1023.0 == 0x3FF
                    value = Math.round(value * 1000) / 1000;
                }
                else if (payload[i + 1] & 0x40) {
                    // 12bit mode
                    value = ((payload[i + 1] & 0x0f) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                    value = (3.3 * value) / 4095.0; // 4095.0 == 0xFFF // vdd is not always 3.3v but...
                    value = Math.round(value * 1000) / 1000;
                }
                else {
                    // unsigned 100 times mode. (0 to 500 from 0v to 5v).
                    value = (payload[i + 1] << 8) + payload[i + 2];
                    value = value / 100.0;
                }
                objToSend['ad' + payload[i]] = value;
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
module.exports = WSCommandAD;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRBRC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBRXBELE1BQU0sV0FBWSxTQUFRLFNBQVM7SUFDakM7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQywwQkFBMEIsR0FBRyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsV0FBVztJQUVYLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNaLElBQUksR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxDQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFDdEUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2YsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQUk7UUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixJQUFJLE1BQU0s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Z0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMiLCJmaWxlIjoib2JuaXovbGlicy93c2NvbW1hbmQvV1NDb21tYW5kQUQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXU0NvbW1hbmQgPSByZXF1aXJlKCcuL1dTQ29tbWFuZC5qcycpLmRlZmF1bHQ7XG5cbmNsYXNzIFdTQ29tbWFuZEFEIGV4dGVuZHMgV1NDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm1vZHVsZSA9IDc7XG5cbiAgICB0aGlzLl9Db21tYW5kSW5pdE5vcm1hbEludGVydmFsID0gMDtcbiAgICB0aGlzLl9Db21tYW5kRGVpbml0ID0gMTtcbiAgICB0aGlzLl9Db21tYW5kTm90aWZ5VmFsdWUgPSAyO1xuICAgIHRoaXMuX0NvbW1hbmREb09uZWNlID0gMztcbiAgfVxuXG4gIC8vIENvbW1hbmRzXG5cbiAgZ2V0KHBhcmFtcywgbm8pIHtcbiAgICBsZXQgYnVmID0gbmV3IFVpbnQ4QXJyYXkoW25vXSk7XG4gICAgdGhpcy5zZW5kQ29tbWFuZChcbiAgICAgIHBhcmFtcy5zdHJlYW0gPyB0aGlzLl9Db21tYW5kSW5pdE5vcm1hbEludGVydmFsIDogdGhpcy5fQ29tbWFuZERvT25lY2UsXG4gICAgICBidWZcbiAgICApO1xuICB9XG5cbiAgZGVpbml0KHBhcmFtcywgbm8pIHtcbiAgICBsZXQgYnVmID0gbmV3IFVpbnQ4QXJyYXkoW25vXSk7XG4gICAgdGhpcy5zZW5kQ29tbWFuZCh0aGlzLl9Db21tYW5kRGVpbml0LCBidWYpO1xuICB9XG5cbiAgcGFyc2VGcm9tSnNvbihqc29uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDsgaSsrKSB7XG4gICAgICBsZXQgbW9kdWxlID0ganNvblsnYWQnICsgaV07XG4gICAgICBpZiAobW9kdWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBzY2hlbWFEYXRhID0gW1xuICAgICAgICB7IHVyaTogJy9yZXF1ZXN0L2FkL2RlaW5pdCcsIG9uVmFsaWQ6IHRoaXMuZGVpbml0IH0sXG4gICAgICAgIHsgdXJpOiAnL3JlcXVlc3QvYWQvZ2V0Jywgb25WYWxpZDogdGhpcy5nZXQgfSxcbiAgICAgIF07XG4gICAgICBsZXQgcmVzID0gdGhpcy52YWxpZGF0ZUNvbW1hbmRTY2hlbWEoc2NoZW1hRGF0YSwgbW9kdWxlLCAnYWQnICsgaSwgaSk7XG5cbiAgICAgIGlmIChyZXMudmFsaWQgPT09IDApIHtcbiAgICAgICAgaWYgKHJlcy5pbnZhbGlkQnV0TGlrZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5pbnZhbGlkQnV0TGlrZVswXS5tZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgdGhpcy5XU0NvbW1hbmROb3RGb3VuZEVycm9yKGBbYWQke2l9XXVua25vd24gY29tbWFuZGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5RnJvbUJpbmFyeShvYmpUb1NlbmQsIGZ1bmMsIHBheWxvYWQpIHtcbiAgICBpZiAoZnVuYyA9PT0gdGhpcy5fQ29tbWFuZE5vdGlmeVZhbHVlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSArIDIgPCBwYXlsb2FkLmJ5dGVMZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGlmIChwYXlsb2FkW2kgKyAxXSAmIDB4ODApIHtcbiAgICAgICAgICAvLyAxMGJpdCBtb2RlXG4gICAgICAgICAgdmFsdWUgPSAoKHBheWxvYWRbaSArIDFdICYgMHgwMykgPDwgOCkgKyBwYXlsb2FkW2kgKyAyXTsgLy8gMHgwMDAwIHRvIDB4M0ZGO1xuICAgICAgICAgIHZhbHVlID0gKDUuMCAqIHZhbHVlKSAvIDEwMjMuMDsgLy8gMTAyMy4wID09IDB4M0ZGXG4gICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwMCkgLyAxMDAwO1xuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWRbaSArIDFdICYgMHg0MCkge1xuICAgICAgICAgIC8vIDEyYml0IG1vZGVcbiAgICAgICAgICB2YWx1ZSA9ICgocGF5bG9hZFtpICsgMV0gJiAweDBmKSA8PCA4KSArIHBheWxvYWRbaSArIDJdOyAvLyAweDAwMDAgdG8gMHgzRkY7XG4gICAgICAgICAgdmFsdWUgPSAoMy4zICogdmFsdWUpIC8gNDA5NS4wOyAvLyA0MDk1LjAgPT0gMHhGRkYgLy8gdmRkIGlzIG5vdCBhbHdheXMgMy4zdiBidXQuLi5cbiAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdW5zaWduZWQgMTAwIHRpbWVzIG1vZGUuICgwIHRvIDUwMCBmcm9tIDB2IHRvIDV2KS5cbiAgICAgICAgICB2YWx1ZSA9IChwYXlsb2FkW2kgKyAxXSA8PCA4KSArIHBheWxvYWRbaSArIDJdO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyAxMDAuMDtcbiAgICAgICAgfVxuICAgICAgICBvYmpUb1NlbmRbJ2FkJyArIHBheWxvYWRbaV1dID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLm5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXU0NvbW1hbmRBRDtcbiJdfQ==
