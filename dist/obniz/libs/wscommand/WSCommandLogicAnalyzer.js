"use strict";
const WSCommand = require('./WSCommand.js').default;
class WSCommandLogicAnalyzer extends WSCommand {
    constructor() {
        super();
        this.module = 10;
        this._CommandInit = 0;
        this._CommandDeinit = 1;
        this._CommandRecv = 2;
    }
    // Commands
    init(params) {
        let io = params.io[0];
        let intervalUsec = params.interval * 1000;
        let durationUsec = params.duration * 1000;
        let matchValue = parseInt(params.trigger.value);
        let matchCount = params.trigger.samples;
        let buf = new Uint8Array(12);
        buf[0] = 1;
        buf[1] = io;
        buf[2] = intervalUsec >> (8 * 3);
        buf[3] = intervalUsec >> (8 * 2);
        buf[4] = intervalUsec >> (8 * 1);
        buf[5] = intervalUsec;
        buf[6] = durationUsec >> (8 * 3);
        buf[7] = durationUsec >> (8 * 2);
        buf[8] = durationUsec >> (8 * 1);
        buf[9] = durationUsec;
        buf[10] = matchValue;
        buf[11] = matchCount;
        this.sendCommand(this._CommandInit, buf);
    }
    deinit(params) {
        let buf = new Uint8Array(0);
        this.sendCommand(this._CommandDeinit, buf);
    }
    parseFromJson(json) {
        let module = json.logic_analyzer;
        if (module === undefined) {
            return;
        }
        let schemaData = [
            { uri: '/request/logicAnalyzer/init', onValid: this.init },
            { uri: '/request/logicAnalyzer/deinit', onValid: this.deinit },
        ];
        let res = this.validateCommandSchema(schemaData, module, 'logic_analyzer');
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[logic_analyzer]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandRecv) {
            let arr = new Array(payload.byteLength * 8);
            let offset = 0;
            for (let i = 0; i < payload.byteLength; i++) {
                const byte = payload[i];
                for (let bit = 0; bit < 8; bit++) {
                    arr[offset] = byte & (0x80 >>> bit) ? 1 : 0;
                    offset++;
                }
            }
            objToSend.logic_analyzer = {
                data: arr,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
module.exports = WSCommandLogicAnalyzer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRMb2dpY0FuYWx5emVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFFcEQsTUFBTSxzQkFBdUIsU0FBUSxTQUFTO0lBQzVDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsV0FBVztJQUVYLElBQUksQ0FBQyxNQUFNO1FBQ1QsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUMxQyxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUUxQyxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUN4QyxJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLENBQUMsQ0FB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LENBQUM7b0JBQzVDLE1BQU0sRUFBRSxDQUFDO2lCQUNWO2FBQ0Y7WUFDRCxTQUFTLENBQUMsY0FBYyxHQUFHO2dCQUN6QixJQUFJLEVBQUUsR0FBRzthQUNWLENBQUM7U0FDSDthQUFNO1lBQ0wsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUFDIiwiZmlsZSI6Im9ibml6L2xpYnMvd3Njb21tYW5kL1dTQ29tbWFuZExvZ2ljQW5hbHl6ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXU0NvbW1hbmQgPSByZXF1aXJlKCcuL1dTQ29tbWFuZC5qcycpLmRlZmF1bHQ7XG5cbmNsYXNzIFdTQ29tbWFuZExvZ2ljQW5hbHl6ZXIgZXh0ZW5kcyBXU0NvbW1hbmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubW9kdWxlID0gMTA7XG5cbiAgICB0aGlzLl9Db21tYW5kSW5pdCA9IDA7XG4gICAgdGhpcy5fQ29tbWFuZERlaW5pdCA9IDE7XG4gICAgdGhpcy5fQ29tbWFuZFJlY3YgPSAyO1xuICB9XG5cbiAgLy8gQ29tbWFuZHNcblxuICBpbml0KHBhcmFtcykge1xuICAgIGxldCBpbyA9IHBhcmFtcy5pb1swXTtcbiAgICBsZXQgaW50ZXJ2YWxVc2VjID0gcGFyYW1zLmludGVydmFsICogMTAwMDtcbiAgICBsZXQgZHVyYXRpb25Vc2VjID0gcGFyYW1zLmR1cmF0aW9uICogMTAwMDtcblxuICAgIGxldCBtYXRjaFZhbHVlID0gcGFyc2VJbnQocGFyYW1zLnRyaWdnZXIudmFsdWUpO1xuICAgIGxldCBtYXRjaENvdW50ID0gcGFyYW1zLnRyaWdnZXIuc2FtcGxlcztcbiAgICBsZXQgYnVmID0gbmV3IFVpbnQ4QXJyYXkoMTIpO1xuICAgIGJ1ZlswXSA9IDE7XG4gICAgYnVmWzFdID0gaW87XG4gICAgYnVmWzJdID0gaW50ZXJ2YWxVc2VjID4+ICg4ICogMyk7XG4gICAgYnVmWzNdID0gaW50ZXJ2YWxVc2VjID4+ICg4ICogMik7XG4gICAgYnVmWzRdID0gaW50ZXJ2YWxVc2VjID4+ICg4ICogMSk7XG4gICAgYnVmWzVdID0gaW50ZXJ2YWxVc2VjO1xuICAgIGJ1Zls2XSA9IGR1cmF0aW9uVXNlYyA+PiAoOCAqIDMpO1xuICAgIGJ1Zls3XSA9IGR1cmF0aW9uVXNlYyA+PiAoOCAqIDIpO1xuICAgIGJ1Zls4XSA9IGR1cmF0aW9uVXNlYyA+PiAoOCAqIDEpO1xuICAgIGJ1Zls5XSA9IGR1cmF0aW9uVXNlYztcbiAgICBidWZbMTBdID0gbWF0Y2hWYWx1ZTtcbiAgICBidWZbMTFdID0gbWF0Y2hDb3VudDtcbiAgICB0aGlzLnNlbmRDb21tYW5kKHRoaXMuX0NvbW1hbmRJbml0LCBidWYpO1xuICB9XG5cbiAgZGVpbml0KHBhcmFtcykge1xuICAgIGxldCBidWYgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICB0aGlzLnNlbmRDb21tYW5kKHRoaXMuX0NvbW1hbmREZWluaXQsIGJ1Zik7XG4gIH1cblxuICBwYXJzZUZyb21Kc29uKGpzb24pIHtcbiAgICBsZXQgbW9kdWxlID0ganNvbi5sb2dpY19hbmFseXplcjtcbiAgICBpZiAobW9kdWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNjaGVtYURhdGEgPSBbXG4gICAgICB7IHVyaTogJy9yZXF1ZXN0L2xvZ2ljQW5hbHl6ZXIvaW5pdCcsIG9uVmFsaWQ6IHRoaXMuaW5pdCB9LFxuICAgICAgeyB1cmk6ICcvcmVxdWVzdC9sb2dpY0FuYWx5emVyL2RlaW5pdCcsIG9uVmFsaWQ6IHRoaXMuZGVpbml0IH0sXG4gICAgXTtcbiAgICBsZXQgcmVzID0gdGhpcy52YWxpZGF0ZUNvbW1hbmRTY2hlbWEoc2NoZW1hRGF0YSwgbW9kdWxlLCAnbG9naWNfYW5hbHl6ZXInKTtcblxuICAgIGlmIChyZXMudmFsaWQgPT09IDApIHtcbiAgICAgIGlmIChyZXMuaW52YWxpZEJ1dExpa2UubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLmludmFsaWRCdXRMaWtlWzBdLm1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IHRoaXMuV1NDb21tYW5kTm90Rm91bmRFcnJvcihcbiAgICAgICAgICBgW2xvZ2ljX2FuYWx5emVyXXVua25vd24gY29tbWFuZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub3RpZnlGcm9tQmluYXJ5KG9ialRvU2VuZCwgZnVuYywgcGF5bG9hZCkge1xuICAgIGlmIChmdW5jID09PSB0aGlzLl9Db21tYW5kUmVjdikge1xuICAgICAgbGV0IGFyciA9IG5ldyBBcnJheShwYXlsb2FkLmJ5dGVMZW5ndGggKiA4KTtcbiAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXlsb2FkLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBieXRlID0gcGF5bG9hZFtpXTtcbiAgICAgICAgZm9yIChsZXQgYml0ID0gMDsgYml0IDwgODsgYml0KyspIHtcbiAgICAgICAgICBhcnJbb2Zmc2V0XSA9IGJ5dGUgJiAoMHg4MCA+Pj4gYml0KSA/IDEgOiAwO1xuICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvYmpUb1NlbmQubG9naWNfYW5hbHl6ZXIgPSB7XG4gICAgICAgIGRhdGE6IGFycixcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLm5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kLCBmdW5jLCBwYXlsb2FkKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXU0NvbW1hbmRMb2dpY0FuYWx5emVyO1xuIl19
