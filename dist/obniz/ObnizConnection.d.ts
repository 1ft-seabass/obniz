export = ObnizConnection;
declare class ObnizConnection {
    static get version(): any;
    static get WSCommand(): typeof import("./libs/wscommand");
    constructor(id: any, options: any);
    isNode: boolean;
    id: any;
    socket: any;
    socket_local: any;
    debugprint: boolean;
    debugprintBinary: boolean;
    debugs: any[];
    onConnectCalled: boolean;
    hw: any;
    firmware_ver: any;
    connectionState: string;
    bufferdAmoundWarnBytes: number;
    emitter: import("eventemitter3")<string | symbol>;
    _connectionRetryCount: number;
    options: {
        binary: boolean;
        local_connect: boolean;
        debug_dom_id: any;
        auto_connect: boolean;
        access_token: any;
        obniz_server: any;
        reset_obniz_on_ws_disconnection: boolean;
    };
    wscommand: any;
    wscommands: any[];
    prompt(filled: any, callback: any): void;
    wsOnOpen(): void;
    wsOnMessage(data: any): void;
    wsOnClose(event: any): void;
    connectWait(option: any): Promise<any>;
    _reconnect(): void;
    wsOnError(event: any): void;
    wsOnUnexpectedResponse(req: any, res: any): void;
    wsconnect(desired_server: any): void;
    _connectLocal(host: any): void;
    _disconnectLocal(): void;
    _waitForLocalConnectReadyTimer: NodeJS.Timeout | null | undefined;
    clearSocket(socket: any): void;
    _sendQueueTimer: NodeJS.Timeout | null | undefined;
    connect(): void;
    close(): void;
    _callOnConnect(): void;
    print_debug(str: any): void;
    send(obj: any, options: any): void;
    _sendQueue: never[] | undefined;
    _sendRouted(data: any): void;
    _drainQueued(): void;
    notifyToModule(obj: any): void;
    _canConnectToInsecure(): boolean;
    handleWSCommand(wsObj: any): void;
    handleSystemCommand(wsObj: any): void;
    binary2Json(binary: any): {}[];
    warning(msg: any): void;
    error(msg: any): void;
}
