"use strict";
class Grove_EarHeartRate {
    constructor() {
        this.keys = ['vcc', 'gnd', 'signal'];
        this.requiredKeys = ['vcc', 'gnd'];
        this.displayIoNames = {
            vcc: 'vcc',
            gnd: 'gnd',
            signal: 'signal',
        };
        this.interval = 5;
        this.duration = 2.5 * 1000;
    }
    static info() {
        return {
            name: 'Grove_EarHeartRate',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
    }
    start(callback) {
        this.obniz.logicAnalyzer.start({
            io: this.params.signal,
            interval: this.interval,
            duration: this.duration,
        });
        this.obniz.logicAnalyzer.onmeasured = array => {
            let edges = [];
            for (let i = 0; i < array.length - 1; i++) {
                if (array[i] === 0 && array[i + 1] === 1) {
                    edges.push(i);
                }
            }
            if (edges.length >= 2) {
                let between = 0;
                let pulseMin = 0;
                between = ((edges[1] - edges[0]) * this.interval) / 1000.0;
                pulseMin = 60 / between;
                callback(pulseMin);
            }
        };
    }
    getWait() {
        return new Promise(resolve => {
            this.start(rate => {
                resolve(rate);
            });
        });
    }
}
if (typeof module === 'object') {
    module.exports = Grove_EarHeartRate;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9FYXJIZWFydFJhdGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sa0JBQWtCO0lBQ3RCO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3BCLEdBQUcsRUFBRSxLQUFLO1lBQ1YsR0FBRyxFQUFFLEtBQUs7WUFDVixNQUFNLEVBQUUsUUFBUTtTQUNqQixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU87WUFDTCxJQUFJLEVBQUUsb0JBQW9CO1NBQzNCLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUM3QixFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1lBQ3RCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNmO2FBQ0Y7WUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUNyQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztnQkFDakIsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQztnQkFDM0QsUUFBUSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNwQjtRQUNILENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUM7Q0FDckMiLCJmaWxlIjoicGFydHMvR3JvdmUvR3JvdmVfRWFySGVhcnRSYXRlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgR3JvdmVfRWFySGVhcnRSYXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWyd2Y2MnLCAnZ25kJywgJ3NpZ25hbCddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gWyd2Y2MnLCAnZ25kJ107XG5cbiAgICB0aGlzLmRpc3BsYXlJb05hbWVzID0ge1xuICAgICAgdmNjOiAndmNjJyxcbiAgICAgIGduZDogJ2duZCcsXG4gICAgICBzaWduYWw6ICdzaWduYWwnLFxuICAgIH07XG5cbiAgICB0aGlzLmludGVydmFsID0gNTtcbiAgICB0aGlzLmR1cmF0aW9uID0gMi41ICogMTAwMDtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnR3JvdmVfRWFySGVhcnRSYXRlJyxcbiAgICB9O1xuICB9XG5cbiAgd2lyZWQob2JuaXopIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCAnNXYnKTtcbiAgfVxuXG4gIHN0YXJ0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vYm5pei5sb2dpY0FuYWx5emVyLnN0YXJ0KHtcbiAgICAgIGlvOiB0aGlzLnBhcmFtcy5zaWduYWwsXG4gICAgICBpbnRlcnZhbDogdGhpcy5pbnRlcnZhbCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuICAgIH0pO1xuXG4gICAgdGhpcy5vYm5pei5sb2dpY0FuYWx5emVyLm9ubWVhc3VyZWQgPSBhcnJheSA9PiB7XG4gICAgICBsZXQgZWRnZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gMCAmJiBhcnJheVtpICsgMV0gPT09IDEpIHtcbiAgICAgICAgICBlZGdlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRnZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgbGV0IGJldHdlZW4gPSAwO1xuICAgICAgICBsZXQgcHVsc2VNaW4gPSAwO1xuICAgICAgICBiZXR3ZWVuID0gKChlZGdlc1sxXSAtIGVkZ2VzWzBdKSAqIHRoaXMuaW50ZXJ2YWwpIC8gMTAwMC4wO1xuICAgICAgICBwdWxzZU1pbiA9IDYwIC8gYmV0d2VlbjtcbiAgICAgICAgY2FsbGJhY2socHVsc2VNaW4pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBnZXRXYWl0KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuc3RhcnQocmF0ZSA9PiB7XG4gICAgICAgIHJlc29sdmUocmF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBHcm92ZV9FYXJIZWFydFJhdGU7XG59XG4iXX0=
