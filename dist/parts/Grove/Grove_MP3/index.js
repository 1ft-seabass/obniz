"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Grove_MP3 {
    constructor() {
        this.keys = ['vcc', 'gnd', 'mp3_rx', 'mp3_tx'];
        this.requiredKeys = ['mp3_rx', 'mp3_tx'];
        this.ioKeys = this.keys;
        this.displayName = 'MP3';
        this.displayIoNames = { mp3_rx: 'MP3Rx', mp3_tx: 'MP3Tx' };
    }
    static info() {
        return {
            name: 'Grove_MP3',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.my_tx = this.params.mp3_rx;
        this.my_rx = this.params.mp3_tx;
        this.uart = this.obniz.getFreeUart();
    }
    initWait(strage) {
        return __awaiter(this, void 0, void 0, function* () {
            this.uart.start({
                tx: this.my_tx,
                rx: this.my_rx,
                baud: 9600,
            });
            yield this.obniz.wait(100);
            this.uartSend(0x0c, 0);
            yield this.obniz.wait(500);
            this.uartSend(0x0b, 0);
            yield this.obniz.wait(100);
            if (strage) {
                if (strage == 'usb') {
                    this.uartSend(0x09, 1);
                }
                else if (strage == 'sd') {
                    this.uartSend(0x09, 2);
                }
            }
            else {
                this.uartSend(0x09, 2);
            }
            yield this.obniz.wait(200);
        });
    }
    setVolume(vol) {
        if (vol >= 0 && vol <= 31) {
            this.uartSend(0x06, vol);
        }
    }
    volUp() {
        this.uartSend(0x04, 0);
    }
    volDown() {
        this.uartSend(0x05, 0);
    }
    play(track, folder) {
        //if (!folder) folder = {};
        if (folder) {
            this.uart.send([0x7e, 0xff, 0x06, 0x0f, 0x00, folder, track, 0xef]);
        }
        else {
            // Play 'MP3' folder
            this.uartSend(0x12, track);
        }
    }
    stop() {
        this.uartSend(0x16, 0);
    }
    pause() {
        this.uartSend(0x0e, 0);
    }
    resume() {
        this.uartSend(0x0d, 0);
    }
    next() {
        this.uartSend(0x01, 0);
    }
    prev() {
        this.uartSend(0x02, 0);
    }
    uartSend(command, param) {
        let paramM = param >> 8;
        let paramL = param & 0xff;
        this.uart.send([0x7e, 0xff, 0x06, command, 0x01, paramM, paramL, 0xef]);
        let response = this.uart.readBytes();
        return response;
        //return response;
    }
}
if (typeof module === 'object') {
    module.exports = Grove_MP3;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9NUDMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU0sU0FBUztJQUNiO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDVCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRWhDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUssUUFBUSxDQUFDLE1BQU07O1lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNkLEVBQUUsRUFB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QUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQyxPQUFPLFFBQVEsQ0FBQztRQUNoQixrQkFBa0I7SUFDcEIsQ0FBQztDQUNGO0FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7SUFDOUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7Q0FDNUIiLCJmaWxlIjoicGFydHMvR3JvdmUvR3JvdmVfTVAzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgR3JvdmVfTVAzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWyd2Y2MnLCAnZ25kJywgJ21wM19yeCcsICdtcDNfdHgnXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFsnbXAzX3J4JywgJ21wM190eCddO1xuXG4gICAgdGhpcy5pb0tleXMgPSB0aGlzLmtleXM7XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9ICdNUDMnO1xuICAgIHRoaXMuZGlzcGxheUlvTmFtZXMgPSB7IG1wM19yeDogJ01QM1J4JywgbXAzX3R4OiAnTVAzVHgnIH07XG4gIH1cblxuICBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ0dyb3ZlX01QMycsXG4gICAgfTtcbiAgfVxuXG4gIHdpcmVkKG9ibml6KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgJzV2Jyk7XG5cbiAgICB0aGlzLm15X3R4ID0gdGhpcy5wYXJhbXMubXAzX3J4O1xuICAgIHRoaXMubXlfcnggPSB0aGlzLnBhcmFtcy5tcDNfdHg7XG5cbiAgICB0aGlzLnVhcnQgPSB0aGlzLm9ibml6LmdldEZyZWVVYXJ0KCk7XG4gIH1cblxuICBhc3luYyBpbml0V2FpdChzdHJhZ2UpIHtcbiAgICB0aGlzLnVhcnQuc3RhcnQoe1xuICAgICAgdHg6IHRoaXMubXlfdHgsXG4gICAgICByeDogdGhpcy5teV9yeCxcbiAgICAgIGJhdWQ6IDk2MDAsXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5vYm5pei53YWl0KDEwMCk7XG4gICAgdGhpcy51YXJ0U2VuZCgweDBjLCAwKTtcbiAgICBhd2FpdCB0aGlzLm9ibml6LndhaXQoNTAwKTtcbiAgICB0aGlzLnVhcnRTZW5kKDB4MGIsIDApO1xuICAgIGF3YWl0IHRoaXMub2JuaXoud2FpdCgxMDApO1xuXG4gICAgaWYgKHN0cmFnZSkge1xuICAgICAgaWYgKHN0cmFnZSA9PSAndXNiJykge1xuICAgICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDEpO1xuICAgICAgfSBlbHNlIGlmIChzdHJhZ2UgPT0gJ3NkJykge1xuICAgICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVhcnRTZW5kKDB4MDksIDIpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLm9ibml6LndhaXQoMjAwKTtcbiAgfVxuXG4gIHNldFZvbHVtZSh2b2wpIHtcbiAgICBpZiAodm9sID49IDAgJiYgdm9sIDw9IDMxKSB7XG4gICAgICB0aGlzLnVhcnRTZW5kKDB4MDYsIHZvbCk7XG4gICAgfVxuICB9XG5cbiAgdm9sVXAoKSB7XG4gICAgdGhpcy51YXJ0U2VuZCgweDA0LCAwKTtcbiAgfVxuXG4gIHZvbERvd24oKSB7XG4gICAgdGhpcy51YXJ0U2VuZCgweDA1LCAwKTtcbiAgfVxuXG4gIHBsYXkodHJhY2ssIGZvbGRlcikge1xuICAgIC8vaWYgKCFmb2xkZXIpIGZvbGRlciA9IHt9O1xuICAgIGlmIChmb2xkZXIpIHtcbiAgICAgIHRoaXMudWFydC5zZW5kKFsweDdlLCAweGZmLCAweDA2LCAweDBmLCAweDAwLCBmb2xkZXIsIHRyYWNrLCAweGVmXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBsYXkgJ01QMycgZm9sZGVyXG4gICAgICB0aGlzLnVhcnRTZW5kKDB4MTIsIHRyYWNrKTtcbiAgICB9XG4gIH1cblxuICBzdG9wKCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgxNiwgMCk7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLnVhcnRTZW5kKDB4MGUsIDApO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgwZCwgMCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgwMSwgMCk7XG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMudWFydFNlbmQoMHgwMiwgMCk7XG4gIH1cblxuICB1YXJ0U2VuZChjb21tYW5kLCBwYXJhbSkge1xuICAgIGxldCBwYXJhbU0gPSBwYXJhbSA+PiA4O1xuICAgIGxldCBwYXJhbUwgPSBwYXJhbSAmIDB4ZmY7XG4gICAgdGhpcy51YXJ0LnNlbmQoWzB4N2UsIDB4ZmYsIDB4MDYsIGNvbW1hbmQsIDB4MDEsIHBhcmFtTSwgcGFyYW1MLCAweGVmXSk7XG4gICAgbGV0IHJlc3BvbnNlID0gdGhpcy51YXJ0LnJlYWRCeXRlcygpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgICAvL3JldHVybiByZXNwb25zZTtcbiAgfVxufVxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gR3JvdmVfTVAzO1xufVxuIl19
