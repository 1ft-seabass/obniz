"use strict";
class DCMotor {
    constructor() {
        this.keys = ['forward', 'back'];
        this.requiredKeys = ['forward', 'back'];
    }
    static info() {
        return {
            name: 'DCMotor',
        };
    }
    wired(obniz) {
        this.status = {
            direction: null,
            power: null,
        };
        this.pwm1_io_num = this.params.forward;
        this.pwm2_io_num = this.params.back;
        this.pwm1 = obniz.getFreePwm();
        this.pwm1.start({ io: this.pwm1_io_num });
        this.pwm1.freq(100000);
        this.pwm2 = obniz.getFreePwm();
        this.pwm2.start({ io: this.pwm2_io_num });
        this.pwm2.freq(100000);
        this.power(30);
    }
    // Module functions
    forward() {
        this.move(true);
    }
    reverse() {
        this.move(false);
    }
    stop() {
        if (this.status.direction === null) {
            return;
        }
        this.status.direction = null;
        this.pwm1.duty(0);
        this.pwm2.duty(0);
    }
    move(forward) {
        if (forward) {
            if (this.status.direction === true) {
                return;
            }
            this.status.direction = true;
        }
        else {
            if (this.status.direction === false) {
                return;
            }
            this.status.direction = false;
        }
        let power = this.power();
        this.power(0);
        this.power(power);
    }
    power(power) {
        if (power === undefined) {
            return this.status.power;
        }
        this.status.power = power;
        if (this.status.direction === null) {
            this.pwm1.duty(0);
            this.pwm2.duty(0);
            return;
        }
        if (this.status.direction) {
            this.pwm1.duty(power);
            this.pwm2.duty(0);
        }
        else {
            this.pwm1.duty(0);
            this.pwm2.duty(power);
        }
    }
}
if (typeof module === 'object') {
    module.exports = DCMotor;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxPQUFPO0lBQ1g7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTztZQUNMLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsbUJBQW1CO0lBRW5CLE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ2xDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQU87UUFDVixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO2dCQUNsQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO2dCQUNuQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDL0I7UUFDRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUMxQiIsImZpbGUiOiJwYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERDTW90b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbJ2ZvcndhcmQnLCAnYmFjayddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gWydmb3J3YXJkJywgJ2JhY2snXTtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnRENNb3RvcicsXG4gICAgfTtcbiAgfVxuXG4gIHdpcmVkKG9ibml6KSB7XG4gICAgdGhpcy5zdGF0dXMgPSB7XG4gICAgICBkaXJlY3Rpb246IG51bGwsXG4gICAgICBwb3dlcjogbnVsbCxcbiAgICB9O1xuXG4gICAgdGhpcy5wd20xX2lvX251bSA9IHRoaXMucGFyYW1zLmZvcndhcmQ7XG4gICAgdGhpcy5wd20yX2lvX251bSA9IHRoaXMucGFyYW1zLmJhY2s7XG5cbiAgICB0aGlzLnB3bTEgPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20xLnN0YXJ0KHsgaW86IHRoaXMucHdtMV9pb19udW0gfSk7XG4gICAgdGhpcy5wd20xLmZyZXEoMTAwMDAwKTtcbiAgICB0aGlzLnB3bTIgPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20yLnN0YXJ0KHsgaW86IHRoaXMucHdtMl9pb19udW0gfSk7XG4gICAgdGhpcy5wd20yLmZyZXEoMTAwMDAwKTtcbiAgICB0aGlzLnBvd2VyKDMwKTtcbiAgfVxuXG4gIC8vIE1vZHVsZSBmdW5jdGlvbnNcblxuICBmb3J3YXJkKCkge1xuICAgIHRoaXMubW92ZSh0cnVlKTtcbiAgfVxuXG4gIHJldmVyc2UoKSB7XG4gICAgdGhpcy5tb3ZlKGZhbHNlKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPSBudWxsO1xuICAgIHRoaXMucHdtMS5kdXR5KDApO1xuICAgIHRoaXMucHdtMi5kdXR5KDApO1xuICB9XG5cbiAgbW92ZShmb3J3YXJkKSB7XG4gICAgaWYgKGZvcndhcmQpIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0dXMuZGlyZWN0aW9uID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0dXMuZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgfVxuICAgIGxldCBwb3dlciA9IHRoaXMucG93ZXIoKTtcbiAgICB0aGlzLnBvd2VyKDApO1xuICAgIHRoaXMucG93ZXIocG93ZXIpO1xuICB9XG5cbiAgcG93ZXIocG93ZXIpIHtcbiAgICBpZiAocG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLnBvd2VyO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cy5wb3dlciA9IHBvd2VyO1xuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KDApO1xuICAgICAgdGhpcy5wd20yLmR1dHkoMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KHBvd2VyKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB3bTEuZHV0eSgwKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KHBvd2VyKTtcbiAgICB9XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRENNb3Rvcjtcbn1cbiJdfQ==
