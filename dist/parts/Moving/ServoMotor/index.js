"use strict";
class ServoMotor {
    constructor() {
        this.keys = ['gnd', 'vcc', 'signal', 'pwm'];
        this.requiredKeys = [];
        this.range = {
            min: 0.5,
            max: 2.4,
        };
    }
    static info() {
        return {
            name: 'ServoMotor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (obniz.isValidIO(this.params.vcc)) {
            this.io_vcc = obniz.getIO(this.params.vcc);
        }
        if (this.params.pwm) {
            this.pwm = this.params.pwm;
        }
        else {
            this.pwm = obniz.getFreePwm();
            this.pwm_io_num = this.params.signal;
            this.pwm.start({ io: this.pwm_io_num });
        }
        this.pwm.freq(50);
    }
    // Module functions
    angle(ratio) {
        let max = this.range.max;
        let min = this.range.min;
        let val = ((max - min) * ratio) / 180.0 + min;
        this.pwm.pulse(val);
    }
    on() {
        if (this.io_vcc) {
            this.io_vcc.output(true);
        }
    }
    off() {
        if (this.io_vcc) {
            this.io_vcc.output(false);
        }
    }
}
if (typeof module === 'object') {
    module.exports = ServoMotor;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvU2Vydm9Nb3Rvci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVO0lBQ2Q7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLEdBQUcsRUFBRSxHQUFHO1lBQ1IsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTztZQUNMLElBQUksRUFBRSxZQUFZO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUM1QjthQUFNO1lBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQkFBbUI7SUFFbkIsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN6QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN6QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELEVBQUU7UUFDQSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRCxHQUFHO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztDQUM3QiIsImZpbGUiOiJwYXJ0cy9Nb3ZpbmcvU2Vydm9Nb3Rvci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNlcnZvTW90b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbJ2duZCcsICd2Y2MnLCAnc2lnbmFsJywgJ3B3bSddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG5cbiAgICB0aGlzLnJhbmdlID0ge1xuICAgICAgbWluOiAwLjUsXG4gICAgICBtYXg6IDIuNCxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdTZXJ2b01vdG9yJyxcbiAgICB9O1xuICB9XG5cbiAgd2lyZWQob2JuaXopIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgJzV2Jyk7XG4gICAgaWYgKG9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy52Y2MpKSB7XG4gICAgICB0aGlzLmlvX3ZjYyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLnZjYyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFyYW1zLnB3bSkge1xuICAgICAgdGhpcy5wd20gPSB0aGlzLnBhcmFtcy5wd207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHdtID0gb2JuaXouZ2V0RnJlZVB3bSgpO1xuICAgICAgdGhpcy5wd21faW9fbnVtID0gdGhpcy5wYXJhbXMuc2lnbmFsO1xuICAgICAgdGhpcy5wd20uc3RhcnQoeyBpbzogdGhpcy5wd21faW9fbnVtIH0pO1xuICAgIH1cbiAgICB0aGlzLnB3bS5mcmVxKDUwKTtcbiAgfVxuXG4gIC8vIE1vZHVsZSBmdW5jdGlvbnNcblxuICBhbmdsZShyYXRpbykge1xuICAgIGxldCBtYXggPSB0aGlzLnJhbmdlLm1heDtcbiAgICBsZXQgbWluID0gdGhpcy5yYW5nZS5taW47XG4gICAgbGV0IHZhbCA9ICgobWF4IC0gbWluKSAqIHJhdGlvKSAvIDE4MC4wICsgbWluO1xuICAgIHRoaXMucHdtLnB1bHNlKHZhbCk7XG4gIH1cblxuICBvbigpIHtcbiAgICBpZiAodGhpcy5pb192Y2MpIHtcbiAgICAgIHRoaXMuaW9fdmNjLm91dHB1dCh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBvZmYoKSB7XG4gICAgaWYgKHRoaXMuaW9fdmNjKSB7XG4gICAgICB0aGlzLmlvX3ZjYy5vdXRwdXQoZmFsc2UpO1xuICAgIH1cbiAgfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTZXJ2b01vdG9yO1xufVxuIl19
