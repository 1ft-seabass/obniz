"use strict";
class WS2811 {
    constructor() {
        this.keys = ['din', 'vcc', 'gnd'];
        this.requiredKeys = ['din'];
    }
    static info() {
        return {
            name: 'WS2811',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.params.mode = 'master';
        this.params.frequency = 2 * 1000 * 1000;
        this.params.mosi = this.params.din;
        this.params.drive = '5v'; // It over spec for frequency. But VIN-HI require 0.7VCC<=.
        this.spi = this.obniz.getSpiWithConfig(this.params);
    }
    static _generateFromByte(val) {
        // T0H 0.5us+-0.15us
        // T1H 1.2us+-0.15us
        // T0L 2.0us+-0.15us
        // T1L 1.3us+-0.15us
        val = parseInt(val);
        const zero = 0x8;
        const one = 0xe;
        let ret = [];
        for (let i = 0; i < 8; i += 2) {
            let byte = 0;
            if (val & (0x80 >> i)) {
                byte = one << 4;
            }
            else {
                byte = zero << 4;
            }
            if (val & (0x80 >> (i + 1))) {
                byte |= one;
            }
            else {
                byte |= zero;
            }
            ret.push(byte);
        }
        return ret;
    }
    static _generateColor(r, g, b) {
        let array = WS2811._generateFromByte(r);
        array = array.concat(WS2811._generateFromByte(g));
        array = array.concat(WS2811._generateFromByte(b));
        return array;
    }
    static _generateHsvColor(h, s, v) {
        let C = v * s;
        let Hp = h / 60;
        let X = C * (1 - Math.abs((Hp % 2) - 1));
        let R, G, B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        let m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        let array = WS2811._generateFromByte(R);
        array = array.concat(WS2811._generateFromByte(G));
        array = array.concat(WS2811._generateFromByte(B));
        return array;
    }
    rgb(r, g, b) {
        this.spi.write(WS2811._generateColor(r, g, b));
    }
    hsv(h, s, v) {
        this.spi.write(WS2811._generateHsvColor(h, s, v));
    }
    rgbs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
    hsvs(array) {
        let bytes = [];
        for (let i = 0; i < array.length; i++) {
            const oneArray = array[i];
            bytes = bytes.concat(WS2811._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]));
        }
        this.spi.write(bytes);
    }
}
if (typeof module === 'object') {
    module.exports = WS2811;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9MaWdodC9XUzI4MTEvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sTUFBTTtJQUNWO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQywyREFBMkQ7UUFDckYsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUc7UUFDMUIsb0JBQW9CO1FBQ3BCLG9CQUFvQjtRQUNwQixvQkFBb0I7UUFDcEIsb0JBQW9CO1FBRXBCLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxD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QUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7SUFDOUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Q0FDekIiLCJmaWxlIjoicGFydHMvTGlnaHQvV1MyODExL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgV1MyODExIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWydkaW4nLCAndmNjJywgJ2duZCddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gWydkaW4nXTtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnV1MyODExJyxcbiAgICB9O1xuICB9XG5cbiAgd2lyZWQob2JuaXopIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsICc1dicpO1xuXG4gICAgdGhpcy5wYXJhbXMubW9kZSA9ICdtYXN0ZXInO1xuICAgIHRoaXMucGFyYW1zLmZyZXF1ZW5jeSA9IDIgKiAxMDAwICogMTAwMDtcbiAgICB0aGlzLnBhcmFtcy5tb3NpID0gdGhpcy5wYXJhbXMuZGluO1xuICAgIHRoaXMucGFyYW1zLmRyaXZlID0gJzV2JzsgLy8gSXQgb3ZlciBzcGVjIGZvciBmcmVxdWVuY3kuIEJ1dCBWSU4tSEkgcmVxdWlyZSAwLjdWQ0M8PS5cbiAgICB0aGlzLnNwaSA9IHRoaXMub2JuaXouZ2V0U3BpV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gIH1cblxuICBzdGF0aWMgX2dlbmVyYXRlRnJvbUJ5dGUodmFsKSB7XG4gICAgLy8gVDBIIDAuNXVzKy0wLjE1dXNcbiAgICAvLyBUMUggMS4ydXMrLTAuMTV1c1xuICAgIC8vIFQwTCAyLjB1cystMC4xNXVzXG4gICAgLy8gVDFMIDEuM3VzKy0wLjE1dXNcblxuICAgIHZhbCA9IHBhcnNlSW50KHZhbCk7XG4gICAgY29uc3QgemVybyA9IDB4ODtcbiAgICBjb25zdCBvbmUgPSAweGU7XG4gICAgbGV0IHJldCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSArPSAyKSB7XG4gICAgICBsZXQgYnl0ZSA9IDA7XG4gICAgICBpZiAodmFsICYgKDB4ODAgPj4gaSkpIHtcbiAgICAgICAgYnl0ZSA9IG9uZSA8PCA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnl0ZSA9IHplcm8gPDwgNDtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgJiAoMHg4MCA+PiAoaSArIDEpKSkge1xuICAgICAgICBieXRlIHw9IG9uZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ5dGUgfD0gemVybztcbiAgICAgIH1cbiAgICAgIHJldC5wdXNoKGJ5dGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIF9nZW5lcmF0ZUNvbG9yKHIsIGcsIGIpIHtcbiAgICBsZXQgYXJyYXkgPSBXUzI4MTEuX2dlbmVyYXRlRnJvbUJ5dGUocik7XG4gICAgYXJyYXkgPSBhcnJheS5jb25jYXQoV1MyODExLl9nZW5lcmF0ZUZyb21CeXRlKGcpKTtcbiAgICBhcnJheSA9IGFycmF5LmNvbmNhdChXUzI4MTEuX2dlbmVyYXRlRnJvbUJ5dGUoYikpO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHN0YXRpYyBfZ2VuZXJhdGVIc3ZDb2xvcihoLCBzLCB2KSB7XG4gICAgbGV0IEMgPSB2ICogcztcbiAgICBsZXQgSHAgPSBoIC8gNjA7XG4gICAgbGV0IFggPSBDICogKDEgLSBNYXRoLmFicygoSHAgJSAyKSAtIDEpKTtcblxuICAgIGxldCBSLCBHLCBCO1xuICAgIGlmICgwIDw9IEhwICYmIEhwIDwgMSkge1xuICAgICAgW1IsIEcsIEJdID0gW0MsIFgsIDBdO1xuICAgIH1cbiAgICBpZiAoMSA8PSBIcCAmJiBIcCA8IDIpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFtYLCBDLCAwXTtcbiAgICB9XG4gICAgaWYgKDIgPD0gSHAgJiYgSHAgPCAzKSB7XG4gICAgICBbUiwgRywgQl0gPSBbMCwgQywgWF07XG4gICAgfVxuICAgIGlmICgzIDw9IEhwICYmIEhwIDwgNCkge1xuICAgICAgW1IsIEcsIEJdID0gWzAsIFgsIENdO1xuICAgIH1cbiAgICBpZiAoNCA8PSBIcCAmJiBIcCA8IDUpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFtYLCAwLCBDXTtcbiAgICB9XG4gICAgaWYgKDUgPD0gSHAgJiYgSHAgPCA2KSB7XG4gICAgICBbUiwgRywgQl0gPSBbQywgMCwgWF07XG4gICAgfVxuXG4gICAgbGV0IG0gPSB2IC0gQztcbiAgICBbUiwgRywgQl0gPSBbUiArIG0sIEcgKyBtLCBCICsgbV07XG5cbiAgICBSID0gTWF0aC5mbG9vcihSICogMjU1KTtcbiAgICBHID0gTWF0aC5mbG9vcihHICogMjU1KTtcbiAgICBCID0gTWF0aC5mbG9vcihCICogMjU1KTtcblxuICAgIGxldCBhcnJheSA9IFdTMjgxMS5fZ2VuZXJhdGVGcm9tQnl0ZShSKTtcbiAgICBhcnJheSA9IGFycmF5LmNvbmNhdChXUzI4MTEuX2dlbmVyYXRlRnJvbUJ5dGUoRykpO1xuICAgIGFycmF5ID0gYXJyYXkuY29uY2F0KFdTMjgxMS5fZ2VuZXJhdGVGcm9tQnl0ZShCKSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgcmdiKHIsIGcsIGIpIHtcbiAgICB0aGlzLnNwaS53cml0ZShXUzI4MTEuX2dlbmVyYXRlQ29sb3IociwgZywgYikpO1xuICB9XG5cbiAgaHN2KGgsIHMsIHYpIHtcbiAgICB0aGlzLnNwaS53cml0ZShXUzI4MTEuX2dlbmVyYXRlSHN2Q29sb3IoaCwgcywgdikpO1xuICB9XG5cbiAgcmdicyhhcnJheSkge1xuICAgIGxldCBieXRlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9uZUFycmF5ID0gYXJyYXlbaV07XG4gICAgICBieXRlcyA9IGJ5dGVzLmNvbmNhdChcbiAgICAgICAgV1MyODExLl9nZW5lcmF0ZUNvbG9yKG9uZUFycmF5WzBdLCBvbmVBcnJheVsxXSwgb25lQXJyYXlbMl0pXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnNwaS53cml0ZShieXRlcyk7XG4gIH1cblxuICBoc3ZzKGFycmF5KSB7XG4gICAgbGV0IGJ5dGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgb25lQXJyYXkgPSBhcnJheVtpXTtcbiAgICAgIGJ5dGVzID0gYnl0ZXMuY29uY2F0KFxuICAgICAgICBXUzI4MTEuX2dlbmVyYXRlSHN2Q29sb3Iob25lQXJyYXlbMF0sIG9uZUFycmF5WzFdLCBvbmVBcnJheVsyXSlcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuc3BpLndyaXRlKGJ5dGVzKTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBXUzI4MTE7XG59XG4iXX0=
