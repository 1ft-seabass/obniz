export = ArduCAMMini;
declare class ArduCAMMini {
    static info(): {
        name: string;
    };
    keys: string[];
    requiredKeys: string[];
    ioKeys: string[];
    displayName: string;
    regs: {
        ARDUCHIP_TEST1: number;
        ARDUCHIP_MODE: number;
        ARDUCHIP_FIFO: number;
        BURST_FIFO_READ: number;
        ARDUCHIP_TRIG: number;
        FIFO_SIZE1: number;
        FIFO_SIZE2: number;
        FIFO_SIZE3: number;
    };
    configs: {
        OV2640_JPEG_INIT: number[][];
        OV2640_YUV422: number[][];
        OV2640_JPEG: number[][];
        OV2640_160x120_JPEG: number[][];
        OV2640_176x144_JPEG: number[][];
        OV2640_320x240_JPEG: number[][];
        OV2640_352x288_JPEG: number[][];
        OV2640_640x480_JPEG: number[][];
        OV2640_800x600_JPEG: number[][];
        OV2640_1024x768_JPEG: number[][];
        OV2640_1280x960_JPEG: number[][];
        OV2640_1600x1200_JPEG: number[][];
    };
    wired(obniz: any): void;
    io_cs: any;
    sensor_addr: number | undefined;
    spi: any;
    i2c: any;
    spi_write(addr: any, byteData: any): void;
    spi_readWait(addr: any): Promise<any>;
    i2c_byte_write(addr: any, byteData: any): void;
    i2c_regs_write(regs: any): void;
    spi_write_reg(addr: any, byteData: any): void;
    spi_read_regWait(addr: any): Promise<any>;
    spi_pingpongWait(): Promise<void>;
    setMode(mode: any): void;
    getChipIdWait(): Promise<any>;
    init(): void;
    startupWait(): Promise<void>;
    takeWait(size: any): Promise<any[]>;
    setSize(string: any): void;
    _size: any;
    updateFIFO(data: any): void;
    flushFIFO(): void;
    readFIFOLengthWait(): Promise<number>;
    startCapture(): void;
    isCaptureDoneWait(): Promise<boolean>;
    readFIFOWait(): Promise<any[]>;
    arrayToBase64(array: any): string;
}
