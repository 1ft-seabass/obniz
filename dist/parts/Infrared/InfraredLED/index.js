"use strict";
class InfraredLED {
    constructor() {
        this.keys = ['anode', 'cathode'];
        this.requiredKeys = ['anode'];
        this.dataSymbolLength = 0.07;
    }
    static info() {
        return {
            name: 'InfraredLED',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        if (!this.obniz.isValidIO(this.params.anode)) {
            throw new Error('anode is not valid io');
        }
        if (this.params.cathode) {
            if (!this.obniz.isValidIO(this.params.cathode)) {
                throw new Error('cathode is not valid io');
            }
            this.io_cathode = obniz.getIO(this.params.cathode);
            this.io_cathode.output(false);
        }
        this.pwm = this.obniz.getFreePwm();
        this.pwm.start({ io: this.params.anode });
        this.pwm.freq(38000);
        this.obniz.wait(150); // TODO: this is instant fix for pwm start delay
    }
    send(arr) {
        if (arr && arr.length > 0 && arr[arr.length - 1] === 1) {
            arr.push(0);
        }
        this.pwm.modulate('am', this.dataSymbolLength, arr);
    }
}
if (typeof module === 'object') {
    module.exports = InfraredLED;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JbmZyYXJlZExFRC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxXQUFXO0lBQ2Y7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU87WUFDTCxJQUFJLEVBQUUsYUFBYTtTQUNwQixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0RBQWdEO0lBQ3hFLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRztRQUNOLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0RCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2I7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO0NBQzlCIiwiZmlsZSI6InBhcnRzL0luZnJhcmVkL0luZnJhcmVkTEVEL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSW5mcmFyZWRMRUQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbJ2Fub2RlJywgJ2NhdGhvZGUnXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFsnYW5vZGUnXTtcblxuICAgIHRoaXMuZGF0YVN5bWJvbExlbmd0aCA9IDAuMDc7XG4gIH1cblxuICBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ0luZnJhcmVkTEVEJyxcbiAgICB9O1xuICB9XG5cbiAgd2lyZWQob2JuaXopIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG4gICAgaWYgKCF0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5hbm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYW5vZGUgaXMgbm90IHZhbGlkIGlvJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcmFtcy5jYXRob2RlKSB7XG4gICAgICBpZiAoIXRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmNhdGhvZGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2F0aG9kZSBpcyBub3QgdmFsaWQgaW8nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW9fY2F0aG9kZSA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmNhdGhvZGUpO1xuICAgICAgdGhpcy5pb19jYXRob2RlLm91dHB1dChmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMucHdtID0gdGhpcy5vYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20uc3RhcnQoeyBpbzogdGhpcy5wYXJhbXMuYW5vZGUgfSk7XG4gICAgdGhpcy5wd20uZnJlcSgzODAwMCk7XG4gICAgdGhpcy5vYm5pei53YWl0KDE1MCk7IC8vIFRPRE86IHRoaXMgaXMgaW5zdGFudCBmaXggZm9yIHB3bSBzdGFydCBkZWxheVxuICB9XG5cbiAgc2VuZChhcnIpIHtcbiAgICBpZiAoYXJyICYmIGFyci5sZW5ndGggPiAwICYmIGFyclthcnIubGVuZ3RoIC0gMV0gPT09IDEpIHtcbiAgICAgIGFyci5wdXNoKDApO1xuICAgIH1cbiAgICB0aGlzLnB3bS5tb2R1bGF0ZSgnYW0nLCB0aGlzLmRhdGFTeW1ib2xMZW5ndGgsIGFycik7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gSW5mcmFyZWRMRUQ7XG59XG4iXX0=
