"use strict";
class IRSensor {
    constructor() {
        this.keys = ['output', 'vcc', 'gnd'];
        this.requiredKeys = ['output'];
        this.dataSymbolLength = 0.07;
        this.duration = 500; // 500msec
        this.dataInverted = true;
        this.triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal
        this.cutTail = false;
        this.output_pullup = true;
    }
    static info() {
        return {
            name: 'IRSensor',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (!obniz.isValidIO(this.params.output)) {
            throw new Error('output is not valid io');
        }
    }
    start(callback) {
        this.ondetect = callback;
        if (this.output_pullup) {
            this.obniz.getIO(this.params.output).pull('5v');
        }
        this.obniz.logicAnalyzer.start({
            io: this.params.output,
            interval: this.dataSymbolLength,
            duration: this.duration,
            triggerValue: this.dataInverted ? false : true,
            triggerValueSamples: this.triggerSampleCount,
        });
        this.obniz.logicAnalyzer.onmeasured = levels => {
            if (typeof this.ondetect === 'function') {
                if (this.dataInverted) {
                    let arr = new Uint8Array(levels);
                    for (let i = 0; i < arr.length; i++) {
                        arr[i] = arr[i] ? 0 : 1;
                    }
                    levels = Array.from(arr);
                }
                if (this.cutTail) {
                    for (let i = levels.length - 1; i > 1; i--) {
                        if (levels[i] === 0 && levels[i - 1] === 0) {
                            levels.splice(i, 1);
                        }
                        else {
                            break;
                        }
                    }
                }
                this.ondetect(levels);
            }
        };
    }
}
if (typeof module === 'object') {
    module.exports = IRSensor;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUlNlbnNvci9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxRQUFRO0lBQ1o7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVU7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQyxDQUFDLCtEQUErRDtRQUM3RixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDVCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFVBQVU7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakQ7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDN0IsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUMvQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUM5QyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1NBQzdDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsRUFBRTtZQUM3QyxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7Z0JBQ3ZDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtvQkFDckIsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDekI7b0JBQ0QsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzFCO2dCQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUMxQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7NEJBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3lCQUNyQjs2QkFBTTs0QkFDTCxNQUFNO3lCQUNQO3FCQUNGO2lCQUNGO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztDQUMzQiIsImZpbGUiOiJwYXJ0cy9JbmZyYXJlZC9JUlNlbnNvci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElSU2Vuc29yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWydvdXRwdXQnLCAndmNjJywgJ2duZCddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gWydvdXRwdXQnXTtcblxuICAgIHRoaXMuZGF0YVN5bWJvbExlbmd0aCA9IDAuMDc7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDUwMDsgLy8gNTAwbXNlY1xuICAgIHRoaXMuZGF0YUludmVydGVkID0gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXJTYW1wbGVDb3VudCA9IDE2OyAvLyBJZiBTaWduYWwgYXJyaXZlcyBtb3JlIHRoYW4gdGhpcyBjb3VudC4gdGhlbiB0cmVhdCBhcyBzaWduYWxcbiAgICB0aGlzLmN1dFRhaWwgPSBmYWxzZTtcbiAgICB0aGlzLm91dHB1dF9wdWxsdXAgPSB0cnVlO1xuICB9XG5cbiAgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdJUlNlbnNvcicsXG4gICAgfTtcbiAgfVxuXG4gIHdpcmVkKG9ibml6KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgJzV2Jyk7XG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMub3V0cHV0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXQgaXMgbm90IHZhbGlkIGlvJyk7XG4gICAgfVxuICB9XG5cbiAgc3RhcnQoY2FsbGJhY2spIHtcbiAgICB0aGlzLm9uZGV0ZWN0ID0gY2FsbGJhY2s7XG4gICAgaWYgKHRoaXMub3V0cHV0X3B1bGx1cCkge1xuICAgICAgdGhpcy5vYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5vdXRwdXQpLnB1bGwoJzV2Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5vYm5pei5sb2dpY0FuYWx5emVyLnN0YXJ0KHtcbiAgICAgIGlvOiB0aGlzLnBhcmFtcy5vdXRwdXQsXG4gICAgICBpbnRlcnZhbDogdGhpcy5kYXRhU3ltYm9sTGVuZ3RoLFxuICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb24sXG4gICAgICB0cmlnZ2VyVmFsdWU6IHRoaXMuZGF0YUludmVydGVkID8gZmFsc2UgOiB0cnVlLFxuICAgICAgdHJpZ2dlclZhbHVlU2FtcGxlczogdGhpcy50cmlnZ2VyU2FtcGxlQ291bnQsXG4gICAgfSk7XG4gICAgdGhpcy5vYm5pei5sb2dpY0FuYWx5emVyLm9ubWVhc3VyZWQgPSBsZXZlbHMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uZGV0ZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFJbnZlcnRlZCkge1xuICAgICAgICAgIGxldCBhcnIgPSBuZXcgVWludDhBcnJheShsZXZlbHMpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJbaV0gPSBhcnJbaV0gPyAwIDogMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV2ZWxzID0gQXJyYXkuZnJvbShhcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY3V0VGFpbCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSBsZXZlbHMubGVuZ3RoIC0gMTsgaSA+IDE7IGktLSkge1xuICAgICAgICAgICAgaWYgKGxldmVsc1tpXSA9PT0gMCAmJiBsZXZlbHNbaSAtIDFdID09PSAwKSB7XG4gICAgICAgICAgICAgIGxldmVscy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uZGV0ZWN0KGxldmVscyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBJUlNlbnNvcjtcbn1cbiJdfQ==
