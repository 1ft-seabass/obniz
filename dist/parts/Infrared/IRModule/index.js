"use strict";
class IRModule {
    constructor() {
        this.keys = ['recv', 'vcc', 'send', 'gnd'];
        this.requiredKeys = ['recv', 'send'];
    }
    static info() {
        return {
            name: 'IRModule',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        if (!obniz.isValidIO(this.params.recv)) {
            throw new Error('recv is not valid io');
        }
        if (!obniz.isValidIO(this.params.send)) {
            throw new Error('send is not valid io');
        }
        this.sensor = obniz.wired('IRSensor', {
            output: this.params.recv,
        });
        this.setGetterSetter('sensor', 'duration');
        this.setGetterSetter('sensor', 'dataInverted');
        this.setGetterSetter('sensor', 'cutTail');
        this.setGetterSetter('sensor', 'output_pullup');
        this.setGetterSetter('sensor', 'ondetect');
        this.led = obniz.wired('InfraredLED', {
            anode: this.params.send,
        });
    }
    //link
    send(arr) {
        this.led.send(arr);
    }
    start(callback) {
        this.sensor.start(callback);
    }
    get dataSymbolLength() {
        return this.sensor.dataSymbolLength;
    }
    set dataSymbolLength(x) {
        this.sensor.dataSymbolLength = x;
        this.led.dataSymbolLength = x;
    }
    setGetterSetter(partsName, varName) {
        Object.defineProperty(this, varName, {
            get() {
                return this[partsName][varName];
            },
            set(x) {
                this[partsName][varName] = x;
            },
        });
    }
}
if (typeof module === 'object') {
    module.exports = IRModule;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxRQUFRO0lBQ1o7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDVCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFVBQVU7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07SUFDTixJQUFJLENBQUMsR0FBRztRQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksZ0JBQWdCLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsZUFBZSxDQUFDLFNBQVMsRUFBRSxPQUFPO1FBQ2hDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUNuQyxHQUFHO2dCQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFDRCxHQUFHLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztDQUMzQiIsImZpbGUiOiJwYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElSTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWydyZWN2JywgJ3ZjYycsICdzZW5kJywgJ2duZCddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gWydyZWN2JywgJ3NlbmQnXTtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnSVJNb2R1bGUnLFxuICAgIH07XG4gIH1cblxuICB3aXJlZChvYm5peikge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsICc1dicpO1xuXG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMucmVjdikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVjdiBpcyBub3QgdmFsaWQgaW8nKTtcbiAgICB9XG5cbiAgICBpZiAoIW9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5zZW5kKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZW5kIGlzIG5vdCB2YWxpZCBpbycpO1xuICAgIH1cblxuICAgIHRoaXMuc2Vuc29yID0gb2JuaXoud2lyZWQoJ0lSU2Vuc29yJywge1xuICAgICAgb3V0cHV0OiB0aGlzLnBhcmFtcy5yZWN2LFxuICAgIH0pO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKCdzZW5zb3InLCAnZHVyYXRpb24nKTtcbiAgICB0aGlzLnNldEdldHRlclNldHRlcignc2Vuc29yJywgJ2RhdGFJbnZlcnRlZCcpO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKCdzZW5zb3InLCAnY3V0VGFpbCcpO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKCdzZW5zb3InLCAnb3V0cHV0X3B1bGx1cCcpO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKCdzZW5zb3InLCAnb25kZXRlY3QnKTtcblxuICAgIHRoaXMubGVkID0gb2JuaXoud2lyZWQoJ0luZnJhcmVkTEVEJywge1xuICAgICAgYW5vZGU6IHRoaXMucGFyYW1zLnNlbmQsXG4gICAgfSk7XG4gIH1cblxuICAvL2xpbmtcbiAgc2VuZChhcnIpIHtcbiAgICB0aGlzLmxlZC5zZW5kKGFycik7XG4gIH1cblxuICBzdGFydChjYWxsYmFjaykge1xuICAgIHRoaXMuc2Vuc29yLnN0YXJ0KGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldCBkYXRhU3ltYm9sTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLnNlbnNvci5kYXRhU3ltYm9sTGVuZ3RoO1xuICB9XG5cbiAgc2V0IGRhdGFTeW1ib2xMZW5ndGgoeCkge1xuICAgIHRoaXMuc2Vuc29yLmRhdGFTeW1ib2xMZW5ndGggPSB4O1xuICAgIHRoaXMubGVkLmRhdGFTeW1ib2xMZW5ndGggPSB4O1xuICB9XG5cbiAgc2V0R2V0dGVyU2V0dGVyKHBhcnRzTmFtZSwgdmFyTmFtZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB2YXJOYW1lLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3BhcnRzTmFtZV1bdmFyTmFtZV07XG4gICAgICB9LFxuICAgICAgc2V0KHgpIHtcbiAgICAgICAgdGhpc1twYXJ0c05hbWVdW3Zhck5hbWVdID0geDtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gSVJNb2R1bGU7XG59XG4iXX0=
