"use strict";
class Puls08M5stickcS {
    constructor() {
        this.keys = ['vcc', 'gnd', 'tx', 'rx'];
        this.requiredKeys = ['tx', 'rx'];
        this.delimiter = 0x0a;
    }
    static info() {
        return {
            name: 'Puls08M5stickcS',
        };
    }
    onbpmupdate(data) {
        return;
    }
    onrawupdate(data) {
        return;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, '5v');
        this.uart = obniz.getFreeUart();
        this.uart.start({ tx: this.params.tx, rx: this.params.rx, baud: 19200 });
        this.receivingData = [];
        this.init();
        this.uart.onreceive = (data, text) => {
            let dataToCallback = [];
            data.forEach(e => {
                if (e !== this.delimiter) {
                    this.receivingData.push(e);
                    return;
                }
                else {
                    let row = this.receivingData;
                    if (row[0] === '#'.charCodeAt(0)) {
                        row[0] = ' '.charCodeAt(0);
                        let str = this.decode(row);
                        let val = parseInt(str);
                        let bpm = val > 0 ? 60000 / val : null;
                        this.onbpmupdate(bpm);
                    }
                    else {
                        let str = this.decode(row);
                        let val = parseInt(str);
                        dataToCallback.push(val);
                    }
                    this.receivingData = [];
                }
            });
            if (dataToCallback.length > 0) {
                this.onrawupdate(dataToCallback);
            }
        };
    }
    decode(data) {
        return Buffer.from(data).toString('utf8');
        // if (typeof TextDecoder !== 'undefined') {
        //   let enc = new TextDecoder('utf-8');
        //   let arr = new Uint8Array(data);
        //   return enc.decode(arr);
        // } else if (typeof Buffer !== 'undefined') {
        // return Buffer.from(data).toString('utf8');
        // }
        // throw new Error('cannot decode');
    }
    init() {
        this.uart.send('@OF30');
        this.uart.send(0x0a);
        this.uart.send('@RG2');
        this.uart.send(0x0a);
    }
}
if (typeof module === 'object') {
    module.exports = Puls08M5stickcS;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9CaW9sb2dpY2FsL1BVTFNFMDgtTTVTVElDS0MtUy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxlQUFlO0lBQ25CO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTztZQUNMLElBQUksRUFBRSxpQkFBaUI7U0FDeEIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBSTtRQUNkLE9BQU87SUFDVCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQUk7UUFDZCxPQUFPO0lBQ1QsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRVosSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDbkMsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLE9BQU87aUJBQ1I7cUJBQU07b0JBQ0wsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztvQkFDN0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDaEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQzNCLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDeEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN2Qjt5QkFBTTt3QkFDTCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUMzQixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3hCLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQzFCO29CQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO2lCQUN6QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNsQztRQUNILENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsNENBQTRDO1FBQzVDLHdDQUF3QztRQUN4QyxvQ0FBb0M7UUFDcEMsNEJBQTRCO1FBQzVCLDhDQUE4QztRQUM5Qyw2Q0FBNkM7UUFDN0MsSUFBSTtRQUNKLG9DQUFvQztJQUN0QyxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDO0NBQ2xDIiwiZmlsZSI6InBhcnRzL0Jpb2xvZ2ljYWwvUFVMU0UwOC1NNVNUSUNLQy1TL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUHVsczA4TTVzdGlja2NTIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWyd2Y2MnLCAnZ25kJywgJ3R4JywgJ3J4J107XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbJ3R4JywgJ3J4J107XG4gICAgdGhpcy5kZWxpbWl0ZXIgPSAweDBhO1xuICB9XG5cbiAgc3RhdGljIGluZm8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdQdWxzMDhNNXN0aWNrY1MnLFxuICAgIH07XG4gIH1cblxuICBvbmJwbXVwZGF0ZShkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb25yYXd1cGRhdGUoZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdpcmVkKG9ibml6KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgb2JuaXouc2V0VmNjR25kKHRoaXMucGFyYW1zLnZjYywgdGhpcy5wYXJhbXMuZ25kLCAnNXYnKTtcbiAgICB0aGlzLnVhcnQgPSBvYm5pei5nZXRGcmVlVWFydCgpO1xuICAgIHRoaXMudWFydC5zdGFydCh7IHR4OiB0aGlzLnBhcmFtcy50eCwgcng6IHRoaXMucGFyYW1zLnJ4LCBiYXVkOiAxOTIwMCB9KTtcbiAgICB0aGlzLnJlY2VpdmluZ0RhdGEgPSBbXTtcblxuICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgdGhpcy51YXJ0Lm9ucmVjZWl2ZSA9IChkYXRhLCB0ZXh0KSA9PiB7XG4gICAgICBsZXQgZGF0YVRvQ2FsbGJhY2sgPSBbXTtcbiAgICAgIGRhdGEuZm9yRWFjaChlID0+IHtcbiAgICAgICAgaWYgKGUgIT09IHRoaXMuZGVsaW1pdGVyKSB7XG4gICAgICAgICAgdGhpcy5yZWNlaXZpbmdEYXRhLnB1c2goZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCByb3cgPSB0aGlzLnJlY2VpdmluZ0RhdGE7XG4gICAgICAgICAgaWYgKHJvd1swXSA9PT0gJyMnLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgICAgIHJvd1swXSA9ICcgJy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgbGV0IHN0ciA9IHRoaXMuZGVjb2RlKHJvdyk7XG4gICAgICAgICAgICBsZXQgdmFsID0gcGFyc2VJbnQoc3RyKTtcbiAgICAgICAgICAgIGxldCBicG0gPSB2YWwgPiAwID8gNjAwMDAgLyB2YWwgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbmJwbXVwZGF0ZShicG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc3RyID0gdGhpcy5kZWNvZGUocm93KTtcbiAgICAgICAgICAgIGxldCB2YWwgPSBwYXJzZUludChzdHIpO1xuICAgICAgICAgICAgZGF0YVRvQ2FsbGJhY2sucHVzaCh2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlY2VpdmluZ0RhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZGF0YVRvQ2FsbGJhY2subGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLm9ucmF3dXBkYXRlKGRhdGFUb0NhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZGVjb2RlKGRhdGEpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ3V0ZjgnKTtcblxuICAgIC8vIGlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gICBsZXQgZW5jID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xuICAgIC8vICAgbGV0IGFyciA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIC8vICAgcmV0dXJuIGVuYy5kZWNvZGUoYXJyKTtcbiAgICAvLyB9IGVsc2UgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgLy8gfVxuICAgIC8vIHRocm93IG5ldyBFcnJvcignY2Fubm90IGRlY29kZScpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnVhcnQuc2VuZCgnQE9GMzAnKTtcbiAgICB0aGlzLnVhcnQuc2VuZCgweDBhKTtcbiAgICB0aGlzLnVhcnQuc2VuZCgnQFJHMicpO1xuICAgIHRoaXMudWFydC5zZW5kKDB4MGEpO1xuICB9XG59XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFB1bHMwOE01c3RpY2tjUztcbn1cbiJdfQ==
