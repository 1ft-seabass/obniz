export = MFRC522;
declare class MFRC522 {
    static info(): {
        name: string;
    };
    PCD_Idle: number;
    PCD_Mem: number;
    PCD_GenerateRandomID: number;
    PCD_CalcCRC: number;
    PCD_Transmit: number;
    PCD_NoCmdChange: number;
    PCD_Receive: number;
    PCD_Transceive: number;
    PCD_MFAuthent: number;
    PCD_SoftReset: number;
    RxGain_18dB: number;
    RxGain_23dB: number;
    RxGain_18dB_2: number;
    RxGain_23dB_2: number;
    RxGain_33dB: number;
    RxGain_38dB: number;
    RxGain_43dB: number;
    RxGain_48dB: number;
    RxGain_min: number;
    RxGain_avg: number;
    RxGain_max: number;
    PICC_REQA: number;
    PICC_WUPA: number;
    PICC_CT: number;
    PICC_SEL_CL1: number;
    PICC_SEL_CL2: number;
    PICC_SEL_CL3: number;
    PICC_HLTA: number;
    PICC_RATS: number;
    PICC_AUTH_KEYA: number;
    PICC_AUTH_KEYB: number;
    PICC_READ: number;
    PICC_WRITE: number;
    PICC_DECREMENT: number;
    PICC_INCREMENT: number;
    PICC_RESTORE: number;
    PICC_TRANSFER: number;
    PICC_UL_WRITE: number;
    PICC_SElECTTAG: number;
    CommandReg: number;
    ComlEnReg: number;
    DivlEnReg: number;
    ComIrqReg: number;
    DivIrqReg: number;
    ErrorReg: number;
    Status1Reg: number;
    Status2Reg: number;
    FIFODataReg: number;
    FIFOLevelReg: number;
    WaterLevelReg: number;
    ControlReg: number;
    BitFramingReg: number;
    CollReg: number;
    ModeReg: number;
    TxModeReg: number;
    RxModeReg: number;
    TxControlReg: number;
    TxASKReg: number;
    TxSelReg: number;
    RxSelReg: number;
    RxThresholdReg: number;
    DemodReg: number;
    Reserved1Ah: number;
    Reserved1Bh: number;
    MfTxReg: number;
    MfRxReg: number;
    Reserved1Eh: number;
    SerialSpeedReg: number;
    CRCResultRegMSB: number;
    CRCResultRegLSB: number;
    ModWidthReg: number;
    RFCfgReg: number;
    GsNReg: number;
    CWGsPReg: number;
    ModGsPReg: number;
    TModeReg: number;
    TPrescalerReg: number;
    TReloadRegHi: number;
    TReloadRegLo: number;
    TCounterValRegHi: number;
    TCounterValRegLo: number;
    TestSel1Reg: number;
    TestSel2Reg: number;
    TestPinEnReg: number;
    TestPinValueReg: number;
    TestBusReg: number;
    AutoTestReg: number;
    VersionReg: number;
    AnalogTestReg: number;
    TestDAC1Reg: number;
    TestDAC2Reg: number;
    TestADCReg: number;
    keys: string[];
    required: string[];
    wired(obniz: any): void;
    obniz: any;
    rst: any;
    cs: any;
    spi: any;
    init(): Promise<void>;
    writeRegister(addr: any, val: any): void;
    readRegister(addr: any): Promise<any>;
    readRegister_nByte(addr: any, n: any): Promise<any>;
    setRegisterBitMask(reg: any, mask: any): Promise<void>;
    clearRegisterBitMask(reg: any, mask: any): Promise<void>;
    antennaOn(): Promise<void>;
    antennaOff(): Promise<void>;
    toCard(command: any, bitsToSend: any): Promise<{
        status: boolean;
        data: any;
        bitSize: number;
    }>;
    findCardWait(): Promise<{
        uid: number[];
        PICC_Type: string;
    }>;
    searchTagWait(): Promise<void>;
    getUidWait(): Promise<number[]>;
    calculateCRCWait(data: any): Promise<any>;
    identifySoftwareWait(): Promise<any>;
    identifyCardTypeWait(uid: any): Promise<string>;
    readSectorDataWait(Sector: any, uid: any): Promise<any[]>;
    readBlockDataWait(Block: any, uid: any): Promise<any>;
    authenticateSectorWait(Sector: any, uid: any): Promise<void>;
    authenticateBlockWait(Block: any, uid: any): Promise<void>;
    readAgainWait(): Promise<void>;
    getSectorDataWait(address: any): Promise<any[]>;
    getBlockDataWait(address: any): Promise<any>;
    appendCRCtoBufferAndSendToCardWait(buffer: any): Promise<{
        status: boolean;
        data: any;
        bitSize: number;
    }>;
    writeBlockDataWait(Block: any, sixteenBytes: any): Promise<void>;
}
