"use strict";
class MQ5 {
    // https://www.parallax.com/sites/default/files/downloads/605-00009-MQ-5-Datasheet.pdf
    constructor() {
        this.keys = ['gnd', 'vcc', 'do', 'ao'];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: 'MQ5',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start(voltage => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog == 'function') {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit == 'number' &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage == 'function') {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input(value => {
                if (typeof this.onchangedigital == 'function') {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, '5v');
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise(resolve => {
            setTimeout(resolve, seconds);
        });
    }
}
if (typeof module === 'object') {
    module.exports = MQ5;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE1L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEdBQUc7SUFDUCxzRkFBc0Y7SUFDdEY7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7UUFFOUIsc0JBQXNCO1FBQ3RCLHVCQUF1QjtJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDVCxPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBRTNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEIsbUNBQW1DO2dCQUNuQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxVQUFVLEVBQUU7b0JBQzVDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzlCO2dCQUNELElBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxJQUFJLFFBQVE7b0JBQ3BDLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTztvQkFDNUIsT0FBTyxJQUFJLENBQUMsZUFBZSxJQUFJLFVBQVUsRUFDekM7b0JBQ0EsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDL0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNwQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsSUFBSSxVQUFVLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxRQUFRLENBQUMsT0FBTztRQUNkLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDZixPQUFPLElBQUksSUFBSSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBZ0JGO0FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7SUFDOUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7Q0FDdEIiLCJmaWxlIjoicGFydHMvR2FzU2Vuc29yL01RNS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RNSB7XG4gIC8vIGh0dHBzOi8vd3d3LnBhcmFsbGF4LmNvbS9zaXRlcy9kZWZhdWx0L2ZpbGVzL2Rvd25sb2Fkcy82MDUtMDAwMDktTVEtNS1EYXRhc2hlZXQucGRmXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFsnZ25kJywgJ3ZjYycsICdkbycsICdhbyddO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG5cbiAgICB0aGlzLm9uY2hhbmdlYW5hbG9nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25leGNlZWR2b2x0YWdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudm9sdGFnZUxpbWl0ID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gdGhpcy5STCA9IDIgKiAxMDAwO1xuICAgIC8vIHRoaXMuUk8gPSAyMCAqIDEwMDA7XG4gIH1cblxuICBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ01RNScsXG4gICAgfTtcbiAgfVxuXG4gIHdpcmVkKG9ibml6KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCh2b2x0YWdlID0+IHtcbiAgICAgICAgLy8gdGhpcy5sZXZlbCA9IHRoaXMuY2FsYyh2b2x0YWdlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlYW5hbG9nID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlYW5hbG9nKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgdGhpcy52b2x0YWdlTGltaXQgPT0gJ251bWJlcicgJiZcbiAgICAgICAgICB0aGlzLnZvbHRhZ2VMaW1pdCA8PSB2b2x0YWdlICYmXG4gICAgICAgICAgdHlwZW9mIHRoaXMub25leGNlZWR2b2x0YWdlID09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2Uodm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5kbykpIHtcbiAgICAgIHRoaXMuZG8gPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5kbyk7XG4gICAgICB0aGlzLmRvLmlucHV0KHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlZGlnaXRhbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCAnNXYnKTtcbiAgfVxuXG4gIGhlYXRXYWl0KHNlY29uZHMpIHtcbiAgICB0aGlzLnN0YXJ0SGVhdGluZygpO1xuICAgIGlmIChzZWNvbmRzID4gMCkge1xuICAgICAgc2Vjb25kcyAqPSAxMDAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWNvbmRzID0gMiAqIDYwICogMTAwMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09IDApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBNUTU7XG59XG4iXX0=
