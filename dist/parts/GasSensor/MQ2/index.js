"use strict";
class MQ2 {
    constructor() {
        this.keys = ['gnd', 'vcc', 'do', 'ao'];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: 'MQ2',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start(voltage => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog == 'function') {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit == 'number' &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage == 'function') {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input(value => {
                if (typeof this.onchangedigital == 'function') {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, '5v');
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise(resolve => {
            setTimeout(resolve, seconds);
        });
    }
}
if (typeof module === 'object') {
    module.exports = MQ2;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVEyL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEdBQUc7SUFDUDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUU5QixzQkFBc0I7UUFDdEIsdUJBQXVCO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU87WUFDTCxJQUFJLEVBQUUsS0FBSztTQUNaLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN0QixtQ0FBbUM7Z0JBQ25DLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxJQUFJLFVBQVUsRUFBRTtvQkFDNUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDOUI7Z0JBQ0QsSUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLElBQUksUUFBUTtvQkFDcEMsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPO29CQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLElBQUksVUFBVSxFQUN6QztvQkFDQSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMvQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksT0FBTyxJQUFJLENBQUMsZUFBZSxJQUFJLFVBQVUsRUFBRTtvQkFDN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDN0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUFPO1FBQ2QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsVUFBVSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FnQkY7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztDQUN0QiIsImZpbGUiOiJwYXJ0cy9HYXNTZW5zb3IvTVEyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTVEyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWydnbmQnLCAndmNjJywgJ2RvJywgJ2FvJ107XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnTVEyJyxcbiAgICB9O1xuICB9XG5cbiAgd2lyZWQob2JuaXopIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLnZjYyA9IHRoaXMucGFyYW1zLnZjYztcbiAgICB0aGlzLmduZCA9IHRoaXMucGFyYW1zLmduZDtcblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5hbykpIHtcbiAgICAgIHRoaXMuYWQgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5hbyk7XG4gICAgICB0aGlzLmFkLnN0YXJ0KHZvbHRhZ2UgPT4ge1xuICAgICAgICAvLyB0aGlzLmxldmVsID0gdGhpcy5jYWxjKHZvbHRhZ2UpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VhbmFsb2cgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VhbmFsb2codm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0aGlzLnZvbHRhZ2VMaW1pdCA9PSAnbnVtYmVyJyAmJlxuICAgICAgICAgIHRoaXMudm9sdGFnZUxpbWl0IDw9IHZvbHRhZ2UgJiZcbiAgICAgICAgICB0eXBlb2YgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9uZXhjZWVkdm9sdGFnZSh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmRvKSkge1xuICAgICAgdGhpcy5kbyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmRvKTtcbiAgICAgIHRoaXMuZG8uaW5wdXQodmFsdWUgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0SGVhdGluZygpIHtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnZjYywgdGhpcy5nbmQsICc1dicpO1xuICB9XG5cbiAgaGVhdFdhaXQoc2Vjb25kcykge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHNlY29uZHMpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gUnMvUm8gd2lsbCBkZXNjcmVhc2UgYnkgaW5zZWFzZSBvZiBnYXMuXG4gIC8vIFJzID0gcmVzaXRhbmNlIDIway0xMDBrLiBSbyA9IHJlc2lzdGFuY2Ugb2YgMTAwMHBwbSBMUEdcbiAgLy8gSWYgUkwgPVxuXG4gIC8vIGNhbGModm9sdGFnZSkge1xuXG4gIC8vICAgaWYgKHZvbHRhZ2UgPT0gMCkge1xuICAvLyAgICAgdm9sdGFnZSA9IDAuMDAwMDAxXG4gIC8vICAgfVxuICAvLyAgIGNvbnN0IFJTID0gdGhpcy5STCAvIHZvbHRhZ2UgKiA1LjBcbiAgLy8gICBjb25zdCByYXRpbyA9IFJTIC8gdGhpcy5STztcblxuICAvLyAgIHJldHVybiB2b2x0YWdlO1xuICAvLyB9XG59XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IE1RMjtcbn1cbiJdfQ==
