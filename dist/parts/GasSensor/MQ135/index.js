"use strict";
class MQ135 {
    constructor() {
        this.keys = ['gnd', 'vcc', 'do', 'ao'];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: 'MQ135',
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start(voltage => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog == 'function') {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit == 'number' &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage == 'function') {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input(value => {
                if (typeof this.onchangedigital == 'function') {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, '5v');
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise(resolve => {
            setTimeout(resolve, seconds);
        });
    }
}
if (typeof module === 'object') {
    module.exports = MQ135;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVExMzUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sS0FBSztJQUNUO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTztZQUNMLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3RCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksVUFBVSxFQUFFO29CQUM1QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksSUFBSSxRQUFRO29CQUNwQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsSUFBSSxVQUFVLEVBQ3pDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLElBQUksVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQU87UUFDZCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQztTQUNqQjthQUFNO1lBQ0wsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0NBQ3hCIiwiZmlsZSI6InBhcnRzL0dhc1NlbnNvci9NUTEzNS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RMTM1IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gWydnbmQnLCAndmNjJywgJ2RvJywgJ2FvJ107XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnTVExMzUnLFxuICAgIH07XG4gIH1cblxuICB3aXJlZChvYm5peikge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIHRoaXMudmNjID0gdGhpcy5wYXJhbXMudmNjO1xuICAgIHRoaXMuZ25kID0gdGhpcy5wYXJhbXMuZ25kO1xuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmFvKSkge1xuICAgICAgdGhpcy5hZCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLmFvKTtcbiAgICAgIHRoaXMuYWQuc3RhcnQodm9sdGFnZSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09ICdudW1iZXInICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCh2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc3RhcnRIZWF0aW5nKCkge1xuICAgIHRoaXMub2JuaXouc2V0VmNjR25kKHRoaXMudmNjLCB0aGlzLmduZCwgJzV2Jyk7XG4gIH1cblxuICBoZWF0V2FpdChzZWNvbmRzKSB7XG4gICAgdGhpcy5zdGFydEhlYXRpbmcoKTtcbiAgICBpZiAoc2Vjb25kcyA+IDApIHtcbiAgICAgIHNlY29uZHMgKj0gMTAwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Vjb25kcyA9IDIgKiA2MCAqIDEwMDA7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBScy9SbyB3aWxsIGRlc2NyZWFzZSBieSBpbnNlYXNlIG9mIGdhcy5cbiAgLy8gUnMgPSByZXNpdGFuY2UgMjBrLTEwMGsuIFJvID0gcmVzaXN0YW5jZSBvZiAxMDAwcHBtIExQR1xuICAvLyBJZiBSTCA9XG5cbiAgLy8gY2FsYyh2b2x0YWdlKSB7XG5cbiAgLy8gICBpZiAodm9sdGFnZSA9PSAwKSB7XG4gIC8vICAgICB2b2x0YWdlID0gMC4wMDAwMDFcbiAgLy8gICB9XG4gIC8vICAgY29uc3QgUlMgPSB0aGlzLlJMIC8gdm9sdGFnZSAqIDUuMFxuICAvLyAgIGNvbnN0IHJhdGlvID0gUlMgLyB0aGlzLlJPO1xuXG4gIC8vICAgcmV0dXJuIHZvbHRhZ2U7XG4gIC8vIH1cbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gTVExMzU7XG59XG4iXX0=
