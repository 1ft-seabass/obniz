{"version":3,"sources":["../src/parts/MovementSensor/MPU9250/index.ts"],"names":[],"mappings":"AAAA,cAAM,OAAO;WAEG,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,GAAG,CAAC;IACd,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,GAAG,EAAE,GAAG,CAAC;IACT,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;gBAEP,KAAK,EAAE,GAAG;IAKf,KAAK,CAAC,KAAK,EAAE,GAAG;IAkBhB,SAAS,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAKrD,cAAc;IASd,UAAU;IAMV,cAAc;IAId,oBAAoB;IAIpB,gBAAgB;CAG9B;AAED,eAAe,OAAO,CAAC","file":"index.d.ts","sourcesContent":["class MPU9250 {\n\n  public static info() {\n    return {\n      name: \"MPU9250\",\n    };\n  }\n\n  public keys: any;\n  public required: any;\n  public obniz: any;\n  public params: any;\n  public _address: any;\n  public i2c: any;\n  public mpu6050: any;\n  public ak8963: any;\n\n  constructor(obniz: any) {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"address\"];\n    this.required = [];\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this._address = this.params.address || 0x68;\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    this.i2c.write(this._address, [0x6b, 0x00]); // activate MPU9250\n    this.i2c.write(this._address, [0x37, 0x02]); // activate AK8963 (bypass)\n    this.i2c.write(this._address, [0x1a, 0x06]); // activate LPF (search datasheet_p.13)\n    this.i2c.write(this._address, [0x1d, 0x02]); // accel LPF set.\n\n    this.mpu6050 = obniz.wired(\"MPU6050\", {i2c: this.i2c});\n    this.ak8963 = obniz.wired(\"AK8963\", {i2c: this.i2c});\n  }\n\n  public setConfig(accel_range: any, gyro_range: any, ADC_cycle: any) {\n    this.mpu6050.setConfig(accel_range, gyro_range);\n    this.ak8963.setConfig(ADC_cycle);\n  }\n\n  public async _getAK8963Wait() {\n    await this.i2c.write(this._address, [0x02]); // request AK8983 data\n    const ST1: any = await this.i2c.readWait(this._address, 1); // confirm magnet value readable\n    if (ST1 & 0x01) {\n      return await this.ak8963.getWait();\n    }\n    return {};\n  }\n\n  public async getAllWait() {\n    const data: any = await this.mpu6050.getWait();\n    data.compass = await this.ak8963.getWait();\n    return data;\n  }\n\n  public async getCompassWait() {\n    return await this.ak8963.getWait();\n  }\n\n  public async getAccelerometerWait() {\n    return (await this.mpu6050.getWait()).accelerometer;\n  }\n\n  public async getGyroscopeWait() {\n    return (await this.mpu6050.getWait()).gyroscope;\n  }\n}\n\nexport default MPU9250;\n"]}