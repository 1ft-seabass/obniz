{"version":3,"sources":["../src/parts/Light/LED/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,UAAU;IACzB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AACD,cAAM,GAAI,YAAW,mBAAmB;WAExB,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAG,KAAK,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,UAAU,EAAE,GAAG,CAAC;IAChB,aAAa,EAAE,GAAG,CAAC;;IAOnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBlB,EAAE;IAKF,GAAG;IAKH,MAAM,CAAC,KAAK,EAAE,GAAG;IAQjB,QAAQ;IAIR,KAAK,CAAC,QAAQ,EAAE,GAAG;CAuB3B;AAED,eAAe,GAAG,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface LEDOptions {\n  anode: number;\n  cathode?: number;\n}\nclass LED implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"LED\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public obniz!: Obniz;\n  public io_anode: any;\n  public params: any;\n  public io_cathode: any;\n  public animationName: any;\n\n  constructor() {\n    this.keys = [\"anode\", \"cathode\"];\n    this.requiredKeys = [\"anode\"];\n  }\n\n  public wired(obniz: Obniz) {\n    function getIO(io: any) {\n      if (io && typeof io === \"object\") {\n        if (typeof io.output === \"function\") {\n          return io;\n        }\n      }\n      return obniz.getIO(io);\n    }\n\n    this.obniz = obniz;\n    this.io_anode = getIO(this.params.anode);\n    this.io_anode.output(false);\n    if (this.obniz!.isValidIO(this.params.cathode)) {\n      this.io_cathode = getIO(this.params.cathode);\n      this.io_cathode.output(false);\n    }\n    this.animationName = \"Led-\" + this.params.anode;\n  }\n\n  public on() {\n    this.endBlink();\n    this.io_anode.output(true);\n  }\n\n  public off() {\n    this.endBlink();\n    this.io_anode.output(false);\n  }\n\n  public output(value: any) {\n    if (value) {\n      this.on();\n    } else {\n      this.off();\n    }\n  }\n\n  public endBlink() {\n    this.obniz!.io!.animation(this.animationName, \"pause\");\n  }\n\n  public blink(interval: any) {\n    if (!interval) {\n      interval = 100;\n    }\n    const frames: any = [\n      {\n        duration: interval,\n        state: (index: any) => {\n          // index = 0\n          this.io_anode.output(true); // on\n        },\n      },\n      {\n        duration: interval,\n        state: (index: any) => {\n          // index = 0\n          this.io_anode.output(false); // off\n        },\n      },\n    ];\n\n    this.obniz!.io!.animation(this.animationName, \"loop\", frames);\n  }\n}\n\nexport default LED;\n"]}