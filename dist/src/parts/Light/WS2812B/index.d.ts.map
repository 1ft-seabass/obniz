{"version":3,"sources":["../src/parts/Light/WS2812B/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,cAAc;CAAI;AACnC,cAAM,OAAQ,YAAW,mBAAmB;WAE5B,IAAI,IAAI,cAAc;WAMtB,iBAAiB,CAAC,GAAG,EAAE,GAAG;WA6B1B,cAAc,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;WAOrC,iBAAiB,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;IAqC/C,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;;IAOT,KAAK,CAAC,KAAK,EAAE,KAAK;IAYlB,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;IAI1B,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;IAI1B,IAAI,CAAC,KAAK,EAAE,GAAG;IAWf,IAAI,CAAC,KAAK,EAAE,GAAG;CAUvB;AAED,eAAe,OAAO,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface WS2812BOptions { }\nclass WS2812B implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"WS2812B\",\n    };\n  }\n\n  public static _generateFromByte(val: any) {\n    // T0H 0.35us+-0.15us\n    // T1H 0.9us+-0.15us\n    // T0L 0.9us+-0.15us\n    // T1L 0.35us+-0.15us\n\n    // 0.3-0.9 and 0.9-0.3 at 3.33Mhz\n\n    val = parseInt(val);\n    const zero: any = 0x8;\n    const one: any = 0xe;\n    const ret: any = [];\n    for (let i = 0; i < 8; i += 2) {\n      let byte: any = 0;\n      if (val & (0x80 >> i)) {\n        byte = one << 4;\n      } else {\n        byte = zero << 4;\n      }\n      if (val & (0x80 >> (i + 1))) {\n        byte |= one;\n      } else {\n        byte |= zero;\n      }\n      ret.push(byte);\n    }\n    return ret;\n  }\n\n  public static _generateColor(r: any, g: any, b: any) {\n    let array: any = WS2812B._generateFromByte(g);\n    array = array.concat(WS2812B._generateFromByte(r));\n    array = array.concat(WS2812B._generateFromByte(b));\n    return array;\n  }\n\n  public static _generateHsvColor(h: any, s: any, v: any) {\n    const C: any = v * s;\n    const Hp: any = h / 60;\n    const X: any = C * (1 - Math.abs((Hp % 2) - 1));\n\n    let R: any;\n    let G: any;\n    let B: any;\n    if (0 <= Hp && Hp < 1) {\n      [R, G, B] = [C, X, 0];\n    }\n    if (1 <= Hp && Hp < 2) {\n      [R, G, B] = [X, C, 0];\n    }\n    if (2 <= Hp && Hp < 3) {\n      [R, G, B] = [0, C, X];\n    }\n    if (3 <= Hp && Hp < 4) {\n      [R, G, B] = [0, X, C];\n    }\n    if (4 <= Hp && Hp < 5) {\n      [R, G, B] = [X, 0, C];\n    }\n    if (5 <= Hp && Hp < 6) {\n      [R, G, B] = [C, 0, X];\n    }\n\n    const m: any = v - C;\n    [R, G, B] = [R + m, G + m, B + m];\n\n    R = Math.floor(R * 255);\n    G = Math.floor(G * 255);\n    B = Math.floor(B * 255);\n\n    return WS2812B._generateColor(R, G, B);\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public obniz!: Obniz;\n  public params: any;\n  public spi: any;\n\n  constructor() {\n    this.keys = [\"din\", \"vcc\", \"gnd\"];\n    this.requiredKeys = [\"din\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    this.params.mode = \"master\";\n    this.params.frequency = Math.floor(3.33 * 1000 * 1000);\n    this.params.mosi = this.params.din;\n    this.params.drive = \"5v\"; // It over spec for frequency. But VIN-HI require 0.7VCC<=.\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n  }\n\n  public rgb(r: any, g: any, b: any) {\n    this.spi.write(WS2812B._generateColor(r, g, b));\n  }\n\n  public hsv(h: any, s: any, v: any) {\n    this.spi.write(WS2812B._generateHsvColor(h, s, v));\n  }\n\n  public rgbs(array: any) {\n    let bytes: any = [];\n    for (let i = 0; i < array.length; i++) {\n      const oneArray: any = array[i];\n      bytes = bytes.concat(\n        WS2812B._generateColor(oneArray[0], oneArray[1], oneArray[2]),\n      );\n    }\n    this.spi.write(bytes);\n  }\n\n  public hsvs(array: any) {\n    let bytes: any = [];\n    for (let i = 0; i < array.length; i++) {\n      const oneArray: any = array[i];\n      bytes = bytes.concat(\n        WS2812B._generateHsvColor(oneArray[0], oneArray[1], oneArray[2]),\n      );\n    }\n    this.spi.write(bytes);\n  }\n}\n\nexport default WS2812B;\n"]}