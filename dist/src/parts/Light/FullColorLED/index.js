"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FullColorLED {
    constructor() {
        this.COMMON_TYPE_ANODE = 1;
        this.COMMON_TYPE_CATHODE = 0;
        this.anode_keys = ["anode", "anode_common", "anodeCommon", "vcc"];
        this.cathode_keys = ["cathode", "cathode_common", "cathodeCommon", "gnd"];
        this.animationName = "FullColorLED-" + Math.round(Math.random() * 1000);
        this.keys = ["r", "g", "b", "common", "commonType"];
        this.requiredKeys = ["r", "g", "b", "common", "commonType"];
    }
    static info() {
        return {
            name: "FullColorLED",
        };
    }
    wired(obniz) {
        const r = this.params.r;
        const g = this.params.g;
        const b = this.params.b;
        const common = this.params.common;
        const commontype = this.params.commonType;
        this.obniz = obniz;
        if (this.anode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_ANODE;
        }
        else if (this.cathode_keys.includes(commontype)) {
            this.commontype = this.COMMON_TYPE_CATHODE;
        }
        else {
            this.obniz.error("FullColorLED param need common type [  anode_common or cathode_common ] ");
        }
        this.common = this.obniz.getIO(common);
        this.common.output(this.commontype);
        this.obniz.getIO(r).output(this.commontype);
        this.obniz.getIO(g).output(this.commontype);
        this.obniz.getIO(b).output(this.commontype);
        this.pwmR = this.obniz.getFreePwm();
        this.pwmR.start({ io: r });
        this.pwmR.freq(1000);
        this.pwmG = this.obniz.getFreePwm();
        this.pwmG.start({ io: g });
        this.pwmG.freq(1000);
        this.pwmB = this.obniz.getFreePwm();
        this.pwmB.start({ io: b });
        this.pwmB.freq(1000);
        this.rgb(0, 0, 0);
    }
    rgb(r, g, b) {
        r = Math.min(Math.max(parseInt(r), 0), 255);
        g = Math.min(Math.max(parseInt(g), 0), 255);
        b = Math.min(Math.max(parseInt(b), 0), 255);
        if (this.commontype === this.COMMON_TYPE_ANODE) {
            r = 255 - r;
            g = 255 - g;
            b = 255 - b;
        }
        this.pwmR.duty((r / 255) * 100);
        this.pwmG.duty((g / 255) * 100);
        this.pwmB.duty((b / 255) * 100);
    }
    hsv(h, s, v) {
        const C = v * s;
        const Hp = h / 60;
        const X = C * (1 - Math.abs((Hp % 2) - 1));
        let R;
        let G;
        let B;
        if (0 <= Hp && Hp < 1) {
            [R, G, B] = [C, X, 0];
        }
        if (1 <= Hp && Hp < 2) {
            [R, G, B] = [X, C, 0];
        }
        if (2 <= Hp && Hp < 3) {
            [R, G, B] = [0, C, X];
        }
        if (3 <= Hp && Hp < 4) {
            [R, G, B] = [0, X, C];
        }
        if (4 <= Hp && Hp < 5) {
            [R, G, B] = [X, 0, C];
        }
        if (5 <= Hp && Hp < 6) {
            [R, G, B] = [C, 0, X];
        }
        const m = v - C;
        [R, G, B] = [R + m, G + m, B + m];
        R = Math.floor(R * 255);
        G = Math.floor(G * 255);
        B = Math.floor(B * 255);
        this.rgb(R, G, B);
    }
    gradation(cycletime_ms) {
        const frames = [];
        const max = 36 / 2;
        const duration = Math.round(cycletime_ms / max);
        for (let i = 0; i < max; i++) {
            const oneFrame = {
                duration,
                state: (index) => {
                    // index = 0
                    this.hsv(index * 10 * 2, 1, 1);
                },
            };
            frames.push(oneFrame);
        }
        this.obniz.io.animation(this.animationName, "loop", frames);
    }
    stopgradation() {
        this.obniz.io.animation(this.animationName, "pause");
    }
}
exports.default = FullColorLED;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9MaWdodC9GdWxsQ29sb3JMRUQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNLFlBQVk7SUF1QmhCO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsYUFBYSxHQUFHLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQS9CTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLGNBQWM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUE2Qk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsTUFBTSxDQUFDLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkMsTUFBTSxVQUFVLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFFL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztTQUMxQzthQUFNLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7U0FDNUM7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUNkLDBFQUEwRSxDQUMzRSxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLENBQU07UUFDL0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFNUMsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUM5QyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUNaLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDYjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBTSxFQUFFLENBQU0sRUFBRSxDQUFNO1FBQy9CLE1BQU0sQ0FBQyxHQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsTUFBTSxFQUFFLEdBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLENBQUMsR0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBTSxDQUFDO1FBQUMsSUFBSyxDQUFNLENBQUM7UUFBQyxJQUFJLENBQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFFRCxNQUFNLENBQUMsR0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxTQUFTLENBQUMsWUFBaUI7UUFDaEMsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sR0FBRyxHQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEIsTUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixNQUFNLFFBQVEsR0FBUTtnQkFDcEIsUUFBUTtnQkFDUixLQUFLLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtvQkFDcEIsWUFBWTtvQkFDWixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDakMsQ0FBQzthQUNGLENBQUM7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxhQUFhO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDRjtBQUVELGtCQUFlLFlBQVksQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvTGlnaHQvRnVsbENvbG9yTEVEL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTb2NrZXR9IGZyb20gXCJkZ3JhbVwiO1xuXG5jbGFzcyBGdWxsQ29sb3JMRUQge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJGdWxsQ29sb3JMRURcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIENPTU1PTl9UWVBFX0FOT0RFOiBhbnk7XG4gIHB1YmxpYyBDT01NT05fVFlQRV9DQVRIT0RFOiBhbnk7XG4gIHB1YmxpYyBhbm9kZV9rZXlzOiBhbnk7XG4gIHB1YmxpYyBjYXRob2RlX2tleXM6IGFueTtcbiAgcHVibGljIGFuaW1hdGlvbk5hbWU6IGFueTtcbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgY29tbW9udHlwZTogYW55O1xuICBwdWJsaWMgY29tbW9uOiBhbnk7XG4gIHB1YmxpYyBwd21SOiBhbnk7XG4gIHB1YmxpYyBwd21HOiBhbnk7XG4gIHB1YmxpYyBwd21COiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5DT01NT05fVFlQRV9BTk9ERSA9IDE7XG4gICAgdGhpcy5DT01NT05fVFlQRV9DQVRIT0RFID0gMDtcblxuICAgIHRoaXMuYW5vZGVfa2V5cyA9IFtcImFub2RlXCIsIFwiYW5vZGVfY29tbW9uXCIsIFwiYW5vZGVDb21tb25cIiwgXCJ2Y2NcIl07XG4gICAgdGhpcy5jYXRob2RlX2tleXMgPSBbXCJjYXRob2RlXCIsIFwiY2F0aG9kZV9jb21tb25cIiwgXCJjYXRob2RlQ29tbW9uXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMuYW5pbWF0aW9uTmFtZSA9IFwiRnVsbENvbG9yTEVELVwiICsgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCk7XG5cbiAgICB0aGlzLmtleXMgPSBbXCJyXCIsIFwiZ1wiLCBcImJcIiwgXCJjb21tb25cIiwgXCJjb21tb25UeXBlXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wiclwiLCBcImdcIiwgXCJiXCIsIFwiY29tbW9uXCIsIFwiY29tbW9uVHlwZVwiXTtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgY29uc3QgcjogYW55ID0gdGhpcy5wYXJhbXMucjtcbiAgICBjb25zdCBnOiBhbnkgPSB0aGlzLnBhcmFtcy5nO1xuICAgIGNvbnN0IGI6IGFueSA9IHRoaXMucGFyYW1zLmI7XG4gICAgY29uc3QgY29tbW9uOiBhbnkgPSB0aGlzLnBhcmFtcy5jb21tb247XG4gICAgY29uc3QgY29tbW9udHlwZTogYW55ID0gdGhpcy5wYXJhbXMuY29tbW9uVHlwZTtcblxuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBpZiAodGhpcy5hbm9kZV9rZXlzLmluY2x1ZGVzKGNvbW1vbnR5cGUpKSB7XG4gICAgICB0aGlzLmNvbW1vbnR5cGUgPSB0aGlzLkNPTU1PTl9UWVBFX0FOT0RFO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jYXRob2RlX2tleXMuaW5jbHVkZXMoY29tbW9udHlwZSkpIHtcbiAgICAgIHRoaXMuY29tbW9udHlwZSA9IHRoaXMuQ09NTU9OX1RZUEVfQ0FUSE9ERTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vYm5pei5lcnJvcihcbiAgICAgICAgXCJGdWxsQ29sb3JMRUQgcGFyYW0gbmVlZCBjb21tb24gdHlwZSBbICBhbm9kZV9jb21tb24gb3IgY2F0aG9kZV9jb21tb24gXSBcIixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5jb21tb24gPSB0aGlzLm9ibml6LmdldElPKGNvbW1vbik7XG4gICAgdGhpcy5jb21tb24ub3V0cHV0KHRoaXMuY29tbW9udHlwZSk7XG5cbiAgICB0aGlzLm9ibml6LmdldElPKHIpLm91dHB1dCh0aGlzLmNvbW1vbnR5cGUpO1xuICAgIHRoaXMub2JuaXouZ2V0SU8oZykub3V0cHV0KHRoaXMuY29tbW9udHlwZSk7XG4gICAgdGhpcy5vYm5pei5nZXRJTyhiKS5vdXRwdXQodGhpcy5jb21tb250eXBlKTtcbiAgICB0aGlzLnB3bVIgPSB0aGlzLm9ibml6LmdldEZyZWVQd20oKTtcbiAgICB0aGlzLnB3bVIuc3RhcnQoe2lvOiByfSk7XG4gICAgdGhpcy5wd21SLmZyZXEoMTAwMCk7XG4gICAgdGhpcy5wd21HID0gdGhpcy5vYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd21HLnN0YXJ0KHtpbzogZ30pO1xuICAgIHRoaXMucHdtRy5mcmVxKDEwMDApO1xuICAgIHRoaXMucHdtQiA9IHRoaXMub2JuaXouZ2V0RnJlZVB3bSgpO1xuICAgIHRoaXMucHdtQi5zdGFydCh7aW86IGJ9KTtcbiAgICB0aGlzLnB3bUIuZnJlcSgxMDAwKTtcbiAgICB0aGlzLnJnYigwLCAwLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyByZ2IocjogYW55LCBnOiBhbnksIGI6IGFueSkge1xuICAgIHIgPSBNYXRoLm1pbihNYXRoLm1heChwYXJzZUludChyKSwgMCksIDI1NSk7XG4gICAgZyA9IE1hdGgubWluKE1hdGgubWF4KHBhcnNlSW50KGcpLCAwKSwgMjU1KTtcbiAgICBiID0gTWF0aC5taW4oTWF0aC5tYXgocGFyc2VJbnQoYiksIDApLCAyNTUpO1xuXG4gICAgaWYgKHRoaXMuY29tbW9udHlwZSA9PT0gdGhpcy5DT01NT05fVFlQRV9BTk9ERSkge1xuICAgICAgciA9IDI1NSAtIHI7XG4gICAgICBnID0gMjU1IC0gZztcbiAgICAgIGIgPSAyNTUgLSBiO1xuICAgIH1cbiAgICB0aGlzLnB3bVIuZHV0eSgociAvIDI1NSkgKiAxMDApO1xuICAgIHRoaXMucHdtRy5kdXR5KChnIC8gMjU1KSAqIDEwMCk7XG4gICAgdGhpcy5wd21CLmR1dHkoKGIgLyAyNTUpICogMTAwKTtcbiAgfVxuXG4gIHB1YmxpYyBoc3YoaDogYW55LCBzOiBhbnksIHY6IGFueSkge1xuICAgIGNvbnN0IEM6IGFueSA9IHYgKiBzO1xuICAgIGNvbnN0IEhwOiBhbnkgPSBoIC8gNjA7XG4gICAgY29uc3QgWDogYW55ID0gQyAqICgxIC0gTWF0aC5hYnMoKEhwICUgMikgLSAxKSk7XG5cbiAgICBsZXQgUjogYW55OyBsZXQgIEc6IGFueTsgbGV0IEI6IGFueTtcbiAgICBpZiAoMCA8PSBIcCAmJiBIcCA8IDEpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFtDLCBYLCAwXTtcbiAgICB9XG4gICAgaWYgKDEgPD0gSHAgJiYgSHAgPCAyKSB7XG4gICAgICBbUiwgRywgQl0gPSBbWCwgQywgMF07XG4gICAgfVxuICAgIGlmICgyIDw9IEhwICYmIEhwIDwgMykge1xuICAgICAgW1IsIEcsIEJdID0gWzAsIEMsIFhdO1xuICAgIH1cbiAgICBpZiAoMyA8PSBIcCAmJiBIcCA8IDQpIHtcbiAgICAgIFtSLCBHLCBCXSA9IFswLCBYLCBDXTtcbiAgICB9XG4gICAgaWYgKDQgPD0gSHAgJiYgSHAgPCA1KSB7XG4gICAgICBbUiwgRywgQl0gPSBbWCwgMCwgQ107XG4gICAgfVxuICAgIGlmICg1IDw9IEhwICYmIEhwIDwgNikge1xuICAgICAgW1IsIEcsIEJdID0gW0MsIDAsIFhdO1xuICAgIH1cblxuICAgIGNvbnN0IG06IGFueSA9IHYgLSBDO1xuICAgIFtSLCBHLCBCXSA9IFtSICsgbSwgRyArIG0sIEIgKyBtXTtcblxuICAgIFIgPSBNYXRoLmZsb29yKFIgKiAyNTUpO1xuICAgIEcgPSBNYXRoLmZsb29yKEcgKiAyNTUpO1xuICAgIEIgPSBNYXRoLmZsb29yKEIgKiAyNTUpO1xuXG4gICAgdGhpcy5yZ2IoUiwgRywgQik7XG4gIH1cblxuICBwdWJsaWMgZ3JhZGF0aW9uKGN5Y2xldGltZV9tczogYW55KSB7XG4gICAgY29uc3QgZnJhbWVzOiBhbnkgPSBbXTtcbiAgICBjb25zdCBtYXg6IGFueSA9IDM2IC8gMjtcbiAgICBjb25zdCBkdXJhdGlvbjogYW55ID0gTWF0aC5yb3VuZChjeWNsZXRpbWVfbXMgLyBtYXgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIGNvbnN0IG9uZUZyYW1lOiBhbnkgPSB7XG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBzdGF0ZTogKGluZGV4OiBhbnkpID0+IHtcbiAgICAgICAgICAvLyBpbmRleCA9IDBcbiAgICAgICAgICB0aGlzLmhzdihpbmRleCAqIDEwICogMiwgMSwgMSk7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZnJhbWVzLnB1c2gob25lRnJhbWUpO1xuICAgIH1cbiAgICB0aGlzLm9ibml6LmlvLmFuaW1hdGlvbih0aGlzLmFuaW1hdGlvbk5hbWUsIFwibG9vcFwiLCBmcmFtZXMpO1xuICB9XG5cbiAgcHVibGljIHN0b3BncmFkYXRpb24oKSB7XG4gICAgdGhpcy5vYm5pei5pby5hbmltYXRpb24odGhpcy5hbmltYXRpb25OYW1lLCBcInBhdXNlXCIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bGxDb2xvckxFRDtcbiJdfQ==
