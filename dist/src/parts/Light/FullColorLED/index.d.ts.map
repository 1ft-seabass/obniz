{"version":3,"sources":["../src/parts/Light/FullColorLED/index.ts"],"names":[],"mappings":"AAEA,cAAM,YAAY;WAEF,IAAI;;;IAMX,iBAAiB,EAAE,GAAG,CAAC;IACvB,mBAAmB,EAAE,GAAG,CAAC;IACzB,UAAU,EAAE,GAAG,CAAC;IAChB,YAAY,EAAE,GAAG,CAAC;IAClB,aAAa,EAAE,GAAG,CAAC;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,UAAU,EAAE,GAAG,CAAC;IAChB,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;;IAcV,KAAK,CAAC,KAAK,EAAE,GAAG;IAoChB,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;IAe1B,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG;IAmC1B,SAAS,CAAC,YAAY,EAAE,GAAG;IAiB3B,aAAa;CAGrB;AAED,eAAe,YAAY,CAAC","file":"index.d.ts","sourcesContent":["import {createSocket} from \"dgram\";\n\nclass FullColorLED {\n\n  public static info() {\n    return {\n      name: \"FullColorLED\",\n    };\n  }\n\n  public COMMON_TYPE_ANODE: any;\n  public COMMON_TYPE_CATHODE: any;\n  public anode_keys: any;\n  public cathode_keys: any;\n  public animationName: any;\n  public keys: any;\n  public requiredKeys: any;\n  public params: any;\n  public obniz: any;\n  public commontype: any;\n  public common: any;\n  public pwmR: any;\n  public pwmG: any;\n  public pwmB: any;\n\n  constructor() {\n    this.COMMON_TYPE_ANODE = 1;\n    this.COMMON_TYPE_CATHODE = 0;\n\n    this.anode_keys = [\"anode\", \"anode_common\", \"anodeCommon\", \"vcc\"];\n    this.cathode_keys = [\"cathode\", \"cathode_common\", \"cathodeCommon\", \"gnd\"];\n    this.animationName = \"FullColorLED-\" + Math.round(Math.random() * 1000);\n\n    this.keys = [\"r\", \"g\", \"b\", \"common\", \"commonType\"];\n    this.requiredKeys = [\"r\", \"g\", \"b\", \"common\", \"commonType\"];\n  }\n\n  public wired(obniz: any) {\n    const r: any = this.params.r;\n    const g: any = this.params.g;\n    const b: any = this.params.b;\n    const common: any = this.params.common;\n    const commontype: any = this.params.commonType;\n\n    this.obniz = obniz;\n    if (this.anode_keys.includes(commontype)) {\n      this.commontype = this.COMMON_TYPE_ANODE;\n    } else if (this.cathode_keys.includes(commontype)) {\n      this.commontype = this.COMMON_TYPE_CATHODE;\n    } else {\n      this.obniz.error(\n        \"FullColorLED param need common type [  anode_common or cathode_common ] \",\n      );\n    }\n\n    this.common = this.obniz.getIO(common);\n    this.common.output(this.commontype);\n\n    this.obniz.getIO(r).output(this.commontype);\n    this.obniz.getIO(g).output(this.commontype);\n    this.obniz.getIO(b).output(this.commontype);\n    this.pwmR = this.obniz.getFreePwm();\n    this.pwmR.start({io: r});\n    this.pwmR.freq(1000);\n    this.pwmG = this.obniz.getFreePwm();\n    this.pwmG.start({io: g});\n    this.pwmG.freq(1000);\n    this.pwmB = this.obniz.getFreePwm();\n    this.pwmB.start({io: b});\n    this.pwmB.freq(1000);\n    this.rgb(0, 0, 0);\n  }\n\n  public rgb(r: any, g: any, b: any) {\n    r = Math.min(Math.max(parseInt(r), 0), 255);\n    g = Math.min(Math.max(parseInt(g), 0), 255);\n    b = Math.min(Math.max(parseInt(b), 0), 255);\n\n    if (this.commontype === this.COMMON_TYPE_ANODE) {\n      r = 255 - r;\n      g = 255 - g;\n      b = 255 - b;\n    }\n    this.pwmR.duty((r / 255) * 100);\n    this.pwmG.duty((g / 255) * 100);\n    this.pwmB.duty((b / 255) * 100);\n  }\n\n  public hsv(h: any, s: any, v: any) {\n    const C: any = v * s;\n    const Hp: any = h / 60;\n    const X: any = C * (1 - Math.abs((Hp % 2) - 1));\n\n    let R: any; let  G: any; let B: any;\n    if (0 <= Hp && Hp < 1) {\n      [R, G, B] = [C, X, 0];\n    }\n    if (1 <= Hp && Hp < 2) {\n      [R, G, B] = [X, C, 0];\n    }\n    if (2 <= Hp && Hp < 3) {\n      [R, G, B] = [0, C, X];\n    }\n    if (3 <= Hp && Hp < 4) {\n      [R, G, B] = [0, X, C];\n    }\n    if (4 <= Hp && Hp < 5) {\n      [R, G, B] = [X, 0, C];\n    }\n    if (5 <= Hp && Hp < 6) {\n      [R, G, B] = [C, 0, X];\n    }\n\n    const m: any = v - C;\n    [R, G, B] = [R + m, G + m, B + m];\n\n    R = Math.floor(R * 255);\n    G = Math.floor(G * 255);\n    B = Math.floor(B * 255);\n\n    this.rgb(R, G, B);\n  }\n\n  public gradation(cycletime_ms: any) {\n    const frames: any = [];\n    const max: any = 36 / 2;\n    const duration: any = Math.round(cycletime_ms / max);\n    for (let i = 0; i < max; i++) {\n      const oneFrame: any = {\n        duration,\n        state: (index: any) => {\n          // index = 0\n          this.hsv(index * 10 * 2, 1, 1);\n        },\n      };\n      frames.push(oneFrame);\n    }\n    this.obniz.io.animation(this.animationName, \"loop\", frames);\n  }\n\n  public stopgradation() {\n    this.obniz.io.animation(this.animationName, \"pause\");\n  }\n}\n\nexport default FullColorLED;\n"]}