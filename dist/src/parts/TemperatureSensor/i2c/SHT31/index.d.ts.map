{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/SHT31/index.ts"],"names":[],"mappings":"AAAA,cAAM,KAAK;WAEK,IAAI;;;IAMX,YAAY,EAAE,GAAG,CAAC;IAClB,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,GAAG,EAAE,GAAG,CAAC;;IAoCT,KAAK,CAAC,KAAK,EAAE,GAAG;IAoBV,OAAO;IAMP,WAAW;IAIX,WAAW;IAIX,UAAU;;;;CAUxB;AAED,eAAe,KAAK,CAAC","file":"index.d.ts","sourcesContent":["class SHT31 {\n\n  public static info() {\n    return {\n      name: \"SHT31\",\n    };\n  }\n\n  public requiredKeys: any;\n  public keys: any;\n  public ioKeys: any;\n  public commands: any;\n  public waitTime: any;\n  public obniz: any;\n  public params: any;\n  public io_adr: any;\n  public address: any;\n  public i2c: any;\n\n  constructor() {\n    this.requiredKeys = [\"adr\", \"addressmode\"];\n    this.keys = [\n      \"vcc\",\n      \"sda\",\n      \"scl\",\n      \"gnd\",\n      \"adr\",\n      \"addressmode\",\n      \"i2c\",\n      \"pull\",\n    ];\n\n    this.ioKeys = [\"vcc\", \"sda\", \"scl\", \"gnd\", \"adr\"];\n    this.commands = {};\n    this.commands.softReset = [0x30, 0xa2];\n    this.commands.highRepeatStreach = [0x2c, 0x06];\n    this.commands.middleRepeatStreach = [0x2c, 0x0d];\n    this.commands.lowRepeatStreach = [0x2c, 0x10];\n    this.commands.highRepeat = [0x24, 0x00];\n    this.commands.mediumRepeat = [0x24, 0x0b];\n    this.commands.lowRepeat = [0x24, 0x16];\n\n    this.waitTime = {};\n    this.waitTime.wakeup = 1;\n    this.waitTime.softReset = 1;\n    this.waitTime.lowRepeat = 4;\n    this.waitTime.mediumRepeat = 6;\n    this.waitTime.highRepeat = 15;\n\n    // not tested\n    this.commands.readStatus = [0xf3, 0x2d];\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.io_adr = obniz.getIO(this.params.adr);\n\n    if (this.params.addressmode === 4) {\n      this.io_adr.output(false);\n      this.address = 0x44;\n    } else if (this.params.addressmode === 5) {\n      this.io_adr.pull(null);\n      this.address = 0x45;\n    }\n\n    this.params.clock = this.params.clock || 100 * 1000; // for i2c\n    this.params.mode = this.params.mode || \"master\"; // for i2c\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\n    this.i2c = obniz.getI2CWithConfig(this.params);\n    obniz.i2c0.write(this.address, this.commands.softReset);\n  }\n\n  public async getData() {\n    this.i2c.write(this.address, this.commands.highRepeat);\n    await this.obniz.wait(this.waitTime.highRepeat);\n    return await this.i2c.readWait(this.address, 6);\n  }\n\n  public async getTempWait() {\n    return (await this.getAllWait()).temperature;\n  }\n\n  public async getHumdWait() {\n    return (await this.getAllWait()).humidity;\n  }\n\n  public async getAllWait() {\n    const ret: any = await this.getData();\n\n    const tempBin: any = ret[0] * 256 + ret[1];\n    const temperature: any = -45 + 175 * (tempBin / (65536 - 1));\n\n    const humdBin: any = ret[3] * 256 + ret[4];\n    const humidity: any = 100 * (humdBin / (65536 - 1));\n    return {temperature, humidity};\n  }\n}\n\nexport default SHT31;\n"]}