{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AM2320/index.ts"],"names":[],"mappings":"AAAA,cAAM,MAAM;WAEI,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,GAAG,EAAE,GAAG,CAAC;;IAOT,KAAK,CAAC,KAAK,EAAE,GAAG;IAUV,UAAU;;;;;;;IAoBV,WAAW;IAIX,WAAW;CAGzB;AAED,eAAe,MAAM,CAAC","file":"index.d.ts","sourcesContent":["class AM2320 {\n\n  public static info() {\n    return {\n      name: \"AM2320\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public obniz: any;\n  public params: any;\n  public address: any;\n  public i2c: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.address = 0x5c;\n    this.params.pull = \"5v\";\n    this.params.mode = \"master\";\n    this.params.clock = this.params.clock || 100 * 1000;\n    this.i2c = obniz.getI2CWithConfig(this.params);\n  }\n\n  public async getAllWait() {\n    const i2cOnerror: any = this.i2c.onerror;\n    this.i2c.onerror = () => {\n    };\n    this.i2c.write(this.address, [0]); // wake\n    this.obniz.wait(2);\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\n    this.obniz.wait(2);\n    this.i2c.write(this.address, [0x03, 0x00, 0x04]);\n    const ret: any = await this.i2c.readWait(this.address, 6);\n    this.i2c.onerror = i2cOnerror;\n    if (ret[0] !== 3 || ret[1] !== 4) {\n      console.log(\"AM2320: Could not receive data correctly\");\n      return {};\n    }\n    const humidity: any = (ret[2] * 256 + ret[3]) / 10.0;\n    const temperature: any = (ret[4] * 256 + ret[5]) / 10.0;\n    return {temperature, humidity};\n  }\n\n  public async getTempWait() {\n    return (await this.getAllWait()).temperature;\n  }\n\n  public async getHumdWait() {\n    return (await this.getAllWait()).humidity;\n  }\n}\n\nexport default AM2320;\n"]}