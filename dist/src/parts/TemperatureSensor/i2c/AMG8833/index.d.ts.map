{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/AMG8833/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,uCAAuC,CAAC;AAE1F,MAAM,WAAW,cAAc;CAAI;AACnC,cAAM,OAAQ,YAAW,mBAAmB;WAE5B,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,QAAQ,EAAE,GAAG,CAAC;IACd,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,GAAG,EAAE,GAAG,CAAC;;IAuBT,KAAK,CAAC,KAAK,EAAE,KAAK;IAyBZ,aAAa,CAAC,KAAK,EAAE,GAAG;IAyBxB,aAAa;CAsB3B;AAED,eAAe,OAAO,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../../obniz/ObnizPartsInterface\";\n\nexport interface AMG8833Options { }\nclass AMG8833 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"AMG8833\",\n    };\n  }\n\n  public requiredKeys: string[];\n  public keys: string[];\n  public ioKeys: string[];\n  public commands: any;\n  public obniz!: Obniz;\n  public params: any;\n  public address: any;\n  public i2c: any;\n\n  constructor() {\n    this.requiredKeys = [];\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"address\"];\n\n    this.ioKeys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n    this.commands = {};\n    this.commands.mode_normal = [0x00, 0x00];\n    this.commands.reset_flag = [0x01, 0x30];\n    this.commands.reset_initial = [0x01, 0x3f];\n    this.commands.frameRate_10fps = [0x02, 0x00];\n    this.commands.frameRate_1fps = [0x02, 0x01];\n    this.commands.int_disable = [0x03, 0x00];\n    this.commands.int_absVal = [0x03, 0x03];\n    this.commands.int_diff = [0x03, 0x01];\n    this.commands.stat = [0x04];\n    this.commands.statClr_ovs = [0x05, 0x04];\n    this.commands.statClr_int = [0x05, 0x02];\n    this.commands.average_disable = [0x07, 0x00];\n    this.commands.average_enable = [0x07, 0x10];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    this.address = 0x69;\n    if (this.params.address === 0x69) {\n      this.address = 0x69;\n    } else if (this.params.addressmode === 0x68) {\n      this.address = 0x68;\n    } else if (this.params.address !== undefined) {\n      throw new Error(\"address must be 0x68 or 0x69\");\n    }\n\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\n    this.params.mode = this.params.mode || \"master\"; // for i2c\n    this.params.pull = this.params.pull || null; // for i2c\n    this.i2c = obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(50);\n\n    this.i2c.write(this.address, this.commands.mode_normal);\n    this.i2c.write(this.address, this.commands.reset_flag);\n    this.i2c.write(this.address, this.commands.frameRate_10fps);\n    this.i2c.write(this.address, this.commands.int_disable);\n  }\n\n  public async getOnePixWait(pixel: any) {\n    let pixelAddrL: any = 0x80;\n    let pixelAddrH: any = 0x81;\n    if (pixel >= 0 && pixel <= 63) {\n      pixelAddrL = 0x80 + pixel * 2;\n      pixelAddrH = 0x81 + pixel * 2;\n    } else {\n      throw new Error(\"pixel number must be range of 0 to 63\");\n    }\n    this.i2c.write(this.address, [pixelAddrL]);\n    const dataL: any = await this.i2c.readWait(this.address, 1);\n    this.i2c.write(this.address, [pixelAddrH]);\n    const dataH: any = await this.i2c.readWait(this.address, 1);\n    let temp12bit: any = (dataH << 8) | dataL;\n    if (dataH & 0x08) {\n      // negative temperature\n      temp12bit = temp12bit - 1;\n      temp12bit = 0xfff - temp12bit; // bit inverting\n      return temp12bit * -0.25;\n    } else {\n      // positive temperature\n      return temp12bit * 0.25;\n    }\n  }\n\n  public async getAllPixWait() {\n    const tempArray: any = new Array(64);\n    this.i2c.write(this.address, [0x80]);\n    const datas: any = await this.i2c.readWait(this.address, 64 * 2);\n\n    for (let i = 0; i < 64; i++) {\n      let temp12bit: any = (datas[i * 2 + 1] << 8) | datas[i * 2];\n      let temp: any = 0;\n      if (datas[i * 2 + 1] & 0x08) {\n        // negative temperature\n        temp12bit = temp12bit - 1;\n        temp12bit = 0xfff - temp12bit; // bit inverting\n        temp = temp12bit * -0.25;\n      } else {\n        // positive temperature\n        temp = temp12bit * 0.25;\n      }\n      tempArray[i] = temp;\n    }\n\n    return tempArray;\n  }\n}\n\nexport default AMG8833;\n"]}