{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/S-5851A/index.ts"],"names":[],"mappings":"AACA,cAAM,MAAM;WAEI,IAAI;;;IAMX,YAAY,EAAE,GAAG,CAAC;IAClB,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IACZ,OAAO,EAAE,GAAG,CAAC;IACb,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;IACb,GAAG,EAAE,GAAG,CAAC;IACT,IAAI,EAAE,GAAG,CAAC;;IAOV,KAAK,CAAC,KAAK,EAAE,GAAG;IA+DV,WAAW;IAYX,WAAW;CASzB;AAED,eAAe,MAAM,CAAC","file":"index.d.ts","sourcesContent":["// sensor response not found\nclass S5851A {\n\n  public static info() {\n    return {\n      name: \"S5851A\",\n    };\n  }\n\n  public requiredKeys: any;\n  public keys: any;\n  public io_adr0: any;\n  public params: any;\n  public io_adr1: any;\n  public obniz: any;\n  public address: any;\n  public i2c: any;\n  public i2c0: any;\n\n  constructor() {\n    this.requiredKeys = [\"vcc\", \"gnd\", \"adr0\", \"adr1\", \"adr_select\"];\n    this.keys = [\"sda\", \"scl\", \"adr0\", \"adr1\", \"adr_select\", \"i2c\"];\n  }\n\n  public wired(obniz: any) {\n    // params: pwr, gnd, sda, scl, adr0, adr1, adr_select\n    this.io_adr0 = obniz.getIO(this.params.adr0);\n    this.io_adr1 = obniz.getIO(this.params.adr1);\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    switch (this.params.adr_select) {\n      case 8:\n        this.io_adr0.output(false);\n        this.io_adr1.output(false);\n        this.address = 0x48;\n        break;\n      case 9:\n        this.io_adr0.pull(null);\n        this.io_adr1.output(false);\n        this.address = 0x49;\n        break;\n      case \"A\":\n        this.io_adr0.output(true);\n        this.io_adr1.output(false);\n        this.address = 0x4a;\n        break;\n      case \"B\":\n        this.io_adr0.output(false);\n        this.io_adr1.output(true);\n        this.address = 0x4b;\n        break;\n      case \"C\":\n        this.io_adr0.pull(null);\n        this.io_adr1.output(true);\n        this.address = 0x4c;\n        break;\n      case \"D\":\n        this.io_adr0.output(true);\n        this.io_adr1.output(true);\n        this.address = 0x4d;\n        break;\n      case \"E\":\n        this.io_adr0.output(false);\n        this.io_adr1.pull(null);\n        this.address = 0x4e;\n        break;\n      case \"F\":\n        this.io_adr0.output(true);\n        this.io_adr1.pull(null);\n        this.address = 0x4f;\n        break;\n      default:\n        this.io_adr0.output(false);\n        this.io_adr1.output(false);\n        this.address = 0x48;\n        break;\n    }\n    console.log(\"i2c address=\" + this.address);\n\n    this.params.clock = this.params.clock || 400 * 1000; // for i2c\n    this.params.mode = this.params.mode || \"master\"; // for i2c\n    this.params.pull = this.params.pull || \"5v\"; // for i2c\n    this.i2c = obniz.getI2CWithConfig(this.params);\n    // obniz.i2c0.write(address, [0x20, 0x24]);\n  }\n\n  public async getTempWait() {\n    // console.log(\"gettempwait\");\n    // obniz.i2c0.write(address, [0x20, 0x24]);\n    // obniz.i2c0.write(address, [0xE0, 0x00]);\n    const ret: any = await this.i2c0.readWait(this.address, 2);\n    // console.log('ret:' + ret);\n    const tempBin: any =\n      ret[0].toString(2) + (\"00000000\" + ret[1].toString(2)).slice(-8);\n    const temperature: any = -45 + 175 * (parseInt(tempBin, 2) / (65536 - 1));\n    return temperature;\n  }\n\n  public async getHumdWait() {\n    this.i2c.write(this.address, [0x20, 0x24]);\n    this.i2c.write(this.address, [0xe0, 0x00]);\n    const ret: any = await this.i2c.readWait(this.address, 4);\n    const humdBin: any =\n      ret[2].toString(2) + (\"00000000\" + ret[3].toString(2)).slice(-8);\n    const humidity: any = 100 * (parseInt(humdBin, 2) / (65536 - 1));\n    return humidity;\n  }\n}\n\nexport default S5851A;\n"]}