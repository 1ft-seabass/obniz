{"version":3,"sources":["../src/parts/Magnet/HMC5883L/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAIA,MAAM,QAAQ;IAeZ;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,6BAA6B;QAChE,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IArBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,UAAU;SACjB,CAAC;IACJ,CAAC;IAmBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAE5B,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEY,GAAG;;YACd,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,MAAM,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAExE,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,MAAM,IAAI,GAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAI,GAAG,GAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxD,IAAI,GAAG,GAAG,MAAM,EAAE;oBAChB,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;iBACnB;gBACD,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;aACpB;YAED,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;CACF;AAED,kBAAe,QAAQ,CAAC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface HMC5883LOptions { }\nclass HMC5883L implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HMC5883L\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public address: any;\n  public obniz!: Obniz;\n  public params: any;\n  public i2c: any;\n\n  constructor() {\n    this.keys = [\"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n\n    this.address = {};\n    this.address.device = 0x1e;\n    this.address.reset = [0x02, 0x00]; // Continuous Measurment Mode\n    this.address.xMSB = [0x03];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(null, this.params.gnd, \"3v\");\n\n    this.params.clock = 100000;\n    this.params.pull = \"3v\";\n    this.params.mode = \"master\";\n\n    this.i2c = obniz.getI2CWithConfig(this.params);\n\n    this.obniz.wait(500);\n  }\n\n  public init() {\n    this.i2c.write(this.address.device, this.address.reset);\n    this.obniz.wait(500);\n  }\n\n  public async get() {\n    this.i2c.write(this.address.device, this.address.xMSB);\n    const readed: any = await this.i2c.readWait(this.address.device, 2 * 3);\n\n    const obj: any = {};\n    const keys: any = [\"x\", \"y\", \"z\"];\n    for (let i = 0; i < 3; i++) {\n      let val: any = (readed[i * 2] << 8) | readed[i * 2 + 1];\n      if (val & 0x8000) {\n        val = val - 65536;\n      }\n      obj[keys[i]] = val;\n    }\n\n    return obj;\n  }\n}\n\nexport default HMC5883L;\n"]}