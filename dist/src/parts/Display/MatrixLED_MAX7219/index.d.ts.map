{"version":3,"sources":["../src/parts/Display/MatrixLED_MAX7219/index.ts"],"names":[],"mappings":"AAAA,cAAM,iBAAiB;WAEP,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,EAAE,EAAE,GAAG,CAAC;IACR,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;IACT,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,GAAG,CAAC;;IAOV,KAAK,CAAC,KAAK,EAAE,GAAG;IAuBhB,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAO5B,UAAU;IAUV,IAAI;IAKJ,eAAe;IAOf,UAAU,CAAC,GAAG,EAAE,GAAG;IAKnB,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAWnC,KAAK,CAAC,IAAI,EAAE,GAAG;IAMf,SAAS;IAaT,KAAK;IAUL,IAAI,CAAC,GAAG,EAAE,GAAG;CAoBrB;AAED,eAAe,iBAAiB,CAAC","file":"index.d.ts","sourcesContent":["class MatrixLED_MAX7219 {\n\n  public static info() {\n    return {\n      name: \"MatrixLED_MAX7219\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public cs: any;\n  public params: any;\n  public spi: any;\n  public obniz: any;\n  public width: any;\n  public height: any;\n  public vram: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"din\", \"cs\", \"clk\"];\n    this.requiredKeys = [\"din\", \"cs\", \"clk\"];\n  }\n\n  public wired(obniz: any) {\n    this.cs = obniz.getIO(this.params.cs);\n    // logich high must 3.5v <=\n    if (obniz.isValidIO(this.params.vcc)) {\n      obniz.getIO(this.params.vcc).output(true);\n    }\n    if (obniz.isValidIO(this.params.gnd)) {\n      obniz.getIO(this.params.gnd).output(false);\n    }\n\n    // max 10Mhz but motor driver can't\n    this.params.frequency = this.params.frequency || 10 * 1000 * 1000;\n    this.params.mode = \"master\";\n    this.params.mosi = this.params.din;\n    this.params.drive = \"3v\";\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n\n    // reset a onece\n    this.cs.output(true);\n    this.cs.output(false);\n    this.cs.output(true);\n  }\n\n  public init(width: any, height: any) {\n    this.width = width;\n    this.height = height;\n    this.preparevram(width, height);\n    this.initModule();\n  }\n\n  public initModule() {\n    this.write([0x09, 0x00]); // Code B decode for digits 3-0 No decode for digits 7-4\n    this.write([0x0a, 0x05]); // brightness 9/32 0 to f\n    this.write([0x0b, 0x07]); // Display digits 0 1 2 3 4 567\n    this.write([0x0c, 0x01]); // Shutdown to normal operation\n    this.write([0x0f, 0x00]);\n    this.passingCommands();\n    this.obniz.wait(10);\n  }\n\n  public test() {\n    this.write([0x0f, 0x00]); // test command\n    this.passingCommands();\n  }\n\n  public passingCommands() {\n    for (let i = 8; i < this.width; i += 8) {\n      // this needed for number of unit\n      this.write([0x00, 0x00]);\n    }\n  }\n\n  public brightness(val: any) {\n    this.write([0x0a, val]); // 0 to 15;\n    this.passingCommands();\n  }\n\n  public preparevram(width: any, height: any) {\n    this.vram = [];\n    for (let i = 0; i < height; i++) {\n      const dots: any = new Array(width / 8);\n      for (let ii = 0; ii < dots.length; ii++) {\n        dots[ii] = 0x00;\n      }\n      this.vram.push(dots);\n    }\n  }\n\n  public write(data: any) {\n    this.cs.output(false);\n    this.spi.write(data);\n    this.cs.output(true);\n  }\n\n  public writeVram() {\n    for (let line_num = 0; line_num < this.height; line_num++) {\n      const addr: any = line_num + 1;\n      const line: any = this.vram[line_num];\n      const data: any = [];\n      for (let col = 0; col < line.length; col++) {\n        data.push(addr);\n        data.push(line[col]);\n      }\n      this.write(data);\n    }\n  }\n\n  public clear() {\n    for (let line_num = 0; line_num < this.height; line_num++) {\n      const line: any = this.vram[line_num];\n      for (let col = 0; col < line.length; col++) {\n        this.vram[line_num][col] = 0x00;\n      }\n      this.writeVram();\n    }\n  }\n\n  public draw(ctx: any) {\n    const imageData: any = ctx.getImageData(0, 0, this.width, this.height);\n    const data: any = imageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const brightness: any = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\n      const index: any = Math.floor(i / 4);\n      const line: any = Math.floor(index / this.width);\n      const col: any = Math.floor((index - line * this.width) / 8);\n      const bits: any = Math.floor(index - line * this.width) % 8;\n      if (bits === 0) {\n        this.vram[line][col] = 0x00;\n      }\n      if (brightness > 0x7f) {\n        this.vram[line][col] |= 0x80 >> bits;\n      }\n    }\n\n    this.writeVram();\n  }\n}\n\nexport default MatrixLED_MAX7219;\n"]}