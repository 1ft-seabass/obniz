{"version":3,"sources":["../src/parts/Display/7SegmentLED_MAX7219/index.ts"],"names":[],"mappings":"AAAA,cAAM,oBAAoB;WAEV,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,EAAE,EAAE,GAAG,CAAC;IACR,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;IACT,KAAK,EAAE,GAAG,CAAC;IACX,SAAS,EAAE,GAAG,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;;IAOZ,KAAK,CAAC,KAAK,EAAE,GAAG;IAuBhB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAWnC,KAAK,CAAC,IAAI,EAAE,GAAG;IAMf,QAAQ;IAQR,IAAI;IAIJ,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAI9B,aAAa,CAAC,GAAG,EAAE,GAAG;IAItB,YAAY,CAAC,IAAI,EAAE,GAAG;IAMtB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAYjC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;IAMrD,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;CA4BvC;AAED,eAAe,oBAAoB,CAAC","file":"index.d.ts","sourcesContent":["class _7SegmentLED_MAX7219 {\n\n  public static info() {\n    return {\n      name: \"7SegmentLED_MAX7219\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public cs: any;\n  public params: any;\n  public spi: any;\n  public obniz: any;\n  public numOfDisp: any;\n  public digits: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"din\", \"cs\", \"clk\"];\n    this.requiredKeys = [\"din\", \"cs\", \"clk\"];\n  }\n\n  public wired(obniz: any) {\n    this.cs = obniz.getIO(this.params.cs);\n    // logich high must 3.5v <=\n    if (obniz.isValidIO(this.params.vcc)) {\n      obniz.getIO(this.params.vcc).output(true);\n    }\n    if (obniz.isValidIO(this.params.gnd)) {\n      obniz.getIO(this.params.gnd).output(false);\n    }\n\n    // max 10Mhz but motor driver can't\n    this.params.frequency = this.params.frequency || 10 * 1000 * 1000;\n    this.params.mode = \"master\";\n    this.params.mosi = this.params.din;\n    this.params.drive = \"3v\";\n    this.spi = this.obniz.getSpiWithConfig(this.params);\n\n    // reset a onece\n    this.cs.output(true);\n    this.cs.output(false);\n    this.cs.output(true);\n  }\n\n  public init(numOfDisplay: any, digits: any) {\n    this.numOfDisp = numOfDisplay;\n    this.digits = digits;\n    this.writeAllDisp([0x09, 0xff]); // Code B decode for digits 7-0\n    this.writeAllDisp([0x0a, 0x05]); // brightness 11/32 0 to f\n    this.writeAllDisp([0x0b, digits - 1]);\n    this.writeAllDisp([0x0c, 0x01]); // Shutdown to normal operation\n    this.writeAllDisp([0x0f, 0x00]);\n    this.obniz.wait(10);\n  }\n\n  public clear(disp: any) {\n    for (let i = 0; i < this.digits; i++) {\n      this.writeOneDisp(disp, [i + 1, 0x0f]);\n    }\n  }\n\n  public clearAll() {\n    for (let i = 0; i < this.numOfDisp; i++) {\n      for (let j = 0; j < this.digits; j++) {\n        this.writeAllDisp([j + 1, 0x0f]);\n      }\n    }\n  }\n\n  public test() {\n    this.writeAllDisp([0x0f, 0x00]); // test command\n  }\n\n  public brightness(disp: any, val: any) {\n    this.writeOneDisp(disp, [0x0a, val]); // 0 to 15;\n  }\n\n  public brightnessAll(val: any) {\n    this.writeAllDisp([0x0a, val]); // 0 to 15;\n  }\n\n  public writeAllDisp(data: any) {\n    for (let i = 0; i < this.numOfDisp; i++) {\n      this.writeOneDisp(i, data);\n    }\n  }\n\n  public writeOneDisp(disp: any, data: any) {\n    this.cs.output(false);\n    for (let i = 0; i < disp; i++) {\n      this.spi.write([0x00, 0x00]);\n    }\n    this.spi.write(data);\n    for (let i = 0; i < this.numOfDisp - (disp + 1); i++) {\n      this.spi.write([0x00, 0x00]);\n    }\n    this.cs.output(true);\n  }\n\n  public setNumber(disp: any, digit: any, number: any, dp: any) {\n    if (digit >= 0 && digit <= this.digits - 1) {\n      this.writeOneDisp(disp, [digit + 1, this.encodeBCD(number, dp)]);\n    }\n  }\n\n  public encodeBCD(decimal: any, dp: any) {\n    let dpreg: any;\n    if (dp === true) {\n      dpreg = 0x80;\n    } else {\n      dpreg = 0x00;\n    }\n    if (decimal >= 0 && decimal <= 9) {\n      return decimal | dpreg;\n    } else if (decimal === \"-\" || decimal === 10) {\n      return 0x0a | dpreg;\n    } else if (decimal === \"e\" || decimal === 11) {\n      return 0x0b | dpreg;\n    } else if (decimal === \"h\" || decimal === 12) {\n      return 0x0c | dpreg;\n    } else if (decimal === \"l\" || decimal === 13) {\n      return 0x0d | dpreg;\n    } else if (decimal === \"p\" || decimal === 14) {\n      return 0x0e | dpreg;\n    } else if (decimal === \"on\") {\n      // light all segments\n      return 0x88;\n    } else if (decimal === \"off\") {\n      return 0x0f | dpreg;\n    } else {\n      return 0x0f | dpreg;\n    }\n  }\n}\n\nexport default _7SegmentLED_MAX7219;\n"]}