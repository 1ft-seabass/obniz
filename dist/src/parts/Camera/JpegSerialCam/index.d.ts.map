{"version":3,"sources":["../src/parts/Camera/JpegSerialCam/index.ts"],"names":[],"mappings":"AAAA,cAAM,aAAa;WAEH,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IACZ,WAAW,EAAE,GAAG,CAAC;IACjB,cAAc,EAAE,GAAG,CAAC;IACpB,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;;IAWV,KAAK,CAAC,KAAK,EAAE,GAAG;IAWV,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAgBpD,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAe/B,aAAa,CAAC,KAAK,EAAE,GAAG;IAIlB,SAAS,CAAC,GAAG,EAAE,GAAG;IAclB,SAAS;IAMT,WAAW,CAAC,UAAU,EAAE,GAAG;IAgB3B,sBAAsB,CAAC,QAAQ,EAAE,GAAG;IAOpC,WAAW,CAAC,IAAI,EAAE,GAAG;IAwCrB,QAAQ;CA0EtB;AAED,eAAe,aAAa,CAAC","file":"index.d.ts","sourcesContent":["class JpegSerialCam {\n\n  public static info() {\n    return {\n      name: \"JpegSerialCam\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public ioKeys: any;\n  public displayName: any;\n  public displayIoNames: any;\n  public obniz: any;\n  public params: any;\n  public my_tx: any;\n  public my_rx: any;\n  public uart: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"cam_tx\", \"cam_rx\", \"gnd\"];\n    this.requiredKeys = [\"cam_tx\", \"cam_rx\"];\n\n    this.ioKeys = this.keys;\n    this.displayName = \"Jcam\";\n    this.displayIoNames = {cam_tx: \"camTx\", cam_rx: \"camRx\"};\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.my_tx = this.params.cam_rx;\n    this.my_rx = this.params.cam_tx;\n\n    this.obniz.getIO(this.my_tx).drive(\"3v\");\n\n    this.uart = this.obniz.getFreeUart();\n  }\n\n  public async _drainUntil(uart: any, search: any, recv?: any) {\n    if (!recv) {\n      recv = [];\n    }\n    while (true) {\n      const readed: any = uart.readBytes();\n      recv = recv.concat(readed);\n      const tail: any = this._seekTail(search, recv);\n      if (tail >= 0) {\n        recv.splice(0, tail);\n        return recv;\n      }\n      await this.obniz.wait(10);\n    }\n  }\n\n  public _seekTail(search: any, src: any) {\n    let f: any = 0;\n    for (let i = 0; i < src.length; i++) {\n      if (src[i] === search[f]) {\n        f++;\n        if (f === search.length) {\n          return i + 1;\n        }\n      } else {\n        f = 0;\n      }\n    }\n    return -1;\n  }\n\n  public arrayToBase64(array: any) {\n    return Buffer.from(array).toString(\"base64\");\n  }\n\n  public async startWait(obj: any) {\n    if (!obj) {\n      obj = {};\n    }\n    this.uart.start({\n      tx: this.my_tx,\n      rx: this.my_rx,\n      baud: obj.baud || 38400,\n    });\n    this.obniz.display.setPinName(this.my_tx, \"JpegSerialCam\", \"camRx\");\n    this.obniz.display.setPinName(this.my_rx, \"JpegSerialCam\", \"camTx\");\n    await this.obniz.wait(2500);\n  }\n\n  public async resetwait() {\n    this.uart.send([0x56, 0x00, 0x26, 0x00]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x26, 0x00]);\n    await this.obniz.wait(2500);\n  }\n\n  public async setSizeWait(resolution: any) {\n    let val: any;\n    if (resolution === \"640x480\") {\n      val = 0x00;\n    } else if (resolution === \"320x240\") {\n      val = 0x11;\n    } else if (resolution === \"160x120\") {\n      val = 0x22;\n    } else {\n      throw new Error(\"unsupported size\");\n    }\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, val]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    await this.resetwait();\n  }\n\n  public async setCompressibilityWait(compress: any) {\n    const val: any = Math.floor((compress / 100) * 0xff);\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, val]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    await this.resetwait();\n  }\n\n  public async setBaudWait(baud: any) {\n    let val: any;\n    switch (baud) {\n      case 9600:\n        val = [0xae, 0xc8];\n        break;\n      case 19200:\n        val = [0x56, 0xe4];\n        break;\n      case 38400:\n        val = [0x2a, 0xf2];\n        break;\n      case 57600:\n        val = [0x1c, 0x4c];\n        break;\n      case 115200:\n        val = [0x0d, 0xa6];\n        break;\n      default:\n        throw new Error(\"invalid baud rate\");\n    }\n    this.uart.send([\n      0x56,\n      0x00,\n      0x31,\n      0x06,\n      0x04,\n      0x02,\n      0x00,\n      0x08,\n      val[0],\n      val[1],\n    ]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    // await this.obniz.wait(1000);\n    await this.startWait({\n      baud,\n    });\n  }\n\n  public async takeWait() {\n    const uart: any = this.uart;\n    // console.log(\"stop a photo\")\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x02]);\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\n\n    // console.log(\"take a photo\")\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x00]);\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\n\n    // console.log(\"read length\")\n    uart.send([0x56, 0x00, 0x34, 0x01, 0x00]); // read length of image data\n    let recv: any = await this._drainUntil(uart, [\n      0x76,\n      0x00,\n      0x34,\n      0x00,\n      0x04,\n      0x00,\n      0x00,\n    ]); // ack\n    let XX: any;\n    let YY: any;\n    while (true) {\n      const readed: any = uart.readBytes();\n      // console.log(recv);\n      recv = recv.concat(readed);\n      if (recv.length >= 2) {\n        XX = recv[0];\n        YY = recv[1];\n        break;\n      }\n      await this.obniz.wait(1000);\n    }\n    const databytes: any = XX * 256 + YY;\n    // console.log(\"image: \" + databytes + \" Bytes\");\n    // const high = (databytes >> 8) & 0xff;\n    // const low = databytes & 0xff;\n\n    // console.log(\"start reading image\")\n    uart.send([\n      0x56,\n      0x00,\n      0x32,\n      0x0c,\n      0x00,\n      0x0a,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      XX,\n      YY,\n      0x00,\n      0xff,\n    ]);\n    recv = await this._drainUntil(uart, [0x76, 0x00, 0x32, 0x00, 0x00]);\n    // console.log(\"reading...\");\n    while (true) {\n      const readed: any = uart.readBytes();\n      recv = recv.concat(readed);\n      // console.log(readed.length);\n      if (recv.length >= databytes) {\n        break;\n      }\n      await this.obniz.wait(10);\n    }\n    // console.log(\"done\");\n    recv = recv.splice(0, databytes); // remove tail\n    recv = recv.concat([0xff, 0xd9]);\n    return recv;\n  }\n}\n\nexport default JpegSerialCam;\n"]}