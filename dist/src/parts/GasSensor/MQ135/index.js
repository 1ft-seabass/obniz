"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MQ135 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ135",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ135;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVExMzUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEtBQUs7SUFxQlQ7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7UUFFOUIsc0JBQXNCO1FBQ3RCLHVCQUF1QjtJQUN6QixDQUFDO0lBOUJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7SUFDSixDQUFDO0lBNEJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDN0IsbUNBQW1DO2dCQUNuQyxJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxVQUFVLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzlCO2dCQUNELElBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFFBQVE7b0JBQ3JDLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTztvQkFDNUIsT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFDMUM7b0JBQ0EsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDL0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQzNCLElBQUksT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtvQkFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDN0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLFlBQVk7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxRQUFRLENBQUMsT0FBWTtRQUMxQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQztTQUNqQjthQUFNO1lBQ0wsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO1lBQ2xDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBZ0JGO0FBRUQsa0JBQWUsS0FBSyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9HYXNTZW5zb3IvTVExMzUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNUTEzNSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RMTM1XCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlYW5hbG9nOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWRpZ2l0YWw6IGFueTtcbiAgcHVibGljIG9uZXhjZWVkdm9sdGFnZTogYW55O1xuICBwdWJsaWMgdm9sdGFnZUxpbWl0OiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgdmNjOiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIGduZDogYW55O1xuICBwdWJsaWMgYWQ6IGFueTtcbiAgcHVibGljIGRvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wiZ25kXCIsIFwidmNjXCIsIFwiZG9cIiwgXCJhb1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtdO1xuXG4gICAgdGhpcy5vbmNoYW5nZWFuYWxvZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnZvbHRhZ2VMaW1pdCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIHRoaXMuUkwgPSAyICogMTAwMDtcbiAgICAvLyB0aGlzLlJPID0gMjAgKiAxMDAwO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLm9ibml6ID0gb2JuaXo7XG5cbiAgICB0aGlzLnZjYyA9IHRoaXMucGFyYW1zLnZjYztcbiAgICB0aGlzLmduZCA9IHRoaXMucGFyYW1zLmduZDtcblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5hbykpIHtcbiAgICAgIHRoaXMuYWQgPSBvYm5pei5nZXRBRCh0aGlzLnBhcmFtcy5hbyk7XG4gICAgICB0aGlzLmFkLnN0YXJ0KCh2b2x0YWdlOiBhbnkpID0+IHtcbiAgICAgICAgLy8gdGhpcy5sZXZlbCA9IHRoaXMuY2FsYyh2b2x0YWdlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlYW5hbG9nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlYW5hbG9nKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgdGhpcy52b2x0YWdlTGltaXQgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgICB0aGlzLnZvbHRhZ2VMaW1pdCA8PSB2b2x0YWdlICYmXG4gICAgICAgICAgdHlwZW9mIHRoaXMub25leGNlZWR2b2x0YWdlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2Uodm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5kbykpIHtcbiAgICAgIHRoaXMuZG8gPSBvYm5pei5nZXRJTyh0aGlzLnBhcmFtcy5kbyk7XG4gICAgICB0aGlzLmRvLmlucHV0KCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXJ0SGVhdGluZygpIHtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnZjYywgdGhpcy5nbmQsIFwiNXZcIik7XG4gIH1cblxuICBwdWJsaWMgaGVhdFdhaXQoc2Vjb25kczogYW55KSB7XG4gICAgdGhpcy5zdGFydEhlYXRpbmcoKTtcbiAgICBpZiAoc2Vjb25kcyA+IDApIHtcbiAgICAgIHNlY29uZHMgKj0gMTAwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Vjb25kcyA9IDIgKiA2MCAqIDEwMDA7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHNlY29uZHMpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gUnMvUm8gd2lsbCBkZXNjcmVhc2UgYnkgaW5zZWFzZSBvZiBnYXMuXG4gIC8vIFJzID0gcmVzaXRhbmNlIDIway0xMDBrLiBSbyA9IHJlc2lzdGFuY2Ugb2YgMTAwMHBwbSBMUEdcbiAgLy8gSWYgUkwgPVxuXG4gIC8vIGNhbGModm9sdGFnZSkge1xuXG4gIC8vICAgaWYgKHZvbHRhZ2UgPT09MCkge1xuICAvLyAgICAgdm9sdGFnZSA9IDAuMDAwMDAxXG4gIC8vICAgfVxuICAvLyAgIGNvbnN0IFJTID0gdGhpcy5STCAvIHZvbHRhZ2UgKiA1LjBcbiAgLy8gICBjb25zdCByYXRpbyA9IFJTIC8gdGhpcy5STztcblxuICAvLyAgIHJldHVybiB2b2x0YWdlO1xuICAvLyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1RMTM1O1xuIl19
