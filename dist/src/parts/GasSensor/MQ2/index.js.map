{"version":3,"sources":["../src/parts/GasSensor/MQ2/index.ts"],"names":[],"mappings":";;AAIA,MAAM,GAAG;IAqBP;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAE9B,sBAAsB;QACtB,uBAAuB;IACzB,CAAC;IA9BM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,KAAK;SACZ,CAAC;IACJ,CAAC;IA4BM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAE3B,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACxC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAY,EAAE,EAAE;gBAC7B,mCAAmC;gBACnC,IAAI,OAAO,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;oBAC7C,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBAC9B;gBACD,IACE,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ;oBACrC,IAAI,CAAC,YAAY,IAAI,OAAO;oBAC5B,OAAO,IAAI,CAAC,eAAe,KAAK,UAAU,EAC1C;oBACA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;iBAC/B;YACH,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACxC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,OAAO,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE;oBAC9C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,YAAY;QACjB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,QAAQ,CAAC,OAAY;QAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,OAAO,GAAG,CAAC,EAAE;YACf,OAAO,IAAI,IAAI,CAAC;SACjB;aAAM;YACL,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;YAClC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;CAgBF;AAED,kBAAe,GAAG,CAAC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface MQ2Options { }\nclass MQ2 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MQ2\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public onchangeanalog: any;\n  public onchangedigital: any;\n  public onexceedvoltage: any;\n  public voltageLimit: any;\n  public obniz!: Obniz;\n  public vcc: any;\n  public params: any;\n  public gnd: any;\n  public ad: any;\n  public do: any;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"do\", \"ao\"];\n    this.requiredKeys = [];\n\n    this.onchangeanalog = undefined;\n    this.onchangedigital = undefined;\n    this.onexceedvoltage = undefined;\n    this.voltageLimit = undefined;\n\n    // this.RL = 2 * 1000;\n    // this.RO = 20 * 1000;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.vcc = this.params.vcc;\n    this.gnd = this.params.gnd;\n\n    if (this.obniz.isValidIO(this.params.ao)) {\n      this.ad = obniz.getAD(this.params.ao);\n      this.ad.start((voltage: any) => {\n        // this.level = this.calc(voltage);\n        if (typeof this.onchangeanalog === \"function\") {\n          this.onchangeanalog(voltage);\n        }\n        if (\n          typeof this.voltageLimit === \"number\" &&\n          this.voltageLimit <= voltage &&\n          typeof this.onexceedvoltage === \"function\"\n        ) {\n          this.onexceedvoltage(voltage);\n        }\n      });\n    }\n\n    if (this.obniz.isValidIO(this.params.do)) {\n      this.do = obniz.getIO(this.params.do);\n      this.do.input((value: any) => {\n        if (typeof this.onchangedigital === \"function\") {\n          this.onchangedigital(value);\n        }\n      });\n    }\n  }\n\n  public startHeating() {\n    this.obniz.setVccGnd(this.vcc, this.gnd, \"5v\");\n  }\n\n  public heatWait(seconds: any) {\n    this.startHeating();\n    if (seconds > 0) {\n      seconds *= 1000;\n    } else {\n      seconds = 2 * 60 * 1000;\n    }\n    return new Promise((resolve: any) => {\n      setTimeout(resolve, seconds);\n    });\n  }\n\n  // Rs/Ro will descrease by insease of gas.\n  // Rs = resitance 20k-100k. Ro = resistance of 1000ppm LPG\n  // If RL =\n\n  // calc(voltage) {\n\n  //   if (voltage ===0) {\n  //     voltage = 0.000001\n  //   }\n  //   const RS = this.RL / voltage * 5.0\n  //   const ratio = RS / this.RO;\n\n  //   return voltage;\n  // }\n}\n\nexport default MQ2;\n"]}