"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MQ3 {
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ3",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ3;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVEzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLHNCQUFzQjtRQUN0Qix1QkFBdUI7SUFDekIsQ0FBQztJQTlCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0lBQ0osQ0FBQztJQTRCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzdCLG1DQUFtQztnQkFDbkMsSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QjtnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxRQUFRO29CQUNyQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU87b0JBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQzFDO29CQUNBLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxJQUFJLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQWdCRjtBQUVELGtCQUFlLEdBQUcsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvR2FzU2Vuc29yL01RMy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE1RMyB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIk1RM1wiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvbmNoYW5nZWFuYWxvZzogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VkaWdpdGFsOiBhbnk7XG4gIHB1YmxpYyBvbmV4Y2VlZHZvbHRhZ2U6IGFueTtcbiAgcHVibGljIHZvbHRhZ2VMaW1pdDogYW55O1xuICBwdWJsaWMgb2JuaXo6IGFueTtcbiAgcHVibGljIHZjYzogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBnbmQ6IGFueTtcbiAgcHVibGljIGFkOiBhbnk7XG4gIHB1YmxpYyBkbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcImduZFwiLCBcInZjY1wiLCBcImRvXCIsIFwiYW9cIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXTtcblxuICAgIHRoaXMub25jaGFuZ2VhbmFsb2cgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52b2x0YWdlTGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB0aGlzLlJMID0gMiAqIDEwMDA7XG4gICAgLy8gdGhpcy5STyA9IDIwICogMTAwMDtcbiAgfVxuXG4gIHB1YmxpYyB3aXJlZChvYm5pejogYW55KSB7XG4gICAgdGhpcy5vYm5peiA9IG9ibml6O1xuXG4gICAgdGhpcy52Y2MgPSB0aGlzLnBhcmFtcy52Y2M7XG4gICAgdGhpcy5nbmQgPSB0aGlzLnBhcmFtcy5nbmQ7XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuYW8pKSB7XG4gICAgICB0aGlzLmFkID0gb2JuaXouZ2V0QUQodGhpcy5wYXJhbXMuYW8pO1xuICAgICAgdGhpcy5hZC5zdGFydCgodm9sdGFnZTogYW55KSA9PiB7XG4gICAgICAgIC8vIHRoaXMubGV2ZWwgPSB0aGlzLmNhbGModm9sdGFnZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbmNoYW5nZWFuYWxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWFuYWxvZyh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHRoaXMudm9sdGFnZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgdGhpcy52b2x0YWdlTGltaXQgPD0gdm9sdGFnZSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzLm9uZXhjZWVkdm9sdGFnZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub25leGNlZWR2b2x0YWdlKHZvbHRhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuZG8pKSB7XG4gICAgICB0aGlzLmRvID0gb2JuaXouZ2V0SU8odGhpcy5wYXJhbXMuZG8pO1xuICAgICAgdGhpcy5kby5pbnB1dCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VkaWdpdGFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aGlzLm9uY2hhbmdlZGlnaXRhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGFydEhlYXRpbmcoKSB7XG4gICAgdGhpcy5vYm5pei5zZXRWY2NHbmQodGhpcy52Y2MsIHRoaXMuZ25kLCBcIjV2XCIpO1xuICB9XG5cbiAgcHVibGljIGhlYXRXYWl0KHNlY29uZHM6IGFueSkge1xuICAgIHRoaXMuc3RhcnRIZWF0aW5nKCk7XG4gICAgaWYgKHNlY29uZHMgPiAwKSB7XG4gICAgICBzZWNvbmRzICo9IDEwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZHMgPSAyICogNjAgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xuICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBzZWNvbmRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJzL1JvIHdpbGwgZGVzY3JlYXNlIGJ5IGluc2Vhc2Ugb2YgZ2FzLlxuICAvLyBScyA9IHJlc2l0YW5jZSAyMGstMTAway4gUm8gPSByZXNpc3RhbmNlIG9mIDEwMDBwcG0gTFBHXG4gIC8vIElmIFJMID1cblxuICAvLyBjYWxjKHZvbHRhZ2UpIHtcblxuICAvLyAgIGlmICh2b2x0YWdlID09PTApIHtcbiAgLy8gICAgIHZvbHRhZ2UgPSAwLjAwMDAwMVxuICAvLyAgIH1cbiAgLy8gICBjb25zdCBSUyA9IHRoaXMuUkwgLyB2b2x0YWdlICogNS4wXG4gIC8vICAgY29uc3QgcmF0aW8gPSBSUyAvIHRoaXMuUk87XG5cbiAgLy8gICByZXR1cm4gdm9sdGFnZTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUTM7XG4iXX0=
