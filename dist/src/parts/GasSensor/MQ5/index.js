"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MQ5 {
    // https://www.parallax.com/sites/default/files/downloads/605-00009-MQ-5-Datasheet.pdf
    constructor() {
        this.keys = ["gnd", "vcc", "do", "ao"];
        this.requiredKeys = [];
        this.onchangeanalog = undefined;
        this.onchangedigital = undefined;
        this.onexceedvoltage = undefined;
        this.voltageLimit = undefined;
        // this.RL = 2 * 1000;
        // this.RO = 20 * 1000;
    }
    static info() {
        return {
            name: "MQ5",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        this.vcc = this.params.vcc;
        this.gnd = this.params.gnd;
        if (this.obniz.isValidIO(this.params.ao)) {
            this.ad = obniz.getAD(this.params.ao);
            this.ad.start((voltage) => {
                // this.level = this.calc(voltage);
                if (typeof this.onchangeanalog === "function") {
                    this.onchangeanalog(voltage);
                }
                if (typeof this.voltageLimit === "number" &&
                    this.voltageLimit <= voltage &&
                    typeof this.onexceedvoltage === "function") {
                    this.onexceedvoltage(voltage);
                }
            });
        }
        if (this.obniz.isValidIO(this.params.do)) {
            this.do = obniz.getIO(this.params.do);
            this.do.input((value) => {
                if (typeof this.onchangedigital === "function") {
                    this.onchangedigital(value);
                }
            });
        }
    }
    startHeating() {
        this.obniz.setVccGnd(this.vcc, this.gnd, "5v");
    }
    heatWait(seconds) {
        this.startHeating();
        if (seconds > 0) {
            seconds *= 1000;
        }
        else {
            seconds = 2 * 60 * 1000;
        }
        return new Promise((resolve) => {
            setTimeout(resolve, seconds);
        });
    }
}
exports.default = MQ5;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9HYXNTZW5zb3IvTVE1L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHO0lBcUJQLHNGQUFzRjtJQUN0RjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUU5QixzQkFBc0I7UUFDdEIsdUJBQXVCO0lBQ3pCLENBQUM7SUEvQk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQztJQUNKLENBQUM7SUE2Qk0sS0FBSyxDQUFDLEtBQVU7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBRTNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO2dCQUM3QixtQ0FBbUM7Z0JBQ25DLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFVBQVUsRUFBRTtvQkFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDOUI7Z0JBQ0QsSUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssUUFBUTtvQkFDckMsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPO29CQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUMxQztvQkFDQSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMvQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDM0IsSUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssVUFBVSxFQUFFO29CQUM5QyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sWUFBWTtRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLFFBQVEsQ0FBQyxPQUFZO1FBQzFCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDZixPQUFPLElBQUksSUFBSSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7WUFDbEMsVUFBVSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FnQkY7QUFFRCxrQkFBZSxHQUFHLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0dhc1NlbnNvci9NUTUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNUTUge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJNUTVcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgb25jaGFuZ2VhbmFsb2c6IGFueTtcbiAgcHVibGljIG9uY2hhbmdlZGlnaXRhbDogYW55O1xuICBwdWJsaWMgb25leGNlZWR2b2x0YWdlOiBhbnk7XG4gIHB1YmxpYyB2b2x0YWdlTGltaXQ6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyB2Y2M6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgZ25kOiBhbnk7XG4gIHB1YmxpYyBhZDogYW55O1xuICBwdWJsaWMgZG86IGFueTtcblxuICAvLyBodHRwczovL3d3dy5wYXJhbGxheC5jb20vc2l0ZXMvZGVmYXVsdC9maWxlcy9kb3dubG9hZHMvNjA1LTAwMDA5LU1RLTUtRGF0YXNoZWV0LnBkZlxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJ2Y2NcIiwgXCJkb1wiLCBcImFvXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW107XG5cbiAgICB0aGlzLm9uY2hhbmdlYW5hbG9nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25jaGFuZ2VkaWdpdGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25leGNlZWR2b2x0YWdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudm9sdGFnZUxpbWl0ID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gdGhpcy5STCA9IDIgKiAxMDAwO1xuICAgIC8vIHRoaXMuUk8gPSAyMCAqIDEwMDA7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIHRoaXMudmNjID0gdGhpcy5wYXJhbXMudmNjO1xuICAgIHRoaXMuZ25kID0gdGhpcy5wYXJhbXMuZ25kO1xuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmFvKSkge1xuICAgICAgdGhpcy5hZCA9IG9ibml6LmdldEFEKHRoaXMucGFyYW1zLmFvKTtcbiAgICAgIHRoaXMuYWQuc3RhcnQoKHZvbHRhZ2U6IGFueSkgPT4ge1xuICAgICAgICAvLyB0aGlzLmxldmVsID0gdGhpcy5jYWxjKHZvbHRhZ2UpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25jaGFuZ2VhbmFsb2cgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMub25jaGFuZ2VhbmFsb2codm9sdGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0aGlzLnZvbHRhZ2VMaW1pdCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgIHRoaXMudm9sdGFnZUxpbWl0IDw9IHZvbHRhZ2UgJiZcbiAgICAgICAgICB0eXBlb2YgdGhpcy5vbmV4Y2VlZHZvbHRhZ2UgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9uZXhjZWVkdm9sdGFnZSh2b2x0YWdlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub2JuaXouaXNWYWxpZElPKHRoaXMucGFyYW1zLmRvKSkge1xuICAgICAgdGhpcy5kbyA9IG9ibml6LmdldElPKHRoaXMucGFyYW1zLmRvKTtcbiAgICAgIHRoaXMuZG8uaW5wdXQoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uY2hhbmdlZGlnaXRhbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5vbmNoYW5nZWRpZ2l0YWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnRIZWF0aW5nKCkge1xuICAgIHRoaXMub2JuaXouc2V0VmNjR25kKHRoaXMudmNjLCB0aGlzLmduZCwgXCI1dlwiKTtcbiAgfVxuXG4gIHB1YmxpYyBoZWF0V2FpdChzZWNvbmRzOiBhbnkpIHtcbiAgICB0aGlzLnN0YXJ0SGVhdGluZygpO1xuICAgIGlmIChzZWNvbmRzID4gMCkge1xuICAgICAgc2Vjb25kcyAqPSAxMDAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWNvbmRzID0gMiAqIDYwICogMTAwMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBScy9SbyB3aWxsIGRlc2NyZWFzZSBieSBpbnNlYXNlIG9mIGdhcy5cbiAgLy8gUnMgPSByZXNpdGFuY2UgMjBrLTEwMGsuIFJvID0gcmVzaXN0YW5jZSBvZiAxMDAwcHBtIExQR1xuICAvLyBJZiBSTCA9XG5cbiAgLy8gY2FsYyh2b2x0YWdlKSB7XG5cbiAgLy8gICBpZiAodm9sdGFnZSA9PT0wKSB7XG4gIC8vICAgICB2b2x0YWdlID0gMC4wMDAwMDFcbiAgLy8gICB9XG4gIC8vICAgY29uc3QgUlMgPSB0aGlzLlJMIC8gdm9sdGFnZSAqIDUuMFxuICAvLyAgIGNvbnN0IHJhdGlvID0gUlMgLyB0aGlzLlJPO1xuXG4gIC8vICAgcmV0dXJuIHZvbHRhZ2U7XG4gIC8vIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTVE1O1xuIl19
