{"version":3,"sources":["../src/parts/Grove/Grove_EarHeartRate/index.ts"],"names":[],"mappings":"AAAA,cAAM,kBAAkB;WAER,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,cAAc,EAAE,GAAG,CAAC;IACpB,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;;IAgBZ,KAAK,CAAC,KAAK,EAAE,GAAG;IAKhB,KAAK,CAAC,QAAQ,EAAE,GAAG;IAwBnB,OAAO;CAOf;AAED,eAAe,kBAAkB,CAAC","file":"index.d.ts","sourcesContent":["class Grove_EarHeartRate {\n\n  public static info() {\n    return {\n      name: \"Grove_EarHeartRate\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public displayIoNames: any;\n  public interval: any;\n  public duration: any;\n  public obniz: any;\n  public params: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\n    this.requiredKeys = [\"vcc\", \"gnd\"];\n\n    this.displayIoNames = {\n      vcc: \"vcc\",\n      gnd: \"gnd\",\n      signal: \"signal\",\n    };\n\n    this.interval = 5;\n    this.duration = 2.5 * 1000;\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n  }\n\n  public start(callback: any) {\n    this.obniz.logicAnalyzer.start({\n      io: this.params.signal,\n      interval: this.interval,\n      duration: this.duration,\n    });\n\n    this.obniz.logicAnalyzer.onmeasured = (array: any) => {\n      const edges: any = [];\n      for (let i = 0; i < array.length - 1; i++) {\n        if (array[i] === 0 && array[i + 1] === 1) {\n          edges.push(i);\n        }\n      }\n      if (edges.length >= 2) {\n        let between: any = 0;\n        let pulseMin: any = 0;\n        between = ((edges[1] - edges[0]) * this.interval) / 1000.0;\n        pulseMin = 60 / between;\n        callback(pulseMin);\n      }\n    };\n  }\n\n  public getWait() {\n    return new Promise((resolve: any) => {\n      this.start((rate: any) => {\n        resolve(rate);\n      });\n    });\n  }\n}\n\nexport default Grove_EarHeartRate;\n"]}