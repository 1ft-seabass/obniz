{"version":3,"sources":["../src/parts/Grove/Grove_EarHeartRate/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,yBAAyB;CACzC;AAED,cAAM,kBAAmB,YAAW,mBAAmB;WAEvC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc,EAAE,GAAG,CAAC;IACpB,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;;IAgBZ,KAAK,CAAC,KAAK,EAAE,KAAK;IAKlB,KAAK,CAAC,QAAQ,EAAE,GAAG;IAwBnB,OAAO;CAOf;AAED,eAAe,kBAAkB,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Grove_EarHeartRateOptions {\n}\n\nclass Grove_EarHeartRate implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_EarHeartRate\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public displayIoNames: any;\n  public interval: any;\n  public duration: any;\n  public obniz!: Obniz;\n  public params: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\n    this.requiredKeys = [\"vcc\", \"gnd\"];\n\n    this.displayIoNames = {\n      vcc: \"vcc\",\n      gnd: \"gnd\",\n      signal: \"signal\",\n    };\n\n    this.interval = 5;\n    this.duration = 2.5 * 1000;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n  }\n\n  public start(callback: any) {\n    this.obniz.logicAnalyzer!.start({\n      io: this.params.signal as number,\n      interval: this.interval as number,\n      duration: this.duration as number,\n    });\n\n    this.obniz.logicAnalyzer!.onmeasured = (array: any) => {\n      const edges: any = [];\n      for (let i = 0; i < array.length - 1; i++) {\n        if (array[i] === 0 && array[i + 1] === 1) {\n          edges.push(i);\n        }\n      }\n      if (edges.length >= 2) {\n        let between: any = 0;\n        let pulseMin: any = 0;\n        between = ((edges[1] - edges[0]) * this.interval) / 1000.0;\n        pulseMin = 60 / between;\n        callback(pulseMin);\n      }\n    };\n  }\n\n  public getWait() {\n    return new Promise((resolve: any) => {\n      this.start((rate: any) => {\n        resolve(rate);\n      });\n    });\n  }\n}\n\nexport default Grove_EarHeartRate;\n"]}