"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_EarHeartRate {
    constructor() {
        this.keys = ["vcc", "gnd", "signal"];
        this.requiredKeys = ["vcc", "gnd"];
        this.displayIoNames = {
            vcc: "vcc",
            gnd: "gnd",
            signal: "signal",
        };
        this.interval = 5;
        this.duration = 2.5 * 1000;
    }
    static info() {
        return {
            name: "Grove_EarHeartRate",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
    }
    start(callback) {
        this.obniz.logicAnalyzer.start({
            io: this.params.signal,
            interval: this.interval,
            duration: this.duration,
        });
        this.obniz.logicAnalyzer.onmeasured = (array) => {
            const edges = [];
            for (let i = 0; i < array.length - 1; i++) {
                if (array[i] === 0 && array[i + 1] === 1) {
                    edges.push(i);
                }
            }
            if (edges.length >= 2) {
                let between = 0;
                let pulseMin = 0;
                between = ((edges[1] - edges[0]) * this.interval) / 1000.0;
                pulseMin = 60 / between;
                callback(pulseMin);
            }
        };
    }
    getWait() {
        return new Promise((resolve) => {
            this.start((rate) => {
                resolve(rate);
            });
        });
    }
}
exports.default = Grove_EarHeartRate;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV9FYXJIZWFydFJhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLGtCQUFrQjtJQWdCdEI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDcEIsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztZQUNWLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQTFCTSxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPO1lBQ0wsSUFBSSxFQUFFLG9CQUFvQjtTQUMzQixDQUFDO0lBQ0osQ0FBQztJQXdCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQUMsUUFBYTtRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDN0IsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ25ELE1BQU0sS0FBSyxHQUFRLEVBQUUsQ0FBQztZQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDeEMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDZjthQUNGO1lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDckIsSUFBSSxPQUFPLEdBQVEsQ0FBQyxDQUFDO2dCQUNyQixJQUFJLFFBQVEsR0FBUSxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUM7Z0JBQzNELFFBQVEsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDO2dCQUN4QixRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDcEI7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7Z0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsa0JBQWUsa0JBQWtCLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0dyb3ZlL0dyb3ZlX0VhckhlYXJ0UmF0ZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEdyb3ZlX0VhckhlYXJ0UmF0ZSB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkdyb3ZlX0VhckhlYXJ0UmF0ZVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkaXNwbGF5SW9OYW1lczogYW55O1xuICBwdWJsaWMgaW50ZXJ2YWw6IGFueTtcbiAgcHVibGljIGR1cmF0aW9uOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwic2lnbmFsXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1widmNjXCIsIFwiZ25kXCJdO1xuXG4gICAgdGhpcy5kaXNwbGF5SW9OYW1lcyA9IHtcbiAgICAgIHZjYzogXCJ2Y2NcIixcbiAgICAgIGduZDogXCJnbmRcIixcbiAgICAgIHNpZ25hbDogXCJzaWduYWxcIixcbiAgICB9O1xuXG4gICAgdGhpcy5pbnRlcnZhbCA9IDU7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDIuNSAqIDEwMDA7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5zdGFydCh7XG4gICAgICBpbzogdGhpcy5wYXJhbXMuc2lnbmFsLFxuICAgICAgaW50ZXJ2YWw6IHRoaXMuaW50ZXJ2YWwsXG4gICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5vbm1lYXN1cmVkID0gKGFycmF5OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGVkZ2VzOiBhbnkgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gMCAmJiBhcnJheVtpICsgMV0gPT09IDEpIHtcbiAgICAgICAgICBlZGdlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRnZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgbGV0IGJldHdlZW46IGFueSA9IDA7XG4gICAgICAgIGxldCBwdWxzZU1pbjogYW55ID0gMDtcbiAgICAgICAgYmV0d2VlbiA9ICgoZWRnZXNbMV0gLSBlZGdlc1swXSkgKiB0aGlzLmludGVydmFsKSAvIDEwMDAuMDtcbiAgICAgICAgcHVsc2VNaW4gPSA2MCAvIGJldHdlZW47XG4gICAgICAgIGNhbGxiYWNrKHB1bHNlTWluKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGdldFdhaXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuc3RhcnQoKHJhdGU6IGFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKHJhdGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JvdmVfRWFySGVhcnRSYXRlO1xuIl19
