"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Grove_3AxisAccelerometer {
    constructor() {
        this.keys = ["gnd", "vcc", "sda", "scl"];
        this.requiredKeys = ["sda", "scl"];
        this.ioKeys = this.keys;
        this.displayName = "3axis";
        this.displayIoNames = { sda: "sda", scl: "scl" };
        this.address = 0x53;
        this.regAdrs = {};
        this.regAdrs.POWER_CTL = 0x2d;
        this.regAdrs.THRESH_ACT = 0x24;
        this.regAdrs.THRESH_INACT = 0x25;
        this.regAdrs.TIME_INACT = 0x26;
        this.regAdrs.ACT_INACT_CTL = 0x27;
        this.regAdrs.TAP_AXES = 0x2a;
        this.regAdrs.THRESH_TAP = 0x1d;
        this.regAdrs.DUR = 0x21;
        this.regAdrs.LATENT = 0x22;
        this.regAdrs.WINDOW = 0x23;
        this.regAdrs.THRESH_FF = 0x28;
        this.regAdrs.TIME_FF = 0x29;
        this.regAdrs.INT_MAP = 0x2f;
        this.regAdrs.INT_ENABLE = 0x2e;
        this.regAdrs.DATAX0 = 0x32;
        this.regAdrs.INT_DATA_READY_BIT = 0x07;
        this.regAdrs.INT_SINGLE_TAP_BIT = 0x06;
        this.regAdrs.INT_DOUBLE_TAP_BIT = 0x05;
        this.regAdrs.INT_ACTIVITY_BIT = 0x04;
        this.regAdrs.INT_INACTIVITY_BIT = 0x03;
        this.regAdrs.INT_FREE_FALL_BIT = 0x02;
        this.regAdrs.INT_WATERMARK_BIT = 0x01;
        this.regAdrs.INT_OVERRUNY_BIT = 0x00;
        this.constVal = {};
        this.constVal.gainX = 0.0037639;
        this.constVal.gainY = 0.00376009;
        this.constVal.gainZ = 0.00349265;
        this.constVal.INT1_PIN = 0x00;
        this.constVal.INT2_PIN = 0x01;
    }
    static info() {
        return {
            name: "Grove_3AxisAccelerometer",
        };
    }
    wired(obniz) {
        return __awaiter(this, void 0, void 0, function* () {
            this.obniz = obniz;
            this.vcc = this.params.vcc;
            this.gnd = this.params.gnd;
            this.obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
            this.params.clock = 400000;
            this.params.mode = "master";
            this.i2c = obniz.getI2CWithConfig(this.params);
            this.obniz.wait(100);
            // power on
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 0]);
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 16]);
            this.i2c.write(this.address, [this.regAdrs.POWER_CTL, 8]);
            this.i2c.write(this.address, [this.regAdrs.THRESH_ACT, 75]); // set activity threshold 0~255
            this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 75]); // set inactivity threshold 0~255
            this.i2c.write(this.address, [this.regAdrs.THRESH_INACT, 10]); // set time inactivity 0~255
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 6, 1); // setActivityX
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 5, 1); // setActivityY
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 4, 1); // setActivityZ
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 2, 1); // setInactivityX
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 1, 1); // setInactivityY
            yield this.setRegisterBit(this.regAdrs.ACT_INACT_CTL, 0, 1); // setInactivityZ
            yield this.setRegisterBit(this.regAdrs.TAP_AXES, 2, 0); // setTapDetectionOnX
            yield this.setRegisterBit(this.regAdrs.TAP_AXES, 1, 0); // setTapDetectionOnY
            yield this.etRegisterBit(this.regAdrs.TAP_AXES, 0, 1); // setTapDetectionOnZ
            this.i2c.write(this.address, [this.regAdrs.THRESH_TAP, 50]); // setTapThreshold
            this.i2c.write(this.address, [this.regAdrs.DUR, 15]); // setTapDuration
            this.i2c.write(this.address, [this.regAdrs.LATENT, 80]); // setDoubleTapLatency
            this.i2c.write(this.address, [this.regAdrs.WINDOW, 200]); // setDoubleTapWindow
            this.i2c.write(this.address, [this.regAdrs.THRESH_FF, 7]); // setFreeFallThreshold
            this.i2c.write(this.address, [this.regAdrs.TIME_FF, 45]); // setFreeFallDuration
            // setInterruptMapping
            yield this.setInterruptMapping(this.regAdrs.INT_SINGLE_TAP_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_DOUBLE_TAP_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_FREE_FALL_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_ACTIVITY_BIT, this.constVal.INT1_PIN);
            yield this.setInterruptMapping(this.regAdrs.INT_INACTIVITY_BIT, this.constVal.INT1_PIN);
            // setInterrupt
            yield this.setInterrupt(this.regAdrs.INT_SINGLE_TAP_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_DOUBLE_TAP_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_FREE_FALL_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_ACTIVITY_BIT, 1);
            yield this.setInterrupt(this.regAdrs.INT_INACTIVITY_BIT, 1);
        });
    }
    setRegisterBit(regAddr, bitPos, state) {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [regAddr]);
            let b = yield this.i2c.readWait(this.address, 1);
            if (state) {
                b = b | (1 << bitPos); // forces nth bit of b to be 1.  all other bits left alone.
            }
            else {
                b = b & ~(1 << bitPos); // forces nth bit of b to be 0.  all other bits left alone.
            }
            this.i2c.write(this.address, [b]);
        });
    }
    setInterruptMapping(interruptBit, interruptPin) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRegisterBit(this.regAdrs.INT_MAP, interruptBit, interruptPin);
        });
    }
    setInterrupt(interruptBit, state) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setRegisterBit(this.regAdrs.INT_ENABLE, interruptBit, state);
        });
    }
    signHandling(val) {
        const sign = val >> 15;
        if (sign) {
            val = -(0xffff - val);
        }
        return val;
    }
    getRawVal() {
        return __awaiter(this, void 0, void 0, function* () {
            this.i2c.write(this.address, [this.regAdrs.DATAX0]);
            const buff = yield this.i2c.readWait(this.address, 6);
            const rawVal = [0, 0, 0];
            rawVal[0] = this.signHandling((buff[1] << 8) | buff[0]);
            rawVal[1] = this.signHandling((buff[3] << 8) | buff[2]);
            rawVal[2] = this.signHandling((buff[5] << 8) | buff[4]);
            return rawVal;
        });
    }
    getWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const accelVal = [0, 0, 0];
            const raw = yield this.getRawVal();
            accelVal[0] = raw[0] * this.constVal.gainX;
            accelVal[1] = raw[1] * this.constVal.gainY;
            accelVal[2] = raw[2] * this.constVal.gainZ;
            return accelVal;
        });
    }
}
exports.default = Grove_3AxisAccelerometer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Hcm92ZS9Hcm92ZV8zQXhpc0FjY2VsZXJvbWV0ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLHdCQUF3QjtJQXVCNUI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdB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T0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLCtCQUErQjtZQUM1RixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlDQUFpQztZQUNoRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtZQUMzRixNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZTtZQUM1RSxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZTtZQUM1RSxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZTtZQUM1RSxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCO1lBQzlFLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFD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QyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBRVksT0FBTzs7WUFDbEIsTUFBTSxRQUFRLEdBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sR0FBRyxHQUFRLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3hDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDM0MsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUMzQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQzNDLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7S0FBQTtDQUNGO0FBRUQsa0JBQWUsd0JBQXdCLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0dyb3ZlL0dyb3ZlXzNBeGlzQWNjZWxlcm9tZXRlci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEdyb3ZlXzNBeGlzQWNjZWxlcm9tZXRlciB7XG5cbiAgcHVibGljIHN0YXRpYyBpbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBcIkdyb3ZlXzNBeGlzQWNjZWxlcm9tZXRlclwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBpb0tleXM6IGFueTtcbiAgcHVibGljIGRpc3BsYXlOYW1lOiBhbnk7XG4gIHB1YmxpYyBkaXNwbGF5SW9OYW1lczogYW55O1xuICBwdWJsaWMgYWRkcmVzczogYW55O1xuICBwdWJsaWMgcmVnQWRyczogYW55O1xuICBwdWJsaWMgY29uc3RWYWw6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyB2Y2M6IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgZ25kOiBhbnk7XG4gIHB1YmxpYyBpMmM6IGFueTtcbiAgcHVibGljIGV0UmVnaXN0ZXJCaXQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJnbmRcIiwgXCJ2Y2NcIiwgXCJzZGFcIiwgXCJzY2xcIl07XG4gICAgdGhpcy5yZXF1aXJlZEtleXMgPSBbXCJzZGFcIiwgXCJzY2xcIl07XG5cbiAgICB0aGlzLmlvS2V5cyA9IHRoaXMua2V5cztcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gXCIzYXhpc1wiO1xuICAgIHRoaXMuZGlzcGxheUlvTmFtZXMgPSB7c2RhOiBcInNkYVwiLCBzY2w6IFwic2NsXCJ9O1xuXG4gICAgdGhpcy5hZGRyZXNzID0gMHg1MztcbiAgICB0aGlzLnJlZ0FkcnMgPSB7fTtcbiAgICB0aGlzLnJlZ0FkcnMuUE9XRVJfQ1RMID0gMHgyZDtcbiAgICB0aGlzLnJlZ0FkcnMuVEhSRVNIX0FDVCA9IDB4MjQ7XG4gICAgdGhpcy5yZWdBZHJzLlRIUkVTSF9JTkFDVCA9IDB4MjU7XG4gICAgdGhpcy5yZWdBZHJzLlRJTUVfSU5BQ1QgPSAweDI2O1xuICAgIHRoaXMucmVnQWRycy5BQ1RfSU5BQ1RfQ1RMID0gMHgyNztcbiAgICB0aGlzLnJlZ0FkcnMuVEFQX0FYRVMgPSAweDJhO1xuICAgIHRoaXMucmVnQWRycy5USFJFU0hfVEFQID0gMHgxZDtcbiAgICB0aGlzLnJlZ0FkcnMuRFVSID0gMHgyMTtcbiAgICB0aGlzLnJlZ0FkcnMuTEFURU5UID0gMHgyMjtcbiAgICB0aGlzLnJlZ0FkcnMuV0lORE9XID0gMHgyMztcbiAgICB0aGlzLnJlZ0FkcnMuVEhSRVNIX0ZGID0gMHgyODtcbiAgICB0aGlzLnJlZ0FkcnMuVElNRV9GRiA9IDB4Mjk7XG4gICAgdGhpcy5yZWdBZHJzLklOVF9NQVAgPSAweDJmO1xuICAgIHRoaXMucmVnQWRycy5JTlRfRU5BQkxFID0gMHgyZTtcbiAgICB0aGlzLnJlZ0FkcnMuREFUQVgwID0gMHgzMjtcblxuICAgIHRoaXMucmVnQWRycy5JTlRfREFUQV9SRUFEWV9CSVQgPSAweDA3O1xuICAgIHRoaXMucmVnQWRycy5JTlRfU0lOR0xFX1RBUF9CSVQgPSAweDA2O1xuICAgIHRoaXMucmVnQWRycy5JTlRfRE9VQkxFX1RBUF9CSVQgPSAweDA1O1xuICAgIHRoaXMucmVnQWRycy5JTlRfQUNUSVZJVFlfQklUID0gMHgwNDtcbiAgICB0aGlzLnJlZ0FkcnMuSU5UX0lOQUNUSVZJVFlfQklUID0gMHgwMztcbiAgICB0aGlzLnJlZ0FkcnMuSU5UX0ZSRUVfRkFMTF9CSVQgPSAweDAyO1xuICAgIHRoaXMucmVnQWRycy5JTlRfV0FURVJNQVJLX0JJVCA9IDB4MDE7XG4gICAgdGhpcy5yZWdBZHJzLklOVF9PVkVSUlVOWV9CSVQgPSAweDAwO1xuXG4gICAgdGhpcy5jb25zdFZhbCA9IHt9O1xuICAgIHRoaXMuY29uc3RWYWwuZ2FpblggPSAwLjAwMzc2Mzk7XG4gICAgdGhpcy5jb25zdFZhbC5nYWluWSA9IDAuMDAzNzYwMDk7XG4gICAgdGhpcy5jb25zdFZhbC5nYWluWiA9IDAuMDAzNDkyNjU7XG4gICAgdGhpcy5jb25zdFZhbC5JTlQxX1BJTiA9IDB4MDA7XG4gICAgdGhpcy5jb25zdFZhbC5JTlQyX1BJTiA9IDB4MDE7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICB0aGlzLnZjYyA9IHRoaXMucGFyYW1zLnZjYztcbiAgICB0aGlzLmduZCA9IHRoaXMucGFyYW1zLmduZDtcbiAgICB0aGlzLm9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcblxuICAgIHRoaXMucGFyYW1zLmNsb2NrID0gNDAwMDAwO1xuICAgIHRoaXMucGFyYW1zLm1vZGUgPSBcIm1hc3RlclwiO1xuICAgIHRoaXMuaTJjID0gb2JuaXouZ2V0STJDV2l0aENvbmZpZyh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5vYm5pei53YWl0KDEwMCk7XG5cbiAgICAvLyBwb3dlciBvblxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5QT1dFUl9DVEwsIDBdKTtcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFt0aGlzLnJlZ0FkcnMuUE9XRVJfQ1RMLCAxNl0pO1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5QT1dFUl9DVEwsIDhdKTtcblxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5USFJFU0hfQUNULCA3NV0pOyAvLyBzZXQgYWN0aXZpdHkgdGhyZXNob2xkIDB+MjU1XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLlRIUkVTSF9JTkFDVCwgNzVdKTsgLy8gc2V0IGluYWN0aXZpdHkgdGhyZXNob2xkIDB+MjU1XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLlRIUkVTSF9JTkFDVCwgMTBdKTsgLy8gc2V0IHRpbWUgaW5hY3Rpdml0eSAwfjI1NVxuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLkFDVF9JTkFDVF9DVEwsIDYsIDEpOyAvLyBzZXRBY3Rpdml0eVhcbiAgICBhd2FpdCB0aGlzLnNldFJlZ2lzdGVyQml0KHRoaXMucmVnQWRycy5BQ1RfSU5BQ1RfQ1RMLCA1LCAxKTsgLy8gc2V0QWN0aXZpdHlZXG4gICAgYXdhaXQgdGhpcy5zZXRSZWdpc3RlckJpdCh0aGlzLnJlZ0FkcnMuQUNUX0lOQUNUX0NUTCwgNCwgMSk7IC8vIHNldEFjdGl2aXR5WlxuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLkFDVF9JTkFDVF9DVEwsIDIsIDEpOyAvLyBzZXRJbmFjdGl2aXR5WFxuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLkFDVF9JTkFDVF9DVEwsIDEsIDEpOyAvLyBzZXRJbmFjdGl2aXR5WVxuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLkFDVF9JTkFDVF9DVEwsIDAsIDEpOyAvLyBzZXRJbmFjdGl2aXR5WlxuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLlRBUF9BWEVTLCAyLCAwKTsgLy8gc2V0VGFwRGV0ZWN0aW9uT25YXG4gICAgYXdhaXQgdGhpcy5zZXRSZWdpc3RlckJpdCh0aGlzLnJlZ0FkcnMuVEFQX0FYRVMsIDEsIDApOyAvLyBzZXRUYXBEZXRlY3Rpb25PbllcbiAgICBhd2FpdCB0aGlzLmV0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLlRBUF9BWEVTLCAwLCAxKTsgLy8gc2V0VGFwRGV0ZWN0aW9uT25aXG5cbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFt0aGlzLnJlZ0FkcnMuVEhSRVNIX1RBUCwgNTBdKTsgLy8gc2V0VGFwVGhyZXNob2xkXG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLkRVUiwgMTVdKTsgLy8gc2V0VGFwRHVyYXRpb25cbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFt0aGlzLnJlZ0FkcnMuTEFURU5ULCA4MF0pOyAvLyBzZXREb3VibGVUYXBMYXRlbmN5XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLldJTkRPVywgMjAwXSk7IC8vIHNldERvdWJsZVRhcFdpbmRvd1xuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW3RoaXMucmVnQWRycy5USFJFU0hfRkYsIDddKTsgLy8gc2V0RnJlZUZhbGxUaHJlc2hvbGRcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFt0aGlzLnJlZ0FkcnMuVElNRV9GRiwgNDVdKTsgLy8gc2V0RnJlZUZhbGxEdXJhdGlvblxuXG4gICAgLy8gc2V0SW50ZXJydXB0TWFwcGluZ1xuICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJydXB0TWFwcGluZyhcbiAgICAgIHRoaXMucmVnQWRycy5JTlRfU0lOR0xFX1RBUF9CSVQsXG4gICAgICB0aGlzLmNvbnN0VmFsLklOVDFfUElOLFxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5zZXRJbnRlcnJ1cHRNYXBwaW5nKFxuICAgICAgdGhpcy5yZWdBZHJzLklOVF9ET1VCTEVfVEFQX0JJVCxcbiAgICAgIHRoaXMuY29uc3RWYWwuSU5UMV9QSU4sXG4gICAgKTtcbiAgICBhd2FpdCB0aGlzLnNldEludGVycnVwdE1hcHBpbmcoXG4gICAgICB0aGlzLnJlZ0FkcnMuSU5UX0ZSRUVfRkFMTF9CSVQsXG4gICAgICB0aGlzLmNvbnN0VmFsLklOVDFfUElOLFxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5zZXRJbnRlcnJ1cHRNYXBwaW5nKFxuICAgICAgdGhpcy5yZWdBZHJzLklOVF9BQ1RJVklUWV9CSVQsXG4gICAgICB0aGlzLmNvbnN0VmFsLklOVDFfUElOLFxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5zZXRJbnRlcnJ1cHRNYXBwaW5nKFxuICAgICAgdGhpcy5yZWdBZHJzLklOVF9JTkFDVElWSVRZX0JJVCxcbiAgICAgIHRoaXMuY29uc3RWYWwuSU5UMV9QSU4sXG4gICAgKTtcblxuICAgIC8vIHNldEludGVycnVwdFxuICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJydXB0KHRoaXMucmVnQWRycy5JTlRfU0lOR0xFX1RBUF9CSVQsIDEpO1xuICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJydXB0KHRoaXMucmVnQWRycy5JTlRfRE9VQkxFX1RBUF9CSVQsIDEpO1xuICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJydXB0KHRoaXMucmVnQWRycy5JTlRfRlJFRV9GQUxMX0JJVCwgMSk7XG4gICAgYXdhaXQgdGhpcy5zZXRJbnRlcnJ1cHQodGhpcy5yZWdBZHJzLklOVF9BQ1RJVklUWV9CSVQsIDEpO1xuICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJydXB0KHRoaXMucmVnQWRycy5JTlRfSU5BQ1RJVklUWV9CSVQsIDEpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldFJlZ2lzdGVyQml0KHJlZ0FkZHI6IGFueSwgYml0UG9zOiBhbnksIHN0YXRlOiBhbnkpIHtcbiAgICB0aGlzLmkyYy53cml0ZSh0aGlzLmFkZHJlc3MsIFtyZWdBZGRyXSk7XG4gICAgbGV0IGI6IGFueSA9IGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgMSk7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICBiID0gYiB8ICgxIDw8IGJpdFBvcyk7IC8vIGZvcmNlcyBudGggYml0IG9mIGIgdG8gYmUgMS4gIGFsbCBvdGhlciBiaXRzIGxlZnQgYWxvbmUuXG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSBiICYgfigxIDw8IGJpdFBvcyk7IC8vIGZvcmNlcyBudGggYml0IG9mIGIgdG8gYmUgMC4gIGFsbCBvdGhlciBiaXRzIGxlZnQgYWxvbmUuXG4gICAgfVxuICAgIHRoaXMuaTJjLndyaXRlKHRoaXMuYWRkcmVzcywgW2JdKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRJbnRlcnJ1cHRNYXBwaW5nKGludGVycnVwdEJpdDogYW55LCBpbnRlcnJ1cHRQaW46IGFueSkge1xuICAgIGF3YWl0IHRoaXMuc2V0UmVnaXN0ZXJCaXQodGhpcy5yZWdBZHJzLklOVF9NQVAsIGludGVycnVwdEJpdCwgaW50ZXJydXB0UGluKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRJbnRlcnJ1cHQoaW50ZXJydXB0Qml0OiBhbnksIHN0YXRlOiBhbnkpIHtcbiAgICBhd2FpdCB0aGlzLnNldFJlZ2lzdGVyQml0KHRoaXMucmVnQWRycy5JTlRfRU5BQkxFLCBpbnRlcnJ1cHRCaXQsIHN0YXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBzaWduSGFuZGxpbmcodmFsOiBhbnkpIHtcbiAgICBjb25zdCBzaWduOiBhbnkgPSB2YWwgPj4gMTU7XG4gICAgaWYgKHNpZ24pIHtcbiAgICAgIHZhbCA9IC0oMHhmZmZmIC0gdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRSYXdWYWwoKSB7XG4gICAgdGhpcy5pMmMud3JpdGUodGhpcy5hZGRyZXNzLCBbdGhpcy5yZWdBZHJzLkRBVEFYMF0pO1xuICAgIGNvbnN0IGJ1ZmY6IGFueSA9IGF3YWl0IHRoaXMuaTJjLnJlYWRXYWl0KHRoaXMuYWRkcmVzcywgNik7XG4gICAgY29uc3QgcmF3VmFsOiBhbnkgPSBbMCwgMCwgMF07XG4gICAgcmF3VmFsWzBdID0gdGhpcy5zaWduSGFuZGxpbmcoKGJ1ZmZbMV0gPDwgOCkgfCBidWZmWzBdKTtcbiAgICByYXdWYWxbMV0gPSB0aGlzLnNpZ25IYW5kbGluZygoYnVmZlszXSA8PCA4KSB8IGJ1ZmZbMl0pO1xuICAgIHJhd1ZhbFsyXSA9IHRoaXMuc2lnbkhhbmRsaW5nKChidWZmWzVdIDw8IDgpIHwgYnVmZls0XSk7XG4gICAgcmV0dXJuIHJhd1ZhbDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRXYWl0KCkge1xuICAgIGNvbnN0IGFjY2VsVmFsOiBhbnkgPSBbMCwgMCwgMF07XG4gICAgY29uc3QgcmF3OiBhbnkgPSBhd2FpdCB0aGlzLmdldFJhd1ZhbCgpO1xuICAgIGFjY2VsVmFsWzBdID0gcmF3WzBdICogdGhpcy5jb25zdFZhbC5nYWluWDtcbiAgICBhY2NlbFZhbFsxXSA9IHJhd1sxXSAqIHRoaXMuY29uc3RWYWwuZ2Fpblk7XG4gICAgYWNjZWxWYWxbMl0gPSByYXdbMl0gKiB0aGlzLmNvbnN0VmFsLmdhaW5aO1xuICAgIHJldHVybiBhY2NlbFZhbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcm92ZV8zQXhpc0FjY2VsZXJvbWV0ZXI7XG4iXX0=
