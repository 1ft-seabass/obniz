{"version":3,"sources":["../src/parts/Grove/Grove_Button/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;CAAI;AACxC,cAAM,YAAa,YAAW,mBAAmB;WAEjC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,oBAAoB,EAAE,GAAG,CAAC;IAC1B,SAAS,EAAE,GAAG,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IACZ,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,EAAE,GAAG,CAAC;IACf,SAAS,EAAE,GAAG,CAAC;IACf,QAAQ,EAAE,GAAG,CAAC;;IAUd,KAAK,CAAC,KAAK,EAAE,KAAK;IAyBZ,aAAa;IAKnB,SAAS,CAAC,SAAS,EAAE,GAAG;CAWhC;AAED,eAAe,YAAY,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Grove_ButtonOptions { }\nclass Grove_Button implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_Button\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public onChangeForStateWait: any;\n  public io_signal: any;\n  public params: any;\n  public io_vcc: any;\n  public io_supply: any;\n  public isPressed: any;\n  public onchange: any;\n\n  constructor() {\n    this.keys = [\"signal\", \"gnd\", \"vcc\"];\n    this.requiredKeys = [\"signal\"];\n\n    this.onChangeForStateWait = () => {\n    };\n  }\n\n  public wired(obniz: Obniz) {\n    this.io_signal = obniz.getIO(this.params.signal);\n\n    if (obniz.isValidIO(this.params.vcc)) {\n      this.io_vcc = obniz.getIO(this.params.vcc);\n      this.io_vcc.output(true);\n    }\n\n    if (obniz.isValidIO(this.params.gnd)) {\n      this.io_supply = obniz.getIO(this.params.gnd);\n      this.io_supply.output(false);\n    }\n\n    this.io_signal.pull(\"5v\");\n\n    const self: any = this;\n    this.io_signal.input((value: any) => {\n      self.isPressed = value;\n      if (self.onchange) {\n        self.onchange(value);\n      }\n      self.onChangeForStateWait(value);\n    });\n  }\n\n  public async isPressedWait() {\n    const ret: any = await this.io_signal.inputWait();\n    return ret;\n  }\n\n  public stateWait(isPressed: any) {\n    return new Promise((resolve, reject) => {\n      this.onChangeForStateWait = (pressed: any) => {\n        if (isPressed === pressed) {\n          this.onChangeForStateWait = () => {\n          };\n          resolve();\n        }\n      };\n    });\n  }\n}\n\nexport default Grove_Button;\n"]}