{"version":3,"sources":["../src/parts/Moving/ServoMotor/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,iBAAiB;CAAI;AACtC,cAAM,UAAW,YAAW,mBAAmB;WAE/B,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;IACT,UAAU,EAAE,GAAG,CAAC;;IAYhB,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBlB,KAAK,CAAC,KAAK,EAAE,GAAG;IAOhB,EAAE;IAMF,GAAG;CAKX;AAED,eAAe,UAAU,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface ServoMotorOptions { }\nclass ServoMotor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ServoMotor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public range: any;\n  public obniz!: Obniz;\n  public params: any;\n  public io_vcc: any;\n  public pwm: any;\n  public pwm_io_num: any;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"signal\", \"pwm\"];\n    this.requiredKeys = [];\n\n    this.range = {\n      min: 0.5,\n      max: 2.4,\n    };\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    if (obniz.isValidIO(this.params.vcc)) {\n      this.io_vcc = obniz.getIO(this.params.vcc);\n    }\n\n    if (this.params.pwm) {\n      this.pwm = this.params.pwm;\n    } else {\n      this.pwm = obniz.getFreePwm();\n      this.pwm_io_num = this.params.signal;\n      this.pwm.start({io: this.pwm_io_num});\n    }\n    this.pwm.freq(50);\n  }\n\n  // Module functions\n\n  public angle(ratio: any) {\n    const max: any = this.range.max;\n    const min: any = this.range.min;\n    const val: any = ((max - min) * ratio) / 180.0 + min;\n    this.pwm.pulse(val);\n  }\n\n  public on() {\n    if (this.io_vcc) {\n      this.io_vcc.output(true);\n    }\n  }\n\n  public off() {\n    if (this.io_vcc) {\n      this.io_vcc.output(false);\n    }\n  }\n}\n\nexport default ServoMotor;\n"]}