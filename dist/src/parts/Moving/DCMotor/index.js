"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DCMotor {
    constructor() {
        this.keys = ["forward", "back"];
        this.requiredKeys = ["forward", "back"];
    }
    static info() {
        return {
            name: "DCMotor",
        };
    }
    wired(obniz) {
        this.status = {
            direction: null,
            power: null,
        };
        this.pwm1_io_num = this.params.forward;
        this.pwm2_io_num = this.params.back;
        this.pwm1 = obniz.getFreePwm();
        this.pwm1.start({ io: this.pwm1_io_num });
        this.pwm1.freq(100000);
        this.pwm2 = obniz.getFreePwm();
        this.pwm2.start({ io: this.pwm2_io_num });
        this.pwm2.freq(100000);
        this.power(30);
    }
    // Module functions
    forward() {
        this.move(true);
    }
    reverse() {
        this.move(false);
    }
    stop() {
        if (this.status.direction === null) {
            return;
        }
        this.status.direction = null;
        this.pwm1.duty(0);
        this.pwm2.duty(0);
    }
    move(forward) {
        if (forward) {
            if (this.status.direction === true) {
                return;
            }
            this.status.direction = true;
        }
        else {
            if (this.status.direction === false) {
                return;
            }
            this.status.direction = false;
        }
        const power = this.power();
        this.power(0);
        this.power(power);
    }
    power(power) {
        if (power === undefined) {
            return this.status.power;
        }
        this.status.power = power;
        if (this.status.direction === null) {
            this.pwm1.duty(0);
            this.pwm2.duty(0);
            return;
        }
        if (this.status.direction) {
            this.pwm1.duty(power);
            this.pwm2.duty(0);
        }
        else {
            this.pwm1.duty(0);
            this.pwm2.duty(power);
        }
    }
}
exports.default = DCMotor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sT0FBTztJQWlCWDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQWdCTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsbUJBQW1CO0lBRVosT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxJQUFJO1FBQ1QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDbEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBWTtRQUN0QixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO2dCQUNsQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO2dCQUNuQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDL0I7UUFDRCxNQUFNLEtBQUssR0FBUSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFXO1FBQ3RCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsT0FBTyxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9Nb3ZpbmcvRENNb3Rvci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERDTW90b3Ige1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJEQ01vdG9yXCIsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBrZXlzOiBhbnk7XG4gIHB1YmxpYyByZXF1aXJlZEtleXM6IGFueTtcbiAgcHVibGljIHN0YXR1czogYW55O1xuICBwdWJsaWMgcHdtMV9pb19udW06IGFueTtcbiAgcHVibGljIHBhcmFtczogYW55O1xuICBwdWJsaWMgcHdtMl9pb19udW06IGFueTtcbiAgcHVibGljIHB3bTE6IGFueTtcbiAgcHVibGljIHB3bTI6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtleXMgPSBbXCJmb3J3YXJkXCIsIFwiYmFja1wiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcImZvcndhcmRcIiwgXCJiYWNrXCJdO1xuICB9XG5cbiAgcHVibGljIHdpcmVkKG9ibml6OiBhbnkpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHtcbiAgICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICAgIHBvd2VyOiBudWxsLFxuICAgIH07XG5cbiAgICB0aGlzLnB3bTFfaW9fbnVtID0gdGhpcy5wYXJhbXMuZm9yd2FyZDtcbiAgICB0aGlzLnB3bTJfaW9fbnVtID0gdGhpcy5wYXJhbXMuYmFjaztcblxuICAgIHRoaXMucHdtMSA9IG9ibml6LmdldEZyZWVQd20oKTtcbiAgICB0aGlzLnB3bTEuc3RhcnQoe2lvOiB0aGlzLnB3bTFfaW9fbnVtfSk7XG4gICAgdGhpcy5wd20xLmZyZXEoMTAwMDAwKTtcbiAgICB0aGlzLnB3bTIgPSBvYm5pei5nZXRGcmVlUHdtKCk7XG4gICAgdGhpcy5wd20yLnN0YXJ0KHtpbzogdGhpcy5wd20yX2lvX251bX0pO1xuICAgIHRoaXMucHdtMi5mcmVxKDEwMDAwMCk7XG4gICAgdGhpcy5wb3dlcigzMCk7XG4gIH1cblxuICAvLyBNb2R1bGUgZnVuY3Rpb25zXG5cbiAgcHVibGljIGZvcndhcmQoKSB7XG4gICAgdGhpcy5tb3ZlKHRydWUpO1xuICB9XG5cbiAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgdGhpcy5tb3ZlKGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkge1xuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMuZGlyZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLnB3bTEuZHV0eSgwKTtcbiAgICB0aGlzLnB3bTIuZHV0eSgwKTtcbiAgfVxuXG4gIHB1YmxpYyBtb3ZlKGZvcndhcmQ6IGFueSkge1xuICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICBpZiAodGhpcy5zdGF0dXMuZGlyZWN0aW9uID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdHVzLmRpcmVjdGlvbiA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwb3dlcjogYW55ID0gdGhpcy5wb3dlcigpO1xuICAgIHRoaXMucG93ZXIoMCk7XG4gICAgdGhpcy5wb3dlcihwb3dlcik7XG4gIH1cblxuICBwdWJsaWMgcG93ZXIocG93ZXI/OiBhbnkpIHtcbiAgICBpZiAocG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzLnBvd2VyO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cy5wb3dlciA9IHBvd2VyO1xuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KDApO1xuICAgICAgdGhpcy5wd20yLmR1dHkoMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXR1cy5kaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMucHdtMS5kdXR5KHBvd2VyKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB3bTEuZHV0eSgwKTtcbiAgICAgIHRoaXMucHdtMi5kdXR5KHBvd2VyKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRENNb3RvcjtcbiJdfQ==
