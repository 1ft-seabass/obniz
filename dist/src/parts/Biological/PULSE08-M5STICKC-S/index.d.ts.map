{"version":3,"sources":["../src/parts/Biological/PULSE08-M5STICKC-S/index.ts"],"names":[],"mappings":"AAAA,cAAM,eAAe;WAEL,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,SAAS,EAAE,GAAG,CAAC;IACf,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,IAAI,EAAE,GAAG,CAAC;IACV,aAAa,EAAE,GAAG,CAAC;;IAQnB,WAAW,CAAC,IAAI,EAAE,GAAG;IAIrB,WAAW,CAAC,IAAI,EAAE,GAAG;IAIrB,KAAK,CAAC,KAAK,EAAE,GAAG;IAsChB,MAAM,CAAC,IAAI,EAAE,GAAG;IAahB,IAAI;CAMZ;AAED,eAAe,eAAe,CAAC","file":"index.d.ts","sourcesContent":["class Puls08M5stickcS {\n\n  public static info() {\n    return {\n      name: \"Puls08M5stickcS\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public delimiter: any;\n  public obniz: any;\n  public params: any;\n  public uart: any;\n  public receivingData: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"tx\", \"rx\"];\n    this.requiredKeys = [\"tx\", \"rx\"];\n    this.delimiter = 0x0a;\n  }\n\n  public onbpmupdate(data: any) {\n    return;\n  }\n\n  public onrawupdate(data: any) {\n    return;\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.uart = obniz.getFreeUart();\n    this.uart.start({tx: this.params.tx, rx: this.params.rx, baud: 19200});\n    this.receivingData = [];\n\n    this.init();\n\n    this.uart.onreceive = (data: any, text: any) => {\n      const dataToCallback: any = [];\n      data.forEach((e: any) => {\n        if (e !== this.delimiter) {\n          this.receivingData.push(e);\n          return;\n        } else {\n          const row: any = this.receivingData;\n          if (row[0] === \"#\".charCodeAt(0)) {\n            row[0] = \" \".charCodeAt(0);\n            const str: any = this.decode(row);\n            const val: any = parseInt(str);\n            const bpm: any = val > 0 ? 60000 / val : null;\n            this.onbpmupdate(bpm);\n          } else {\n            const str: any = this.decode(row);\n            const val: any = parseInt(str);\n            dataToCallback.push(val);\n          }\n          this.receivingData = [];\n        }\n      });\n      if (dataToCallback.length > 0) {\n        this.onrawupdate(dataToCallback);\n      }\n    };\n  }\n\n  public decode(data: any) {\n    return Buffer.from(data).toString(\"utf8\");\n\n    // if (typeof TextDecoder !== 'undefined') {\n    //   let enc = new TextDecoder('utf-8');\n    //   let arr = new Uint8Array(data);\n    //   return enc.decode(arr);\n    // } else if (typeof Buffer !== 'undefined') {\n    // return Buffer.from(data).toString('utf8');\n    // }\n    // throw new Error('cannot decode');\n  }\n\n  public init() {\n    this.uart.send(\"@OF30\");\n    this.uart.send(0x0a);\n    this.uart.send(\"@RG2\");\n    this.uart.send(0x0a);\n  }\n}\n\nexport default Puls08M5stickcS;\n"]}