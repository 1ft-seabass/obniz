"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Puls08M5stickcS {
    constructor() {
        this.keys = ["vcc", "gnd", "tx", "rx"];
        this.requiredKeys = ["tx", "rx"];
        this.delimiter = 0x0a;
    }
    static info() {
        return {
            name: "Puls08M5stickcS",
        };
    }
    onbpmupdate(data) {
        return;
    }
    onrawupdate(data) {
        return;
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        this.uart = obniz.getFreeUart();
        this.uart.start({ tx: this.params.tx, rx: this.params.rx, baud: 19200 });
        this.receivingData = [];
        this.init();
        this.uart.onreceive = (data, text) => {
            const dataToCallback = [];
            data.forEach((e) => {
                if (e !== this.delimiter) {
                    this.receivingData.push(e);
                    return;
                }
                else {
                    const row = this.receivingData;
                    if (row[0] === "#".charCodeAt(0)) {
                        row[0] = " ".charCodeAt(0);
                        const str = this.decode(row);
                        const val = parseInt(str);
                        const bpm = val > 0 ? 60000 / val : null;
                        this.onbpmupdate(bpm);
                    }
                    else {
                        const str = this.decode(row);
                        const val = parseInt(str);
                        dataToCallback.push(val);
                    }
                    this.receivingData = [];
                }
            });
            if (dataToCallback.length > 0) {
                this.onrawupdate(dataToCallback);
            }
        };
    }
    decode(data) {
        return Buffer.from(data).toString("utf8");
        // if (typeof TextDecoder !== 'undefined') {
        //   let enc = new TextDecoder('utf-8');
        //   let arr = new Uint8Array(data);
        //   return enc.decode(arr);
        // } else if (typeof Buffer !== 'undefined') {
        // return Buffer.from(data).toString('utf8');
        // }
        // throw new Error('cannot decode');
    }
    init() {
        this.uart.send("@OF30");
        this.uart.send(0x0a);
        this.uart.send("@RG2");
        this.uart.send(0x0a);
    }
}
exports.default = Puls08M5stickcS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9CaW9sb2dpY2FsL1BVTFNFMDgtTTVTVElDS0MtUy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sZUFBZTtJQWdCbkI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBbEJNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsaUJBQWlCO1NBQ3hCLENBQUM7SUFDSixDQUFDO0lBZ0JNLFdBQVcsQ0FBQyxJQUFTO1FBQzFCLE9BQU87SUFDVCxDQUFDO0lBRU0sV0FBVyxDQUFDLElBQVM7UUFDMUIsT0FBTztJQUNULENBQUM7SUFFTSxLQUFLLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQVMsRUFBRSxJQUFTLEVBQUUsRUFBRTtZQUM3QyxNQUFNLGNBQWMsR0FBUSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsT0FBTztpQkFDUjtxQkFBTTtvQkFDTCxNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsYUFBYSxDQUFDO29CQUNwQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNoQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsTUFBTSxHQUFHLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxHQUFHLEdBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUMvQixNQUFNLEdBQUcsR0FBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQzlDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3ZCO3lCQUFNO3dCQUNMLE1BQU0sR0FBRyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2xDLE1BQU0sR0FBRyxHQUFRLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDL0IsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDMUI7b0JBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7aUJBQ3pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFTO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsNENBQTRDO1FBQzVDLHdDQUF3QztRQUN4QyxvQ0FBb0M7UUFDcEMsNEJBQTRCO1FBQzVCLDhDQUE4QztRQUM5Qyw2Q0FBNkM7UUFDN0MsSUFBSTtRQUNKLG9DQUFvQztJQUN0QyxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUVELGtCQUFlLGVBQWUsQ0FBQyIsImZpbGUiOiJzcmMvcGFydHMvQmlvbG9naWNhbC9QVUxTRTA4LU01U1RJQ0tDLVMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQdWxzMDhNNXN0aWNrY1Mge1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJQdWxzMDhNNXN0aWNrY1NcIixcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGtleXM6IGFueTtcbiAgcHVibGljIHJlcXVpcmVkS2V5czogYW55O1xuICBwdWJsaWMgZGVsaW1pdGVyOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyB1YXJ0OiBhbnk7XG4gIHB1YmxpYyByZWNlaXZpbmdEYXRhOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1widmNjXCIsIFwiZ25kXCIsIFwidHhcIiwgXCJyeFwiXTtcbiAgICB0aGlzLnJlcXVpcmVkS2V5cyA9IFtcInR4XCIsIFwicnhcIl07XG4gICAgdGhpcy5kZWxpbWl0ZXIgPSAweDBhO1xuICB9XG5cbiAgcHVibGljIG9uYnBtdXBkYXRlKGRhdGE6IGFueSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHB1YmxpYyBvbnJhd3VwZGF0ZShkYXRhOiBhbnkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcblxuICAgIG9ibml6LnNldFZjY0duZCh0aGlzLnBhcmFtcy52Y2MsIHRoaXMucGFyYW1zLmduZCwgXCI1dlwiKTtcbiAgICB0aGlzLnVhcnQgPSBvYm5pei5nZXRGcmVlVWFydCgpO1xuICAgIHRoaXMudWFydC5zdGFydCh7dHg6IHRoaXMucGFyYW1zLnR4LCByeDogdGhpcy5wYXJhbXMucngsIGJhdWQ6IDE5MjAwfSk7XG4gICAgdGhpcy5yZWNlaXZpbmdEYXRhID0gW107XG5cbiAgICB0aGlzLmluaXQoKTtcblxuICAgIHRoaXMudWFydC5vbnJlY2VpdmUgPSAoZGF0YTogYW55LCB0ZXh0OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGRhdGFUb0NhbGxiYWNrOiBhbnkgPSBbXTtcbiAgICAgIGRhdGEuZm9yRWFjaCgoZTogYW55KSA9PiB7XG4gICAgICAgIGlmIChlICE9PSB0aGlzLmRlbGltaXRlcikge1xuICAgICAgICAgIHRoaXMucmVjZWl2aW5nRGF0YS5wdXNoKGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByb3c6IGFueSA9IHRoaXMucmVjZWl2aW5nRGF0YTtcbiAgICAgICAgICBpZiAocm93WzBdID09PSBcIiNcIi5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICByb3dbMF0gPSBcIiBcIi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgY29uc3Qgc3RyOiBhbnkgPSB0aGlzLmRlY29kZShyb3cpO1xuICAgICAgICAgICAgY29uc3QgdmFsOiBhbnkgPSBwYXJzZUludChzdHIpO1xuICAgICAgICAgICAgY29uc3QgYnBtOiBhbnkgPSB2YWwgPiAwID8gNjAwMDAgLyB2YWwgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbmJwbXVwZGF0ZShicG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHI6IGFueSA9IHRoaXMuZGVjb2RlKHJvdyk7XG4gICAgICAgICAgICBjb25zdCB2YWw6IGFueSA9IHBhcnNlSW50KHN0cik7XG4gICAgICAgICAgICBkYXRhVG9DYWxsYmFjay5wdXNoKHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVjZWl2aW5nRGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChkYXRhVG9DYWxsYmFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMub25yYXd1cGRhdGUoZGF0YVRvQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZGVjb2RlKGRhdGE6IGFueSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZyhcInV0ZjhcIik7XG5cbiAgICAvLyBpZiAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vICAgbGV0IGVuYyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgICAvLyAgIGxldCBhcnIgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAvLyAgIHJldHVybiBlbmMuZGVjb2RlKGFycik7XG4gICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygndXRmOCcpO1xuICAgIC8vIH1cbiAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBkZWNvZGUnKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIHRoaXMudWFydC5zZW5kKFwiQE9GMzBcIik7XG4gICAgdGhpcy51YXJ0LnNlbmQoMHgwYSk7XG4gICAgdGhpcy51YXJ0LnNlbmQoXCJAUkcyXCIpO1xuICAgIHRoaXMudWFydC5zZW5kKDB4MGEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFB1bHMwOE01c3RpY2tjUztcbiJdfQ==
