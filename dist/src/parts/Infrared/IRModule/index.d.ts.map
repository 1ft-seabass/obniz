{"version":3,"sources":["../src/parts/Infrared/IRModule/index.ts"],"names":[],"mappings":"AAAA,cAAM,QAAQ;IAEZ,IAAI,gBAAgB,QAEnB;IAED,IAAI,gBAAgB,CAAC,CAAC,KAAA,EAGrB;WAEa,IAAI;;;IAMX,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;;IAOT,KAAK,CAAC,KAAK,EAAE,GAAG;IA2BhB,IAAI,CAAC,GAAG,EAAE,GAAG;IAIb,KAAK,CAAC,QAAQ,EAAE,GAAG;IAInB,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAapD;AAED,eAAe,QAAQ,CAAC","file":"index.d.ts","sourcesContent":["class IRModule {\n\n  get dataSymbolLength() {\n    return this.sensor.dataSymbolLength;\n  }\n\n  set dataSymbolLength(x) {\n    this.sensor.dataSymbolLength = x;\n    this.led.dataSymbolLength = x;\n  }\n\n  public static info() {\n    return {\n      name: \"IRModule\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public obniz: any;\n  public params: any;\n  public sensor: any;\n  public led: any;\n\n  constructor() {\n    this.keys = [\"recv\", \"vcc\", \"send\", \"gnd\"];\n    this.requiredKeys = [\"recv\", \"send\"];\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    if (!obniz.isValidIO(this.params.recv)) {\n      throw new Error(\"recv is not valid io\");\n    }\n\n    if (!obniz.isValidIO(this.params.send)) {\n      throw new Error(\"send is not valid io\");\n    }\n\n    this.sensor = obniz.wired(\"IRSensor\", {\n      output: this.params.recv,\n    });\n    this.setGetterSetter(\"sensor\", \"duration\");\n    this.setGetterSetter(\"sensor\", \"dataInverted\");\n    this.setGetterSetter(\"sensor\", \"cutTail\");\n    this.setGetterSetter(\"sensor\", \"output_pullup\");\n    this.setGetterSetter(\"sensor\", \"ondetect\");\n\n    this.led = obniz.wired(\"InfraredLED\", {\n      anode: this.params.send,\n    });\n  }\n\n  // link\n  public send(arr: any) {\n    this.led.send(arr);\n  }\n\n  public start(callback: any) {\n    this.sensor.start(callback);\n  }\n\n  public setGetterSetter(partsName: any, varName: any) {\n    Object.defineProperty(this, varName, {\n      get() {\n        return this[partsName][varName];\n      }\n      ,\n      set(x: any) {\n        this[partsName][varName] = x;\n      }\n      ,\n    })\n    ;\n  }\n}\n\nexport default IRModule;\n"]}