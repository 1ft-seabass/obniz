"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class IRModule {
    constructor() {
        this.keys = ["recv", "vcc", "send", "gnd"];
        this.requiredKeys = ["recv", "send"];
    }
    get dataSymbolLength() {
        return this.sensor.dataSymbolLength;
    }
    set dataSymbolLength(x) {
        this.sensor.dataSymbolLength = x;
        this.led.dataSymbolLength = x;
    }
    static info() {
        return {
            name: "IRModule",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (!obniz.isValidIO(this.params.recv)) {
            throw new Error("recv is not valid io");
        }
        if (!obniz.isValidIO(this.params.send)) {
            throw new Error("send is not valid io");
        }
        this.sensor = obniz.wired("IRSensor", {
            output: this.params.recv,
        });
        this.setGetterSetter("sensor", "duration");
        this.setGetterSetter("sensor", "dataInverted");
        this.setGetterSetter("sensor", "cutTail");
        this.setGetterSetter("sensor", "output_pullup");
        this.setGetterSetter("sensor", "ondetect");
        this.led = obniz.wired("InfraredLED", {
            anode: this.params.send,
        });
    }
    // link
    send(arr) {
        this.led.send(arr);
    }
    start(callback) {
        this.sensor.start(callback);
    }
    setGetterSetter(partsName, varName) {
        Object.defineProperty(this, varName, {
            get() {
                return this[partsName][varName];
            },
            set(x) {
                this[partsName][varName] = x;
            },
        });
    }
}
exports.default = IRModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUTtJQXdCWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUF6QkQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFJLGdCQUFnQixDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU87WUFDTCxJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDO0lBQ0osQ0FBQztJQWNNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87SUFDQSxJQUFJLENBQUMsR0FBUTtRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQWE7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLGVBQWUsQ0FBQyxTQUFjLEVBQUUsT0FBWTtRQUNqRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDbkMsR0FBRztnQkFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQyxDQUFDO1lBRUQsR0FBRyxDQUFDLENBQU07Z0JBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixDQUFDO1NBRUYsQ0FBQyxDQUNEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9wYXJ0cy9JbmZyYXJlZC9JUk1vZHVsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElSTW9kdWxlIHtcblxuICBnZXQgZGF0YVN5bWJvbExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5zb3IuZGF0YVN5bWJvbExlbmd0aDtcbiAgfVxuXG4gIHNldCBkYXRhU3ltYm9sTGVuZ3RoKHgpIHtcbiAgICB0aGlzLnNlbnNvci5kYXRhU3ltYm9sTGVuZ3RoID0geDtcbiAgICB0aGlzLmxlZC5kYXRhU3ltYm9sTGVuZ3RoID0geDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJUk1vZHVsZVwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBvYm5pejogYW55O1xuICBwdWJsaWMgcGFyYW1zOiBhbnk7XG4gIHB1YmxpYyBzZW5zb3I6IGFueTtcbiAgcHVibGljIGxlZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMua2V5cyA9IFtcInJlY3ZcIiwgXCJ2Y2NcIiwgXCJzZW5kXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wicmVjdlwiLCBcInNlbmRcIl07XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG5cbiAgICBpZiAoIW9ibml6LmlzVmFsaWRJTyh0aGlzLnBhcmFtcy5yZWN2KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVjdiBpcyBub3QgdmFsaWQgaW9cIik7XG4gICAgfVxuXG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMuc2VuZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNlbmQgaXMgbm90IHZhbGlkIGlvXCIpO1xuICAgIH1cblxuICAgIHRoaXMuc2Vuc29yID0gb2JuaXoud2lyZWQoXCJJUlNlbnNvclwiLCB7XG4gICAgICBvdXRwdXQ6IHRoaXMucGFyYW1zLnJlY3YsXG4gICAgfSk7XG4gICAgdGhpcy5zZXRHZXR0ZXJTZXR0ZXIoXCJzZW5zb3JcIiwgXCJkdXJhdGlvblwiKTtcbiAgICB0aGlzLnNldEdldHRlclNldHRlcihcInNlbnNvclwiLCBcImRhdGFJbnZlcnRlZFwiKTtcbiAgICB0aGlzLnNldEdldHRlclNldHRlcihcInNlbnNvclwiLCBcImN1dFRhaWxcIik7XG4gICAgdGhpcy5zZXRHZXR0ZXJTZXR0ZXIoXCJzZW5zb3JcIiwgXCJvdXRwdXRfcHVsbHVwXCIpO1xuICAgIHRoaXMuc2V0R2V0dGVyU2V0dGVyKFwic2Vuc29yXCIsIFwib25kZXRlY3RcIik7XG5cbiAgICB0aGlzLmxlZCA9IG9ibml6LndpcmVkKFwiSW5mcmFyZWRMRURcIiwge1xuICAgICAgYW5vZGU6IHRoaXMucGFyYW1zLnNlbmQsXG4gICAgfSk7XG4gIH1cblxuICAvLyBsaW5rXG4gIHB1YmxpYyBzZW5kKGFycjogYW55KSB7XG4gICAgdGhpcy5sZWQuc2VuZChhcnIpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLnNlbnNvci5zdGFydChjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgc2V0R2V0dGVyU2V0dGVyKHBhcnRzTmFtZTogYW55LCB2YXJOYW1lOiBhbnkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgdmFyTmFtZSwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpc1twYXJ0c05hbWVdW3Zhck5hbWVdO1xuICAgICAgfVxuICAgICAgLFxuICAgICAgc2V0KHg6IGFueSkge1xuICAgICAgICB0aGlzW3BhcnRzTmFtZV1bdmFyTmFtZV0gPSB4O1xuICAgICAgfVxuICAgICAgLFxuICAgIH0pXG4gICAgO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElSTW9kdWxlO1xuIl19
