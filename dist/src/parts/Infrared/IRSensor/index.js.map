{"version":3,"sources":["../src/parts/Infrared/IRSensor/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface IRSensorOptions { }\nclass IRSensor implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"IRSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public dataSymbolLength: any;\n  public duration: any;\n  public dataInverted: any;\n  public triggerSampleCount: any;\n  public cutTail: any;\n  public output_pullup: any;\n  public obniz!: Obniz;\n  public params: any;\n  public ondetect: any;\n\n  constructor() {\n    this.keys = [\"output\", \"vcc\", \"gnd\"];\n    this.requiredKeys = [\"output\"];\n\n    this.dataSymbolLength = 0.07;\n    this.duration = 500; // 500msec\n    this.dataInverted = true;\n    this.triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal\n    this.cutTail = false;\n    this.output_pullup = true;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    if (!obniz.isValidIO(this.params.output)) {\n      throw new Error(\"output is not valid io\");\n    }\n  }\n\n  public start(callback: any) {\n    this.ondetect = callback;\n    if (this.output_pullup) {\n      this.obniz.getIO(this.params.output).pull(\"5v\");\n    }\n\n    this.obniz.logicAnalyzer!.start({\n      io: this.params.output,\n      interval: this.dataSymbolLength,\n      duration: this.duration,\n      triggerValue: this.dataInverted ? false : true,\n      triggerValueSamples: this.triggerSampleCount,\n    });\n    this.obniz.logicAnalyzer!.onmeasured = (levels: any) => {\n      if (typeof this.ondetect === \"function\") {\n        if (this.dataInverted) {\n          const arr: any = new Uint8Array(levels);\n          for (let i = 0; i < arr.length; i++) {\n            arr[i] = arr[i] ? 0 : 1;\n          }\n          levels = Array.from(arr);\n        }\n\n        if (this.cutTail) {\n          for (let i = levels.length - 1; i > 1; i--) {\n            if (levels[i] === 0 && levels[i - 1] === 0) {\n              levels.splice(i, 1);\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.ondetect(levels);\n      }\n    };\n  }\n}\n\nexport default IRSensor;\n"]}