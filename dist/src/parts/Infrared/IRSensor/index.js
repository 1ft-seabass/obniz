"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class IRSensor {
    constructor() {
        this.keys = ["output", "vcc", "gnd"];
        this.requiredKeys = ["output"];
        this.dataSymbolLength = 0.07;
        this.duration = 500; // 500msec
        this.dataInverted = true;
        this.triggerSampleCount = 16; // If Signal arrives more than this count. then treat as signal
        this.cutTail = false;
        this.output_pullup = true;
    }
    static info() {
        return {
            name: "IRSensor",
        };
    }
    wired(obniz) {
        this.obniz = obniz;
        obniz.setVccGnd(this.params.vcc, this.params.gnd, "5v");
        if (!obniz.isValidIO(this.params.output)) {
            throw new Error("output is not valid io");
        }
    }
    start(callback) {
        this.ondetect = callback;
        if (this.output_pullup) {
            this.obniz.getIO(this.params.output).pull("5v");
        }
        this.obniz.logicAnalyzer.start({
            io: this.params.output,
            interval: this.dataSymbolLength,
            duration: this.duration,
            triggerValue: this.dataInverted ? false : true,
            triggerValueSamples: this.triggerSampleCount,
        });
        this.obniz.logicAnalyzer.onmeasured = (levels) => {
            if (typeof this.ondetect === "function") {
                if (this.dataInverted) {
                    const arr = new Uint8Array(levels);
                    for (let i = 0; i < arr.length; i++) {
                        arr[i] = arr[i] ? 0 : 1;
                    }
                    levels = Array.from(arr);
                }
                if (this.cutTail) {
                    for (let i = levels.length - 1; i > 1; i--) {
                        if (levels[i] === 0 && levels[i - 1] === 0) {
                            levels.splice(i, 1);
                        }
                        else {
                            break;
                        }
                    }
                }
                this.ondetect(levels);
            }
        };
    }
}
exports.default = IRSensor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJ0cy9JbmZyYXJlZC9JUlNlbnNvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sUUFBUTtJQW9CWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVTtRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLENBQUMsK0RBQStEO1FBQzdGLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUE1Qk0sTUFBTSxDQUFDLElBQUk7UUFDaEIsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBMEJNLEtBQUssQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQWE7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQzdCLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDOUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtTQUM3QyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUNwRCxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7Z0JBQ3ZDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtvQkFDckIsTUFBTSxHQUFHLEdBQVEsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDekI7b0JBQ0QsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzFCO2dCQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUMxQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7NEJBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3lCQUNyQjs2QkFBTTs0QkFDTCxNQUFNO3lCQUNQO3FCQUNGO2lCQUNGO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJmaWxlIjoic3JjL3BhcnRzL0luZnJhcmVkL0lSU2Vuc29yL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSVJTZW5zb3Ige1xuXG4gIHB1YmxpYyBzdGF0aWMgaW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJJUlNlbnNvclwiLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMga2V5czogYW55O1xuICBwdWJsaWMgcmVxdWlyZWRLZXlzOiBhbnk7XG4gIHB1YmxpYyBkYXRhU3ltYm9sTGVuZ3RoOiBhbnk7XG4gIHB1YmxpYyBkdXJhdGlvbjogYW55O1xuICBwdWJsaWMgZGF0YUludmVydGVkOiBhbnk7XG4gIHB1YmxpYyB0cmlnZ2VyU2FtcGxlQ291bnQ6IGFueTtcbiAgcHVibGljIGN1dFRhaWw6IGFueTtcbiAgcHVibGljIG91dHB1dF9wdWxsdXA6IGFueTtcbiAgcHVibGljIG9ibml6OiBhbnk7XG4gIHB1YmxpYyBwYXJhbXM6IGFueTtcbiAgcHVibGljIG9uZGV0ZWN0OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZXlzID0gW1wib3V0cHV0XCIsIFwidmNjXCIsIFwiZ25kXCJdO1xuICAgIHRoaXMucmVxdWlyZWRLZXlzID0gW1wib3V0cHV0XCJdO1xuXG4gICAgdGhpcy5kYXRhU3ltYm9sTGVuZ3RoID0gMC4wNztcbiAgICB0aGlzLmR1cmF0aW9uID0gNTAwOyAvLyA1MDBtc2VjXG4gICAgdGhpcy5kYXRhSW52ZXJ0ZWQgPSB0cnVlO1xuICAgIHRoaXMudHJpZ2dlclNhbXBsZUNvdW50ID0gMTY7IC8vIElmIFNpZ25hbCBhcnJpdmVzIG1vcmUgdGhhbiB0aGlzIGNvdW50LiB0aGVuIHRyZWF0IGFzIHNpZ25hbFxuICAgIHRoaXMuY3V0VGFpbCA9IGZhbHNlO1xuICAgIHRoaXMub3V0cHV0X3B1bGx1cCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgd2lyZWQob2JuaXo6IGFueSkge1xuICAgIHRoaXMub2JuaXogPSBvYm5pejtcbiAgICBvYm5pei5zZXRWY2NHbmQodGhpcy5wYXJhbXMudmNjLCB0aGlzLnBhcmFtcy5nbmQsIFwiNXZcIik7XG4gICAgaWYgKCFvYm5pei5pc1ZhbGlkSU8odGhpcy5wYXJhbXMub3V0cHV0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib3V0cHV0IGlzIG5vdCB2YWxpZCBpb1wiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMub25kZXRlY3QgPSBjYWxsYmFjaztcbiAgICBpZiAodGhpcy5vdXRwdXRfcHVsbHVwKSB7XG4gICAgICB0aGlzLm9ibml6LmdldElPKHRoaXMucGFyYW1zLm91dHB1dCkucHVsbChcIjV2XCIpO1xuICAgIH1cblxuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5zdGFydCh7XG4gICAgICBpbzogdGhpcy5wYXJhbXMub3V0cHV0LFxuICAgICAgaW50ZXJ2YWw6IHRoaXMuZGF0YVN5bWJvbExlbmd0aCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuICAgICAgdHJpZ2dlclZhbHVlOiB0aGlzLmRhdGFJbnZlcnRlZCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIHRyaWdnZXJWYWx1ZVNhbXBsZXM6IHRoaXMudHJpZ2dlclNhbXBsZUNvdW50LFxuICAgIH0pO1xuICAgIHRoaXMub2JuaXoubG9naWNBbmFseXplci5vbm1lYXN1cmVkID0gKGxldmVsczogYW55KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub25kZXRlY3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAodGhpcy5kYXRhSW52ZXJ0ZWQpIHtcbiAgICAgICAgICBjb25zdCBhcnI6IGFueSA9IG5ldyBVaW50OEFycmF5KGxldmVscyk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycltpXSA9IGFycltpXSA/IDAgOiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXZlbHMgPSBBcnJheS5mcm9tKGFycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXRUYWlsKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGxldmVscy5sZW5ndGggLSAxOyBpID4gMTsgaS0tKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWxzW2ldID09PSAwICYmIGxldmVsc1tpIC0gMV0gPT09IDApIHtcbiAgICAgICAgICAgICAgbGV2ZWxzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25kZXRlY3QobGV2ZWxzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElSU2Vuc29yO1xuIl19
