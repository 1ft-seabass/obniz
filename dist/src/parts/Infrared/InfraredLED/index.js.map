{"version":3,"sources":["../src/parts/Infrared/InfraredLED/index.ts"],"names":[],"mappings":";;AAAA,MAAM,WAAW;IAgBf;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC;QAE9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAnBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,aAAa;SACpB,CAAC;IACJ,CAAC;IAiBM,KAAK,CAAC,KAAU;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC9C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,gDAAgD;IACxE,CAAC;IAEM,IAAI,CAAC,GAAQ;QAClB,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YACtD,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACb;QACD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","file":"index.js","sourcesContent":["class InfraredLED {\n\n  public static info() {\n    return {\n      name: \"InfraredLED\",\n    };\n  }\n\n  public keys: any;\n  public requiredKeys: any;\n  public dataSymbolLength: any;\n  public obniz: any;\n  public params: any;\n  public io_cathode: any;\n  public pwm: any;\n\n  constructor() {\n    this.keys = [\"anode\", \"cathode\"];\n    this.requiredKeys = [\"anode\"];\n\n    this.dataSymbolLength = 0.07;\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n    if (!this.obniz.isValidIO(this.params.anode)) {\n      throw new Error(\"anode is not valid io\");\n    }\n    if (this.params.cathode) {\n      if (!this.obniz.isValidIO(this.params.cathode)) {\n        throw new Error(\"cathode is not valid io\");\n      }\n      this.io_cathode = obniz.getIO(this.params.cathode);\n      this.io_cathode.output(false);\n    }\n    this.pwm = this.obniz.getFreePwm();\n    this.pwm.start({io: this.params.anode});\n    this.pwm.freq(38000);\n    this.obniz.wait(150); // TODO: this is instant fix for pwm start delay\n  }\n\n  public send(arr: any) {\n    if (arr && arr.length > 0 && arr[arr.length - 1] === 1) {\n      arr.push(0);\n    }\n    this.pwm.modulate(\"am\", this.dataSymbolLength, arr);\n  }\n}\n\nexport default InfraredLED;\n"]}