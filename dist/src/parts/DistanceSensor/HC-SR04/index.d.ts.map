{"version":3,"sources":["../src/parts/DistanceSensor/HC-SR04/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,aAAa;CAAI;AAClC,cAAM,MAAO,YAAW,mBAAmB;WAE3B,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAE,GAAG,CAAC;IACX,aAAa,EAAE,GAAG,CAAC;IACnB,IAAI,EAAE,GAAG,CAAC;IACV,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,GAAG,CAAC;IACX,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;;IAYV,KAAK,CAAC,KAAK,EAAE,KAAK;IAclB,OAAO,CAAC,QAAQ,EAAE,GAAG;IAmCf,WAAW;IAQjB,IAAI,CAAC,IAAI,EAAE,GAAG;CAStB;AAED,eAAe,MAAM,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface HCSR04Options { }\nclass HCSR04 implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HC-SR04\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public _unit: any;\n  public reset_alltime: any;\n  public temp: any;\n  public obniz!: Obniz;\n  public params: any;\n  public vccIO: any;\n  public trigger: any;\n  public echo: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"trigger\", \"echo\", \"gnd\"];\n    this.requiredKeys = [\"vcc\", \"trigger\", \"echo\"];\n\n    this._unit = \"mm\";\n    this.reset_alltime = false;\n\n    this.temp = 15;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(null, this.params.gnd, \"5v\");\n\n    this.vccIO = obniz.getIO(this.params.vcc);\n    this.trigger = this.params.trigger;\n    this.echo = this.params.echo;\n\n    this.vccIO.drive(\"5v\");\n    this.vccIO.output(true);\n    this.obniz.wait(100);\n  }\n\n  public measure(callback: any) {\n    const self: any = this;\n    this.obniz.measure!.echo({\n      io_pulse: this.trigger,\n      io_echo: this.echo,\n      pulse: \"positive\",\n      pulse_width: 0.011,\n      measure_edges: 3,\n      timeout: (10 / 340) * 1000,\n      callback: async (edges: any) => {\n        if (this.reset_alltime) {\n          this.vccIO.output(false);\n          this.obniz.wait(100);\n          this.vccIO.output(true);\n          this.obniz.wait(100);\n        }\n        let distance: any;\n        for (let i = 0; i < edges.length - 1; i++) {\n          // HCSR04's output of io_echo is initially high when trigger is finshed\n          if (edges[i].edge === true) {\n            const time: any = (edges[i + 1].timing - edges[i].timing) / 1000; // (1/4000 * 8) + is needed??\n            distance =\n              (time / 2) * 20.055 * Math.sqrt(this.temp + 273.15) * 1000;\n            if (self._unit === \"inch\") {\n              distance = distance * 0.0393701;\n            }\n          }\n        }\n        if (typeof callback === \"function\") {\n          callback(distance);\n        }\n      },\n    });\n  }\n\n  public async measureWait() {\n    return new Promise((resolve: any) => {\n      this.measure((distance: any) => {\n        resolve(distance);\n      });\n    });\n  }\n\n  public unit(unit: any) {\n    if (unit === \"mm\") {\n      this._unit = \"mm\";\n    } else if (unit === \"inch\") {\n      this._unit = \"inch\";\n    } else {\n      throw new Error(\"HCSR04: unknown unit \" + unit);\n    }\n  }\n}\n\nexport default HCSR04;\n"]}