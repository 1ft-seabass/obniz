{"version":3,"sources":["../src/parts/DistanceSensor/GP2Y0A21YK0F/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,EAAE,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAEvF,MAAM,WAAW,mBAAmB;CAAI;AACxC,cAAM,YAAa,YAAW,mBAAmB;WAEjC,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,cAAc,EAAE,GAAG,CAAC;IACpB,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,SAAS,EAAE,GAAG,CAAC;IACf,SAAS,EAAE,GAAG,CAAC;;IAcf,KAAK,CAAC,KAAK,EAAE,KAAK;IASlB,KAAK,CAAC,QAAQ,EAAE,GAAG;IASnB,cAAc,CAAC,GAAG,EAAE,GAAG;IAcvB,OAAO;IAQP,IAAI,CAAC,IAAI,EAAE,GAAG;CAStB;AAED,eAAe,YAAY,CAAC","file":"index.d.ts","sourcesContent":["import Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface GP2Y0A21YK0FOptions { }\nclass GP2Y0A21YK0F implements ObnizPartsInterface {\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"GP2Y0A21YK0F\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public displayIoNames: any;\n  public _unit: any;\n  public obniz!: Obniz;\n  public params: any;\n  public io_signal: any;\n  public ad_signal: any;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\n    this.requiredKeys = [\"signal\"];\n\n    this.displayIoNames = {\n      vcc: \"vcc\",\n      gnd: \"gnd\",\n      signal: \"signal\",\n    };\n    this._unit = \"mm\";\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.io_signal = obniz.getIO(this.params.signal);\n    this.io_signal.end();\n    this.ad_signal = obniz.getAD(this.params.signal);\n  }\n\n  public start(callback: any) {\n    this.ad_signal.start((val: any) => {\n      const distance: any = this._volt2distance(val);\n      if (typeof callback === \"function\") {\n        callback(distance);\n      }\n    });\n  }\n\n  public _volt2distance(val: any) {\n    if (val <= 0) {\n      val = 0.001;\n    }\n    let distance: any = 19988.34 * Math.pow((val / 5.0) * 1024, -1.25214) * 10;\n    if (this._unit === \"mm\") {\n      distance = Math.floor(distance * 10) / 10;\n    } else {\n      distance *= 0.0393701;\n      distance = Math.floor(distance * 1000) / 1000;\n    }\n    return distance;\n  }\n\n  public getWait() {\n    return new Promise(async (resolve) => {\n      const val: any = await this.ad_signal.getWait();\n      const distance: any = this._volt2distance(val);\n      resolve(distance);\n    });\n  }\n\n  public unit(unit: any) {\n    if (unit === \"mm\") {\n      this._unit = \"mm\";\n    } else if (unit === \"inch\") {\n      this._unit = \"inch\";\n    } else {\n      throw new Error(\"unknown unit \" + unit);\n    }\n  }\n}\n\nexport default GP2Y0A21YK0F;\n"]}