{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,OAAO,OAAO,gBAAgB;IAC5B,IAAI,EAAE,GAAG,CAAC;IACV,YAAY,EAAE,GAAG,CAAC;IAClB,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IACb,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,GAAG,EAAE,GAAG,CAAC;;IAUT,OAAO;;;;;IAWP,KAAK,CAAC,KAAK,EAAE,GAAG;IAWhB,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAQzB,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAKlC,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAK9C,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAMpC","file":"i2cParts.d.ts","sourcesContent":["export default class I2cPartsAbstruct {\n  public keys: any;\n  public requiredKeys: any;\n  public i2cinfo: any;\n  public address: any;\n  public obniz: any;\n  public params: any;\n  public i2c: any;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"vcc\"];\n    this.requiredKeys = [];\n\n    this.i2cinfo = this.i2cInfo();\n    this.address = this.i2cinfo.address;\n  }\n\n  public i2cInfo() {\n    throw new Error(\"abstruct class\");\n\n    // eslint-disable-next-line no-unreachable\n    return {\n      address: 0x00,\n      clock: 100000,\n      voltage: \"3v\",\n    };\n  }\n\n  public wired(obniz: any) {\n    this.obniz = obniz;\n\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.i2cinfo.voltage);\n    this.params.clock = this.i2cinfo.clock;\n    this.params.pull = this.i2cinfo.voltage;\n    this.params.mode = \"master\";\n    // @ts-ignore\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n  }\n\n  public char2short(val1: any, val2: any) {\n    const buffer: any = new ArrayBuffer(2);\n    const dv: any = new DataView(buffer);\n    dv.setUint8(0, val1);\n    dv.setUint8(1, val2);\n    return dv.getInt16(0, false);\n  }\n\n  public async readWait(command: any, length: any) {\n    this.i2c.write(this.address, [command]);\n    return await this.i2c.readWait(this.address, length);\n  }\n\n  public async readUint16Wait(command: any, length: any) {\n    this.i2c.write(this.address, [command]);\n    return await this.i2c.readWait(this.address, length);\n  }\n\n  public write(command: any, buf: any) {\n    if (!Array.isArray(buf)) {\n      buf = [buf];\n    }\n    this.i2c.write(this.address, [command, ...buf]);\n  }\n}\n"]}