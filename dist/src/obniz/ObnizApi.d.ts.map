{"version":3,"sources":["../src/obniz/ObnizApi.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAOH,MAAM,CAAC,OAAO,OAAO,QAAQ;IAE3B,IAAI,UAAU,QAIb;IACM,OAAO,EAAE,GAAG,CAAC;IACb,OAAO,EAAE,GAAG,CAAC;IACpB,OAAO,CAAC,EAAE,CAAS;gBAEP,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG;IAUlC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAqC1C,QAAQ,CAAC,QAAQ,EAAE,GAAG;IAItB,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;CAGzC","file":"ObnizApi.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport fetch from \"node-fetch\";\n\n// @ts-ignore\nimport packageJson from \"../../package\"; // pakcage.js will be created from package.json on build.\n\nexport default class ObnizApi {\n\n  get apiVersion() {\n\n    const versionString: any = packageJson.version;\n    return versionString.split(\".\").shift();\n  }\n  public options: any;\n  public urlBase: any;\n  private id: string;\n\n  constructor(obnizId: string, options: any) {\n    this.id = obnizId;\n    options = options || {};\n    this.options = {\n      access_token: options.access_token || null,\n      obniz_server: options.obniz_server || \"https://obniz.io\",\n    };\n    this.urlBase = this.options.obniz_server + \"/obniz/\" + this.id;\n  }\n\n  public post(path: any, params: any, callback: any) {\n    const url: any = this.urlBase + path;\n\n    // let query = [];\n    // query.push(\"XXX\");\n    // if(query.length > 0){\n    //   url += \"?\" + query.join(\"&\");\n    // }\n\n    const headers: any = {};\n    headers[\"Content-Type\"] = \"application/json\";\n    if (this.options.access_token) {\n      headers.authorization = \"Bearer \" + this.options.access_token;\n    }\n\n    const fetchParams: any = {\n      method: \"POST\",\n      headers,\n    };\n    if (params) {\n      fetchParams.body = JSON.stringify(params);\n    }\n\n    return fetch(url, fetchParams)\n      .then ((res: any) => {\n        return res.json();\n      })\n      .then((json: any) => {\n        if (typeof callback === \"function\") {\n          callback(json);\n        }\n        return new Promise((resolve: any ) => {\n          resolve(json);\n        });\n      });\n  }\n\n  public getState(callback: any) {\n    return this.post(\"/state\", null, callback);\n  }\n\n  public postJson(json: any, callback: any) {\n    return this.post(\"/api/\" + this.apiVersion, json, callback); // 1 is api version\n  }\n}\n"]}