"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yaml = require("js-yaml");
exports.default = (source) => {
    // @ts-ignore
    const self = this;
    if (self.cacheable) {
        self.cacheable();
    }
    try {
        const src = yaml.safeLoad(source);
        const excludeKeys = ["example", "description"];
        const res = filter(src, excludeKeys);
        // console.log("src",src);
        // console.log("res",res);
        return JSON.stringify(res, undefined, "\t");
    }
    catch (err) {
        self.emitError(err);
        return null;
    }
};
function filter(target, excludeKeys) {
    if (typeof target !== "object") {
        return target;
    }
    if (target === null) {
        return target;
    }
    if (Array.isArray(target)) {
        const newArr = [];
        for (const key in target) {
            if (!excludeKeys.includes(key)) {
                newArr[key] = filter(target[key], excludeKeys);
            }
        }
        return target;
    }
    const newObj = {};
    for (const key in target) {
        if (!excludeKeys.includes(key)) {
            newObj[key] = filter(target[key], excludeKeys);
        }
    }
    return newObj;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dlYnBhY2tSZXBsYWNlL3lhbWwtc2NoZW1hLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sSUFBSSxHQUFRLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVyQyxrQkFBZSxDQUFDLE1BQVcsRUFBRSxFQUFFO0lBRTdCLGFBQWE7SUFDYixNQUFNLElBQUksR0FBUSxJQUFJLENBQUM7SUFDdkIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUNsQjtJQUNELElBQUk7UUFDRixNQUFNLEdBQUcsR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sV0FBVyxHQUFRLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXBELE1BQU0sR0FBRyxHQUFRLE1BQU0sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUMsMEJBQTBCO1FBQzFCLDBCQUEwQjtRQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM3QztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsU0FBUyxNQUFNLENBQUMsTUFBVyxFQUFFLFdBQWdCO0lBQzNDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzlCLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFDRCxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDbkIsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2FBQ2hEO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2hEO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL3dlYnBhY2tSZXBsYWNlL3lhbWwtc2NoZW1hLWxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHlhbWw6IGFueSA9IHJlcXVpcmUoXCJqcy15YW1sXCIpO1xuXG5leHBvcnQgZGVmYXVsdCAoc291cmNlOiBhbnkpID0+IHtcblxuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gIGlmIChzZWxmLmNhY2hlYWJsZSkge1xuICAgIHNlbGYuY2FjaGVhYmxlKCk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBzcmM6IGFueSA9IHlhbWwuc2FmZUxvYWQoc291cmNlKTtcbiAgICBjb25zdCBleGNsdWRlS2V5czogYW55ID0gW1wiZXhhbXBsZVwiLCBcImRlc2NyaXB0aW9uXCJdO1xuXG4gICAgY29uc3QgcmVzOiBhbnkgPSBmaWx0ZXIoc3JjLCBleGNsdWRlS2V5cyk7XG4gICAgLy8gY29uc29sZS5sb2coXCJzcmNcIixzcmMpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwicmVzXCIscmVzKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzLCB1bmRlZmluZWQsIFwiXFx0XCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBzZWxmLmVtaXRFcnJvcihlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIodGFyZ2V0OiBhbnksIGV4Y2x1ZGVLZXlzOiBhbnkpIHtcbiAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGlmICh0YXJnZXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICBjb25zdCBuZXdBcnI6IGFueSA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKCFleGNsdWRlS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIG5ld0FycltrZXldID0gZmlsdGVyKHRhcmdldFtrZXldLCBleGNsdWRlS2V5cyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgY29uc3QgbmV3T2JqOiBhbnkgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgaWYgKCFleGNsdWRlS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBuZXdPYmpba2V5XSA9IGZpbHRlcih0YXJnZXRba2V5XSwgZXhjbHVkZUtleXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuIl19
