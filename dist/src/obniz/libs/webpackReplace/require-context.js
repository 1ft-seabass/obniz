"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let baseDir;
const fs = require("fs");
const yaml = require("js-yaml");
const nodeDir = require("node-dir");
const path = require("path");
exports.default = (directory, recursive, regExp) => {
    // Assume absolute path by default
    let basepath = directory;
    if (directory[0] === ".") {
        // Relative path
        let dir = __dirname;
        if (baseDir) {
            dir = baseDir;
        }
        basepath = path.join(dir, directory);
    }
    else if (!path.isAbsolute(directory)) {
        // Module path
        basepath = require.resolve(directory);
    }
    const keys = nodeDir
        .files(basepath, {
        sync: true,
        recursive: recursive || false,
    })
        .filter((file) => {
        return file.match(regExp || /\.(json|js)$/);
    })
        .map((file) => {
        return path.join(".", file.slice(basepath.length + 1));
    });
    const context = (key) => {
        const modulePath = context.resolve(key);
        if (/\.(json|js)$/.test(modulePath)) {
            return require(modulePath);
        }
        else if (/\.(yaml|yml)$/.test(modulePath)) {
            return yaml.safeLoad(fs.readFileSync(modulePath, "utf8"));
        }
        else {
            throw new Error("unknown type");
        }
    };
    context.resolve = (key) => {
        return path.join(basepath, key);
    };
    context.keys = () => {
        return keys;
    };
    return context;
};
module.exports.setBaseDir = (base) => {
    baseDir = base;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dlYnBhY2tSZXBsYWNlL3JlcXVpcmUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBWSxDQUFDO0FBQ2pCLHlCQUEwQjtBQUMxQixnQ0FBaUM7QUFDakMsb0NBQXFDO0FBQ3JDLDZCQUE4QjtBQUU5QixrQkFBZSxDQUFDLFNBQWlCLEVBQUUsU0FBa0IsRUFBRSxNQUFjLEVBQU8sRUFBRTtJQUU1RSxrQ0FBa0M7SUFDbEMsSUFBSSxRQUFRLEdBQVEsU0FBUyxDQUFDO0lBRTlCLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtRQUN4QixnQkFBZ0I7UUFDaEIsSUFBSSxHQUFHLEdBQVEsU0FBUyxDQUFDO1FBQ3pCLElBQUksT0FBTyxFQUFFO1lBQ1gsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNmO1FBQ0QsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3RDO1NBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdEMsY0FBYztRQUNkLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsTUFBTSxJQUFJLEdBQVMsT0FBZTtTQUMvQixLQUFLLENBQUMsUUFBUSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixTQUFTLEVBQUUsU0FBUyxJQUFJLEtBQUs7S0FDOUIsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO1NBQ0QsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVMLE1BQU0sT0FBTyxHQUFRLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxVQUFVLEdBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUI7YUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0Q7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDM0MsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNqQixDQUFDLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvd2VicGFja1JlcGxhY2UvcmVxdWlyZS1jb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGJhc2VEaXI6IGFueTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmltcG9ydCB5YW1sID0gcmVxdWlyZShcImpzLXlhbWxcIik7XG5pbXBvcnQgbm9kZURpciA9IHJlcXVpcmUoXCJub2RlLWRpclwiKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmV4cG9ydCBkZWZhdWx0IChkaXJlY3Rvcnk6IHN0cmluZywgcmVjdXJzaXZlOiBib29sZWFuLCByZWdFeHA6IFJlZ0V4cCk6IGFueSA9PiB7XG5cbiAgLy8gQXNzdW1lIGFic29sdXRlIHBhdGggYnkgZGVmYXVsdFxuICBsZXQgYmFzZXBhdGg6IGFueSA9IGRpcmVjdG9yeTtcblxuICBpZiAoZGlyZWN0b3J5WzBdID09PSBcIi5cIikge1xuICAgIC8vIFJlbGF0aXZlIHBhdGhcbiAgICBsZXQgZGlyOiBhbnkgPSBfX2Rpcm5hbWU7XG4gICAgaWYgKGJhc2VEaXIpIHtcbiAgICAgIGRpciA9IGJhc2VEaXI7XG4gICAgfVxuICAgIGJhc2VwYXRoID0gcGF0aC5qb2luKGRpciwgZGlyZWN0b3J5KTtcbiAgfSBlbHNlIGlmICghcGF0aC5pc0Fic29sdXRlKGRpcmVjdG9yeSkpIHtcbiAgICAvLyBNb2R1bGUgcGF0aFxuICAgIGJhc2VwYXRoID0gcmVxdWlyZS5yZXNvbHZlKGRpcmVjdG9yeSk7XG4gIH1cblxuICBjb25zdCBrZXlzOiBhbnkgPSAobm9kZURpciBhcyBhbnkpXG4gICAgLmZpbGVzKGJhc2VwYXRoLCB7XG4gICAgICBzeW5jOiB0cnVlLFxuICAgICAgcmVjdXJzaXZlOiByZWN1cnNpdmUgfHwgZmFsc2UsXG4gICAgfSlcbiAgICAuZmlsdGVyKChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBmaWxlLm1hdGNoKHJlZ0V4cCB8fCAvXFwuKGpzb258anMpJC8pO1xuICAgIH0pXG4gICAgLm1hcCgoZmlsZTogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gcGF0aC5qb2luKFwiLlwiLCBmaWxlLnNsaWNlKGJhc2VwYXRoLmxlbmd0aCArIDEpKTtcbiAgICB9KTtcblxuICBjb25zdCBjb250ZXh0OiBhbnkgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBtb2R1bGVQYXRoOiBhbnkgPSBjb250ZXh0LnJlc29sdmUoa2V5KTtcbiAgICBpZiAoL1xcLihqc29ufGpzKSQvLnRlc3QobW9kdWxlUGF0aCkpIHtcbiAgICAgIHJldHVybiByZXF1aXJlKG1vZHVsZVBhdGgpO1xuICAgIH0gZWxzZSBpZiAoL1xcLih5YW1sfHltbCkkLy50ZXN0KG1vZHVsZVBhdGgpKSB7XG4gICAgICByZXR1cm4geWFtbC5zYWZlTG9hZChmcy5yZWFkRmlsZVN5bmMobW9kdWxlUGF0aCwgXCJ1dGY4XCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlXCIpO1xuICAgIH1cbiAgfTtcblxuICBjb250ZXh0LnJlc29sdmUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gcGF0aC5qb2luKGJhc2VwYXRoLCBrZXkpO1xuICB9O1xuXG4gIGNvbnRleHQua2V5cyA9ICgpID0+IHtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnNldEJhc2VEaXIgPSAoYmFzZTogc3RyaW5nKSA9PiB7XG4gIGJhc2VEaXIgPSBiYXNlO1xufTtcbiJdfQ==
