{"version":3,"sources":["../src/obniz/libs/io_peripherals/pwm.ts"],"names":[],"mappings":"AAEA,cAAM,aAAa;IACV,KAAK,EAAE,GAAG,CAAC;IACX,EAAE,EAAE,GAAG,CAAC;IACR,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,MAAM,EAAE,GAAG,CAAC;gBAEP,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;IAMxB,MAAM;IAKN,MAAM,CAAC,GAAG,EAAE,GAAG;IAMf,KAAK,CAAC,MAAM,EAAE,GAAG;IAuBjB,IAAI,CAAC,IAAI,EAAE,GAAG;IAiBd,KAAK,CAAC,WAAW,EAAE,GAAG;IAYtB,IAAI,CAAC,IAAI,EAAE,GAAG;IAwBd,MAAM;IAIN,GAAG;IAMH,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;CAYzD;AAED,eAAe,aAAa,CAAC","file":"pwm.d.ts","sourcesContent":["import ObnizUtil from \"../utils/util\";\n\nclass PeripheralPWM {\n  public Obniz: any;\n  public id: any;\n  public state: any;\n  public used: any;\n  public params: any;\n\n  constructor(Obniz: any, id: any) {\n    this.Obniz = Obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  public _reset() {\n    this.state = {};\n    this.used = false;\n  }\n\n  public sendWS(obj: any) {\n    const wsObj: any = {};\n    wsObj[\"pwm\" + this.id] = obj;\n    this.Obniz.send(wsObj);\n  }\n\n  public start(params: any) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\"]);\n    if (err) {\n      throw new Error(\"pwm start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\"io\", \"drive\", \"pull\"]);\n\n    const io: any = this.params.io;\n    const ioObj: any = this.Obniz.getIO(io);\n\n    ioObj.drive(this.params.drive || \"5v\");\n    ioObj.pull(this.params.pull || null);\n\n    this.state = {\n      io,\n      freq: 1000,\n    };\n    this.sendWS({\n      io,\n    });\n    this.used = true;\n  }\n\n  public freq(freq: any) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    freq *= 1;\n    if (typeof freq !== \"number\") {\n      throw new Error(\"please provide freq in number\");\n    }\n    this.state.freq = freq;\n    this.sendWS({\n      freq,\n    });\n    if (typeof this.state.duty === \"number\") {\n      this.duty(this.state.duty);\n    }\n  }\n\n  public pulse(pulse_width: any) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n\n    this.state.pulse = pulse_width;\n    delete this.state.duty;\n    this.sendWS({\n      pulse: pulse_width,\n    });\n  }\n\n  public duty(duty: any) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    duty *= 1;\n    if (typeof this.state.freq !== \"number\" || this.state.freq <= 0) {\n      throw new Error(\"please provide freq first.\");\n    }\n    if (typeof duty !== \"number\") {\n      throw new Error(\"please provide duty in number\");\n    }\n    if (duty < 0) {\n      duty = 0;\n    }\n    if (duty > 100) {\n      duty = 100;\n    }\n    const pulse_width: any = (1.0 / this.state.freq) * 1000 * duty * 0.01;\n    this.state.duty = duty;\n    this.sendWS({\n      pulse: pulse_width,\n    });\n  }\n\n  public isUsed() {\n    return this.used;\n  }\n\n  public end() {\n    this.state = {};\n    this.sendWS(null);\n    this.used = false;\n  }\n\n  public modulate(type: any, symbol_length: any, data: any) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    this.sendWS({\n      modulate: {\n        type,\n        symbol_length,\n        data,\n      },\n    });\n  }\n}\n\nexport default PeripheralPWM;\n"]}