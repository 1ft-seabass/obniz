{"version":3,"sources":["../src/obniz/libs/io_peripherals/directive.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,cAAM,SAAS;IACN,KAAK,EAAE,KAAK,CAAC;IACb,SAAS,EAAE,GAAG,CAAC;IACf,oBAAoB,EAAE,GAAG,CAAC;gBAErB,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAM7B,MAAM;IAQN,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAUhD,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;IA2C3D,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAsBlC,QAAQ,CAAC,GAAG,EAAE,GAAG;CAUzB;AAED,eAAe,SAAS,CAAC","file":"directive.d.ts","sourcesContent":["import semver = require(\"semver\");\nimport Obniz from \"../../index\";\n\nclass Directive {\n  public Obniz: Obniz;\n  public observers: any;\n  public _animationIdentifier: any;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.observers = [];\n    this._reset();\n  }\n\n  public _reset() {\n    for (let i = 0; i < this.observers.length; i++) {\n      this.observers[i].reject(new Error(\"reset called\"));\n    }\n    this.observers = [];\n    this._animationIdentifier = 0;\n  }\n\n  public addObserver(name: any, resolve: any, reject: any) {\n    if (name && resolve && reject) {\n      this.observers.push({\n        name,\n        resolve,\n        reject,\n      });\n    }\n  }\n\n  public animation(name: any, status: any, array?: any, repeat?: any) {\n    if (\n      (typeof repeat === \"number\" || status === \"registrate\") &&\n      semver.lt(this.Obniz.firmware_ver, \"2.0.0\")\n    ) {\n      throw new Error(`Please update obniz firmware >= 2.0.0`);\n    }\n    const obj: any = {};\n    obj.io = {\n      animation: {\n        name,\n        status,\n      },\n    };\n    if (typeof repeat === \"number\") {\n      obj.io.animation.repeat = repeat;\n    }\n    if (!array) {\n      array = [];\n    }\n\n    const states: any = [];\n    for (let i = 0; i < array.length; i++) {\n      const state: any = array[i];\n      const duration: any = state.duration;\n      const operation: any = state.state;\n\n      // dry run. and get json commands\n      this.Obniz.sendPool = [];\n      operation(i);\n      const pooledJsonArray: any = this.Obniz.sendPool;\n      this.Obniz.sendPool = null;\n      states.push({\n        duration,\n        state: pooledJsonArray,\n      });\n    }\n    if (status === \"loop\" || status === \"registrate\") {\n      obj.io.animation.states = states;\n    }\n    this.Obniz.send(obj);\n  }\n\n  public repeatWait(array: any, repeat: any) {\n    if (semver.lt(this.Obniz.firmware_ver, \"2.0.0\")) {\n      throw new Error(`Please update obniz firmware >= 2.0.0`);\n    }\n    if (typeof repeat !== \"number\" || repeat < 1) {\n      throw new Error(\"please specify repeat count > 0\");\n    }\n    if (Math.floor(repeat) !== repeat) {\n      throw new Error(\"please provide integer number like 1, 2, 3,,,\");\n    }\n\n    return new Promise((resolve: any, reject: any) => {\n      const name: any = \"_repeatwait\" + Date.now() + this._animationIdentifier;\n      if (++this._animationIdentifier > 1000) {\n        this._animationIdentifier = 0;\n      }\n\n      this.animation(name, \"loop\", array, repeat);\n      this.addObserver(name, resolve, reject);\n    });\n  }\n\n  public notified(obj: any) {\n    if (obj.animation.status === \"finish\") {\n      for (let i = this.observers.length - 1; i >= 0; i--) {\n        if (obj.animation.name === this.observers[i].name) {\n          this.observers[i].resolve();\n          this.observers.splice(i, 1);\n        }\n      }\n    }\n  }\n}\n\nexport default Directive;\n"]}