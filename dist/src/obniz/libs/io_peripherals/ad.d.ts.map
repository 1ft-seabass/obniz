{"version":3,"sources":["../src/obniz/libs/io_peripherals/ad.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAEhC,MAAM,CAAC,OAAO,OAAO,YAAY;IACxB,KAAK,EAAE,KAAK,CAAC;IACb,EAAE,EAAE,MAAM,CAAC;IAElB;;OAEG;IACI,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAE1C;;;;;;;;;;;;;OAaG;IACI,KAAK,EAAG,MAAM,CAAC;IACtB,OAAO,CAAC,SAAS,CAAkC;gBAEvC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAMpC;;OAEG;IACI,MAAM;IAKN,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI;IAMpD;;;;;;;;OAQG;IACI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI;IAUjD;;;;;;;;;;;;;OAaG;IACI,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;IAYjC;;;;;;OAMG;IACI,GAAG;IAQV;;;OAGG;IACI,QAAQ,CAAC,GAAG,EAAE,MAAM;CAU5B","file":"ad.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\n\nexport default class PeripheralAD {\n  public Obniz: Obniz;\n  public id: number;\n\n  /**\n   * called when voltage gets changed.\n   */\n  public onchange?: (value: number) => void;\n\n  /**\n   * The value will be stored in the value variable.\n   *\n   * Note: This property stores the last received value.\n   * NOT the value when you read this property.\n   *\n   * ```Javascript\n   * obniz.ad0.start();\n   * while(true) {\n   * console.log(\"changed to \"+obniz.ad0.value+\" v\")\n   *  await obniz.wait(10); // 10ms wait\n   * }\n   * ```\n   */\n  public value!: number;\n  private observers!: Array<(value: number) => void>;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  /**\n   * @ignore\n   */\n  public _reset() {\n    this.value = 0.0;\n    this.observers = [];\n  }\n\n  public addObserver(callback: (value: number) => void) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  /**\n   * This starts measuring voltage on ioX until end() is called.\n   * ```Javascript\n   * obniz.ad0.start(function(voltage){\n   *  console.log(\"changed to \"+voltage+\" v\")\n   * });\n   * ```\n   * @param callback  called when voltage gets changed.\n   */\n  public start(callback?: (voltage: number) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = {\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  /**\n   * This measures the voltage just once and returns its value.\n   * This function will pause until ad result arrives to your js.\n   *\n   * ```javascript\n   * obniz.io0.output(true)\n   * var voltage = await obniz.ad0.getWait();\n   * obniz.io0.output(false)\n   * console.log(\"\"+voltage+\" should be closed to 5.00\");\n   * ```\n   *\n   * @return measured voltage\n   *\n   */\n  public getWait(): Promise<number> {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"ad\" + self.id] = {\n        stream: false,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  /**\n   * This stops measuring voltage on ioX.\n   * ```javascript\n   * obniz.ad0.start();\n   * obniz.ad0.end();\n   * ```\n   */\n  public end() {\n    this.onchange = undefined;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = null;\n    this.Obniz.send(obj);\n    return;\n  }\n\n  /**\n   * @ignore\n   * @param obj\n   */\n  public notified(obj: number) {\n    this.value = obj;\n    if (this.onchange) {\n      this.onchange(obj);\n    }\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(obj);\n    }\n  }\n}\n"]}