{"version":3,"sources":["../src/obniz/libs/io_peripherals/ad.ts"],"names":[],"mappings":";;AAEA,MAAM,YAAY;IA0BhB,YAAY,KAAY,EAAE,EAAU;QAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,MAAM;QACX,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,WAAW,CAAC,QAAiC;QAClD,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;IACH,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,QAAoC;QAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;YACpB,MAAM,EAAE,IAAI;SACb,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,OAAO;QACZ,MAAM,IAAI,GAAQ,IAAI,CAAC;QACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC1B,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;gBACpB,MAAM,EAAE,KAAK;aACd,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACI,GAAG;QACR,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,GAAW;QACzB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SACpB;QACD,MAAM,QAAQ,GAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC7C,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,GAAG,CAAC,CAAC;SACf;IACH,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","file":"ad.js","sourcesContent":["import Obniz from \"../../index\";\n\nclass PeripheralAD {\n  public Obniz: Obniz;\n  public id: number;\n\n  /**\n   * called when voltage gets changed.\n   */\n  public onchange?: (value: number) => void;\n\n  /**\n   * The value will be stored in the value variable.\n   *\n   * Note: This property stores the last received value.\n   * NOT the value when you read this property.\n   *\n   * ```Javascript\n   * obniz.ad0.start();\n   * while(true) {\n   * console.log(\"changed to \"+obniz.ad0.value+\" v\")\n   *  await obniz.wait(10); // 10ms wait\n   * }\n   * ```\n   */\n  public value!: number;\n  private observers!: Array<(value: number) => void>;\n\n  constructor(obniz: Obniz, id: number) {\n    this.Obniz = obniz;\n    this.id = id;\n    this._reset();\n  }\n\n  /**\n   * @ignore\n   */\n  public _reset() {\n    this.value = 0.0;\n    this.observers = [];\n  }\n\n  public addObserver(callback: (value: number) => void) {\n    if (callback) {\n      this.observers.push(callback);\n    }\n  }\n\n  /**\n   * This starts measuring voltage on ioX until end() is called.\n   * ```Javascript\n   * obniz.ad0.start(function(voltage){\n   *  console.log(\"changed to \"+voltage+\" v\")\n   * });\n   * ```\n   * @param callback  called when voltage gets changed.\n   */\n  public start(callback?: (voltage: number) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = {\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  /**\n   * This measures the voltage just once and returns its value.\n   * This function will pause until ad result arrives to your js.\n   *\n   * ```javascript\n   * obniz.io0.output(true)\n   * var voltage = await obniz.ad0.getWait();\n   * obniz.io0.output(false)\n   * console.log(\"\"+voltage+\" should be closed to 5.00\");\n   * ```\n   *\n   * @return measured voltage\n   *\n   */\n  public getWait(): Promise<number> {\n    const self: any = this;\n    return new Promise((resolve: any, reject: any) => {\n      self.addObserver(resolve);\n      const obj: any = {};\n      obj[\"ad\" + self.id] = {\n        stream: false,\n      };\n      self.Obniz.send(obj);\n    });\n  }\n\n  /**\n   * This stops measuring voltage on ioX.\n   * ```javascript\n   * obniz.ad0.start();\n   * obniz.ad0.end();\n   * ```\n   */\n  public end() {\n    this.onchange = undefined;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = null;\n    this.Obniz.send(obj);\n    return;\n  }\n\n  /**\n   * @ignore\n   * @param obj\n   */\n  public notified(obj: number) {\n    this.value = obj;\n    if (this.onchange) {\n      this.onchange(obj);\n    }\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(obj);\n    }\n  }\n}\n\nexport default PeripheralAD;\n"]}