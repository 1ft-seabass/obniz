"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ObnizSwitch {
    constructor(Obniz) {
        this.Obniz = Obniz;
        this._reset();
    }
    _reset() {
        this.observers = [];
        this.onChangeForStateWait = () => {
        };
    }
    addObserver(callback) {
        if (callback) {
            this.observers.push(callback);
        }
    }
    getWait() {
        const self = this;
        return new Promise((resolve, reject) => {
            const obj = {};
            obj.switch = "get";
            self.Obniz.send(obj);
            self.addObserver(resolve);
        });
    }
    stateWait(isPressed) {
        const self = this;
        return new Promise((resolve, reject) => {
            self.onChangeForStateWait = (pressed) => {
                if (isPressed === pressed) {
                    self.onChangeForStateWait = () => {
                    };
                    resolve();
                }
            };
        });
    }
    notified(obj) {
        this.state = obj.state;
        if (this.onchange) {
            this.onchange(this.state);
        }
        this.onChangeForStateWait(this.state);
        const callback = this.observers.shift();
        if (callback) {
            callback(this.state);
        }
    }
}
exports.default = ObnizSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9zd2l0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFdBQVc7SUFPZixZQUFZLEtBQVU7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsRUFBRTtRQUNqQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWE7UUFDOUIsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDL0MsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sU0FBUyxDQUFDLFNBQWM7UUFDN0IsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsT0FBWSxFQUFHLEVBQUU7Z0JBQzVDLElBQUksU0FBUyxLQUFLLE9BQU8sRUFBRTtvQkFDekIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsRUFBRTtvQkFDakMsQ0FBQyxDQUFDO29CQUNGLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVE7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsTUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QyxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL3N3aXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE9ibml6U3dpdGNoIHtcbiAgcHVibGljIE9ibml6OiBhbnk7XG4gIHB1YmxpYyBvYnNlcnZlcnM6IGFueTtcbiAgcHVibGljIG9uQ2hhbmdlRm9yU3RhdGVXYWl0OiBhbnk7XG4gIHB1YmxpYyBzdGF0ZTogYW55O1xuICBwdWJsaWMgb25jaGFuZ2U6IGFueTtcblxuICBjb25zdHJ1Y3RvcihPYm5pejogYW55KSB7XG4gICAgdGhpcy5PYm5peiA9IE9ibml6O1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBwdWJsaWMgX3Jlc2V0KCkge1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5vbkNoYW5nZUZvclN0YXRlV2FpdCA9ICgpID0+IHtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFkZE9ic2VydmVyKGNhbGxiYWNrOiBhbnkpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRXYWl0KCkge1xuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XG4gICAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgICAgb2JqLnN3aXRjaCA9IFwiZ2V0XCI7XG4gICAgICBzZWxmLk9ibml6LnNlbmQob2JqKTtcbiAgICAgIHNlbGYuYWRkT2JzZXJ2ZXIocmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGVXYWl0KGlzUHJlc3NlZDogYW55KSB7XG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+IHtcbiAgICAgIHNlbGYub25DaGFuZ2VGb3JTdGF0ZVdhaXQgPSAocHJlc3NlZDogYW55ICkgPT4ge1xuICAgICAgICBpZiAoaXNQcmVzc2VkID09PSBwcmVzc2VkKSB7XG4gICAgICAgICAgc2VsZi5vbkNoYW5nZUZvclN0YXRlV2FpdCA9ICgpID0+IHtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBub3RpZmllZChvYmo6IGFueSkge1xuICAgIHRoaXMuc3RhdGUgPSBvYmouc3RhdGU7XG4gICAgaWYgKHRoaXMub25jaGFuZ2UpIHtcbiAgICAgIHRoaXMub25jaGFuZ2UodGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIHRoaXMub25DaGFuZ2VGb3JTdGF0ZVdhaXQodGhpcy5zdGF0ZSk7XG5cbiAgICBjb25zdCBjYWxsYmFjazogYW55ID0gdGhpcy5vYnNlcnZlcnMuc2hpZnQoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuc3RhdGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPYm5pelN3aXRjaDtcbiJdfQ==
