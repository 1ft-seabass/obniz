/**
 * @packageDocumentation
 * @module ObnizCore.Components.Ble.Hci
 */
import ObnizBLEHci from "./hci";
import CentralBindings from "./protocol/central/bindings";
import HciProtocol from "./protocol/hci";
import PeripheralBindings from "./protocol/peripheral/bindings";
import Obniz from "../../../index";
import BleCharacteristic from "./bleCharacteristic";
import BleDescriptor from "./bleDescriptor";
import BlePeripheral from "./blePeripheral";
import BleRemotePeripheral from "./bleRemotePeripheral";
import BleScan from "./bleScan";
import BleService from "./bleService";
import { BleDeviceAddressType, UUID } from "./bleTypes";
export default class ObnizBLE {
    static _dataArray2uuidHex(data: number[], reverse: boolean): UUID;
    Obniz: Obniz;
    hci: ObnizBLEHci;
    hciProtocol: HciProtocol;
    centralBindings: CentralBindings;
    peripheralBindings: PeripheralBindings;
    _initialized: boolean;
    _initializeWarning: boolean;
    remotePeripherals: BleRemotePeripheral[];
    service: typeof BleService;
    characteristic: typeof BleCharacteristic;
    descriptor: typeof BleDescriptor;
    peripheral: BlePeripheral;
    advertisement: any;
    scan: BleScan;
    security: any;
    constructor(obniz: Obniz);
    initWait(): Promise<void>;
    warningIfNotInitialize(): void;
    notified(obj: any): void;
    _reset(): void;
    directConnect(uuid: UUID, addressType: BleDeviceAddressType): any;
    directConnectWait(uuid: any, addressType: any): Promise<any>;
    findPeripheral(address: any): BleRemotePeripheral | null;
    onStateChange(): void;
    onAddressChange(): void;
    onScanStart(): void;
    onScanStop(): void;
    onDiscover(uuid: any, address?: any, addressType?: any, connectable?: any, advertisement?: any, rssi?: any): void;
    onConnect(peripheralUuid: any, error?: any): Promise<void>;
    onDisconnect(peripheralUuid: any): void;
    onRssiUpdate(): void;
    onServicesDiscover(peripheralUuid: any, serviceUuids?: any): void;
    onIncludedServicesDiscover(peripheralUuid: any, serviceUuid?: any, includedServiceUuids?: any): void;
    onCharacteristicsDiscover(peripheralUuid: any, serviceUuid?: any, characteristics?: any): void;
    onRead(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, data?: any, isNotification?: any, isSuccess?: any): void;
    onWrite(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, isSuccess?: any): void;
    onBroadcast(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, state?: any): void;
    onNotify(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, state?: any): void;
    onDescriptorsDiscover(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, descriptors?: any): void;
    onValueRead(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, descriptorUuid?: any, data?: any, isSuccess?: any): void;
    onValueWrite(peripheralUuid: any, serviceUuid?: any, characteristicUuid?: any, descriptorUuid?: any, isSuccess?: any): void;
    onHandleRead(peripheralUuid: any, handle?: any, data?: any): void;
    onHandleWrite(peripheralUuid: any, handle?: any): void;
    onHandleNotify(peripheralUuid: any, handle?: any, data?: any): void;
    onPeripheralStateChange(state: any): void;
    onPeripheralAddressChange(address: any): void;
    onPeripheralPlatform(platform: any): void;
    onPeripheralAdvertisingStart(error: any): void;
    onPeripheralAdvertisingStop(): void;
    onPeripheralServicesSet(error: any): void;
    onPeripheralAccept(clientAddress: any): void;
    onPeripheralMtuChange(mtu: any): void;
    onPeripheralDisconnect(clientAddress: any): void;
    onPeripheralRssiUpdate(rssi: any): void;
    _bind(): void;
}
