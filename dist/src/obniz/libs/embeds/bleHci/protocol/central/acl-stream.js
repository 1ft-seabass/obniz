"use strict";
// var debug = require('debug')('acl-att-stream');
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("events");
const Smp = require("./smp");
class AclStream extends events.EventEmitter {
    constructor(hci, handle, localAddressType, localAddress, remoteAddressType, remoteAddress) {
        super();
        this._hci = hci;
        this._handle = handle;
        this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);
        this.onSmpStkBinded = this.onSmpStk.bind(this);
        this.onSmpFailBinded = this.onSmpFail.bind(this);
        this.onSmpEndBinded = this.onSmpEnd.bind(this);
        this._smp.on("stk", this.onSmpStkBinded);
        this._smp.on("fail", this.onSmpFailBinded);
        this._smp.on("end", this.onSmpEndBinded);
    }
    encrypt() {
        this._smp.sendPairingRequest();
    }
    write(cid, data) {
        this._hci.writeAclDataPkt(this._handle, cid, data);
    }
    push(cid, data) {
        if (data) {
            this.emit("data", cid, data);
        }
        else {
            this.emit("end");
        }
    }
    pushEncrypt(encrypt) {
        this.emit("encrypt", encrypt);
    }
    onSmpStk(stk) {
        const random = Buffer.from("0000000000000000", "hex");
        const diversifier = Buffer.from("0000", "hex");
        this._hci.startLeEncryption(this._handle, random, diversifier, stk);
    }
    onSmpFail() {
        this.emit("encryptFail");
    }
    onSmpEnd() {
        this._smp.removeListener("stk", this.onSmpStkBinded);
        this._smp.removeListener("fail", this.onSmpFailBinded);
        this._smp.removeListener("end", this.onSmpEndBinded);
    }
}
exports.default = AclStream;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9hY2wtc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrREFBa0Q7O0FBRWxELE1BQU0sTUFBTSxHQUFRLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QyxNQUFNLEdBQUcsR0FBUSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbEMsTUFBTSxTQUFVLFNBQVEsTUFBTSxDQUFDLFlBQVk7SUFTekMsWUFDRSxHQUFRLEVBQ1IsTUFBVyxFQUNYLGdCQUFxQixFQUNyQixZQUFpQixFQUNqQixpQkFBc0IsRUFDdEIsYUFBa0I7UUFFbEIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUNqQixJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsYUFBYSxDQUNkLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQVEsRUFBRSxJQUFTO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxJQUFJLENBQUMsR0FBUSxFQUFFLElBQVM7UUFDN0IsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQVk7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFRO1FBQ3RCLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0QsTUFBTSxXQUFXLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLFNBQVM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsU0FBUyxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9hY2wtc3RyZWFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnYWNsLWF0dC1zdHJlYW0nKTtcblxuY29uc3QgZXZlbnRzOiBhbnkgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG5jb25zdCBTbXA6IGFueSA9IHJlcXVpcmUoXCIuL3NtcFwiKTtcblxuY2xhc3MgQWNsU3RyZWFtIGV4dGVuZHMgZXZlbnRzLkV2ZW50RW1pdHRlciB7XG4gIHB1YmxpYyBfaGNpOiBhbnk7XG4gIHB1YmxpYyBfaGFuZGxlOiBhbnk7XG4gIHB1YmxpYyBfc21wOiBhbnk7XG4gIHB1YmxpYyBvblNtcFN0a0JpbmRlZDogYW55O1xuICBwdWJsaWMgb25TbXBGYWlsQmluZGVkOiBhbnk7XG4gIHB1YmxpYyBvblNtcEVuZEJpbmRlZDogYW55O1xuICBwdWJsaWMgZW1pdDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGhjaTogYW55LFxuICAgIGhhbmRsZTogYW55LFxuICAgIGxvY2FsQWRkcmVzc1R5cGU6IGFueSxcbiAgICBsb2NhbEFkZHJlc3M6IGFueSxcbiAgICByZW1vdGVBZGRyZXNzVHlwZTogYW55LFxuICAgIHJlbW90ZUFkZHJlc3M6IGFueSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9oY2kgPSBoY2k7XG4gICAgdGhpcy5faGFuZGxlID0gaGFuZGxlO1xuXG4gICAgdGhpcy5fc21wID0gbmV3IFNtcChcbiAgICAgIHRoaXMsXG4gICAgICBsb2NhbEFkZHJlc3NUeXBlLFxuICAgICAgbG9jYWxBZGRyZXNzLFxuICAgICAgcmVtb3RlQWRkcmVzc1R5cGUsXG4gICAgICByZW1vdGVBZGRyZXNzLFxuICAgICk7XG5cbiAgICB0aGlzLm9uU21wU3RrQmluZGVkID0gdGhpcy5vblNtcFN0ay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TbXBGYWlsQmluZGVkID0gdGhpcy5vblNtcEZhaWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU21wRW5kQmluZGVkID0gdGhpcy5vblNtcEVuZC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fc21wLm9uKFwic3RrXCIsIHRoaXMub25TbXBTdGtCaW5kZWQpO1xuICAgIHRoaXMuX3NtcC5vbihcImZhaWxcIiwgdGhpcy5vblNtcEZhaWxCaW5kZWQpO1xuICAgIHRoaXMuX3NtcC5vbihcImVuZFwiLCB0aGlzLm9uU21wRW5kQmluZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBlbmNyeXB0KCkge1xuICAgIHRoaXMuX3NtcC5zZW5kUGFpcmluZ1JlcXVlc3QoKTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZShjaWQ6IGFueSwgZGF0YTogYW55KSB7XG4gICAgdGhpcy5faGNpLndyaXRlQWNsRGF0YVBrdCh0aGlzLl9oYW5kbGUsIGNpZCwgZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgcHVzaChjaWQ6IGFueSwgZGF0YTogYW55KSB7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgY2lkLCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwdXNoRW5jcnlwdChlbmNyeXB0OiBhbnkpIHtcbiAgICB0aGlzLmVtaXQoXCJlbmNyeXB0XCIsIGVuY3J5cHQpO1xuICB9XG5cbiAgcHVibGljIG9uU21wU3RrKHN0azogYW55KSB7XG4gICAgY29uc3QgcmFuZG9tOiBhbnkgPSBCdWZmZXIuZnJvbShcIjAwMDAwMDAwMDAwMDAwMDBcIiwgXCJoZXhcIik7XG4gICAgY29uc3QgZGl2ZXJzaWZpZXI6IGFueSA9IEJ1ZmZlci5mcm9tKFwiMDAwMFwiLCBcImhleFwiKTtcblxuICAgIHRoaXMuX2hjaS5zdGFydExlRW5jcnlwdGlvbih0aGlzLl9oYW5kbGUsIHJhbmRvbSwgZGl2ZXJzaWZpZXIsIHN0ayk7XG4gIH1cblxuICBwdWJsaWMgb25TbXBGYWlsKCkge1xuICAgIHRoaXMuZW1pdChcImVuY3J5cHRGYWlsXCIpO1xuICB9XG5cbiAgcHVibGljIG9uU21wRW5kKCkge1xuICAgIHRoaXMuX3NtcC5yZW1vdmVMaXN0ZW5lcihcInN0a1wiLCB0aGlzLm9uU21wU3RrQmluZGVkKTtcbiAgICB0aGlzLl9zbXAucmVtb3ZlTGlzdGVuZXIoXCJmYWlsXCIsIHRoaXMub25TbXBGYWlsQmluZGVkKTtcbiAgICB0aGlzLl9zbXAucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgdGhpcy5vblNtcEVuZEJpbmRlZCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNsU3RyZWFtO1xuIl19
