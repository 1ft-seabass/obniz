"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('signaling');
const debug = () => {
};
const events = require("events");
const CONNECTION_PARAMETER_UPDATE_REQUEST = 0x12;
const CONNECTION_PARAMETER_UPDATE_RESPONSE = 0x13;
const SIGNALING_CID = 0x0005;
class Signaling extends events.EventEmitter {
    constructor(handle, aclStream) {
        super();
        this._handle = handle;
        this._aclStream = aclStream;
        this.onAclStreamDataBinded = this.onAclStreamData.bind(this);
        this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);
        this._aclStream.on("data", this.onAclStreamDataBinded);
        this._aclStream.on("end", this.onAclStreamEndBinded);
    }
    onAclStreamData(cid, data) {
        if (cid !== SIGNALING_CID) {
            return;
        }
        debug("onAclStreamData: " + data.toString("hex"));
        const code = data.readUInt8(0);
        const identifier = data.readUInt8(1);
        const length = data.readUInt16LE(2);
        const signalingData = data.slice(4);
        debug("\tcode = " + code);
        debug("\tidentifier = " + identifier);
        debug("\tlength = " + length);
        if (code === CONNECTION_PARAMETER_UPDATE_REQUEST) {
            this.processConnectionParameterUpdateRequest(identifier, signalingData);
        }
    }
    onAclStreamEnd() {
        this._aclStream.removeListener("data", this.onAclStreamDataBinded);
        this._aclStream.removeListener("end", this.onAclStreamEndBinded);
    }
    processConnectionParameterUpdateRequest(identifier, data) {
        const minInterval = data.readUInt16LE(0) * 1.25;
        const maxInterval = data.readUInt16LE(2) * 1.25;
        const latency = data.readUInt16LE(4);
        const supervisionTimeout = data.readUInt16LE(6) * 10;
        debug("\t\tmin interval = ", minInterval);
        debug("\t\tmax interval = ", maxInterval);
        debug("\t\tlatency = ", latency);
        debug("\t\tsupervision timeout = ", supervisionTimeout);
        const response = Buffer.alloc(6);
        response.writeUInt8(CONNECTION_PARAMETER_UPDATE_RESPONSE, 0); // code
        response.writeUInt8(identifier, 1); // identifier
        response.writeUInt16LE(2, 2); // length
        response.writeUInt16LE(0, 4);
        this._aclStream.write(SIGNALING_CID, response);
        this.emit("connectionParameterUpdateRequest", this._handle, minInterval, maxInterval, latency, supervisionTimeout);
    }
}
exports.default = Signaling;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9zaWduYWxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNkM7QUFDN0MsTUFBTSxLQUFLLEdBQVEsR0FBRyxFQUFFO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sTUFBTSxHQUFRLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QyxNQUFNLG1DQUFtQyxHQUFRLElBQUksQ0FBQztBQUN0RCxNQUFNLG9DQUFvQyxHQUFRLElBQUksQ0FBQztBQUV2RCxNQUFNLGFBQWEsR0FBUSxNQUFNLENBQUM7QUFFbEMsTUFBTSxTQUFVLFNBQVEsTUFBTSxDQUFDLFlBQVk7SUFPekMsWUFBWSxNQUFXLEVBQUUsU0FBYztRQUNyQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVEsRUFBRSxJQUFVO1FBQ3pDLElBQUksR0FBRyxLQUFLLGFBQWEsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxLQUFLLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRWxELE1BQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxVQUFVLEdBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxQixLQUFLLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUU5QixJQUFJLElBQUksS0FBSyxtQ0FBbUMsRUFBRTtZQUNoRCxJQUFJLENBQUMsdUNBQXVDLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3pFO0lBQ0gsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sdUNBQXVDLENBQUMsVUFBZSxFQUFFLElBQVM7UUFDdkUsTUFBTSxXQUFXLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDckQsTUFBTSxXQUFXLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDckQsTUFBTSxPQUFPLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLGtCQUFrQixHQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTFELEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRXhELE1BQU0sUUFBUSxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDckUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBQ2pELFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUN2QyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLElBQUksQ0FDUCxrQ0FBa0MsRUFDbEMsSUFBSSxDQUFDLE9BQU8sRUFDWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sRUFDUCxrQkFBa0IsQ0FDbkIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELGtCQUFlLFNBQVMsQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL3Byb3RvY29sL2NlbnRyYWwvc2lnbmFsaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGV0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc2lnbmFsaW5nJyk7XG5jb25zdCBkZWJ1ZzogYW55ID0gKCkgPT4ge1xufTtcblxuY29uc3QgZXZlbnRzOiBhbnkgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG5jb25zdCBDT05ORUNUSU9OX1BBUkFNRVRFUl9VUERBVEVfUkVRVUVTVDogYW55ID0gMHgxMjtcbmNvbnN0IENPTk5FQ1RJT05fUEFSQU1FVEVSX1VQREFURV9SRVNQT05TRTogYW55ID0gMHgxMztcblxuY29uc3QgU0lHTkFMSU5HX0NJRDogYW55ID0gMHgwMDA1O1xuXG5jbGFzcyBTaWduYWxpbmcgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcbiAgcHVibGljIF9oYW5kbGU6IGFueTtcbiAgcHVibGljIF9hY2xTdHJlYW06IGFueTtcbiAgcHVibGljIG9uQWNsU3RyZWFtRGF0YUJpbmRlZDogYW55O1xuICBwdWJsaWMgb25BY2xTdHJlYW1FbmRCaW5kZWQ6IGFueTtcbiAgcHVibGljIGVtaXQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihoYW5kbGU6IGFueSwgYWNsU3RyZWFtOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2hhbmRsZSA9IGhhbmRsZTtcbiAgICB0aGlzLl9hY2xTdHJlYW0gPSBhY2xTdHJlYW07XG5cbiAgICB0aGlzLm9uQWNsU3RyZWFtRGF0YUJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1EYXRhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCA9IHRoaXMub25BY2xTdHJlYW1FbmQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImRhdGFcIiwgdGhpcy5vbkFjbFN0cmVhbURhdGFCaW5kZWQpO1xuICAgIHRoaXMuX2FjbFN0cmVhbS5vbihcImVuZFwiLCB0aGlzLm9uQWNsU3RyZWFtRW5kQmluZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBvbkFjbFN0cmVhbURhdGEoY2lkOiBhbnksIGRhdGE/OiBhbnkpIHtcbiAgICBpZiAoY2lkICE9PSBTSUdOQUxJTkdfQ0lEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVidWcoXCJvbkFjbFN0cmVhbURhdGE6IFwiICsgZGF0YS50b1N0cmluZyhcImhleFwiKSk7XG5cbiAgICBjb25zdCBjb2RlOiBhbnkgPSBkYXRhLnJlYWRVSW50OCgwKTtcbiAgICBjb25zdCBpZGVudGlmaWVyOiBhbnkgPSBkYXRhLnJlYWRVSW50OCgxKTtcbiAgICBjb25zdCBsZW5ndGg6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDIpO1xuICAgIGNvbnN0IHNpZ25hbGluZ0RhdGE6IGFueSA9IGRhdGEuc2xpY2UoNCk7XG5cbiAgICBkZWJ1ZyhcIlxcdGNvZGUgPSBcIiArIGNvZGUpO1xuICAgIGRlYnVnKFwiXFx0aWRlbnRpZmllciA9IFwiICsgaWRlbnRpZmllcik7XG4gICAgZGVidWcoXCJcXHRsZW5ndGggPSBcIiArIGxlbmd0aCk7XG5cbiAgICBpZiAoY29kZSA9PT0gQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFUVVFU1QpIHtcbiAgICAgIHRoaXMucHJvY2Vzc0Nvbm5lY3Rpb25QYXJhbWV0ZXJVcGRhdGVSZXF1ZXN0KGlkZW50aWZpZXIsIHNpZ25hbGluZ0RhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkFjbFN0cmVhbUVuZCgpIHtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsIHRoaXMub25BY2xTdHJlYW1EYXRhQmluZGVkKTtcbiAgICB0aGlzLl9hY2xTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgdGhpcy5vbkFjbFN0cmVhbUVuZEJpbmRlZCk7XG4gIH1cblxuICBwdWJsaWMgcHJvY2Vzc0Nvbm5lY3Rpb25QYXJhbWV0ZXJVcGRhdGVSZXF1ZXN0KGlkZW50aWZpZXI6IGFueSwgZGF0YTogYW55KSB7XG4gICAgY29uc3QgbWluSW50ZXJ2YWw6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDApICogMS4yNTtcbiAgICBjb25zdCBtYXhJbnRlcnZhbDogYW55ID0gZGF0YS5yZWFkVUludDE2TEUoMikgKiAxLjI1O1xuICAgIGNvbnN0IGxhdGVuY3k6IGFueSA9IGRhdGEucmVhZFVJbnQxNkxFKDQpO1xuICAgIGNvbnN0IHN1cGVydmlzaW9uVGltZW91dDogYW55ID0gZGF0YS5yZWFkVUludDE2TEUoNikgKiAxMDtcblxuICAgIGRlYnVnKFwiXFx0XFx0bWluIGludGVydmFsID0gXCIsIG1pbkludGVydmFsKTtcbiAgICBkZWJ1ZyhcIlxcdFxcdG1heCBpbnRlcnZhbCA9IFwiLCBtYXhJbnRlcnZhbCk7XG4gICAgZGVidWcoXCJcXHRcXHRsYXRlbmN5ID0gXCIsIGxhdGVuY3kpO1xuICAgIGRlYnVnKFwiXFx0XFx0c3VwZXJ2aXNpb24gdGltZW91dCA9IFwiLCBzdXBlcnZpc2lvblRpbWVvdXQpO1xuXG4gICAgY29uc3QgcmVzcG9uc2U6IGFueSA9IEJ1ZmZlci5hbGxvYyg2KTtcblxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoQ09OTkVDVElPTl9QQVJBTUVURVJfVVBEQVRFX1JFU1BPTlNFLCAwKTsgLy8gY29kZVxuICAgIHJlc3BvbnNlLndyaXRlVUludDgoaWRlbnRpZmllciwgMSk7IC8vIGlkZW50aWZpZXJcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDIsIDIpOyAvLyBsZW5ndGhcbiAgICByZXNwb25zZS53cml0ZVVJbnQxNkxFKDAsIDQpO1xuXG4gICAgdGhpcy5fYWNsU3RyZWFtLndyaXRlKFNJR05BTElOR19DSUQsIHJlc3BvbnNlKTtcblxuICAgIHRoaXMuZW1pdChcbiAgICAgIFwiY29ubmVjdGlvblBhcmFtZXRlclVwZGF0ZVJlcXVlc3RcIixcbiAgICAgIHRoaXMuX2hhbmRsZSxcbiAgICAgIG1pbkludGVydmFsLFxuICAgICAgbWF4SW50ZXJ2YWwsXG4gICAgICBsYXRlbmN5LFxuICAgICAgc3VwZXJ2aXNpb25UaW1lb3V0LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2lnbmFsaW5nO1xuIl19
