"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
function r() {
    return crypto.randomBytes(16);
}
function c1(k, _r, pres, preq, iat, ia, rat, ra) {
    const p1 = Buffer.concat([iat, rat, preq, pres]);
    const p2 = Buffer.concat([ra, ia, Buffer.from("00000000", "hex")]);
    let res = xor(_r, p1);
    res = e(k, res);
    res = xor(res, p2);
    res = e(k, res);
    return res;
}
function s1(k, r1, r2) {
    return e(k, Buffer.concat([r2.slice(0, 8), r1.slice(0, 8)]));
}
function e(key, data) {
    key = swap(key);
    data = swap(data);
    const cipher = crypto.createCipheriv("aes-128-ecb", key, "");
    cipher.setAutoPadding(false);
    return swap(Buffer.concat([cipher.update(data), cipher.final()]));
}
function xor(b1, b2) {
    const result = Buffer.alloc(b1.length);
    for (let i = 0; i < b1.length; i++) {
        result[i] = b1[i] ^ b2[i];
    }
    return result;
}
function swap(input) {
    const output = Buffer.alloc(input.length);
    for (let i = 0; i < output.length; i++) {
        output[i] = input[input.length - i - 1];
    }
    return output;
}
exports.default = {
    r,
    c1,
    s1,
    e,
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvY2VudHJhbC9jcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBUSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdEMsU0FBUyxDQUFDO0lBQ1IsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsR0FBUSxFQUFFLEVBQU8sRUFBRSxHQUFRLEVBQUUsRUFBTztJQUNyRixNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV0RCxNQUFNLEVBQUUsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEUsSUFBSSxHQUFHLEdBQVEsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVoQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBTyxFQUFFLEVBQU87SUFDbEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRUQsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLElBQVM7SUFDNUIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUMsRUFBTyxFQUFFLEVBQU87SUFDM0IsTUFBTSxNQUFNLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUMsS0FBVTtJQUN0QixNQUFNLE1BQU0sR0FBUSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELGtCQUFlO0lBQ2IsQ0FBQztJQUNELEVBQUU7SUFDRixFQUFFO0lBQ0YsQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvZW1iZWRzL2JsZUhjaS9wcm90b2NvbC9jZW50cmFsL2NyeXB0by5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0bzogYW55ID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuZnVuY3Rpb24gcigpIHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcygxNik7XG59XG5cbmZ1bmN0aW9uIGMxKGs6IGFueSwgX3I6IGFueSwgcHJlczogYW55LCBwcmVxOiBhbnksIGlhdDogYW55LCBpYTogYW55LCByYXQ6IGFueSwgcmE6IGFueSkge1xuICBjb25zdCBwMTogYW55ID0gQnVmZmVyLmNvbmNhdChbaWF0LCByYXQsIHByZXEsIHByZXNdKTtcblxuICBjb25zdCBwMjogYW55ID0gQnVmZmVyLmNvbmNhdChbcmEsIGlhLCBCdWZmZXIuZnJvbShcIjAwMDAwMDAwXCIsIFwiaGV4XCIpXSk7XG5cbiAgbGV0IHJlczogYW55ID0geG9yKF9yLCBwMSk7XG4gIHJlcyA9IGUoaywgcmVzKTtcbiAgcmVzID0geG9yKHJlcywgcDIpO1xuICByZXMgPSBlKGssIHJlcyk7XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gczEoazogYW55LCByMTogYW55LCByMjogYW55KSB7XG4gIHJldHVybiBlKGssIEJ1ZmZlci5jb25jYXQoW3IyLnNsaWNlKDAsIDgpLCByMS5zbGljZSgwLCA4KV0pKTtcbn1cblxuZnVuY3Rpb24gZShrZXk6IGFueSwgZGF0YTogYW55KSB7XG4gIGtleSA9IHN3YXAoa2V5KTtcbiAgZGF0YSA9IHN3YXAoZGF0YSk7XG5cbiAgY29uc3QgY2lwaGVyOiBhbnkgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoXCJhZXMtMTI4LWVjYlwiLCBrZXksIFwiXCIpO1xuICBjaXBoZXIuc2V0QXV0b1BhZGRpbmcoZmFsc2UpO1xuXG4gIHJldHVybiBzd2FwKEJ1ZmZlci5jb25jYXQoW2NpcGhlci51cGRhdGUoZGF0YSksIGNpcGhlci5maW5hbCgpXSkpO1xufVxuXG5mdW5jdGlvbiB4b3IoYjE6IGFueSwgYjI6IGFueSkge1xuICBjb25zdCByZXN1bHQ6IGFueSA9IEJ1ZmZlci5hbGxvYyhiMS5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBiMVtpXSBeIGIyW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3dhcChpbnB1dDogYW55KSB7XG4gIGNvbnN0IG91dHB1dDogYW55ID0gQnVmZmVyLmFsbG9jKGlucHV0Lmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXQubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbaV0gPSBpbnB1dFtpbnB1dC5sZW5ndGggLSBpIC0gMV07XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHIsXG4gIGMxLFxuICBzMSxcbiAgZSxcbn07XG4iXX0=
