{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.ts"],"names":[],"mappings":"AAAA,QAAA,MAAM,MAAM,EAAE,GAAuB,CAAC;AAiBtC,cAAM,GAAI,SAAQ,MAAM,CAAC,YAAY;IAC5B,UAAU,EAAE,GAAG,CAAC;IAChB,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,GAAG,EAAE,GAAG,CAAC;IACT,IAAI,EAAE,GAAG,CAAC;IACV,GAAG,EAAE,GAAG,CAAC;IACT,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,GAAG,CAAC;IACb,YAAY,EAAE,GAAG,CAAC;IAClB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,eAAe,EAAE,GAAG,CAAC;IACrB,8BAA8B,EAAE,GAAG,CAAC;IACpC,wBAAwB,EAAE,GAAG,CAAC;IAC9B,4BAA4B,EAAE,GAAG,CAAC;IAClC,sBAAsB,EAAE,GAAG,CAAC;IAC5B,oBAAoB,EAAE,GAAG,CAAC;IAC1B,cAAc,EAAE,GAAG,CAAC;IACpB,oBAAoB,EAAE,GAAG,CAAC;IAC1B,oBAAoB,EAAE,GAAG,CAAC;IAC1B,mBAAmB,EAAE,GAAG,CAAC;IACzB,mBAAmB,EAAE,GAAG,CAAC;IACzB,KAAK,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,GAAG,EAAE,GAAG,CAAC;IACT,EAAE,EAAE,GAAG,CAAC;gBAGb,SAAS,EAAE,GAAG,EACd,gBAAgB,EAAE,GAAG,EACrB,YAAY,EAAE,GAAG,EACjB,iBAAiB,EAAE,GAAG,EACtB,aAAa,EAAE,GAAG,EAClB,WAAW,EAAE,GAAG;IAwCX,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAkBlC,uBAAuB,CAAC,SAAS,EAAE,GAAG;IAgBtC,qBAAqB;IAMrB,aAAa;IAab,mBAAmB,CAAC,IAAI,EAAE,GAAG;IAe7B,mBAAmB,CAAC,IAAI,EAAE,GAAG;IAuB7B,kBAAkB,CAAC,IAAI,EAAE,GAAG;IAwC5B,kBAAkB,CAAC,IAAI,EAAE,GAAG;IAI5B,IAAI,CAAC,IAAI,EAAE,GAAG;CAGtB;AAED,eAAe,GAAG,CAAC","file":"smp.d.ts","sourcesContent":["const events: any = require(\"events\");\n\nconst crypto: any = require(\"./crypto\");\nconst Mgmt: any = require(\"./mgmt\");\n\nconst SMP_CID: any = 0x0006;\n\nconst SMP_PAIRING_REQUEST: any = 0x01;\nconst SMP_PAIRING_RESPONSE: any = 0x02;\nconst SMP_PAIRING_CONFIRM: any = 0x03;\nconst SMP_PAIRING_RANDOM: any = 0x04;\nconst SMP_PAIRING_FAILED: any = 0x05;\nconst SMP_ENCRYPT_INFO: any = 0x06;\nconst SMP_MASTER_IDENT: any = 0x07;\n\nconst SMP_UNSPECIFIED: any = 0x08;\n\nclass Smp extends events.EventEmitter {\n  public _aclStream: any;\n  public _mgmt: any;\n  public _iat: any;\n  public _ia: any;\n  public _rat: any;\n  public _ra: any;\n  public _stk: any;\n  public _random: any;\n  public _diversifier: any;\n  public onAclStreamDataBinded: any;\n  public onAclStreamData: any;\n  public onAclStreamEncryptChangeBinded: any;\n  public onAclStreamEncryptChange: any;\n  public onAclStreamLtkNegReplyBinded: any;\n  public onAclStreamLtkNegReply: any;\n  public onAclStreamEndBinded: any;\n  public onAclStreamEnd: any;\n  public handlePairingRequest: any;\n  public handlePairingConfirm: any;\n  public handlePairingRandom: any;\n  public handlePairingFailed: any;\n  public write: any;\n  public emit: any;\n  public _preq: any;\n  public _pres: any;\n  public _pcnf: any;\n  public _tk: any;\n  public _r: any;\n\n  constructor(\n    aclStream: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n    hciProtocol: any,\n  ) {\n    super();\n    this._aclStream = aclStream;\n    this._mgmt = new Mgmt(hciProtocol);\n\n    this._iat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this._stk = null;\n    this._random = null;\n    this._diversifier = null;\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(\n      this,\n    );\n    this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"encryptChange\", this.onAclStreamEncryptChangeBinded);\n    this._aclStream.on(\"ltkNegReply\", this.onAclStreamLtkNegReplyBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public nAclStreamData(cid: any, data: any) {\n    if (cid !== SMP_CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n\n    if (SMP_PAIRING_REQUEST === code) {\n      this.handlePairingRequest(data);\n    } else if (SMP_PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP_PAIRING_RANDOM === code) {\n      this.handlePairingRandom(data);\n    } else if (SMP_PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    }\n  }\n\n  public nAclStreamEncryptChange(encrypted: any) {\n    if (encrypted) {\n      if (this._stk && this._diversifier && this._random) {\n        this.write(Buffer.concat([Buffer.from([SMP_ENCRYPT_INFO]), this._stk]));\n\n        this.write(\n          Buffer.concat([\n            Buffer.from([SMP_MASTER_IDENT]),\n            this._diversifier,\n            this._random,\n          ]),\n        );\n      }\n    }\n  }\n\n  public nAclStreamLtkNegReply() {\n    this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_UNSPECIFIED]));\n\n    this.emit(\"fail\");\n  }\n\n  public nAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\n      \"encryptChange\",\n      this.onAclStreamEncryptChangeBinded,\n    );\n    this._aclStream.removeListener(\n      \"ltkNegReply\",\n      this.onAclStreamLtkNegReplyBinded,\n    );\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public andlePairingRequest(data: any) {\n    this._preq = data;\n    this._pres = Buffer.from([\n      SMP_PAIRING_RESPONSE,\n      0x03, // IO capability: NoInputNoOutput\n      0x00, // OOB data: Authentication data not present\n      0x01, // Authentication requirement: Bonding - No MITM\n      0x10, // Max encryption key size\n      0x00, // Initiator key distribution: <none>\n      0x01, // Responder key distribution: EncKey\n    ]);\n\n    this.write(this._pres);\n  }\n\n  public andlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP_PAIRING_CONFIRM]),\n        crypto.c1(\n          this._tk,\n          this._r,\n          this._pres,\n          this._preq,\n          this._iat,\n          this._ia,\n          this._rat,\n          this._ra,\n        ),\n      ]),\n    );\n  }\n\n  public andlePairingRandom(data: any) {\n    const r: any = data.slice(1);\n\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP_PAIRING_CONFIRM]),\n      crypto.c1(\n        this._tk,\n        r,\n        this._pres,\n        this._preq,\n        this._iat,\n        this._ia,\n        this._rat,\n        this._ra,\n      ),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      this._diversifier = Buffer.from(\"0000\", \"hex\");\n      this._random = Buffer.from(\"0000000000000000\", \"hex\");\n      this._stk = crypto.s1(this._tk, this._r, r);\n\n      this._mgmt.addLongTermKey(\n        this._ia,\n        this._iat,\n        0,\n        0,\n        this._diversifier,\n        this._random,\n        this._stk,\n      );\n\n      this.write(Buffer.concat([Buffer.from([SMP_PAIRING_RANDOM]), this._r]));\n    } else {\n      this.write(Buffer.from([SMP_PAIRING_FAILED, SMP_PAIRING_CONFIRM]));\n\n      this.emit(\"fail\");\n    }\n  }\n\n  public andlePairingFailed(data: any) {\n    this.emit(\"fail\");\n  }\n\n  public rite(data: any) {\n    this._aclStream.write(SMP_CID, data);\n  }\n}\n\nexport default Smp;\n"]}