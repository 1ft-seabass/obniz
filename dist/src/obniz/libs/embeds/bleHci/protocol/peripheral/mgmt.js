"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// let debug = require('debug')('mgmt');
const debug = () => {
};
const LTK_INFO_SIZE = 36;
const MGMT_OP_LOAD_LONG_TERM_KEYS = 0x0013;
class Mgmt {
    construcotr(hciProtocol) {
        this._ltkInfos = [];
        this._hci = hciProtocol;
    }
    nSocketData(data) {
        debug("on data ->" + data.toString("hex"));
    }
    nSocketError(error) {
        debug("on error ->" + error.message);
    }
    ddLongTermKey(address, addressType, authenticated, master, ediv, rand, key) {
        const ltkInfo = Buffer.alloc(LTK_INFO_SIZE);
        address.copy(ltkInfo, 0);
        ltkInfo.writeUInt8(addressType.readUInt8(0) + 1, 6); // BDADDR_LE_PUBLIC = 0x01, BDADDR_LE_RANDOM 0x02, so add one
        ltkInfo.writeUInt8(authenticated, 7);
        ltkInfo.writeUInt8(master, 8);
        ltkInfo.writeUInt8(key.length, 9);
        ediv.copy(ltkInfo, 10);
        rand.copy(ltkInfo, 12);
        key.copy(ltkInfo, 20);
        this._ltkInfos.push(ltkInfo);
        this.loadLongTermKeys();
    }
    learLongTermKeys() {
        this._ltkInfos = [];
        this.loadLongTermKeys();
    }
    oadLongTermKeys() {
        const numLongTermKeys = this._ltkInfos.length;
        const op = Buffer.alloc(2 + numLongTermKeys * LTK_INFO_SIZE);
        op.writeUInt16LE(numLongTermKeys, 0);
        for (let i = 0; i < numLongTermKeys; i++) {
            this._ltkInfos[i].copy(op, 2 + i * LTK_INFO_SIZE);
        }
        this.write(MGMT_OP_LOAD_LONG_TERM_KEYS, 0, op);
    }
    rite(opcode, index, data) {
        let length = 0;
        if (data) {
            length = data.length;
        }
        const pkt = Buffer.alloc(6 + length);
        pkt.writeUInt16LE(opcode, 0);
        pkt.writeUInt16LE(index, 2);
        pkt.writeUInt16LE(length, 4);
        if (length) {
            data.copy(pkt, 6);
        }
        debug("writing -> " + pkt.toString("hex"));
        this._hci._socket.write(pkt);
    }
}
exports.default = Mgmt;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvcHJvdG9jb2wvcGVyaXBoZXJhbC9tZ210LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLE1BQU0sS0FBSyxHQUFRLEdBQUcsRUFBRTtBQUN4QixDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBUSxFQUFFLENBQUM7QUFFOUIsTUFBTSwyQkFBMkIsR0FBUSxNQUFNLENBQUM7QUFFaEQsTUFBTSxJQUFJO0lBTUQsV0FBVyxDQUFDLFdBQWdCO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXLENBQUMsSUFBUztRQUMxQixLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQVU7UUFDNUIsS0FBSyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLGFBQWEsQ0FBQyxPQUFZLEVBQUUsV0FBZ0IsRUFBRSxhQUFrQixFQUFFLE1BQVcsRUFBRSxJQUFTLEVBQUUsSUFBUyxFQUFFLEdBQVE7UUFDbEgsTUFBTSxPQUFPLEdBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqRCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO1FBRWxILE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxlQUFlO1FBQ3BCLE1BQU0sZUFBZSxHQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ25ELE1BQU0sRUFBRSxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLGVBQWUsR0FBRyxhQUFhLENBQUMsQ0FBQztRQUVsRSxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFXLEVBQUUsS0FBVSxFQUFFLElBQVM7UUFDNUMsSUFBSSxNQUFNLEdBQVEsQ0FBQyxDQUFDO1FBRXBCLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdEI7UUFFRCxNQUFNLEdBQUcsR0FBUSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUUxQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBRUQsS0FBSyxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQUVELGtCQUFlLElBQUksQ0FBQyIsImZpbGUiOiJzcmMvb2JuaXovbGlicy9lbWJlZHMvYmxlSGNpL3Byb3RvY29sL3BlcmlwaGVyYWwvbWdtdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxldCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ21nbXQnKTtcbmNvbnN0IGRlYnVnOiBhbnkgPSAoKSA9PiB7XG59O1xuXG5jb25zdCBMVEtfSU5GT19TSVpFOiBhbnkgPSAzNjtcblxuY29uc3QgTUdNVF9PUF9MT0FEX0xPTkdfVEVSTV9LRVlTOiBhbnkgPSAweDAwMTM7XG5cbmNsYXNzIE1nbXQge1xuICBwdWJsaWMgX2x0a0luZm9zOiBhbnk7XG4gIHB1YmxpYyBfaGNpOiBhbnk7XG4gIHB1YmxpYyBsb2FkTG9uZ1Rlcm1LZXlzOiBhbnk7XG4gIHB1YmxpYyB3cml0ZTogYW55O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y290cihoY2lQcm90b2NvbDogYW55KSB7XG4gICAgdGhpcy5fbHRrSW5mb3MgPSBbXTtcbiAgICB0aGlzLl9oY2kgPSBoY2lQcm90b2NvbDtcbiAgfVxuXG4gIHB1YmxpYyBuU29ja2V0RGF0YShkYXRhOiBhbnkpIHtcbiAgICBkZWJ1ZyhcIm9uIGRhdGEgLT5cIiArIGRhdGEudG9TdHJpbmcoXCJoZXhcIikpO1xuICB9XG5cbiAgcHVibGljIG5Tb2NrZXRFcnJvcihlcnJvcjogYW55KSB7XG4gICAgZGVidWcoXCJvbiBlcnJvciAtPlwiICsgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICBwdWJsaWMgZGRMb25nVGVybUtleShhZGRyZXNzOiBhbnksIGFkZHJlc3NUeXBlOiBhbnksIGF1dGhlbnRpY2F0ZWQ6IGFueSwgbWFzdGVyOiBhbnksIGVkaXY6IGFueSwgcmFuZDogYW55LCBrZXk6IGFueSkge1xuICAgIGNvbnN0IGx0a0luZm86IGFueSA9IEJ1ZmZlci5hbGxvYyhMVEtfSU5GT19TSVpFKTtcblxuICAgIGFkZHJlc3MuY29weShsdGtJbmZvLCAwKTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgoYWRkcmVzc1R5cGUucmVhZFVJbnQ4KDApICsgMSwgNik7IC8vIEJEQUREUl9MRV9QVUJMSUMgPSAweDAxLCBCREFERFJfTEVfUkFORE9NIDB4MDIsIHNvIGFkZCBvbmVcblxuICAgIGx0a0luZm8ud3JpdGVVSW50OChhdXRoZW50aWNhdGVkLCA3KTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgobWFzdGVyLCA4KTtcbiAgICBsdGtJbmZvLndyaXRlVUludDgoa2V5Lmxlbmd0aCwgOSk7XG5cbiAgICBlZGl2LmNvcHkobHRrSW5mbywgMTApO1xuICAgIHJhbmQuY29weShsdGtJbmZvLCAxMik7XG4gICAga2V5LmNvcHkobHRrSW5mbywgMjApO1xuXG4gICAgdGhpcy5fbHRrSW5mb3MucHVzaChsdGtJbmZvKTtcblxuICAgIHRoaXMubG9hZExvbmdUZXJtS2V5cygpO1xuICB9XG5cbiAgcHVibGljIGxlYXJMb25nVGVybUtleXMoKSB7XG4gICAgdGhpcy5fbHRrSW5mb3MgPSBbXTtcblxuICAgIHRoaXMubG9hZExvbmdUZXJtS2V5cygpO1xuICB9XG5cbiAgcHVibGljIG9hZExvbmdUZXJtS2V5cygpIHtcbiAgICBjb25zdCBudW1Mb25nVGVybUtleXM6IGFueSA9IHRoaXMuX2x0a0luZm9zLmxlbmd0aDtcbiAgICBjb25zdCBvcDogYW55ID0gQnVmZmVyLmFsbG9jKDIgKyBudW1Mb25nVGVybUtleXMgKiBMVEtfSU5GT19TSVpFKTtcblxuICAgIG9wLndyaXRlVUludDE2TEUobnVtTG9uZ1Rlcm1LZXlzLCAwKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTG9uZ1Rlcm1LZXlzOyBpKyspIHtcbiAgICAgIHRoaXMuX2x0a0luZm9zW2ldLmNvcHkob3AsIDIgKyBpICogTFRLX0lORk9fU0laRSk7XG4gICAgfVxuXG4gICAgdGhpcy53cml0ZShNR01UX09QX0xPQURfTE9OR19URVJNX0tFWVMsIDAsIG9wKTtcbiAgfVxuXG4gIHB1YmxpYyByaXRlKG9wY29kZTogYW55LCBpbmRleDogYW55LCBkYXRhOiBhbnkpIHtcbiAgICBsZXQgbGVuZ3RoOiBhbnkgPSAwO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0IHBrdDogYW55ID0gQnVmZmVyLmFsbG9jKDYgKyBsZW5ndGgpO1xuXG4gICAgcGt0LndyaXRlVUludDE2TEUob3Bjb2RlLCAwKTtcbiAgICBwa3Qud3JpdGVVSW50MTZMRShpbmRleCwgMik7XG4gICAgcGt0LndyaXRlVUludDE2TEUobGVuZ3RoLCA0KTtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGRhdGEuY29weShwa3QsIDYpO1xuICAgIH1cblxuICAgIGRlYnVnKFwid3JpdGluZyAtPiBcIiArIHBrdC50b1N0cmluZyhcImhleFwiKSk7XG4gICAgdGhpcy5faGNpLl9zb2NrZXQud3JpdGUocGt0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZ210O1xuIl19
