"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bleAttributeAbstract_1 = __importDefault(require("./bleAttributeAbstract"));
const bleHelper_1 = __importDefault(require("./bleHelper"));
class BleLocalAttributeAbstract extends bleAttributeAbstract_1.default {
    constructor(params) {
        super(params);
        this.RESULT_SUCCESS = 0x00;
        this.RESULT_INVALID_OFFSET = 0x07;
        this.RESULT_ATTR_NOT_LONG = 0x0b;
        this.RESULT_INVALID_ATTRIBUTE_LENGTH = 0x0d;
        this.RESULT_UNLIKELY_ERROR = 0x0e;
    }
    toBufferObj() {
        const obj = {
            uuid: bleHelper_1.default.uuidFilter(this.uuid),
        };
        if (this.childrenName) {
            const key = this.childrenName;
            obj[key] = this.children.map((e) => e.toBufferObj());
        }
        obj.emit = this.emit.bind(this);
        return obj;
    }
    emit(name, ...params) {
        switch (name) {
            case "readRequest":
                this._onReadRequest(...params);
                return true;
            case "writeRequest":
                this._onWriteRequest(...params);
                return true;
        }
        return false;
    }
    _onReadRequest(offset, callback) {
        if (this.data.length >= offset) {
            callback(this.RESULT_SUCCESS, Buffer.from(this.data.slice(offset)));
            let address = null;
            if (this.parentName === "characteristic") {
                address = this.characteristic.service.peripheral
                    .currentConnectedDeviceAddress;
            }
            else if (this.parentName === "service") {
                address = this.service.peripheral.currentConnectedDeviceAddress;
            }
            this.notifyFromServer("onreadfromremote", { address });
        }
        else {
            callback(this.RESULT_UNLIKELY_ERROR, null);
        }
    }
    _onWriteRequest(data, offset, withoutResponse, callback) {
        // console.log('onWriteRequest');
        this.data = Array.from(data);
        callback(this.RESULT_SUCCESS);
        let address = null;
        if (this.parentName === "characteristic") {
            address = this.characteristic.service.peripheral
                .currentConnectedDeviceAddress;
        }
        else if (this.parentName === "service") {
            address = this.service.peripheral.currentConnectedDeviceAddress;
        }
        this.notifyFromServer("onwritefromremote", { address, data });
    }
    write(dataArray) {
        this.data = dataArray;
        this.notifyFromServer("onwrite", { result: "success" });
    }
    read() {
        this.notifyFromServer("onread", { data: this.data });
    }
}
exports.default = BleLocalAttributeAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtGQUEwRDtBQUMxRCw0REFBb0M7QUFFcEMsTUFBTSx5QkFBMEIsU0FBUSw4QkFBb0I7SUFlMUQsWUFBWSxNQUFXO1FBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsK0JBQStCLEdBQUcsSUFBSSxDQUFDO1FBQzVDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxHQUFHLEdBQVE7WUFDZixJQUFJLEVBQUUsbUJBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN0QyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFRLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMzRDtRQUVELEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVMsRUFBRSxHQUFHLE1BQVc7UUFDbkMsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLGFBQWE7Z0JBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFvQixDQUFDLENBQUM7Z0JBQzdDLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxjQUFjO2dCQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBb0IsQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQVcsRUFBRSxRQUFjO1FBQy9DLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFO1lBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUksT0FBTyxHQUFRLElBQUksQ0FBQztZQUN4QixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssZ0JBQWdCLEVBQUU7Z0JBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVO3FCQUM3Qyw2QkFBNkIsQ0FBQzthQUNsQztpQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsNkJBQTZCLENBQUM7YUFDakU7WUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFTLEVBQUUsTUFBWSxFQUFFLGVBQXFCLEVBQUUsUUFBYztRQUNuRixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLEdBQVEsSUFBSSxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxnQkFBZ0IsRUFBRTtZQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVTtpQkFDN0MsNkJBQTZCLENBQUM7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyw2QkFBNkIsQ0FBQztTQUNqRTtRQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxLQUFLLENBQUMsU0FBYztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUVELGtCQUFlLHlCQUF5QixDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL2VtYmVkcy9ibGVIY2kvYmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVBdHRyaWJ1dGVBYnN0cmFjdCBmcm9tIFwiLi9ibGVBdHRyaWJ1dGVBYnN0cmFjdFwiO1xuaW1wb3J0IEJsZUhlbHBlciBmcm9tIFwiLi9ibGVIZWxwZXJcIjtcblxuY2xhc3MgQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdCBleHRlbmRzIEJsZUF0dHJpYnV0ZUFic3RyYWN0IHtcbiAgcHVibGljIFJFU1VMVF9TVUNDRVNTOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfSU5WQUxJRF9PRkZTRVQ6IGFueTtcbiAgcHVibGljIFJFU1VMVF9BVFRSX05PVF9MT05HOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfSU5WQUxJRF9BVFRSSUJVVEVfTEVOR1RIOiBhbnk7XG4gIHB1YmxpYyBSRVNVTFRfVU5MSUtFTFlfRVJST1I6IGFueTtcbiAgcHVibGljIHV1aWQ6IGFueTtcbiAgcHVibGljIGNoaWxkcmVuTmFtZTogYW55O1xuICBwdWJsaWMgY2hpbGRyZW46IGFueTtcbiAgcHVibGljIGRhdGE6IGFueTtcbiAgcHVibGljIHBhcmVudE5hbWU6IGFueTtcbiAgcHVibGljIGNoYXJhY3RlcmlzdGljOiBhbnk7XG4gIHB1YmxpYyBzZXJ2aWNlOiBhbnk7XG4gIHB1YmxpYyBub3RpZnlGcm9tU2VydmVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkpIHtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdGhpcy5SRVNVTFRfU1VDQ0VTUyA9IDB4MDA7XG4gICAgdGhpcy5SRVNVTFRfSU5WQUxJRF9PRkZTRVQgPSAweDA3O1xuICAgIHRoaXMuUkVTVUxUX0FUVFJfTk9UX0xPTkcgPSAweDBiO1xuICAgIHRoaXMuUkVTVUxUX0lOVkFMSURfQVRUUklCVVRFX0xFTkdUSCA9IDB4MGQ7XG4gICAgdGhpcy5SRVNVTFRfVU5MSUtFTFlfRVJST1IgPSAweDBlO1xuICB9XG5cbiAgcHVibGljIHRvQnVmZmVyT2JqKCkge1xuICAgIGNvbnN0IG9iajogYW55ID0ge1xuICAgICAgdXVpZDogQmxlSGVscGVyLnV1aWRGaWx0ZXIodGhpcy51dWlkKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5OYW1lKSB7XG4gICAgICBjb25zdCBrZXk6IGFueSA9IHRoaXMuY2hpbGRyZW5OYW1lO1xuICAgICAgb2JqW2tleV0gPSB0aGlzLmNoaWxkcmVuLm1hcCgoZTogYW55KSA9PiBlLnRvQnVmZmVyT2JqKCkpO1xuICAgIH1cblxuICAgIG9iai5lbWl0ID0gdGhpcy5lbWl0LmJpbmQodGhpcyk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0KG5hbWU6IGFueSwgLi4ucGFyYW1zOiBhbnkpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgXCJyZWFkUmVxdWVzdFwiOlxuICAgICAgICB0aGlzLl9vblJlYWRSZXF1ZXN0KC4uLnBhcmFtcyBhcyBbYW55LCBhbnldKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlIFwid3JpdGVSZXF1ZXN0XCI6XG4gICAgICAgIHRoaXMuX29uV3JpdGVSZXF1ZXN0KC4uLnBhcmFtcyBhcyBbYW55LCBhbnldKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBfb25SZWFkUmVxdWVzdChvZmZzZXQ6IGFueSwgY2FsbGJhY2s/OiBhbnkpIHtcbiAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+PSBvZmZzZXQpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuUkVTVUxUX1NVQ0NFU1MsIEJ1ZmZlci5mcm9tKHRoaXMuZGF0YS5zbGljZShvZmZzZXQpKSk7XG4gICAgICBsZXQgYWRkcmVzczogYW55ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLnBhcmVudE5hbWUgPT09IFwiY2hhcmFjdGVyaXN0aWNcIikge1xuICAgICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgICAuY3VycmVudENvbm5lY3RlZERldmljZUFkZHJlc3M7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gXCJzZXJ2aWNlXCIpIHtcbiAgICAgICAgYWRkcmVzcyA9IHRoaXMuc2VydmljZS5wZXJpcGhlcmFsLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgICAgfVxuICAgICAgdGhpcy5ub3RpZnlGcm9tU2VydmVyKFwib25yZWFkZnJvbXJlbW90ZVwiLCB7YWRkcmVzc30pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0aGlzLlJFU1VMVF9VTkxJS0VMWV9FUlJPUiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIF9vbldyaXRlUmVxdWVzdChkYXRhOiBhbnksIG9mZnNldD86IGFueSwgd2l0aG91dFJlc3BvbnNlPzogYW55LCBjYWxsYmFjaz86IGFueSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdvbldyaXRlUmVxdWVzdCcpO1xuICAgIHRoaXMuZGF0YSA9IEFycmF5LmZyb20oZGF0YSk7XG4gICAgY2FsbGJhY2sodGhpcy5SRVNVTFRfU1VDQ0VTUyk7XG4gICAgbGV0IGFkZHJlc3M6IGFueSA9IG51bGw7XG4gICAgaWYgKHRoaXMucGFyZW50TmFtZSA9PT0gXCJjaGFyYWN0ZXJpc3RpY1wiKSB7XG4gICAgICBhZGRyZXNzID0gdGhpcy5jaGFyYWN0ZXJpc3RpYy5zZXJ2aWNlLnBlcmlwaGVyYWxcbiAgICAgICAgLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnROYW1lID09PSBcInNlcnZpY2VcIikge1xuICAgICAgYWRkcmVzcyA9IHRoaXMuc2VydmljZS5wZXJpcGhlcmFsLmN1cnJlbnRDb25uZWN0ZWREZXZpY2VBZGRyZXNzO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeUZyb21TZXJ2ZXIoXCJvbndyaXRlZnJvbXJlbW90ZVwiLCB7YWRkcmVzcywgZGF0YX0pO1xuICB9XG5cbiAgcHVibGljIHdyaXRlKGRhdGFBcnJheTogYW55KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YUFycmF5O1xuICAgIHRoaXMubm90aWZ5RnJvbVNlcnZlcihcIm9ud3JpdGVcIiwge3Jlc3VsdDogXCJzdWNjZXNzXCJ9KTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkKCkge1xuICAgIHRoaXMubm90aWZ5RnJvbVNlcnZlcihcIm9ucmVhZFwiLCB7ZGF0YTogdGhpcy5kYXRhfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxlTG9jYWxBdHRyaWJ1dGVBYnN0cmFjdDtcbiJdfQ==
