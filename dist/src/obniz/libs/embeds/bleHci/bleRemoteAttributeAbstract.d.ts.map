{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemoteAttributeAbstract.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAC1D;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,0BAA2B,SAAQ,oBAAoB;IACnE,QAAQ,EAAE,GAAG,CAAC;IACd,iBAAiB,EAAE,GAAG,CAAC;IACvB,YAAY,EAAE,GAAG,CAAC;IAClB,OAAO,EAAE,GAAG,CAAC;IACb,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;IACd,QAAQ,EAAE,GAAG,CAAC;gBAET,MAAM,EAAE,GAAG;IAOvB,IAAI,eAAe,kBAOlB;IAEM,gBAAgB;IAGhB,oBAAoB;IAY3B;;OAEG;IACI,UAAU,CAAC,KAAK,EAAE,GAAG;IAGrB,kBAAkB,CAAC,QAAQ,EAAE,GAAG;IAGhC,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;CAuBrD","file":"bleRemoteAttributeAbstract.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleAttributeAbstract from \"./bleAttributeAbstract\";\n/**\n * @category Use as Central\n */\nexport default class BleRemoteAttributeAbstract extends BleAttributeAbstract {\n  public isRemote: any;\n  public discoverdOnRemote: any;\n  public childrenName: any;\n  public emitter: any;\n  public children: any;\n  public getChild: any;\n  public addChild: any;\n\n  constructor(params: any) {\n    super(params);\n\n    this.isRemote = false;\n    this.discoverdOnRemote = false;\n  }\n\n  get wsChildUuidName() {\n    const childrenName: any = this.childrenName;\n    if (!childrenName) {\n      return null;\n    }\n    const childName: any = childrenName.slice(0, -1);\n    return childName + \"_uuid\";\n  }\n\n  public discoverChildren() {\n  }\n\n  public discoverChildrenWait() {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"discoverfinished\", () => {\n        const children: any = this.children.filter((elm: any) => {\n          return elm.discoverdOnRemote;\n        });\n        resolve(children);\n      });\n      this.discoverChildren();\n    });\n  }\n\n  /**\n   * CALLBACKS\n   */\n  public ondiscover(child: any) {\n  }\n\n  public ondiscoverfinished(children: any) {\n  }\n\n  public notifyFromServer(notifyName: any, params: any) {\n    super.notifyFromServer(notifyName, params);\n    switch (notifyName) {\n      case \"discover\": {\n        const uuid: any = params[this.wsChildUuidName!];\n        let child: any = this.getChild(uuid);\n        if (!child) {\n          child = this.addChild({uuid});\n        }\n        child.discoverdOnRemote = true;\n        child.properties = params.properties || [];\n        this.ondiscover(child);\n        break;\n      }\n      case \"discoverfinished\": {\n        const children: any = this.children.filter((elm: any) => {\n          return elm.discoverdOnRemote;\n        });\n        this.ondiscoverfinished(children);\n        break;\n      }\n    }\n  }\n}\n"]}