{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleScan.ts"],"names":[],"mappings":"AAGA,cAAM,OAAO;IACJ,UAAU,EAAE,GAAG,CAAC;IAChB,YAAY,EAAE,GAAG,CAAC;IAClB,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAE,GAAG,CAAC;IACb,iBAAiB,EAAE,GAAG,CAAC;IACvB,aAAa,EAAE,GAAG,CAAC;gBAEd,QAAQ,EAAE,GAAG;IAUlB,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IA+BhC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAuBvC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAUvC,GAAG;IAKH,QAAQ,CAAC,UAAU,EAAE,GAAG;IAqBxB,QAAQ,CAAC,IAAI,EAAE,GAAG;IAElB,MAAM,CAAC,MAAM,EAAE,GAAG;IAGlB,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAyB7C,iBAAiB;CAMzB;AAED,eAAe,OAAO,CAAC","file":"bleScan.d.ts","sourcesContent":["import emitter = require(\"eventemitter3\");\nimport BleHelper from \"./bleHelper\";\n\nclass BleScan {\n  public scanTarget: any;\n  public scanSettings: any;\n  public obnizBle: any;\n  public emitter: any;\n  public scanedPeripherals: any;\n  public _timeoutTimer: any;\n\n  constructor(obnizBle: any) {\n    this.scanTarget = null;\n    this.scanSettings = {};\n    this.obnizBle = obnizBle;\n    this.emitter = new emitter();\n\n    this.scanedPeripherals = [];\n    this._timeoutTimer = null;\n  }\n\n  public start(target: any, settings: any) {\n    this.obnizBle.warningIfNotInitialize();\n\n    if (!settings) {\n      settings = {};\n    }\n    const timeout: any = settings.duration || 30;\n    settings.duplicate = settings.duplicate === true ? true : false;\n    this.scanSettings = settings;\n    target = target || {};\n    this.scanTarget = target;\n    if (\n      this.scanTarget &&\n      this.scanTarget.uuids &&\n      Array.isArray(this.scanTarget.uuids)\n    ) {\n      this.scanTarget.uuids = this.scanTarget.uuids.map ((elm: any ) => {\n        return BleHelper.uuidFilter(elm);\n      });\n    }\n    this.scanedPeripherals = [];\n\n    this.obnizBle.centralBindings.startScanning(null, false);\n\n    this.clearTimeoutTimer();\n    this._timeoutTimer = setTimeout(() => {\n      this._timeoutTimer = null;\n      this.end();\n    }, timeout * 1000);\n  }\n\n  public startOneWait(target: any, settings: any) {\n    let state: any = 0;\n\n    return new Promise ((resolve: any ) => {\n      this.emitter.once(\"onfind\", (param: any ) => {\n        if (state === 0) {\n          state = 1;\n          this.end();\n          resolve(param);\n        }\n      });\n\n      this.emitter.once(\"onfinish\", () => {\n        if (state === 0) {\n          state = 1;\n          resolve(null);\n        }\n      });\n\n      this.start(target, settings);\n    });\n  }\n\n  public startAllWait(target: any, settings: any) {\n    return new Promise ((resolve: any ) => {\n      this.emitter.once(\"onfinish\", () => {\n        resolve(this.scanedPeripherals);\n      });\n\n      this.start(target, settings);\n    });\n  }\n\n  public end() {\n    this.clearTimeoutTimer();\n    this.obnizBle.centralBindings.stopScanning();\n  }\n\n  public isTarget(peripheral: any) {\n    if (\n      this.scanTarget &&\n      this.scanTarget.localName &&\n      peripheral.localName !== this.scanTarget.localName\n    ) {\n      return false;\n    }\n    if (this.scanTarget && this.scanTarget.uuids) {\n      const uuids: any = peripheral.advertisementServiceUuids().map ((e: any ) => {\n        return BleHelper.uuidFilter(e);\n      });\n      for (const uuid of this.scanTarget.uuids) {\n        if (!uuids.includes(uuid)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public onfinish(data: any) {\n  } // dummy\n  public onfind(params: any) {\n  } // dummy\n\n  public notifyFromServer(notifyName: any, params: any) {\n    switch (notifyName) {\n      case \"onfind\": {\n        if (this.scanSettings.duplicate === false) {\n          // duplicate filter\n          if (this.scanedPeripherals.find((e: any) => e.address === params.address)) {\n            break;\n          }\n        }\n        if (this.isTarget(params)) {\n          this.scanedPeripherals.push(params);\n          this.emitter.emit(notifyName, params);\n          this.onfind(params);\n        }\n        break;\n      }\n      case \"onfinish\": {\n        this.clearTimeoutTimer();\n        this.emitter.emit(notifyName, this.scanedPeripherals);\n        this.onfinish(this.scanedPeripherals);\n        break;\n      }\n    }\n  }\n\n  public clearTimeoutTimer() {\n    if (this._timeoutTimer) {\n      clearTimeout(this._timeoutTimer);\n      this._timeoutTimer = null;\n    }\n  }\n}\n\nexport default BleScan;\n"]}