"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const WSCommand_1 = __importDefault(require("./WSCommand"));
class WSCommandAD extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 7;
        this._CommandInitNormalInterval = 0;
        this._CommandDeinit = 1;
        this._CommandNotifyValue = 2;
        this._CommandDoOnece = 3;
    }
    // Commands
    get(params, no) {
        const buf = new Uint8Array([no]);
        this.sendCommand(params.stream ? this._CommandInitNormalInterval : this._CommandDoOnece, buf);
    }
    deinit(params, no) {
        const buf = new Uint8Array([no]);
        this.sendCommand(this._CommandDeinit, buf);
    }
    parseFromJson(json) {
        for (let i = 0; i < 40; i++) {
            const module = json["ad" + i];
            if (module === undefined) {
                continue;
            }
            const schemaData = [
                { uri: "/request/ad/deinit", onValid: this.deinit },
                { uri: "/request/ad/get", onValid: this.get },
            ];
            const res = this.validateCommandSchema(schemaData, module, "ad" + i, i);
            if (res.valid === 0) {
                if (res.invalidButLike.length > 0) {
                    throw new Error(res.invalidButLike[0].message);
                }
                else {
                    throw new this.WSCommandNotFoundError(`[ad${i}]unknown command`);
                }
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandNotifyValue) {
            for (let i = 0; i + 2 < payload.byteLength; i += 3) {
                let value;
                if (payload[i + 1] & 0x80) {
                    // 10bit mode
                    value = ((payload[i + 1] & 0x03) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                    value = (5.0 * value) / 1023.0; // 1023.0 ===0x3FF
                    value = Math.round(value * 1000) / 1000;
                }
                else if (payload[i + 1] & 0x40) {
                    // 12bit mode
                    value = ((payload[i + 1] & 0x0f) << 8) + payload[i + 2]; // 0x0000 to 0x3FF;
                    value = (3.3 * value) / 4095.0; // 4095.0 ===0xFFF // vdd is not always 3.3v but...
                    value = Math.round(value * 1000) / 1000;
                }
                else {
                    // unsigned 100 times mode. (0 to 500 from 0v to 5v).
                    value = (payload[i + 1] << 8) + payload[i + 2];
                    value = value / 100.0;
                }
                objToSend["ad" + payload[i]] = value;
            }
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandAD;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRBRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUVwQyxNQUFNLFdBQVksU0FBUSxtQkFBUztJQVVqQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSSxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXO0lBRUosR0FBRyxDQUFDLE1BQVcsRUFBRSxFQUFPO1FBQzdCLE1BQU0sR0FBRyxHQUFRLElBQUksVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsV0FBVyxDQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFDdEUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQVcsRUFBRSxFQUFPO1FBQ2hDLE1BQU0sR0FBRyxHQUFRLElBQUksVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLGFBQWEsQ0FBQyxJQUFTO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxNQUFNLEdBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FB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LENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvd3Njb21tYW5kL1dTQ29tbWFuZEFELmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdTQ29tbWFuZCBmcm9tIFwiLi9XU0NvbW1hbmRcIjtcblxuY2xhc3MgV1NDb21tYW5kQUQgZXh0ZW5kcyBXU0NvbW1hbmQge1xuICBwdWJsaWMgbW9kdWxlOiBhbnk7XG4gIHB1YmxpYyBfQ29tbWFuZEluaXROb3JtYWxJbnRlcnZhbDogYW55O1xuICBwdWJsaWMgX0NvbW1hbmREZWluaXQ6IGFueTtcbiAgcHVibGljIF9Db21tYW5kTm90aWZ5VmFsdWU6IGFueTtcbiAgcHVibGljIF9Db21tYW5kRG9PbmVjZTogYW55O1xuICBwdWJsaWMgc2VuZENvbW1hbmQ6IGFueTtcbiAgcHVibGljIHZhbGlkYXRlQ29tbWFuZFNjaGVtYTogYW55O1xuICBwdWJsaWMgV1NDb21tYW5kTm90Rm91bmRFcnJvcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2R1bGUgPSA3O1xuXG4gICAgdGhpcy5fQ29tbWFuZEluaXROb3JtYWxJbnRlcnZhbCA9IDA7XG4gICAgdGhpcy5fQ29tbWFuZERlaW5pdCA9IDE7XG4gICAgdGhpcy5fQ29tbWFuZE5vdGlmeVZhbHVlID0gMjtcbiAgICB0aGlzLl9Db21tYW5kRG9PbmVjZSA9IDM7XG4gIH1cblxuICAvLyBDb21tYW5kc1xuXG4gIHB1YmxpYyBnZXQocGFyYW1zOiBhbnksIG5vOiBhbnkpIHtcbiAgICBjb25zdCBidWY6IGFueSA9IG5ldyBVaW50OEFycmF5KFtub10pO1xuICAgIHRoaXMuc2VuZENvbW1hbmQoXG4gICAgICBwYXJhbXMuc3RyZWFtID8gdGhpcy5fQ29tbWFuZEluaXROb3JtYWxJbnRlcnZhbCA6IHRoaXMuX0NvbW1hbmREb09uZWNlLFxuICAgICAgYnVmLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZGVpbml0KHBhcmFtczogYW55LCBubzogYW55KSB7XG4gICAgY29uc3QgYnVmOiBhbnkgPSBuZXcgVWludDhBcnJheShbbm9dKTtcbiAgICB0aGlzLnNlbmRDb21tYW5kKHRoaXMuX0NvbW1hbmREZWluaXQsIGJ1Zik7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VGcm9tSnNvbihqc29uOiBhbnkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcbiAgICAgIGNvbnN0IG1vZHVsZTogYW55ID0ganNvbltcImFkXCIgKyBpXTtcbiAgICAgIGlmIChtb2R1bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2NoZW1hRGF0YTogYW55ID0gW1xuICAgICAgICB7dXJpOiBcIi9yZXF1ZXN0L2FkL2RlaW5pdFwiLCBvblZhbGlkOiB0aGlzLmRlaW5pdH0sXG4gICAgICAgIHt1cmk6IFwiL3JlcXVlc3QvYWQvZ2V0XCIsIG9uVmFsaWQ6IHRoaXMuZ2V0fSxcbiAgICAgIF07XG4gICAgICBjb25zdCByZXM6IGFueSA9IHRoaXMudmFsaWRhdGVDb21tYW5kU2NoZW1hKHNjaGVtYURhdGEsIG1vZHVsZSwgXCJhZFwiICsgaSwgaSk7XG5cbiAgICAgIGlmIChyZXMudmFsaWQgPT09IDApIHtcbiAgICAgICAgaWYgKHJlcy5pbnZhbGlkQnV0TGlrZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5pbnZhbGlkQnV0TGlrZVswXS5tZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgdGhpcy5XU0NvbW1hbmROb3RGb3VuZEVycm9yKGBbYWQke2l9XXVua25vd24gY29tbWFuZGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kOiBhbnksIGZ1bmM6IGFueSwgcGF5bG9hZDogYW55KSB7XG4gICAgaWYgKGZ1bmMgPT09IHRoaXMuX0NvbW1hbmROb3RpZnlWYWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgKyAyIDwgcGF5bG9hZC5ieXRlTGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgbGV0IHZhbHVlOiBhbnk7XG4gICAgICAgIGlmIChwYXlsb2FkW2kgKyAxXSAmIDB4ODApIHtcbiAgICAgICAgICAvLyAxMGJpdCBtb2RlXG4gICAgICAgICAgdmFsdWUgPSAoKHBheWxvYWRbaSArIDFdICYgMHgwMykgPDwgOCkgKyBwYXlsb2FkW2kgKyAyXTsgLy8gMHgwMDAwIHRvIDB4M0ZGO1xuICAgICAgICAgIHZhbHVlID0gKDUuMCAqIHZhbHVlKSAvIDEwMjMuMDsgLy8gMTAyMy4wID09PTB4M0ZGXG4gICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwMCkgLyAxMDAwO1xuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWRbaSArIDFdICYgMHg0MCkge1xuICAgICAgICAgIC8vIDEyYml0IG1vZGVcbiAgICAgICAgICB2YWx1ZSA9ICgocGF5bG9hZFtpICsgMV0gJiAweDBmKSA8PCA4KSArIHBheWxvYWRbaSArIDJdOyAvLyAweDAwMDAgdG8gMHgzRkY7XG4gICAgICAgICAgdmFsdWUgPSAoMy4zICogdmFsdWUpIC8gNDA5NS4wOyAvLyA0MDk1LjAgPT09MHhGRkYgLy8gdmRkIGlzIG5vdCBhbHdheXMgMy4zdiBidXQuLi5cbiAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdW5zaWduZWQgMTAwIHRpbWVzIG1vZGUuICgwIHRvIDUwMCBmcm9tIDB2IHRvIDV2KS5cbiAgICAgICAgICB2YWx1ZSA9IChwYXlsb2FkW2kgKyAxXSA8PCA4KSArIHBheWxvYWRbaSArIDJdO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyAxMDAuMDtcbiAgICAgICAgfVxuICAgICAgICBvYmpUb1NlbmRbXCJhZFwiICsgcGF5bG9hZFtpXV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIubm90aWZ5RnJvbUJpbmFyeShvYmpUb1NlbmQsIGZ1bmMsIHBheWxvYWQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXU0NvbW1hbmRBRDtcbiJdfQ==
