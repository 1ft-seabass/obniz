"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const WSCommand_1 = __importDefault(require("./WSCommand"));
class WSCommandMeasurement extends WSCommand_1.default {
    constructor() {
        super();
        this.module = 12;
        this._CommandMeasurementEcho = 0;
    }
    // Commands
    echo(params) {
        const triggerIO = params.echo.io_pulse;
        const triggerPosNeg = params.echo.pulse === "negative" ? false : true;
        const triggerWidthUs = Math.floor(params.echo.pulse_width * 1000);
        const echoIO = params.echo.io_echo;
        const responseCount = params.echo.measure_edges;
        let timeoutUs = params.echo.timeout * 1000;
        timeoutUs = parseInt(timeoutUs);
        const buf = new Uint8Array(13);
        buf[0] = 0;
        buf[1] = triggerIO;
        buf[2] = triggerPosNeg ? 1 : 0;
        buf[3] = triggerWidthUs >> (8 * 3);
        buf[4] = triggerWidthUs >> (8 * 2);
        buf[5] = triggerWidthUs >> 8;
        buf[6] = triggerWidthUs;
        buf[7] = echoIO;
        buf[8] = responseCount;
        buf[9] = timeoutUs >> (8 * 3);
        buf[10] = timeoutUs >> (8 * 2);
        buf[11] = timeoutUs >> 8;
        buf[12] = timeoutUs;
        this.sendCommand(this._CommandMeasurementEcho, buf);
    }
    parseFromJson(json) {
        const module = json.measure;
        if (module === undefined) {
            return;
        }
        const schemaData = [{ uri: "/request/measure/echo", onValid: this.echo }];
        const res = this.validateCommandSchema(schemaData, module, "measure");
        if (res.valid === 0) {
            if (res.invalidButLike.length > 0) {
                throw new Error(res.invalidButLike[0].message);
            }
            else {
                throw new this.WSCommandNotFoundError(`[measure]unknown command`);
            }
        }
    }
    notifyFromBinary(objToSend, func, payload) {
        if (func === this._CommandMeasurementEcho) {
            let index = 0;
            const count = parseInt(payload[index++]);
            const array = [];
            for (let i = 0; i < count; i++) {
                let timing;
                const edge = payload[index++] > 0 ? true : false;
                timing = payload[index++] << (8 * 3);
                timing += payload[index++] << (8 * 2);
                timing += payload[index++] << 8;
                timing += payload[index++];
                timing = timing / 1000;
                array.push({
                    edge,
                    timing,
                });
            }
            objToSend.measure = {
                echo: array,
            };
        }
        else {
            super.notifyFromBinary(objToSend, func, payload);
        }
    }
}
exports.default = WSCommandMeasurement;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU0NvbW1hbmRNZWFzdXJlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUFvQztBQUVwQyxNQUFNLG9CQUFxQixTQUFRLG1CQUFTO0lBTzFDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxXQUFXO0lBRUosSUFBSSxDQUFDLE1BQVc7UUFDckIsTUFBTSxTQUFTLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMzRSxNQUFNLGNBQWMsR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sTUFBTSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hDLE1BQU0sYUFBYSxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3JELElBQUksU0FBUyxHQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNoRCxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWhDLE1BQU0sR0FBRyxHQUFRLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxhQUFhLENB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LENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEtBQUssQ0FBQyxJQUFJLENBQUM7b0JBQ1QsSUFBSTtvQkFDSixNQUFNO2lCQUNQLENBQUMsQ0FBQzthQUNKO1lBQ0QsU0FBUyxDQUFDLE9BQU8sR0FBRztnQkFDbEIsSUFBSSxFQUFFLEtBQUs7YUFDWixDQUFDO1NBQ0g7YUFBTTtZQUNMLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsa0JBQWUsb0JBQW9CLENBQUMiLCJmaWxlIjoic3JjL29ibml6L2xpYnMvd3Njb21tYW5kL1dTQ29tbWFuZE1lYXN1cmVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdTQ29tbWFuZCBmcm9tIFwiLi9XU0NvbW1hbmRcIjtcblxuY2xhc3MgV1NDb21tYW5kTWVhc3VyZW1lbnQgZXh0ZW5kcyBXU0NvbW1hbmQge1xuICBwdWJsaWMgbW9kdWxlOiBhbnk7XG4gIHB1YmxpYyBfQ29tbWFuZE1lYXN1cmVtZW50RWNobzogYW55O1xuICBwdWJsaWMgc2VuZENvbW1hbmQ6IGFueTtcbiAgcHVibGljIHZhbGlkYXRlQ29tbWFuZFNjaGVtYTogYW55O1xuICBwdWJsaWMgV1NDb21tYW5kTm90Rm91bmRFcnJvcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2R1bGUgPSAxMjtcblxuICAgIHRoaXMuX0NvbW1hbmRNZWFzdXJlbWVudEVjaG8gPSAwO1xuICB9XG5cbiAgLy8gQ29tbWFuZHNcblxuICBwdWJsaWMgZWNobyhwYXJhbXM6IGFueSkge1xuICAgIGNvbnN0IHRyaWdnZXJJTzogYW55ID0gcGFyYW1zLmVjaG8uaW9fcHVsc2U7XG4gICAgY29uc3QgdHJpZ2dlclBvc05lZzogYW55ID0gcGFyYW1zLmVjaG8ucHVsc2UgPT09IFwibmVnYXRpdmVcIiA/IGZhbHNlIDogdHJ1ZTtcbiAgICBjb25zdCB0cmlnZ2VyV2lkdGhVczogYW55ID0gTWF0aC5mbG9vcihwYXJhbXMuZWNoby5wdWxzZV93aWR0aCAqIDEwMDApO1xuICAgIGNvbnN0IGVjaG9JTzogYW55ID0gcGFyYW1zLmVjaG8uaW9fZWNobztcbiAgICBjb25zdCByZXNwb25zZUNvdW50OiBhbnkgPSBwYXJhbXMuZWNoby5tZWFzdXJlX2VkZ2VzO1xuICAgIGxldCB0aW1lb3V0VXM6IGFueSA9IHBhcmFtcy5lY2hvLnRpbWVvdXQgKiAxMDAwO1xuICAgIHRpbWVvdXRVcyA9IHBhcnNlSW50KHRpbWVvdXRVcyk7XG5cbiAgICBjb25zdCBidWY6IGFueSA9IG5ldyBVaW50OEFycmF5KDEzKTtcbiAgICBidWZbMF0gPSAwO1xuICAgIGJ1ZlsxXSA9IHRyaWdnZXJJTztcbiAgICBidWZbMl0gPSB0cmlnZ2VyUG9zTmVnID8gMSA6IDA7XG4gICAgYnVmWzNdID0gdHJpZ2dlcldpZHRoVXMgPj4gKDggKiAzKTtcbiAgICBidWZbNF0gPSB0cmlnZ2VyV2lkdGhVcyA+PiAoOCAqIDIpO1xuICAgIGJ1Zls1XSA9IHRyaWdnZXJXaWR0aFVzID4+IDg7XG4gICAgYnVmWzZdID0gdHJpZ2dlcldpZHRoVXM7XG4gICAgYnVmWzddID0gZWNob0lPO1xuICAgIGJ1Zls4XSA9IHJlc3BvbnNlQ291bnQ7XG4gICAgYnVmWzldID0gdGltZW91dFVzID4+ICg4ICogMyk7XG4gICAgYnVmWzEwXSA9IHRpbWVvdXRVcyA+PiAoOCAqIDIpO1xuICAgIGJ1ZlsxMV0gPSB0aW1lb3V0VXMgPj4gODtcbiAgICBidWZbMTJdID0gdGltZW91dFVzO1xuICAgIHRoaXMuc2VuZENvbW1hbmQodGhpcy5fQ29tbWFuZE1lYXN1cmVtZW50RWNobywgYnVmKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZUZyb21Kc29uKGpzb246IGFueSkge1xuICAgIGNvbnN0IG1vZHVsZTogYW55ID0ganNvbi5tZWFzdXJlO1xuICAgIGlmIChtb2R1bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWFEYXRhOiBhbnkgPSBbe3VyaTogXCIvcmVxdWVzdC9tZWFzdXJlL2VjaG9cIiwgb25WYWxpZDogdGhpcy5lY2hvfV07XG4gICAgY29uc3QgcmVzOiBhbnkgPSB0aGlzLnZhbGlkYXRlQ29tbWFuZFNjaGVtYShzY2hlbWFEYXRhLCBtb2R1bGUsIFwibWVhc3VyZVwiKTtcblxuICAgIGlmIChyZXMudmFsaWQgPT09IDApIHtcbiAgICAgIGlmIChyZXMuaW52YWxpZEJ1dExpa2UubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLmludmFsaWRCdXRMaWtlWzBdLm1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IHRoaXMuV1NDb21tYW5kTm90Rm91bmRFcnJvcihgW21lYXN1cmVddW5rbm93biBjb21tYW5kYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5vdGlmeUZyb21CaW5hcnkob2JqVG9TZW5kOiBhbnksIGZ1bmM6IGFueSwgcGF5bG9hZDogYW55KSB7XG4gICAgaWYgKGZ1bmMgPT09IHRoaXMuX0NvbW1hbmRNZWFzdXJlbWVudEVjaG8pIHtcbiAgICAgIGxldCBpbmRleDogYW55ID0gMDtcbiAgICAgIGNvbnN0IGNvdW50OiBhbnkgPSBwYXJzZUludChwYXlsb2FkW2luZGV4KytdKTtcbiAgICAgIGNvbnN0IGFycmF5OiBhbnkgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsZXQgdGltaW5nOiBhbnk7XG4gICAgICAgIGNvbnN0IGVkZ2U6IGFueSA9IHBheWxvYWRbaW5kZXgrK10gPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB0aW1pbmcgPSBwYXlsb2FkW2luZGV4KytdIDw8ICg4ICogMyk7XG4gICAgICAgIHRpbWluZyArPSBwYXlsb2FkW2luZGV4KytdIDw8ICg4ICogMik7XG4gICAgICAgIHRpbWluZyArPSBwYXlsb2FkW2luZGV4KytdIDw8IDg7XG4gICAgICAgIHRpbWluZyArPSBwYXlsb2FkW2luZGV4KytdO1xuICAgICAgICB0aW1pbmcgPSB0aW1pbmcgLyAxMDAwO1xuICAgICAgICBhcnJheS5wdXNoKHtcbiAgICAgICAgICBlZGdlLFxuICAgICAgICAgIHRpbWluZyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBvYmpUb1NlbmQubWVhc3VyZSA9IHtcbiAgICAgICAgZWNobzogYXJyYXksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5ub3RpZnlGcm9tQmluYXJ5KG9ialRvU2VuZCwgZnVuYywgcGF5bG9hZCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdTQ29tbWFuZE1lYXN1cmVtZW50O1xuIl19
