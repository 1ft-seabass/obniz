"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tv4 = require("tv4");
tv4.defineError("UNIQUE_KEYS", 10001, "{uniqueKeys} are must be unique value.");
// @ts-ignore
tv4.defineKeyword("uniqueKeys", (data, value, schema) => {
    if (!Array.isArray(value)) {
        return null;
    }
    const targets = [];
    for (const key of value) {
        if (data[key] !== null && data[key] !== undefined) {
            targets.push(data[key]);
        }
    }
    const duplicated = targets.filter((x, i, self) => {
        return self.indexOf(x) !== self.lastIndexOf(x);
    });
    if (duplicated.length > 0) {
        return {
            code: tv4.errorCodes.UNIQUE_KEYS,
            message: { uniqueKeys: value.join(",") },
        };
    }
    return null;
});
const wsSchema = [];
const require_context_1 = __importDefault(require("../webpackReplace/require-context"));
// @ts-ignore
require.context = require_context_1.default;
// @ts-ignore
if (require.context && require.context.setBaseDir) {
    // @ts-ignore
    require.context.setBaseDir(__dirname);
}
const context = require.context("../../../json_schema", true, /\.yml$/);
for (const path of context.keys()) {
    const oneSchema = context(path);
    wsSchema.push(oneSchema);
}
wsSchema.map(tv4.addSchema);
exports.default = tv4;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU1NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJCQUE0QjtBQUc1QixHQUFHLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztBQUVoRixhQUFhO0FBQ2IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLE1BQXNCLEVBQW1DLEVBQUU7SUFDakgsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE1BQU0sT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUN4QixLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtRQUN2QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO0tBQ0Y7SUFDRCxNQUFNLFVBQVUsR0FBUSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUFFLENBQU0sRUFBRSxJQUFTLEVBQUUsRUFBRTtRQUNuRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDekIsT0FBTztZQUNMLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVc7WUFDaEMsT0FBTyxFQUFFLEVBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUM7U0FDdkMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQztBQUN6Qix3RkFBK0Q7QUFFL0QsYUFBYTtBQUNiLE9BQU8sQ0FBQyxPQUFPLEdBQUcseUJBQWMsQ0FBQztBQUVqQyxhQUFhO0FBQ2IsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO0lBRWpELGFBQWE7SUFDYixPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUN2QztBQUNELE1BQU0sT0FBTyxHQUFRLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdFLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFO0lBQ2pDLE1BQU0sU0FBUyxHQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQzFCO0FBRUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFNUIsa0JBQWUsR0FBRyxDQUFDIiwiZmlsZSI6InNyYy9vYm5pei9saWJzL3dzY29tbWFuZC9XU1NjaGVtYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0djQgPSByZXF1aXJlKFwidHY0XCIpO1xuaW1wb3J0IHtWYWxpZGF0aW9uRXJyb3J9IGZyb20gXCJ0djRcIjtcblxudHY0LmRlZmluZUVycm9yKFwiVU5JUVVFX0tFWVNcIiwgMTAwMDEsIFwie3VuaXF1ZUtleXN9IGFyZSBtdXN0IGJlIHVuaXF1ZSB2YWx1ZS5cIik7XG5cbi8vIEB0cy1pZ25vcmVcbnR2NC5kZWZpbmVLZXl3b3JkKFwidW5pcXVlS2V5c1wiLCAoZGF0YTogYW55LCB2YWx1ZTogYW55LCBzY2hlbWE6IHR2NC5Kc29uU2NoZW1hKTogc3RyaW5nIHwgVmFsaWRhdGlvbkVycm9yIHwgbnVsbCA9PiB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB0YXJnZXRzOiBhbnkgPSBbXTtcbiAgZm9yIChjb25zdCBrZXkgb2YgdmFsdWUpIHtcbiAgICBpZiAoZGF0YVtrZXldICE9PSBudWxsICYmIGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXRzLnB1c2goZGF0YVtrZXldKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZHVwbGljYXRlZDogYW55ID0gdGFyZ2V0cy5maWx0ZXIoKHg6IGFueSwgaTogYW55LCBzZWxmOiBhbnkpID0+IHtcbiAgICByZXR1cm4gc2VsZi5pbmRleE9mKHgpICE9PSBzZWxmLmxhc3RJbmRleE9mKHgpO1xuICB9KTtcbiAgaWYgKGR1cGxpY2F0ZWQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb2RlOiB0djQuZXJyb3JDb2Rlcy5VTklRVUVfS0VZUyxcbiAgICAgIG1lc3NhZ2U6IHt1bmlxdWVLZXlzOiB2YWx1ZS5qb2luKFwiLFwiKX0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5jb25zdCB3c1NjaGVtYTogYW55ID0gW107XG5pbXBvcnQgcmVwbGFjZUNvbnRleHQgZnJvbSBcIi4uL3dlYnBhY2tSZXBsYWNlL3JlcXVpcmUtY29udGV4dFwiO1xuXG4vLyBAdHMtaWdub3JlXG5yZXF1aXJlLmNvbnRleHQgPSByZXBsYWNlQ29udGV4dDtcblxuLy8gQHRzLWlnbm9yZVxuaWYgKHJlcXVpcmUuY29udGV4dCAmJiByZXF1aXJlLmNvbnRleHQuc2V0QmFzZURpcikge1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcmVxdWlyZS5jb250ZXh0LnNldEJhc2VEaXIoX19kaXJuYW1lKTtcbn1cbmNvbnN0IGNvbnRleHQ6IGFueSA9IHJlcXVpcmUuY29udGV4dChcIi4uLy4uLy4uL2pzb25fc2NoZW1hXCIsIHRydWUsIC9cXC55bWwkLyk7XG5mb3IgKGNvbnN0IHBhdGggb2YgY29udGV4dC5rZXlzKCkpIHtcbiAgY29uc3Qgb25lU2NoZW1hOiBhbnkgPSBjb250ZXh0KHBhdGgpO1xuICB3c1NjaGVtYS5wdXNoKG9uZVNjaGVtYSk7XG59XG5cbndzU2NoZW1hLm1hcCh0djQuYWRkU2NoZW1hKTtcblxuZXhwb3J0IGRlZmF1bHQgdHY0O1xuIl19
