{"version":3,"sources":["../src/obniz/libs/measurements/measure.ts"],"names":[],"mappings":";;;;;AAAA,yDAAsC;AAEtC,MAAM,YAAY;IAKhB,YAAY,KAAU;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,IAAI,CAAC,MAAW;QACrB,MAAM,GAAG,GAAQ,cAAS,CAAC,aAAa,CAAC,MAAM,EAAE;YAC/C,UAAU;YACV,OAAO;YACP,aAAa;YACb,SAAS;YACT,eAAe;SAChB,CAAC,CAAC;QACH,IAAI,GAAG,EAAE;YACP,MAAM,IAAI,KAAK,CACb,uBAAuB,GAAG,GAAG,GAAG,4BAA4B,CAC7D,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG,cAAS,CAAC,UAAU,CAAC,MAAM,EAAE;YACzC,UAAU;YACV,OAAO;YACP,aAAa;YACb,SAAS;YACT,eAAe;YACf,SAAS;YACT,UAAU;SACX,CAAC,CAAC;QAEH,MAAM,IAAI,GAAQ,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QAC/C,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;YAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;SACpC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,OAAO,EAAE;gBACP,IAAI;aACL;SACF,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC3C;IACH,CAAC;IAEM,QAAQ,CAAC,GAAQ;QACtB,MAAM,QAAQ,GAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC7C,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACpB;IACH,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","file":"measure.js","sourcesContent":["import ObnizUtil from \"../utils/util\";\n\nclass ObnizMeasure {\n  public obniz: any;\n  public observers: any;\n  public params: any;\n\n  constructor(obniz: any) {\n    this.obniz = obniz;\n    this._reset();\n  }\n\n  public _reset() {\n    this.observers = [];\n  }\n\n  public echo(params: any) {\n    const err: any = ObnizUtil._requiredKeys(params, [\n      \"io_pulse\",\n      \"pulse\",\n      \"pulse_width\",\n      \"io_echo\",\n      \"measure_edges\",\n    ]);\n    if (err) {\n      throw new Error(\n        \"Measure start param '\" + err + \"' required, but not found \",\n      );\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"io_pulse\",\n      \"pulse\",\n      \"pulse_width\",\n      \"io_echo\",\n      \"measure_edges\",\n      \"timeout\",\n      \"callback\",\n    ]);\n\n    const echo: any = {};\n    echo.io_pulse = this.params.io_pulse;\n    echo.pulse = this.params.pulse;\n    echo.pulse_width = this.params.pulse_width;\n    echo.io_echo = this.params.io_echo;\n    echo.measure_edges = this.params.measure_edges;\n    if (typeof this.params.timeout === \"number\") {\n      echo.timeout = this.params.timeout;\n    }\n\n    this.obniz.send({\n      measure: {\n        echo,\n      },\n    });\n\n    if (this.params.callback) {\n      this.observers.push(this.params.callback);\n    }\n  }\n\n  public notified(obj: any) {\n    const callback: any = this.observers.shift();\n    if (callback) {\n      callback(obj.echo);\n    }\n  }\n}\n\nexport default ObnizMeasure;\n"]}