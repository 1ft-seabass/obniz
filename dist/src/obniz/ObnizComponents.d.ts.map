{"version":3,"sources":["../src/obniz/ObnizComponents.ts"],"names":[],"mappings":"AAkBA,OAAO,UAAU,MAAM,cAAc,CAAC;AAItC,MAAM,CAAC,OAAO,OAAO,eAAgB,SAAQ,UAAU;IAC9C,aAAa,EAAE,GAAG,CAAC;IACnB,iBAAiB,EAAE,GAAG,CAAC;gBAElB,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAM1B,KAAK;IAOL,cAAc;IAKd,kBAAkB;IA2FlB,gBAAgB;IAOhB,cAAc,CAAC,GAAG,EAAE,GAAG;IAgBvB,mBAAmB,CAAC,KAAK,EAAE,GAAG;IAU9B,eAAe,CAAC,QAAQ,EAAE,GAAG;IAM7B,kBAAkB,CAAC,QAAQ,EAAE,GAAG;IAOhC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAgBxC,KAAK,CAAC,EAAE,EAAE,GAAG;IAOb,KAAK,CAAC,EAAE,EAAE,GAAG;IAOb,sBAAsB,CAAC,UAAU,EAAE,GAAG;IActC,UAAU;IAIV,UAAU;IAIV,gBAAgB,CAAC,MAAM,EAAE,GAAG;IAY5B,UAAU;IAIV,gBAAgB,CAAC,MAAM,EAAE,GAAG;IAY5B,WAAW;IAIX,UAAU;CAGlB","file":"ObnizComponents.d.ts","sourcesContent":["import semver = require(\"semver\");\nimport ObnizBLE from \"./libs/embeds/ble/ble\";\nimport ObnizBLEHci from \"./libs/embeds/bleHci/ble\";\nimport Display from \"./libs/embeds/display\";\nimport ObnizSwitch from \"./libs/embeds/switch\";\n\nimport PeripheralAD from \"./libs/io_peripherals/ad\";\nimport PeripheralDirective from \"./libs/io_peripherals/directive\";\nimport PeripheralI2C from \"./libs/io_peripherals/i2c\";\nimport PeripheralIO from \"./libs/io_peripherals/io\";\nimport PeripheralPWM from \"./libs/io_peripherals/pwm\";\nimport PeripheralSPI from \"./libs/io_peripherals/spi\";\nimport PeripheralUART from \"./libs/io_peripherals/uart\";\nimport LogicAnalyzer from \"./libs/measurements/logicanalyzer\";\nimport ObnizMeasure from \"./libs/measurements/measure\";\n\nimport TCP from \"./libs/protocol/tcp\";\n\nimport ObnizParts from \"./ObnizParts\";\n\nimport HW from \"./libs/hw\";\n\nexport default class ObnizComponents extends ObnizParts {\n  public pongObservers: any;\n  public _allComponentKeys: any;\n\n  constructor(id: any, options: any) {\n    super(id, options);\n    this.pongObservers = [];\n    this._allComponentKeys = [];\n  }\n\n  public close() {\n    super.close();\n    if (this.options.reset_obniz_on_ws_disconnection) {\n      this._resetComponents();\n    }\n  }\n\n  public _callOnConnect() {\n    this._prepareComponents();\n    super._callOnConnect();\n  }\n\n  public _prepareComponents() {\n    if (this._allComponentKeys.length !== 0) {\n      return;\n    }\n\n    const hwDefinition: any = HW.getDefinitionFor(this.hw);\n    if (!hwDefinition) {\n      throw new Error(`unkown hw ${this.hw}`);\n    }\n\n    const hw_peripherals: any = hwDefinition.peripherals;\n    const hw_embeds: any = hwDefinition.embeds;\n    const hw_protocol: any = hwDefinition.protocol;\n\n    const shared_map: any = {\n      io: PeripheralDirective,\n      logicAnalyzer: LogicAnalyzer,\n      measure: ObnizMeasure,\n    };\n\n    const peripheral_map: any = {\n      io: PeripheralIO,\n      ad: PeripheralAD,\n      uart: PeripheralUART,\n      spi: PeripheralSPI,\n      i2c: PeripheralI2C,\n      pwm: PeripheralPWM,\n    };\n\n    let ble: any = ObnizBLEHci;\n\n    // < 3.0.0-beta\n    if (semver.lt(this.firmware_ver, \"3.0.0-beta\")) {\n      ble = ObnizBLE;\n    }\n\n    const embeds_map: any = {\n      display: Display,\n      switch: ObnizSwitch,\n      ble,\n    };\n\n    const protocol_map: any = {\n      tcp: TCP,\n    };\n\n    for (const key in shared_map) {\n      const Class: any = shared_map[key];\n      (this as any)[key] = new Class(this);\n      this._allComponentKeys.push(key);\n    }\n\n    if (hw_peripherals) {\n      for (const key in peripheral_map) {\n        if (hw_peripherals[key]) {\n          const units: any = hw_peripherals[key].units;\n          const Class: any = peripheral_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n\n    if (hw_embeds) {\n      for (const key in embeds_map) {\n        if (hw_embeds[key]) {\n          const Class: any = embeds_map[key];\n          (this as any)[key] = new Class(this);\n          this._allComponentKeys.push(key);\n        }\n      }\n    }\n\n    if (hw_protocol) {\n      for (const key in protocol_map) {\n        if (hw_protocol[key]) {\n          const units: any = hw_protocol[key].units;\n          const Class: any = protocol_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n  }\n\n  public _resetComponents() {\n    this.print_debug(\"components state resets\");\n    for (const key of this._allComponentKeys) {\n      (this as any)[key]._reset();\n    }\n  }\n\n  public notifyToModule(obj: any) {\n    super.notifyToModule(obj);\n    for (const key of this._allComponentKeys) {\n      if (key === \"logicAnalyzer\") {\n        if (obj.hasOwnProperty(\"logic_analyzer\")) {\n          (this as any).logicAnalyzer.notified(obj.logic_analyzer);\n        }\n        continue;\n      }\n      if (obj.hasOwnProperty(key)) {\n        /* because of nullable */\n        (this as any)[key].notified(obj[key]);\n      }\n    }\n  }\n\n  public handleSystemCommand(wsObj: any) {\n    super.handleSystemCommand(wsObj);\n    // ping pong\n    if (wsObj.pong) {\n      for (const callback of this.pongObservers) {\n        callback(wsObj);\n      }\n    }\n  }\n\n  public addPongObserver(callback: any) {\n    if (callback) {\n      this.pongObservers.push(callback);\n    }\n  }\n\n  public removePongObserver(callback: any) {\n    if (this.pongObservers.includes(callback)) {\n      const index: any = this.pongObservers.indexOf(callback);\n      this.pongObservers.splice(index, 1);\n    }\n  }\n\n  public setVccGnd(vcc: any, gnd: any, drive: any) {\n    if (this.isValidIO(vcc)) {\n      if (drive) {\n        this.getIO(vcc).drive(drive);\n      }\n      this.getIO(vcc).output(true);\n    }\n\n    if (this.isValidIO(gnd)) {\n      if (drive) {\n        this.getIO(gnd).drive(drive);\n      }\n      this.getIO(gnd).output(false);\n    }\n  }\n\n  public getIO(io: any) {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"io \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"io\" + io];\n  }\n\n  public getAD(io: any) {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"ad \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"ad\" + io];\n  }\n\n  public _getFreePeripheralUnit(peripheral: any) {\n    for (const key of this._allComponentKeys) {\n      if (key.indexOf(peripheral) === 0) {\n        /* \"io\" for \"io0\" */\n        const obj: any = (this as any)[key];\n        if (typeof obj === \"object\" && !obj.isUsed()) {\n          obj.used = true;\n          return obj;\n        }\n      }\n    }\n    throw new Error(`No More ${peripheral} Available.`);\n  }\n\n  public getFreePwm() {\n    return this._getFreePeripheralUnit(\"pwm\");\n  }\n\n  public getFreeI2C() {\n    return this._getFreePeripheralUnit(\"i2c\");\n  }\n\n  public getI2CWithConfig(config: any) {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getI2CWithConfig need config arg\");\n    }\n    if (config.i2c) {\n      return config.i2c;\n    }\n    const i2c: any = this.getFreeI2C();\n    i2c.start(config);\n    return i2c;\n  }\n\n  public getFreeSpi() {\n    return this._getFreePeripheralUnit(\"spi\");\n  }\n\n  public getSpiWithConfig(config: any) {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getSpiWithConfig need config arg\");\n    }\n    if (config.spi) {\n      return config.spi;\n    }\n    const spi: any = this.getFreeSpi();\n    spi.start(config);\n    return spi;\n  }\n\n  public getFreeUart() {\n    return this._getFreePeripheralUnit(\"uart\");\n  }\n\n  public getFreeTcp() {\n    return this._getFreePeripheralUnit(\"tcp\");\n  }\n}\n"]}