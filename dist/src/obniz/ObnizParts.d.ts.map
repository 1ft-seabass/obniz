{"version":3,"sources":["../src/obniz/ObnizParts.ts"],"names":[],"mappings":"AACA,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAIhD,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,eAAe;WAEvC,MAAM;WAIN,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;WAYrC,KAAK,CAAC,IAAI,EAAE,GAAG;gBAOjB,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAI1B,SAAS,CAAC,EAAE,EAAE,GAAG;IAIjB,KAAK,CAAC,SAAS,EAAE,GAAG;CA0C5B","file":"ObnizParts.d.ts","sourcesContent":["import ObnizUtil from \"./libs/utils/util\";\nimport ObnizConnection from \"./ObnizConnection\";\n\nconst _parts: any = {};\n\nexport default class ObnizParts extends ObnizConnection {\n\n  public static _parts() {\n    return _parts;\n  }\n\n  public static PartsRegistrate(arg0: any, arg1?: any) {\n    if (\n      arg0 &&\n      typeof arg0.info === \"function\" &&\n      typeof arg0.info().name === \"string\"\n    ) {\n      _parts[arg0.info().name] = arg0;\n    } else if (typeof arg0 === \"string\" && typeof arg1 === \"object\") {\n      _parts[arg0] = arg1;\n    }\n  }\n\n  public static Parts(name: any) {\n    if (!_parts[name]) {\n      throw new Error(`unknown parts [${name}]`);\n    }\n    return new _parts[name]();\n  }\n\n  constructor(id: any, options: any) {\n    super(id, options);\n  }\n\n  public isValidIO(io: any) {\n    return typeof io === \"number\" && (this as any)[\"io\" + io] !== null;\n  }\n\n  public wired(partsname: any) {\n    const parts: any = ObnizParts.Parts(partsname);\n    if (!parts) {\n      throw new Error(\"No such a parts [\" + partsname + \"] found\");\n    }\n    const args: any = Array.from(arguments);\n    args.shift();\n    args.unshift(this);\n    if (parts.keys) {\n      if (parts.requiredKeys) {\n        const err: any = ObnizUtil._requiredKeys(args[1], parts.requiredKeys);\n        if (err) {\n          throw new Error(\n            partsname + \" wired param '\" + err + \"' required, but not found \",\n          );\n        }\n      }\n      parts.params = ObnizUtil._keyFilter(args[1], parts.keys);\n    }\n    parts.obniz = this;\n    parts.wired.apply(parts, args);\n    if (parts.keys || parts.ioKeys) {\n      const keys: any = parts.ioKeys || parts.keys;\n      const displayPartsName: any = parts.displayName || partsname;\n      const ioNames: any = {};\n      for (const index in keys) {\n        let pinName: any = keys[index];\n        const io: any = args[1][pinName];\n        if (this.isValidIO(io)) {\n          if (parts.displayIoNames && parts.displayIoNames[pinName]) {\n            pinName = parts.displayIoNames[pinName];\n          }\n          ioNames[io] = pinName;\n        }\n      }\n      const display = (this as any).display;\n      if (display) {\n        display.setPinNames(displayPartsName, ioNames);\n      }\n    }\n    return parts;\n  }\n}\n"]}